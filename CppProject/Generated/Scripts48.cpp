/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.05.16 16:36:27 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	VarType render_high_overlay(VarType prevsurf)
	{
		VarType resultsurf = render_high_get_apply_surf();
		surface_set_target((IntType)(resultsurf));
	{
		draw_clear_alpha(c_black, 0.0);
		if (global::_app->render_camera_colors)
		{
			global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_color_camera);
			withOne (Object, global::render_shader_obj, global::_app->id)
				shader_use(self);
			
			draw_surface_exists(prevsurf, IntType(0), IntType(0));
			withOne (Object, global::render_shader_obj, global::_app->id)
				shader_clear();
			
		}
		else
			draw_surface_exists(prevsurf, IntType(0), IntType(0));
		
		if (global::render_watermark)
			render_watermark_image();
	}
		surface_reset_target();
		return resultsurf;
	}
	
	void render_high_passes(ScopeAny self)
	{
		global::render_surface_diffuse = surface_require(global::render_surface_diffuse, global::render_width, global::render_height);
		global::render_surface_emissive = surface_require(global::render_surface_emissive, global::render_width, global::render_height);
		global::render_surface_material = surface_require(global::render_surface_material, global::render_width, global::render_height);
		if (global::render_depth_normals)
		{
			global::render_surface_depth = surface_require(global::render_surface_depth, global::render_width, global::render_height);
			global::render_surface_normal = surface_require(global::render_surface_normal, global::render_width, global::render_height, true, true);
		}
		surface_set_target((IntType)(global::render_surface_diffuse));
	{
		draw_clear_alpha(c_black, 0.0);
		render_world_background();
		render_world_start();
		render_world_sky();
		render_world(self, e_render_mode_COLOR);
		render_world_done();
		render_set_projection_ortho(IntType(0), IntType(0), global::render_width, global::render_height, IntType(0));
		gpu_set_blendmode_ext(bm_src_color, bm_one);
		if (global::render_background > 0)
			draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, c_black, IntType(1));
		else
		{
			render_world_start();
			render_world(self, e_render_mode_ALPHA_FIX);
			render_world_done();
		}
		
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		if (global::render_depth_normals)
		{
			surface_set_target_ext(IntType(0), (IntType)(global::render_surface_depth));
			surface_set_target_ext(IntType(1), (IntType)(global::render_surface_normal));
		{
			gpu_set_blendmode_ext(bm_one, bm_zero);
			draw_clear_alpha(c_black, 0.0);
			render_world_start(global::depth_far);
			render_world(self, e_render_mode_HIGH_DEPTH_NORMAL);
			render_world_done();
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
		}
		surface_set_target_ext(IntType(0), (IntType)(global::render_surface_material));
		surface_set_target_ext(IntType(1), (IntType)(global::render_surface_emissive));
	{
		draw_clear(c_black);
		render_world_start();
		render_world(self, e_render_mode_MATERIAL);
		render_world_done();
	}
		surface_reset_target();
		global::render_sample_noise_texture = render_get_noise_texture(global::render_sample_current);
		if (global::render_pass == e_render_pass_DIFFUSE)
			global::render_pass_surf = surface_duplicate(global::render_surface_diffuse);
		if (global::render_pass == e_render_pass_MATERIAL)
			global::render_pass_surf = surface_duplicate(global::render_surface_material);
		if (global::render_pass == e_render_pass_DEPTH_U24)
			global::render_pass_surf = surface_duplicate(global::render_surface_depth);
		if (global::render_pass == e_render_pass_NORMAL)
			global::render_pass_surf = surface_duplicate(global::render_surface_normal);
	}
	
	VarType render_high_post_start(VarType prevsurf)
	{
		VarType basesurf;
		global::render_effects_progress = -IntType(1);
		render_update_effects();
		basesurf = render_high_get_apply_surf();
		surface_set_target((IntType)(basesurf));
	{
		draw_clear_alpha(c_black, 0.0);
		draw_surface_exists(prevsurf, IntType(0), IntType(0));
	}
		surface_reset_target();
		render_update_effects();
		if (global::render_camera_lens_dirt && !global::render_effects_done)
		{
			global::render_surface_lens = surface_require(global::render_surface_lens, global::render_width, global::render_height);
			surface_set_target((IntType)(global::render_surface_lens));
		{
			draw_clear_alpha(c_black, 1.0);
		}
			surface_reset_target();
		}
		return basesurf;
	}
	
	void render_high_reflections(VarType surf)
	{
		global::render_surface_specular = surface_require(global::render_surface_specular, global::render_width, global::render_height, true);
		surface_set_target((IntType)(global::render_surface_specular));
	{
		gpu_set_texrepeat(false);
		draw_clear_alpha(c_black, 1.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_raytrace);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_high_raytrace_set(self, e_raytrace_REFLECTIONS, surf);
		}
		
		draw_blank(IntType(0), IntType(0), global::render_width, global::render_height);
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
		gpu_set_texrepeat(true);
	}
		surface_reset_target();
		global::render_surface_hdr[IntType(0)] = surface_require(global::render_surface_hdr.Value(IntType(0)), global::render_width, global::render_height, true);
		surface_set_target((IntType)(global::render_surface_hdr.Value(IntType(0))));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_raytrace_resolve);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_high_raytrace_resolve_set(self);
		}
		
		draw_surface_exists(global::render_surface_specular, IntType(0), IntType(0));
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
		global::render_surface_hdr[IntType(2)] = surface_require(global::render_surface_hdr.Value(IntType(2)), global::render_width, global::render_height, true, true);
		surface_set_target((IntType)(global::render_surface_hdr.Value(IntType(2))));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_add);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_add_set(self, { global::render_surface_hdr.Value(IntType(0)), IntType(1) });
		}
		
		draw_surface_exists(surf, IntType(0), IntType(0));
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
		surface_set_target((IntType)(surf));
	{
		draw_clear_alpha(c_black, 0.0);
		draw_surface_exists(global::render_surface_hdr.Value(IntType(2)), IntType(0), IntType(0));
	}
		surface_reset_target();
		if (global::render_pass == e_render_pass_REFLECTIONS)
			global::render_pass_surf = surface_duplicate(global::render_surface_hdr.Value(IntType(0)));
	}
	
	void render_high_samples_add()
	{
		VarType expsurf, decsurf, alphasurf;
		global::render_surface_sample_expo = surface_require(global::render_surface_sample_expo, global::render_width, global::render_height, false);
		global::render_surface_sample_dec = surface_require(global::render_surface_sample_dec, global::render_width, global::render_height, false);
		global::render_surface[IntType(0)] = surface_require(global::render_surface.Value(IntType(0)), global::render_width, global::render_height);
		global::render_surface[IntType(1)] = surface_require(global::render_surface.Value(IntType(1)), global::render_width, global::render_height);
		expsurf = global::render_surface.Value(IntType(0));
		decsurf = global::render_surface.Value(IntType(1));
		alphasurf = null_;
		if (!(global::render_background > 0))
		{
			global::render_surface_sample_alpha = surface_require(global::render_surface_sample_alpha, global::render_width, global::render_height, false);
			global::render_surface[IntType(2)] = surface_require(global::render_surface.Value(IntType(2)), global::render_width, global::render_height);
			alphasurf = global::render_surface.Value(IntType(2));
		}
		surface_set_target_ext(IntType(0), (IntType)(expsurf));
		surface_set_target_ext(IntType(1), (IntType)(decsurf));
		if (!(global::render_background > 0))
			surface_set_target_ext(IntType(2), (IntType)(alphasurf));
	{
		draw_clear_alpha(c_black, 0.0);
	}
		surface_reset_target();
		if (global::render_sample_current != IntType(0) && !global::render_samples_clear)
		{
			surface_copy((IntType)(expsurf), IntType(0), IntType(0), (IntType)(global::render_surface_sample_expo));
			surface_copy((IntType)(decsurf), IntType(0), IntType(0), (IntType)(global::render_surface_sample_dec));
			if (!(global::render_background > 0))
				surface_copy((IntType)(alphasurf), IntType(0), IntType(0), (IntType)(global::render_surface_sample_alpha));
		}
		surface_set_target_ext(IntType(0), (IntType)(global::render_surface_sample_expo));
		surface_set_target_ext(IntType(1), (IntType)(global::render_surface_sample_dec));
		if (!(global::render_background > 0))
			surface_set_target_ext(IntType(2), (IntType)(global::render_surface_sample_alpha));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_samples_add);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_high_samples_add_set(self, expsurf, decsurf, alphasurf, global::render_target);
		}
		
		draw_blank(IntType(0), IntType(0), global::render_width, global::render_height);
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
	}
	
	void render_high_samples_unpack()
	{
		surface_set_target((IntType)(global::render_target));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_samples_unpack);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_high_samples_unpack_set(self);
		}
		
		draw_blank(IntType(0), IntType(0), global::render_width, global::render_height);
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
	}
	
	VarType render_high_scene(ScopeAny self)
	{
		VarType masksurf, resultsurf;
		global::render_surface_hdr[IntType(1)] = surface_require(global::render_surface_hdr.Value(IntType(1)), global::render_width, global::render_height, true, true);
		global::render_surface[IntType(1)] = surface_require(global::render_surface.Value(IntType(1)), global::render_width, global::render_height);
		masksurf = global::render_surface.Value(IntType(1));
		resultsurf = global::render_surface_hdr.Value(IntType(1));
		surface_set_target((IntType)(masksurf));
	{
		draw_clear(c_black);
		render_world_start();
		render_world(self, e_render_mode_SCENE_TEST);
		render_world_done();
		render_set_projection_ortho(IntType(0), IntType(0), global::render_width, global::render_height, IntType(0));
		gpu_set_blendmode_ext(bm_src_color, bm_one);
		draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, c_black, IntType(1));
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		surface_set_target((IntType)(resultsurf));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_lighting_apply);
		withOne (Object, global::render_shader_obj, global::_app->id)
		{
			shader_set(sInt(shader));
			shader_high_lighting_apply_set(self, global::render_surface_shadows, masksurf, global::render_surface_material);
		}
		
		draw_surface_exists(global::render_surface_diffuse, IntType(0), IntType(0));
		withOne (Object, global::render_shader_obj, global::_app->id)
			shader_clear();
		
	}
		surface_reset_target();
		return resultsurf;
	}
	
	void render_high_shadows(ScopeAny self)
	{
		VarType resultsurftemp, specresultsurftemp;
		VecType sampleoffset;
		BoolType sunout;
		RealType samplestart, sampleend;
		ArrType lightlist;
		sampleoffset = point3D(IntType(0), IntType(0), IntType(0));
		sunout = (sInt(background_sunlight_color_final) != c_black);
		samplestart = IntType(0);
		sampleend = IntType(0);
		lightlist = ArrType();
		withAll (obj_timeline, global::_app->id)
		{
			if (self->type != e_tl_type_POINT_LIGHT && self->type != e_tl_type_SPOT_LIGHT)
				continue;
			if (!self->value_inherit.Value(e_value_VISIBLE) || self->hide > 0)
				continue;
			if (self->type == e_tl_type_POINT_LIGHT && !(self->shadows > 0))
			{
				ds_list_add({ global::render_shadowless_point_list, self->id });
				continue;
			}
			lightlist = array_add(VarType::CreateRef(lightlist), self->id);
		}
		
		global::render_surface_shadows = surface_require(global::render_surface_shadows, global::render_width, global::render_height, false, true);
		global::render_surface_specular = surface_require(global::render_surface_specular, global::render_width, global::render_height, false, true);
		global::render_surface_hdr[IntType(0)] = surface_require(global::render_surface_hdr.Value(IntType(0)), global::render_width, global::render_height, true, true);
		global::render_surface_hdr[IntType(1)] = surface_require(global::render_surface_hdr.Value(IntType(1)), global::render_width, global::render_height, true, true);
		resultsurftemp = global::render_surface_hdr.Value(IntType(0));
		specresultsurftemp = global::render_surface_hdr.Value(IntType(1));
		surface_set_target((IntType)(global::render_surface_shadows));
	{
		draw_clear_alpha(sInt(background_ambient_color_final), 1.0);
	}
		surface_reset_target();
		surface_set_target((IntType)(global::render_surface_specular));
	{
		draw_clear_alpha(c_black, 1.0);
	}
		surface_reset_target();
		global::taa_matrix = global::taa_jitter_matrix;
		if (sunout)
		{
			if (global::render_sample_current > IntType(1))
			{
				RealType xyang, zang, dis;
				xyang = random(360.0);
				zang = random_range(-180.0, 180.0);
				dis = ((sVar(background_sunlight_angle) * ((RealType)sVar(project_render_distance) / 2.0)) / 57.2958) / 2.0;
				sampleoffset.Real(X_) = lengthdir_x(dis, xyang) * lengthdir_x(1.0, zang);
				sampleoffset.Real(Y_) = lengthdir_y(dis, xyang) * lengthdir_x(1.0, zang);
				sampleoffset.Real(Z_) = lengthdir_z(dis, zang);
			}
			VecType angle = vec3_add(vec3_mul(global::_app->background_sun_direction, -IntType(5000)), sampleoffset);
			angle = vec3_normalize(vec3_mul(angle, -IntType(1)));
			global::cam_far = global::cam_far_prev;
			global::taa_matrix = MAT_IDENTITY;
			global::render_alpha_hash = global::_app->project_render_shadows_transparent;
			global::render_alpha_hash_force = true;
			render_update_cascades(angle);
			for (IntType i = IntType(0); i < global::render_cascades_count; i++)
			{
				global::render_surface_sun_buffer[i] = surface_require(global::render_surface_sun_buffer.Value(i), sVar(project_render_shadows_sun_buffer_size), sVar(project_render_shadows_sun_buffer_size));
				surface_set_target((IntType)(global::render_surface_sun_buffer.Value(i)));
			{
				gpu_set_blendmode_ext(bm_one, bm_zero);
				draw_clear(c_white);
				render_world_start_sun(i);
				render_world(self, e_render_mode_HIGH_LIGHT_SUN_DEPTH);
				render_world_done();
				gpu_set_blendmode(bm_normal);
			}
				surface_reset_target();
			}
			global::taa_matrix = global::taa_jitter_matrix;
			global::render_alpha_hash = global::_app->project_render_alpha_mode;
			global::render_alpha_hash_force = false;
			surface_set_target_ext(IntType(0), (IntType)(resultsurftemp));
			surface_set_target_ext(IntType(1), (IntType)(specresultsurftemp));
		{
			draw_clear(c_black);
			render_world_start();
			render_world(self, e_render_mode_HIGH_LIGHT_SUN);
			render_world_done();
		}
			surface_reset_target();
			surface_set_target((IntType)(global::render_surface_shadows));
		{
			gpu_set_blendmode(bm_add);
			draw_surface_exists(resultsurftemp, IntType(0), IntType(0));
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
			surface_set_target((IntType)(global::render_surface_specular));
		{
			gpu_set_blendmode(bm_add);
			draw_surface_exists(specresultsurftemp, IntType(0), IntType(0));
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
		}
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(lightlist)); i++)
		{
			withOne (obj_timeline, lightlist.Value(i), global::_app->id)
			{
				if (!self->value_inherit.Value(e_value_VISIBLE) || self->hide > 0 || (ObjType(obj_view, global::render_view_current)->render > 0 && self->hq_hiding > 0) || (!(ObjType(obj_view, global::render_view_current)->render > 0) && self->lq_hiding > 0))
					continue;
				if (global::render_sample_current > IntType(1))
				{
					RealType xyang, zang, dis;
					xyang = random(360.0);
					zang = random_range(-180.0, 180.0);
					dis = (RealType)self->value.Value(e_value_LIGHT_SIZE) / 2.0;
					sampleoffset.Real(X_) = lengthdir_x(dis, xyang) * lengthdir_x(1.0, zang);
					sampleoffset.Real(Y_) = lengthdir_y(dis, xyang) * lengthdir_x(1.0, zang);
					sampleoffset.Real(Z_) = lengthdir_z(dis, zang);
				}
				if (self->type == e_tl_type_POINT_LIGHT)
				{
					if (!(self->shadows > 0))
					{
						ds_list_add({ global::render_shadowless_point_list, self->id });
						continue;
					}
					VarType atlasx, atlasy, atlassize;
					atlasx = IntType(0);
					atlasy = IntType(0);
					atlassize = global::_app->project_render_shadows_point_buffer_size;
					global::render_surface_point_atlas_buffer = surface_require(global::render_surface_point_atlas_buffer, atlassize * IntType(3), atlassize * IntType(2));
					global::render_surface_point_buffer = surface_require(global::render_surface_point_buffer, atlassize, atlassize);
					global::taa_matrix = MAT_IDENTITY;
					global::render_alpha_hash = global::_app->project_render_shadows_transparent;
					global::render_alpha_hash_force = true;
					for (IntType d = e_dir_EAST; d < e_dir_amount; d++)
					{
						VecType look = dir_get_vec3(d);
						if (d == e_dir_DOWN || d == e_dir_UP)
							look.Real(Y_) -= 0.0001;
						surface_set_target((IntType)(global::render_surface_point_buffer));
					{
						gpu_set_blendmode_ext(bm_one, bm_zero);
						draw_clear(c_white);
						render_world_start_light(self->world_pos, point3D_add(self->world_pos, look), sampleoffset, self->id);
						render_world(ScopeAny(self), e_render_mode_HIGH_LIGHT_POINT_DEPTH);
						render_world_done();
						gpu_set_blendmode(bm_normal);
					}
						surface_reset_target();
						surface_set_target((IntType)(global::render_surface_point_atlas_buffer));
					{
						draw_surface((IntType)(global::render_surface_point_buffer), (IntType)(atlasx), (IntType)(atlasy));
					}
						surface_reset_target();
						atlasx += atlassize;
						if (atlasx == (atlassize * IntType(3)))
						{
							atlasx = IntType(0);
							atlasy += atlassize;
						}
					}
					global::taa_matrix = global::taa_jitter_matrix;
					global::render_alpha_hash = global::_app->project_render_alpha_mode;
					global::render_alpha_hash_force = false;
					withOne (app, global::_app->id, self->id)
					{
						surface_set_target_ext(IntType(0), (IntType)(resultsurftemp));
						surface_set_target_ext(IntType(1), (IntType)(specresultsurftemp));
					{
						draw_clear(c_black);
						render_world_start();
						render_world(ScopeAny(self), e_render_mode_HIGH_LIGHT_POINT);
						render_world_done();
					}
						surface_reset_target();
					}
					
				}
				else
					if (self->type == e_tl_type_SPOT_LIGHT)
					{
						VecType lookat = point3D_mul_matrix(point3D(0.0001, IntType(1), IntType(0)), self->matrix);
						global::taa_matrix = MAT_IDENTITY;
						global::render_alpha_hash = global::_app->project_render_shadows_transparent;
						global::render_alpha_hash_force = true;
						global::render_surface_spot_buffer = surface_require(global::render_surface_spot_buffer, global::_app->project_render_shadows_spot_buffer_size, global::_app->project_render_shadows_spot_buffer_size);
						surface_set_target((IntType)(global::render_surface_spot_buffer));
					{
						gpu_set_blendmode_ext(bm_one, bm_zero);
						draw_clear(c_white);
						render_world_start_light(self->world_pos, lookat, sampleoffset, self->id);
						if (self->shadows > 0)
							render_world(ScopeAny(self), e_render_mode_HIGH_LIGHT_SPOT_DEPTH);
						render_world_done();
						gpu_set_blendmode(bm_normal);
					}
						surface_reset_target();
						global::taa_matrix = global::taa_jitter_matrix;
						global::render_alpha_hash = global::_app->project_render_alpha_mode;
						global::render_alpha_hash_force = false;
						withOne (app, global::_app->id, self->id)
						{
							surface_set_target_ext(IntType(0), (IntType)(resultsurftemp));
							surface_set_target_ext(IntType(1), (IntType)(specresultsurftemp));
						{
							draw_clear(c_black);
							render_world_start();
							render_world(ScopeAny(self), e_render_mode_HIGH_LIGHT_SPOT);
							render_world_done();
						}
							surface_reset_target();
						}
						
					}
					else
						continue;
				
				
				gpu_set_blendmode(bm_add);
				surface_set_target((IntType)(global::render_surface_shadows));
			{
				draw_surface_exists(resultsurftemp, IntType(0), IntType(0));
			}
				surface_reset_target();
				surface_set_target((IntType)(global::render_surface_specular));
			{
				draw_surface_exists(specresultsurftemp, IntType(0), IntType(0));
			}
				surface_reset_target();
				gpu_set_blendmode(bm_normal);
			}
			
		}
		render_high_shadows_shadowless(self);
		if (sVar(project_render_subsurface_samples) > IntType(0))
			render_high_subsurface_scatter(self);
		if (global::render_pass == e_render_pass_SHADOWS)
			global::render_pass_surf = surface_duplicate(global::render_surface_shadows);
		if (global::render_pass == e_render_pass_SPECULAR)
			global::render_pass_surf = surface_duplicate(global::render_surface_specular);
	}
	
	void render_high_shadows_shadowless(ScopeAny self)
	{
		if (ds_list_size(global::render_shadowless_point_list) > IntType(0))
		{
			VarType resultsurftemp, specresultsurftemp;
			IntType lights, batches;
			lights = ds_list_size(global::render_shadowless_point_list);
			batches = IntType(0);
			while (lights > IntType(0))
			{
				for (IntType l = IntType(0); l < IntType(31); l++)
				{
					if (lights == IntType(0))
						continue;
					IntType light = DsList(global::render_shadowless_point_list).Value(l + (batches * IntType(31)));
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(0)] = ObjType(obj_timeline, light)->world_pos.Value(X_);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(1)] = ObjType(obj_timeline, light)->world_pos.Value(Y_);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(2)] = ObjType(obj_timeline, light)->world_pos.Value(Z_);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(3)] = ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_RANGE);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(4)] = ((RealType)color_get_red((IntType)(ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_COLOR))) / 255.0);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(5)] = ((RealType)color_get_green((IntType)(ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_COLOR))) / 255.0);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(6)] = ((RealType)color_get_blue((IntType)(ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_COLOR))) / 255.0);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(7)] = ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_FADE_SIZE);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(8)] = ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_STRENGTH);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(9)] = ObjType(obj_timeline, light)->value.Value(e_value_LIGHT_SPECULAR_STRENGTH);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(10)] = IntType(1);
					global::render_shadowless_point_data[global::render_shadowless_point_amount * IntType(12) + IntType(11)] = IntType(1);
					global::render_shadowless_point_amount++;
					lights--;
				}
				resultsurftemp = global::render_surface_hdr.Value(IntType(0));
				specresultsurftemp = global::render_surface_hdr.Value(IntType(1));
				surface_set_target_ext(IntType(0), (IntType)(resultsurftemp));
				surface_set_target_ext(IntType(1), (IntType)(specresultsurftemp));
			{
				draw_clear(c_black);
				render_world_start();
				render_world(self, e_render_mode_HIGH_LIGHT_POINT_SHADOWLESS);
				render_world_done();
			}
				surface_reset_target();
				surface_set_target((IntType)(global::render_surface_shadows));
			{
				gpu_set_blendmode(bm_add);
				draw_surface_exists(resultsurftemp, IntType(0), IntType(0));
				gpu_set_blendmode(bm_normal);
			}
				surface_reset_target();
				surface_set_target((IntType)(global::render_surface_specular));
			{
				gpu_set_blendmode(bm_add);
				draw_surface_exists(specresultsurftemp, IntType(0), IntType(0));
				gpu_set_blendmode(bm_normal);
			}
				surface_reset_target();
				batches++;
				global::render_shadowless_point_amount = IntType(0);
			}
			
			ds_list_clear(global::render_shadowless_point_list);
		}
	}
	
	void render_high_ssao(ScopeAny self)
	{
		global::render_ssao_kernel = render_generate_sample_kernel(IntType(12));
		global::render_surface[IntType(2)] = surface_require(global::render_surface.Value(IntType(2)), global::render_width, global::render_height);
		surface_set_target((IntType)(global::render_surface.Value(IntType(2))));
	{
		draw_clear(c_black);
		render_world_start();
		render_world(self, e_render_mode_AO_MASK);
		render_world_done();
		render_set_projection_ortho(IntType(0), IntType(0), global::render_width, global::render_height, IntType(0));
		gpu_set_blendmode_ext(bm_src_color, bm_one);
		draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, c_black, IntType(1));
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		global::render_surface[IntType(0)] = surface_require(global::render_surface.Value(IntType(0)), global::render_width, global::render_height);
		surface_set_target((IntType)(global::render_surface.Value(IntType(0))));
	{
		gpu_set_texrepeat(false);
		draw_clear(c_white);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_ssao);
		withOne (Object, global::render_shader_obj, global::_app->id)
		{
			shader_set(sInt(shader));
			shader_high_ssao_set(self, global::render_surface.Value(IntType(2)));
		}
		
		draw_blank(IntType(0), IntType(0), global::render_width, global::render_height);
		withOne (Object, global::render_shader_obj, global::_app->id)
			shader_clear();
		
		gpu_set_texrepeat(true);
	}
		surface_reset_target();
		if (global::render_pass == e_render_pass_AO)
			global::render_pass_surf = surface_duplicate(global::render_surface.Value(IntType(0)));
		if (!global::render_shadows)
			global::render_surface_shadows = surface_require(global::render_surface_shadows, global::render_width, global::render_height, false, true);
		surface_set_target((IntType)(global::render_surface_shadows));
	{
		if (!global::render_shadows)
			draw_clear(c_white);
		else
			gpu_set_blendmode_ext(bm_zero, bm_src_color);
		
		draw_surface((IntType)(global::render_surface.Value(IntType(0))), IntType(0), IntType(0));
		if (global::render_shadows)
			gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
	}
	
	void render_high_subsurface_scatter(ScopeAny self)
	{
		VarType ssssurf, sssrangesurf, sssblursurf;
		global::render_surface[IntType(0)] = surface_require(global::render_surface.Value(IntType(0)), global::render_width, global::render_height);
		global::render_surface[IntType(1)] = surface_require(global::render_surface.Value(IntType(1)), global::render_width, global::render_height);
		global::render_surface_hdr[IntType(0)] = surface_require(global::render_surface_hdr.Value(IntType(0)), global::render_width, global::render_height, true, true);
		ssssurf = global::render_surface.Value(IntType(0));
		sssrangesurf = global::render_surface.Value(IntType(1));
		sssblursurf = global::render_surface_hdr.Value(IntType(0));
		surface_set_target_ext(IntType(0), (IntType)(ssssurf));
		surface_set_target_ext(IntType(1), (IntType)(sssrangesurf));
	{
		draw_clear_alpha(c_black, 1.0);
		render_world_start();
		render_world(self, e_render_mode_SUBSURFACE);
		render_world_done();
	}
		surface_reset_target();
		if ((sVar(project_render_subsurface_samples) * IntType(2)) + IntType(1) != global::render_subsurface_size)
		{
			global::render_subsurface_size = (sVar(project_render_subsurface_samples) * IntType(2)) + IntType(1);
			global::render_subsurface_kernel = render_generate_gaussian_kernel(global::render_subsurface_size);
		}
		surface_set_target((IntType)(sssblursurf));
	{
		draw_clear(c_black);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_high_subsurface_scatter);
		withOne (Object, global::render_shader_obj, global::_app->id)
		{
			shader_set(sInt(shader));
			shader_high_subsurface_scatter_set(self, ssssurf, sssrangesurf);
		}
		
		draw_blank(IntType(0), IntType(0), global::render_width, global::render_height);
		withOne (Object, global::render_shader_obj, global::_app->id)
			shader_clear();
		
	}
		surface_reset_target();
		surface_set_target((IntType)(global::render_surface_shadows));
	{
		draw_clear_alpha(c_black, 1.0);
		draw_surface_exists(sssblursurf, IntType(0), IntType(0));
	}
		surface_reset_target();
	}
	
	VarType render_high_tonemap(VarType surf)
	{
		VarType prevsurf;
		global::render_surface_hdr[IntType(0)] = surface_require(global::render_surface_hdr.Value(IntType(0)), global::render_width, global::render_height, true);
		prevsurf = global::render_surface_hdr.Value(IntType(0));
		surface_set_target((IntType)(prevsurf));
	{
		draw_clear_alpha(c_black, 0.0);
		draw_surface_exists(surf, IntType(0), IntType(0));
	}
		surface_reset_target();
		surface_set_target((IntType)(surf));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_tonemap);
		withOne (Object, global::render_shader_obj, noone)
		{
			shader_set(sInt(shader));
			shader_tonemap_set(self, global::render_surface.Value(IntType(1)));
		}
		
		draw_surface_exists(prevsurf, IntType(0), IntType(0));
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
		return surf;
	}
	
	void render_high_update_taa()
	{
		if (global::_app->project_render_aa > 0)
		{
			RealType haltonx, haltony, jitterx, jittery;
			haltonx = IntType(2) * halton(global::render_sample_current + IntType(1), IntType(2)) - IntType(1);
			haltony = IntType(2) * halton(global::render_sample_current + IntType(1), IntType(3)) - IntType(1);
			jitterx = haltonx * (1.0 / global::render_width) * global::_app->project_render_aa_power;
			jittery = haltony * (1.0 / global::render_height) * global::_app->project_render_aa_power;
			global::taa_jitter_matrix = ArrType::From({ IntType(1), IntType(0), IntType(0), IntType(0), IntType(0), IntType(1), IntType(0), IntType(0), IntType(0), IntType(0), IntType(1), IntType(0), jitterx, jittery, IntType(0), IntType(1) });
			global::taa_matrix = global::taa_jitter_matrix;
		}
		else
		{
			global::taa_jitter_matrix = MAT_IDENTITY;
			global::taa_matrix = MAT_IDENTITY;
		}
		
	}
	
	VarType render_high_vignette(VarType prevsurf)
	{
		VarType resultsurf = render_high_get_apply_surf();
		surface_set_target((IntType)(resultsurf));
	{
		draw_clear_alpha(c_black, 0.0);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_vignette);
		withOne (Object, global::render_shader_obj, noone)
			shader_use(self);
		
		draw_surface_exists(prevsurf, IntType(0), IntType(0));
		withOne (Object, global::render_shader_obj, noone)
			shader_clear();
		
	}
		surface_reset_target();
		return resultsurf;
	}
	
	RealType render_low(ScopeAny self)
	{
		VarType surf, finalsurf;
		global::render_surface[IntType(0)] = surface_require(global::render_surface.Value(IntType(0)), global::render_width, global::render_height);
		surf = global::render_surface.Value(IntType(0));
		global::render_alpha_hash = false;
		global::render_alpha_hash_force = true;
		surface_set_target((IntType)(surf));
	{
		draw_clear_alpha(c_black, 0.0);
		render_world_background();
		render_world_start();
		render_world_sky();
		render_world(self, (global::render_lights > 0) ? e_render_mode_COLOR_FOG_LIGHTS : e_render_mode_COLOR_FOG);
		render_world_done();
		render_set_projection_ortho(IntType(0), IntType(0), global::render_width, global::render_height, IntType(0));
		gpu_set_blendmode_ext(bm_src_color, bm_one);
		if (global::render_background > 0)
			draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, c_black, IntType(1));
		else
		{
			render_world_start();
			render_world(self, e_render_mode_ALPHA_FIX);
			render_world_done();
		}
		
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		if (global::render_effects_done)
			return IntType(0);
		finalsurf = render_post(self, surf);
		global::render_target = surface_require(global::render_target, global::render_width, global::render_height);
		surface_set_target((IntType)(global::render_target));
	{
		draw_clear_alpha(c_black, 0.0);
		draw_surface_exists(finalsurf, IntType(0), IntType(0));
	}
		surface_reset_target();
		global::render_alpha_hash_force = false;
		return 0.0;
	}
	
	VarType render_post(ScopeAny self, VarType finalsurf, BoolType sceneeffects, BoolType posteffects)
	{
		finalsurf = render_high_post_start(finalsurf);
		if (global::render_camera_dof && sceneeffects)
			finalsurf = render_high_dof(self, finalsurf);
		render_update_effects();
		if (global::render_glow && (sceneeffects || posteffects))
			finalsurf = render_high_glow(self, finalsurf);
		render_update_effects();
		if (global::render_glow_falloff && (sceneeffects || posteffects))
			finalsurf = render_high_glow(self, finalsurf, true);
		render_update_effects();
		if (global::render_camera_bloom && posteffects)
			finalsurf = render_high_bloom(finalsurf);
		render_update_effects();
		if (global::render_camera_lens_dirt)
			finalsurf = render_high_lens_dirt(finalsurf);
		render_update_effects();
		if (global::render_camera_ca && posteffects)
			finalsurf = render_high_ca(finalsurf);
		render_update_effects();
		if (global::render_camera_distort && posteffects)
			finalsurf = render_high_distort(finalsurf);
		render_update_effects();
		if (global::render_camera_color_correction && posteffects)
			finalsurf = render_high_cc(finalsurf);
		render_update_effects();
		if (global::render_camera_grain && posteffects)
			finalsurf = render_high_grain(finalsurf);
		render_update_effects();
		if (global::render_camera_vignette && posteffects)
			finalsurf = render_high_vignette(finalsurf);
		render_update_effects();
		if (global::render_overlay && posteffects)
			finalsurf = render_high_overlay(finalsurf);
		render_update_effects();
		return finalsurf;
	}
	
	void render_refresh_effects(BoolType sceneeffects, BoolType posteffects)
	{
		ds_list_clear(global::render_effects_list);
		ds_list_add({ global::render_effects_list, global::render_camera_dof && sceneeffects, global::render_glow && (sceneeffects || posteffects), global::render_glow_falloff && (sceneeffects || posteffects), global::render_camera_bloom && posteffects, global::render_camera_lens_dirt, global::render_camera_ca && posteffects, global::render_camera_distort && posteffects, global::render_camera_color_correction && posteffects, global::render_camera_grain && posteffects, global::render_camera_vignette && posteffects, global::render_overlay && posteffects });
		global::render_effects_progress = -IntType(1);
		global::render_post_index = IntType(0);
		global::render_effects_done = false;
	}
	
	VarType render_select(ScopeAny self, IntType mode, VarType selectsurface)
	{
		VarType hlsurf = surface_require(selectsurface, global::render_width, global::render_height);
		global::render_alpha_hash = false;
		global::render_alpha_hash_force = true;
		surface_set_target((IntType)(hlsurf));
	{
		draw_clear_alpha(c_black, 0.0);
		render_world_start();
		render_world(self, mode);
		render_world_done();
	}
		surface_reset_target();
		global::render_alpha_hash_force = false;
		if (surface_exists((IntType)(global::render_target)))
		{
			surface_set_target((IntType)(global::render_target));
		{
			gpu_set_texrepeat(false);
			global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_border);
			withOne (Object, global::render_shader_obj, global::_app->id)
			{
				sVar(border_mode) = mode;
				shader_use(self);
			}
			
			draw_surface_exists(hlsurf, IntType(0), IntType(0));
			withOne (Object, global::render_shader_obj, global::_app->id)
				shader_reset();
			
			gpu_set_texrepeat(true);
		}
			surface_reset_target();
		}
		return hlsurf;
	}
	
	RealType render_set_culling(RealType enable)
	{
		IntType mode = ((enable > 0) ? cull_counterclockwise : cull_noculling);
		if (mode == gpu_get_cullmode())
			return IntType(0);
		gpu_set_cullmode(mode);
		return 0.0;
	}
	
	void render_set_projection(VarType from, VecType to, VecType up, VarType fov, RealType aspect, RealType znear, VarType zfar)
	{
		MatrixType mV = matrix_create_lookat(from, to, up);
		MatrixType mP = matrix_build_projection_perspective_fov(-fov, -aspect, znear, zfar);
		camera_set_view_mat(global::cam_render, mV);
		camera_set_proj_mat(global::cam_render, mP);
		camera_apply(global::cam_render);
	}
	
	void render_set_projection_ortho(RealType xx, RealType yy, VarType ww, VarType hh, RealType angle)
	{
		MatrixType mV = matrix_create_lookat(point3D(xx + (RealType)ww / 2.0, yy + (RealType)hh / 2.0, -IntType(16000)), point3D(xx + (RealType)ww / 2.0, yy + (RealType)hh / 2.0, IntType(0)), vec3(dsin(-angle), dcos(-angle), IntType(0)));
		MatrixType mP = matrix_build_projection_ortho(ww, hh, 1.0, 32000.0);
		camera_set_view_mat(global::cam_render, mV);
		camera_set_proj_mat(global::cam_render, mP);
		camera_apply(global::cam_render);
	}
	
	RealType render_set_texture(VarType tex, StringType type)
	{
		VarType sampler;
		RealType scalex, scaley;
		sampler = DsMap(idInt(global::render_shader_obj, sampler_map)).Value(/*"uTexture"*/ STR(1900) + type);
		scalex = IntType(1);
		scaley = IntType(1);
		if (is_undefined(sampler) || sampler < IntType(0))
			return IntType(0);
		IntType mipactive = (global::shader_texture_filter_mipmap > 0 && type == /*""*/ STR(0)) ? mip_on : mip_off;
		if (gpu_get_texfilter_ext((IntType)(sampler)) != global::shader_texture_filter_linear)
			gpu_set_texfilter_ext((IntType)(sampler), global::shader_texture_filter_linear);
		if (gpu_get_tex_mip_enable() != mipactive)
			gpu_set_tex_mip_enable(mipactive);
		if (global::shader_texture_surface)
		{
			if (surface_exists((IntType)(tex)))
				texture_set_stage((IntType)(sampler), surface_get_texture((IntType)(tex)));
			else
				texture_set_stage((IntType)(sampler), IntType(0));
			
		}
		else
		{
			if (sprite_exists((IntType)(tex)))
				texture_set_stage((IntType)(sampler), sprite_get_texture((IntType)(tex), IntType(0)));
			else
				texture_set_stage((IntType)(sampler), IntType(0));
			
		}
		
		gpu_set_texrepeat_ext((IntType)(sampler), true);
		return 0.0;
	}
	
	void render_set_uniform(StringType name, VarType val)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
		{
			if (is_array(val))
				shader_submit_float_array(uniform, val);
			else
				shader_submit_float(uniform, val);
			
		}
	}
	
	void render_set_uniform_color(StringType name, VarType color, VarType alpha)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_set_uniform_color(uniform, color, alpha);
	}
	
	void render_set_uniform_int(StringType name, VarType val)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
		{
			if (!is_array(val))
				shader_submit_int(uniform, val);
		}
	}
	
	void render_set_uniform_mat4_array(StringType name, ArrType val)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_submit_mat4_array(uniform, val);
	}
	
}
