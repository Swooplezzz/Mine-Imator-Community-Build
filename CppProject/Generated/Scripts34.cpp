/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.28 14:16:57 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void menu_event_create(Scope<obj_menu> self)
	{
		self->menu_name = /*""*/ STR(0);
		self->menu_type = /*""*/ STR(0);
		self->menu_window = e_window_MAIN;
		self->menu_temp_edit = null_;
		self->menu_script = null_;
		self->menu_value = null_;
		self->menu_ani = IntType(0);
		self->menu_ani_ease = IntType(0);
		self->menu_ani_type = /*""*/ STR(0);
		self->menu_flip = false;
		self->menu_x = IntType(0);
		self->menu_x_start = IntType(0);
		self->menu_y = IntType(0);
		self->menu_w = IntType(0);
		self->menu_w_start = IntType(0);
		self->menu_button_h = IntType(0);
		self->menu_amount = IntType(0);
		self->menu_show_amount = IntType(0);
		self->menu_item[IntType(0)] = null_;
		self->menu_item_w = IntType(0);
		self->menu_item_h = IntType(0);
		self->menu_include_tl_edit = true;
		self->menu_count = IntType(0);
		self->menu_item_extend = null_;
		self->menu_scroll_vertical = (new obj_scrollbar)->id;
		self->menu_scroll_horizontal = (new obj_scrollbar)->id;
		self->menu_height = IntType(0);
		self->menu_height_goal = IntType(0);
		self->menu_transition = null_;
		self->menu_steps = IntType(0);
		self->menu_floating = false;
		self->menu_list = null_;
		self->menu_padding = IntType(4);
		global::_app->menu_count++;
		ds_list_add({ global::_app->menu_list, self->id });
	}
	
	void menu_event_destroy(ScopeAny self)
	{
		if (sInt(menu_list) != null_)
			list_destroy(self, sInt(menu_list));
		instance_destroy(self, { sInt(menu_scroll_vertical) });
		instance_destroy(self, { sInt(menu_scroll_horizontal) });
		ds_list_delete(global::_app->menu_list, ds_list_find_index(global::_app->menu_list, self->id));
		global::_app->menu_count--;
	}
	
	void menu_focus_selected(Scope<obj_menu> self)
	{
		for (IntType m = IntType(0); m < self->menu_amount; m++)
		{
			if (self->menu_value == ObjType(obj_list_item, DsList(ObjType(obj_list, self->menu_list)->item).Value(m))->value)
			{
				ObjType(obj_scrollbar, self->menu_scroll_vertical)->value = floor(clamp(m - floor(self->menu_show_amount / 2.0), IntType(0), max({ IntType(0), self->menu_amount - self->menu_show_amount })) / floor((RealType)self->menu_w / self->menu_item_w)) * self->menu_item_h;
				ObjType(obj_scrollbar, self->menu_scroll_vertical)->value_goal = ObjType(obj_scrollbar, self->menu_scroll_vertical)->value;
				break;
			}
		}
	}
	
	void menu_grid_settings(ScopeAny self)
	{
		draw_set_font(sInt(font_label));
		IntType draggerwid;
		draggerwid = text_max_width({ /*"viewgridrows"*/ STR(1676), /*"viewgridcolumns"*/ STR(1677) }) + IntType(16) + dragger_width;
		tab_control_dragger(self);
		draw_dragger(self, /*"viewgridrows"*/ STR(1676), sVar(dx), sVar(dy), dragger_width, sVar(project_grid_rows), 0.05, IntType(1), IntType(10), IntType(3), IntType(1), sInt(tbx_grid_rows), ID_action_project_grid_rows, null_, true);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewgridcolumns"*/ STR(1677), sVar(dx), sVar(dy), dragger_width, sVar(project_grid_columns), 0.05, IntType(1), IntType(10), IntType(3), IntType(1), sInt(tbx_grid_columns), ID_action_project_grid_columns, null_, true);
		tab_next(self);
		sVar(settings_menu_w) = (draggerwid + IntType(24));
	}
	
	void menu_item_set_extend(ScopeAny self, VarType item)
	{
		ObjType(obj_menu, sVar(menu_current))->menu_item_extend = item;
	}
	
	void menu_quality_settings(ScopeAny self)
	{
		IntType capwid;
		VarType text;
		draw_set_font(sInt(font_label));
		capwid = max({ IntType(176), text_max_width({ /*"viewmodepass"*/ STR(1470) }) + IntType(16) });
		text = text_get({ /*"viewmodepass"*/ STR(1470) + DsList(global::render_pass_list).Value(sInt(project_render_pass)) });
		tab_control_menu(self);
		draw_button_menu(self, { /*"viewmodepass"*/ STR(1470), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sInt(project_render_pass), text, ID_action_project_render_pass });
		tab_next(self);
		sVar(settings_menu_w) = (capwid + IntType(24));
	}
	
	RealType menu_settings_draw(ScopeAny self)
	{
		if (sInt(settings_menu_window) != window_get_current())
			return IntType(0);
		if (sStr(settings_menu_ani_type) == /*"hide"*/ STR(736))
		{
			sVar(settings_menu_ani) -= test_reduced_motion(IntType(1), (0.08 * global::delta));
			if (sVar(settings_menu_ani) <= IntType(0))
			{
				sVar(settings_menu_ani) = IntType(0);
				sStr(settings_menu_name) = /*""*/ STR(0);
				sStr(settings_menu_ani_type) = /*""*/ STR(0);
				sVar(window_busy) = sVar(settings_menu_busy_prev);
				context_menu_close(self);
				list_destroy(self, sInt(settings_menu_list));
				return IntType(0);
			}
		}
		else
			if (sStr(settings_menu_ani_type) == /*"show"*/ STR(737))
			{
				sVar(settings_menu_ani) += test_reduced_motion(IntType(1), (0.08 * global::delta));
				if (sVar(settings_menu_ani) >= IntType(1))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*""*/ STR(0);
				}
			}
		
		if (sStr(settings_menu_name) == /*""*/ STR(0))
			return IntType(0);
		VarType settingsmenuease = ease(((sStr(settings_menu_ani_type) == /*"show"*/ STR(737)) ? /*"easeoutexpo"*/ STR(571) : /*"easeinexpo"*/ STR(570)), sVar(settings_menu_ani));
		sVar(content_x) = sVar(settings_menu_x) - (round((RealType)sVar(settings_menu_w) / 2.0) * (IntType)sBool(settings_menu_primary));
		sVar(content_y) = sVar(settings_menu_y);
		sVar(content_width) = sVar(settings_menu_w);
		sVar(content_height) = ((sInt(settings_menu_script) > 0) ? sVar(settings_menu_h) : VarType((IntType(28) * sInt(settings_menu_amount))));
		if (sBool(settings_menu_above) && sVar(content_y) - sVar(content_height) > IntType(0))
			sVar(content_y) = ((sVar(content_y) - sVar(content_height)) + IntType(16)) - (IntType(16) * settingsmenuease);
		else
			sVar(content_y) = ((sVar(content_y) + sReal(settings_menu_button_h)) - IntType(16)) + (IntType(16) * settingsmenuease);
		
		sVar(content_y) = round(sVar(content_y));
		if (sVar(window_busy) == /*"settingsmenu"*/ STR(1022) && sStr(settings_menu_ani_type) == /*""*/ STR(0) && sVar(settings_menu_ani) == IntType(1))
			sVar(window_busy) = /*""*/ STR(0);
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		if (sInt(settings_menu_steps) < IntType(2))
		{
			if (sVar(content_x) + sVar(content_width) > sReal(window_width))
			{
				sVar(settings_menu_x) -= (sVar(settings_menu_w) - sReal(settings_menu_button_w));
			}
			draw_set_alpha(0.0);
		}
		else
			draw_set_alpha(settingsmenuease);
		
		draw_dropshadow(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), c_black, settingsmenuease);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_outline(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border * settingsmenuease, true);
		if (sInt(settings_menu_script) > 0)
		{
			sVar(dx) = sVar(content_x) + IntType(12);
			sVar(dy) = sVar(content_y) + IntType(12);
			sVar(dw) = sVar(settings_menu_w) - IntType(24);
			if (sBool(textbox_jump))
				ds_list_clear(sInt(textbox_list));
			script_execute(self, { sInt(settings_menu_script) });
			sVar(dy) += IntType(4);
			if (sVar(settings_menu_h_max) == null_)
				sVar(settings_menu_h) = sVar(dy) - sVar(content_y);
			else
			{
				sVar(settings_menu_h) = min({ sVar(dy) - sVar(content_y), sVar(settings_menu_h_max) });
				if ((sVar(dy) - sVar(content_y)) > sVar(settings_menu_h_max))
				{
					scrollbar_draw(self, sInt(settings_menu_scroll), e_scroll_VERTICAL, sVar(content_x) + sVar(content_width) - IntType(12), sVar(content_y), sVar(content_height), sVar(dy) - sVar(content_y));
					sStr(window_scroll_focus) = string(sInt(settings_menu_scroll));
				}
			}
			
		}
		else
		{
			VarType itemx, itemy;
			itemx = sVar(content_x);
			itemy = sVar(content_y);
			for (IntType i = IntType(0); i < sInt(settings_menu_amount); i++)
			{
				list_item_draw(self, { DsList(ObjType(obj_list, sInt(settings_menu_list))->item).Value(i), itemx, itemy, sVar(content_width), IntType(28), false });
				itemy += IntType(28);
			}
		}
		
		if (sBool(settings_menu_primary))
		{
			draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_level_middle, settingsmenuease });
			if (sInt(settings_menu_amount) > IntType(0) && ObjType(obj_list_item, DsList(ObjType(obj_list, sInt(settings_menu_list))->item).Value(IntType(0)))->hover > 0)
			{
				if (sBool(mouse_left))
					draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_accent_overlay, global::a_accent_overlay * settingsmenuease });
				else
					draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_overlay, global::a_overlay * settingsmenuease });
				
			}
			draw_image({ ID_spr_tooltip_arrow, IntType(1), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_border, global::a_border * settingsmenuease });
		}
		draw_set_alpha(1.0);
		if ((sVar(content_y) + sVar(content_height)) > sReal(window_height))
			sBool(settings_menu_above) = true;
		if (sStr(settings_menu_ani_type) == /*""*/ STR(0) && sBool(mouse_left_released) && !sBool(context_menu_mouseon) && (ds_list_size(sInt(menu_list)) == IntType(0)) && (sVar(window_focus) == /*""*/ STR(0) || sVar(window_focus) == string(sInt(settings_menu_scroll))))
		{
			if (sInt(settings_menu_script) > 0)
			{
				if (!app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*"hide"*/ STR(736);
					sVar(window_busy) = /*"settingsmenu"*/ STR(1022);
					sVar(window_focus) = /*""*/ STR(0);
					context_menu_close(self);
				}
			}
			else
			{
				if (!sBool(context_menu_mouseon))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*"hide"*/ STR(736);
					sVar(window_busy) = /*"settingsmenu"*/ STR(1022);
					sVar(window_focus) = /*""*/ STR(0);
					context_menu_close(self);
				}
			}
			
		}
		sInt(settings_menu_steps)++;
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(736))
			sVar(window_busy) = /*"settingsmenu"*/ STR(1022);
		return 0.0;
	}
	
	void menu_settings_set(ScopeAny self, VarType xx, VarType yy, StringType name, RealType buttonheight)
	{
		sVar(settings_menu_busy_prev) = sVar(window_busy);
		sVar(window_busy) = /*"settingsmenu"*/ STR(1022);
		sVar(window_focus) = /*""*/ STR(0);
		app_mouse_clear(self);
		sInt(settings_menu_window) = window_get_current();
		sStr(settings_menu_name) = name;
		sVar(settings_menu_ani) = IntType(0);
		sStr(settings_menu_ani_type) = /*"show"*/ STR(737);
		sInt(settings_menu_steps) = IntType(0);
		sVar(settings_menu_sortlist) = /*""*/ STR(0);
		ObjType(obj_scrollbar, sInt(settings_menu_scroll))->value_goal = IntType(0);
		ObjType(obj_scrollbar, sInt(settings_menu_scroll))->value = IntType(0);
		sBool(settings_menu_primary) = false;
		sVar(settings_menu_x) = xx;
		sVar(settings_menu_y) = yy;
		sVar(settings_menu_h_max) = null_;
		sBool(settings_menu_above) = false;
		sInt(settings_menu_list) = list_init(self, sStr(settings_menu_name));
		sInt(settings_menu_amount) = ds_list_size(ObjType(obj_list, sInt(settings_menu_list))->item);
		list_update_width(self, sInt(settings_menu_list));
		sVar(settings_menu_w) = (ObjType(obj_list, sInt(settings_menu_list))->width + IntType(12));
		if ((sVar(settings_menu_x) + ((RealType)sVar(settings_menu_w) / 2.0)) > sReal(window_width))
			sVar(settings_menu_x) += sReal(window_width) - (sVar(settings_menu_x) + ((RealType)sVar(settings_menu_w) / 2.0));
		sReal(settings_menu_button_h) = buttonheight;
		sReal(settings_menu_button_w) = IntType(16);
	}
	
	void menu_snap_settings(ScopeAny self)
	{
		draw_set_font(sInt(font_label));
		IntType draggerwid, switchwid;
		draggerwid = text_max_width({ /*"viewsnapmove"*/ STR(1678), /*"viewsnaprotate"*/ STR(1679), /*"viewsnapscale"*/ STR(1680) }) + IntType(16) + dragger_width;
		switchwid = text_max_width({ /*"viewsnapabsolute"*/ STR(1681) }) + IntType(28) + IntType(16) + IntType(24);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnapmove"*/ STR(1678), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_position), 0.01, snap_min, no_limit, IntType(1), snap_min, sInt(tbx_snap_position), ID_action_setting_snap_size_position);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnaprotate"*/ STR(1679), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_rotation), 0.01, snap_min, no_limit, IntType(15), snap_min, sInt(tbx_snap_rotation), ID_action_setting_snap_size_rotation);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnapscale"*/ STR(1680), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_scale), 0.01, snap_min, no_limit, IntType(1), snap_min, sInt(tbx_snap_scale), ID_action_setting_snap_size_scale);
		tab_next(self);
		draw_divide(sVar(content_x), sVar(dy), sVar(content_width));
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"viewsnapabsolute"*/ STR(1681), sVar(dx), sVar(dy), sVar(setting_snap_absolute), ID_action_setting_snap_absolute, /*"viewsnapabsolutetip"*/ STR(1682));
		tab_next(self);
		sVar(settings_menu_w) = (max({ draggerwid, switchwid }) + IntType(24));
	}
	
	IntType menu_timeline_init(ScopeAny self, VarType menu)
	{
		list_init_start();
		menu_add_timeline(null_, -IntType(1), menu);
		return list_init_end(self);
	}
	
	VarType menu_transitions(ScopeAny self, VarType xx, VarType yy, VarType wid, VarType hei)
	{
		VarType transition = null_;
		sVar(dx_start) = xx + IntType(12);
		sVar(dx) = sVar(dx_start);
		sVar(dy_start) = yy;
		sVar(dy) = sVar(dy_start) + IntType(12);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenuother"*/ STR(1683) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (!string_contains(DsList(global::transition_list).Value(i), /*"ease"*/ STR(1062)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dy) += IntType(36) + IntType(10);
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueasein"*/ STR(1684) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easein"*/ STR(1060)) && !string_contains(DsList(global::transition_list).Value(i), /*"easeinout"*/ STR(1059)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueaseout"*/ STR(1685) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easeout"*/ STR(1061)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueaseinout"*/ STR(1686) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easeinout"*/ STR(1059)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		if (sVar(context_menu_name) != /*""*/ STR(0) && transition != null_)
		{
			action_tl_frame_transition(self, transition);
			context_menu_close(self);
			app_mouse_clear(self);
			return true;
		}
		else
			if (transition != null_)
			{
				action_tl_frame_transition(self, transition);
				ObjType(obj_menu, sVar(menu_current))->menu_ani = IntType(1);
				ObjType(obj_menu, sVar(menu_current))->menu_ani_type = /*"hide"*/ STR(736);
				sVar(window_busy) = /*""*/ STR(0);
				return true;
			}
		
		return transition;
	}
	
	void microani_set(VarType name, VarType script, VarType hover, BoolType click, VarType active, VarType disabled, RealType spd, RealType custom, RealType goalval)
	{
		StringType aniname;
		IntType animation;
		aniname = global::microani_prefix + name + string(script);
		animation = DsMap(global::microanis).Value(aniname);
		if (animation == VarType())
		{
			animation = (new micro_animation(aniname))->id;
			ObjType(value_animation, ObjType(micro_animation, animation)->active)->init(active);
			ObjType(value_animation, ObjType(micro_animation, animation)->hover)->init(hover);
			ObjType(value_animation, ObjType(micro_animation, animation)->holding)->init(click);
			ObjType(value_animation, ObjType(micro_animation, animation)->disable)->init(disabled);
			ObjType(value_animation, ObjType(micro_animation, animation)->custom)->init(custom);
			ObjType(value_animation, ObjType(micro_animation, animation)->fade)->init(IntType(1));
			ObjType(micro_animation, animation)->goal_value = goalval;
			ObjType(micro_animation, animation)->goal_ease = goalval;
		}
		global::current_microani = animation;
		ObjType(micro_animation, global::current_microani)->steps_hidden = IntType(0);
		global::microani_arr[e_microani_HOVER_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value_ani_linear;
		global::microani_arr[e_microani_PRESS_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value_ani_linear;
		global::microani_arr[e_microani_ACTIVE_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value_ani_linear;
		global::microani_arr[e_microani_DISABLED_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value_ani_linear;
		global::microani_arr[e_microani_CUSTOM_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value_ani_linear;
		global::microani_arr[e_microani_FADE_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value_ani_linear;
		global::microani_arr[e_microani_HOVER] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value_ani_ease;
		global::microani_arr[e_microani_PRESS] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value_ani_ease;
		global::microani_arr[e_microani_ACTIVE] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value_ani_ease;
		global::microani_arr[e_microani_DISABLED] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value_ani_ease;
		global::microani_arr[e_microani_CUSTOM] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value_ani_ease;
		global::microani_arr[e_microani_FADE] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value_ani_ease;
		global::microani_arr[e_microani_GOAL_EASE] = ObjType(micro_animation, global::current_microani)->goal_ease;
	}
	
	void microani_update(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::current_microani != null_)
		{
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value = argument[IntType(0)];
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value = argument[IntType(1)];
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = argument[IntType(2)];
			if (argument_count > IntType(3))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value = argument[IntType(3)];
			if (argument_count > IntType(4))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value = argument[IntType(4)];
			if (argument_count > IntType(5))
				ObjType(micro_animation, global::current_microani)->goal_value = argument[IntType(5)];
		}
	}
	
	void minecraft_assets_event_create(Scope<obj_minecraft_assets> self)
	{
		self->version = /*""*/ STR(0);
		self->model_name_map = ds_map_create();
		self->char_list = ds_list_create();
		self->special_block_list = ds_list_create();
		self->block_list = ds_list_create();
		self->block_name_map = ds_map_create();
		self->block_id_map = ds_map_create();
		self->block_liquid_slot_map = ds_map_create();
		self->model_texture_list = ds_list_create();
		self->block_texture_list = ds_list_create();
		self->block_texture_ani_list = ds_list_create();
		self->block_texture_color_map = ds_map_create();
		self->item_texture_list = ds_list_create();
		self->particle_texture_list = ds_list_create();
		self->block_texture_preview_map = ds_map_create();
	}
	
	BoolType minecraft_assets_load()
	{
		withOne (obj_minecraft_assets, global::mc_assets, noone)
		{
			switch (StringType(global::load_assets_stage).id)
			{
				case 1280: // unzip
				{
					if (global::current_step < IntType(5))
						break;
					RealType exists = directory_exists_lib(global::load_assets_dir + mc_assets_directory);
					if (array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_character_directory, /*".mimodel"*/ STR(713)))) == IntType(0) || array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_block_directory, /*".json"*/ STR(714)))) == IntType(0) || array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_textures_directory + /*"block/"*/ STR(806), /*".png"*/ STR(6)))) == IntType(0))
						exists = false;
					if (!(exists > 0))
					{
						debug_timer_start();
						if (!unzip(global::load_assets_zip_file, global::load_assets_dir))
						{
							log({ /*"Could not unzip archive"*/ STR(1687) });
							directory_delete_lib(global::load_assets_dir);
							access_error();
							return false;
						}
						debug_timer_stop(/*"Unzip archive"*/ STR(1688));
					}
					else
						log({ /*"Archive already unzipped, re-using"*/ STR(1689), global::load_assets_dir + mc_assets_directory });
					
					global::load_assets_stage = /*"biomes"*/ STR(1690);
					global::load_assets_progress = 0.3;
					global::file_copy_temp = false;
					break;
				}
				
				case 1690: // biomes
				{
					withOne (obj_resource, global::mc_res, self->id)
						minecraft_assets_load_biomes(global::biome_list, DsMap(global::load_assets_map).Value(/*"biomes"*/ STR(1690)));
					
					global::_app->background_biome = ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name;
					global::_app->background_foliage_color = c_plains_biome_foliage;
					global::_app->background_grass_color = c_plains_biome_grass;
					global::_app->background_water_color = c_plains_biome_water;
					global::_app->background_leaves_oak_color = c_plains_biome_foliage;
					global::_app->background_leaves_spruce_color = c_plains_biome_foliage_2;
					global::_app->background_leaves_birch_color = c_plains_biome_foliage_2;
					global::_app->background_leaves_jungle_color = c_plains_biome_foliage;
					global::_app->background_leaves_acacia_color = c_plains_biome_foliage;
					global::_app->background_leaves_dark_oak_color = c_plains_biome_foliage;
					global::_app->background_leaves_mangrove_color = c_plains_biome_foliage;
					global::load_assets_stage = /*"textures"*/ STR(827);
					global::load_assets_progress = 0.4;
					break;
				}
				
				case 827: // textures
				{
					VarType modeltextureslist = DsMap(global::load_assets_map).Value(/*"model_textures"*/ STR(1691));
					if (is_undefined(modeltextureslist))
					{
						log({ /*"No model textures found"*/ STR(1692) });
						return false;
					}
					ds_list_copy((IntType)(self->model_texture_list), (IntType)(modeltextureslist));
					VarType blocktextureslist = DsMap(global::load_assets_map).Value(/*"block_textures"*/ STR(1693));
					if (is_undefined(blocktextureslist))
					{
						log({ /*"No block textures found"*/ STR(1694) });
						return false;
					}
					ds_list_copy((IntType)(self->block_texture_list), (IntType)(blocktextureslist));
					VarType blocktexturesanimatedlist = DsMap(global::load_assets_map).Value(/*"block_textures_animated"*/ STR(1695));
					if (is_undefined(blocktexturesanimatedlist))
					{
						log({ /*"No animated block textures found"*/ STR(1696) });
						return false;
					}
					ds_list_copy((IntType)(self->block_texture_ani_list), (IntType)(blocktexturesanimatedlist));
					VarType blocktexturescolorlist = DsMap(global::load_assets_map).Value(/*"block_textures_color"*/ STR(1697));
					if (is_undefined(blocktexturescolorlist))
					{
						log({ /*"No block texture colors found"*/ STR(1698) });
						return false;
					}
					ds_map_copy((IntType)(self->block_texture_color_map), (IntType)(blocktexturescolorlist));
					VarType key = ds_map_find_first((IntType)(self->block_texture_color_map));
					while (!is_undefined(key))
					{
						if (string_char_at(DsMap(self->block_texture_color_map).Value(key), IntType(1)) == /*"#"*/ STR(844))
							DsMap(self->block_texture_color_map)[key] = hex_to_color(DsMap(self->block_texture_color_map).Value(key));
						key = ds_map_find_next((IntType)(self->block_texture_color_map), key);
					}
					
					VarType blocktexturepreview = DsMap(global::load_assets_map).Value(/*"block_textures_preview"*/ STR(1699));
					if (!is_undefined(blocktexturepreview))
						ds_map_copy((IntType)(self->block_texture_preview_map), (IntType)(blocktexturepreview));
					VarType itemtextureslist = DsMap(global::load_assets_map).Value(/*"item_textures"*/ STR(1700));
					if (is_undefined(itemtextureslist))
					{
						log({ /*"No item textures found"*/ STR(1701) });
						return false;
					}
					ds_list_copy((IntType)(self->item_texture_list), (IntType)(itemtextureslist));
					VarType particletextureslist = DsMap(global::load_assets_map).Value(/*"particle_textures"*/ STR(1702));
					if (is_undefined(particletextureslist))
					{
						log({ /*"No particle textures found"*/ STR(1703) });
						return false;
					}
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"particles"*/ STR(527))))
					{
						log({ /*"No particle list found"*/ STR(1704) });
						return false;
					}
					ds_list_copy((IntType)(self->particle_texture_list), (IntType)(particletextureslist));
					withOne (obj_resource, global::mc_res, self->id)
					{
						res_load_pack_model_textures(ScopeAny(self));
						res_load_pack_block_textures(ScopeAny(self));
						res_load_pack_item_textures(ScopeAny(self), /*"diffuse"*/ STR(624), /*""*/ STR(0));
						self->item_sheet_texture_material = sprite_duplicate(ID_spr_default_material);
						self->item_sheet_tex_normal = sprite_duplicate(ID_spr_default_normal);
						minecraft_assets_load_particles(DsMap(global::load_assets_map).Value(/*"particles"*/ STR(527)));
						res_load_pack_particle_textures(ScopeAny(self));
						res_load_pack_misc(ScopeAny(self));
						res_update_colors(ScopeAny(self), { ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name });
					}
					
					global::load_assets_stage = /*"misc"*/ STR(1705);
					global::load_assets_progress = 0.45;
					break;
				}
				
				case 1705: // misc
				{
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"patterns"*/ STR(1706))))
					{
						log({ /*"No pattern designs list found"*/ STR(1707) });
						return false;
					}
					VarType patternlist = DsMap(global::load_assets_map).Value(/*"patterns"*/ STR(1706));
					for (IntType i = IntType(0); i < ds_list_size((IntType)(patternlist)); i++)
					{
						VarType pattern = DsList(patternlist).Value(i);
						ds_list_add({ global::minecraft_pattern_list, DsList(pattern).Value(IntType(0)) });
						ds_list_add({ global::minecraft_pattern_short_list, DsList(pattern).Value(IntType(1)) });
					}
					global::load_assets_stage = /*"models"*/ STR(1708);
					global::load_assets_progress = 0.5;
					break;
				}
				
				case 1708: // models
				{
					VarType characterslist = DsMap(global::load_assets_map).Value(/*"characters"*/ STR(1709));
					if (is_undefined(characterslist))
					{
						log({ /*"No character list found"*/ STR(1710) });
						return false;
					}
					debug_timer_start();
					for (IntType i = IntType(0); i < ds_list_size((IntType)(characterslist)); i++)
					{
						IntType model = model_load(DsList(characterslist).Value(i), global::load_assets_dir + mc_character_directory);
						if (!(model > 0))
						{
							log({ /*"Could not load model"*/ STR(1711) });
							continue;
						}
						DsMap(self->model_name_map)[ObjType(obj_model, model)->name] = model;
						ds_list_add({ self->char_list, model });
					}
					debug_timer_stop(/*"Load characters"*/ STR(1712));
					VarType specialblockslist = DsMap(global::load_assets_map).Value(/*"special_blocks"*/ STR(1713));
					if (is_undefined(specialblockslist))
					{
						log({ /*"No special block list found"*/ STR(1714) });
						return false;
					}
					debug_timer_start();
					for (IntType i = IntType(0); i < ds_list_size((IntType)(specialblockslist)); i++)
					{
						IntType model = model_load(DsList(specialblockslist).Value(i), global::load_assets_dir + mc_special_block_directory);
						if (!(model > 0))
						{
							log({ /*"Could not load model"*/ STR(1711) });
							continue;
						}
						DsMap(self->model_name_map)[ObjType(obj_model, model)->name] = model;
						ds_list_add({ self->special_block_list, model });
					}
					debug_timer_stop(/*"Load special blocks"*/ STR(1715));
					debug_timer_start();
					global::load_assets_stage = /*"blocks"*/ STR(995);
					global::load_assets_progress = 0.6;
					break;
				}
				
				case 995: // blocks
				{
					VarType blockslist = DsMap(global::load_assets_map).Value(/*"blocks"*/ STR(995));
					if (is_undefined(blockslist))
					{
						log({ /*"No block list found"*/ STR(1716) });
						return false;
					}
					for (IntType _it = 0, _it_max = IntType(20); _it < _it_max; _it++)
					{
						if (global::load_assets_block_index == ds_list_size((IntType)(blockslist)))
						{
							global::load_assets_stage = /*"done"*/ STR(1717);
							break;
						}
						VarType blockmap;
						IntType block;
						blockmap = DsList(blockslist).Value(global::load_assets_block_index);
						block = block_load(blockmap, global::load_assets_type_map);
						if (!(block > 0))
						{
							log({ /*"Could not load block"*/ STR(1718) });
							continue;
						}
						DsMap(self->block_name_map)[ObjType(obj_block, block)->name] = block;
						ds_list_add({ self->block_list, block });
						global::load_assets_block_index++;
					}
					global::load_assets_progress = 0.6 + 0.4 * (global::load_assets_block_index / ds_list_size((IntType)(blockslist)));
					if (dev_mode_skip_blocks)
						global::load_assets_stage = /*"done"*/ STR(1717);
					if (global::load_assets_stage == /*"done"*/ STR(1717))
					{
						DsMap(self->block_name_map)[/*"flowing_water"*/ STR(1719)] = DsMap(self->block_name_map).Value(/*"water"*/ STR(802));
						DsMap(self->block_name_map)[/*"flowing_lava"*/ STR(1720)] = DsMap(self->block_name_map).Value(/*"lava"*/ STR(1721));
						DsMap(self->block_liquid_slot_map)[/*"water"*/ STR(802)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/water_still"*/ STR(1722));
						DsMap(self->block_liquid_slot_map)[/*"lava"*/ STR(1721)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/lava_still"*/ STR(1723));
						DsMap(self->block_liquid_slot_map)[/*"flowing_water"*/ STR(1719)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/water_flow"*/ STR(1724));
						DsMap(self->block_liquid_slot_map)[/*"flowing_lava"*/ STR(1720)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/lava_flow"*/ STR(1725));
						if (!dev_mode_skip_blocks)
							DsMap(self->block_id_map)[/*"minecraft:grass_path"*/ STR(1726)] = DsMap(self->block_id_map).Value(/*"minecraft:dirt_path"*/ STR(1727));
						VarType key = ds_map_find_first((IntType)(global::legacy_block_id));
						while (!is_undefined(key))
						{
							VarType curid;
							IntType curmap;
							curid = string_get_real(key);
							curmap = ds_map_find_value((IntType)(global::legacy_block_id), key);
							global::legacy_block_set[curid] = true;
							VarType newid, block, statevars;
							StringType newidnomc;
							newid = DsMap(curmap).Value(/*"id"*/ STR(82));
							if (!is_undefined(newid))
								newidnomc = string_replace(DsMap(curmap).Value(/*"id"*/ STR(82)), /*"minecraft:"*/ STR(823), /*""*/ STR(0));
							else
								newidnomc = /*""*/ STR(0);
							
							block = null_;
							statevars = null_;
							if (is_string(newid) && !is_undefined(DsMap(self->block_id_map).Value(newid)))
							{
								block = DsMap(self->block_id_map).Value(newid);
								if (ObjType(obj_block, block)->id_state_vars_map != null_ && !is_undefined(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid)))
									statevars = DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid);
							}
							for (IntType d = IntType(0); d < IntType(16); d++)
							{
								global::legacy_block_mc_id[curid][d] = newidnomc;
								global::legacy_block_obj[curid][d] = block;
								if (statevars != null_)
									global::legacy_block_state_vars[curid][d] = array_copy_1d(statevars);
								else
									global::legacy_block_state_vars[curid][d] = null_;
								
								global::legacy_block_state_id[curid][d] = IntType(0);
							}
							if (!is_undefined(DsMap(curmap).Value(/*"data"*/ STR(1728))))
								minecraft_assets_load_legacy_block_data(self, curid, DsMap(curmap).Value(/*"data"*/ STR(1728)), IntType(0), IntType(1));
							for (IntType d = IntType(0); d < IntType(16); d++)
								if (global::legacy_block_obj[curid][d] != null_ && global::legacy_block_state_vars[curid][d] != null_)
									global::legacy_block_state_id[curid][d] = block_get_state_id(global::legacy_block_obj[curid][d], global::legacy_block_state_vars[curid][d]);
							key = ds_map_find_next((IntType)(global::legacy_block_id), key);
						}
						
						debug_timer_stop(/*"Load blocks"*/ STR(1729));
						key = ds_map_find_first(global::load_assets_model_file_map);
						while (!is_undefined(key))
						{
							withOne (obj_block_load_model_file, DsMap(global::load_assets_model_file_map).Value(key), self->id)
								instance_destroy(ScopeAny(self));
							
							key = ds_map_find_next(global::load_assets_model_file_map, key);
						}
						
						if (dev_mode_debug_unused)
						{
							ArrType filesarr = file_find(global::load_assets_dir + mc_blockstates_directory, /*".json"*/ STR(714));
							IntType unusedlist = ds_list_create();
							for (IntType f = IntType(0); f < array_length(VarType::CreateRef(filesarr)); f++)
								if (is_undefined(DsMap(global::load_assets_state_file_map).Value(filename_name(filesarr.Value(f)))))
									ds_list_add({ unusedlist, filesarr.Value(f) });
							if (ds_list_size(unusedlist) > IntType(0))
							{
								ds_list_sort(unusedlist, true);
								StringType str = /*"The following blockstates were unused:\n"*/ STR(1730);
								for (IntType i = IntType(0); i < ds_list_size(unusedlist); i++)
									str += /*"  "*/ STR(1731) + filename_name(DsList(unusedlist).Value(i)) + /*"\n"*/ STR(954);
								log({ str });
							}
							filesarr = file_find(global::load_assets_dir + mc_models_directory + /*"block/"*/ STR(806), /*".json"*/ STR(714));
							ds_list_clear(unusedlist);
							for (IntType f = IntType(0); f < array_length(VarType::CreateRef(filesarr)); f++)
								if (is_undefined(DsMap(global::load_assets_model_file_map).Value(filename_name(filesarr.Value(f)))))
									ds_list_add({ unusedlist, filesarr.Value(f) });
							if (ds_list_size(unusedlist) > IntType(0))
							{
								ds_list_sort(unusedlist, true);
								StringType str = /*"The following block models were unused:\n"*/ STR(1732);
								for (IntType i = IntType(0); i < ds_list_size(unusedlist); i++)
									str += /*"  "*/ STR(1731) + filename_name(DsList(unusedlist).Value(i)) + /*"\n"*/ STR(954);
								log({ str });
							}
							ds_list_destroy(unusedlist);
						}
						global::file_copy_temp = !is_cpp();
						ds_map_destroy(global::load_assets_state_file_map);
						ds_map_destroy(global::load_assets_model_file_map);
						ds_map_destroy(global::load_assets_map);
						ds_map_destroy(global::load_assets_type_map);
						buffer_delete(global::load_assets_block_preview_buffer);
						buffer_delete(global::load_assets_block_preview_ani_buffer);
						log({ /*"Loaded assets successfully"*/ STR(1733) });
						move_all_to_texture_page();
					}
					break;
				}
				
			}
			
			return true;
		}
		
		return false;
	}
	
	void minecraft_assets_load_biomes(IntType list, VarType map)
	{
		for (IntType b = IntType(0); b < ds_list_size((IntType)(map)); b++)
		{
			VarType biome = DsList(map).Value(b);
			IntType biomeid;
			withOne (obj_biome, (new obj_biome)->id, noone)
			{
				biomeid = self->id;
				self->name = DsMap(biome).Value(/*"name"*/ STR(804));
				self->group = value_get_real(DsMap(biome).Value(/*"group"*/ STR(1734)), false);
				self->txy = vec2(IntType(0));
				if (is_string(DsMap(biome).Value(/*"foliage"*/ STR(849))))
				{
					self->color_foliage = hex_to_color(DsMap(biome).Value(/*"foliage"*/ STR(849)));
					self->color_grass = self->color_foliage;
					self->hardcoded = true;
				}
				else
				{
					self->color_foliage = c_white;
					self->color_grass = c_white;
					self->txy = value_get_point2D(DsMap(biome).Value(/*"foliage"*/ STR(849)), vec2(IntType(0), IntType(0)));
					self->hardcoded = false;
				}
				
				if (is_string(DsMap(biome).Value(/*"grass"*/ STR(848))))
					self->color_grass = hex_to_color(DsMap(biome).Value(/*"grass"*/ STR(848)));
				if (is_string(DsMap(biome).Value(/*"water"*/ STR(802))))
					self->color_water = hex_to_color(DsMap(biome).Value(/*"water"*/ STR(802)));
				self->biome_base = null_;
				self->biome_variants = null_;
				self->variants_extend = false;
				if (ds_list_valid(DsMap(biome).Value(/*"variant"*/ STR(800))))
				{
					self->biome_variants = ds_list_create();
					VarType biomevariants = DsMap(biome).Value(/*"variant"*/ STR(800));
					for (IntType v = IntType(0); v < ds_list_size((IntType)(biomevariants)); v++)
					{
						VarType variant = DsList(biomevariants).Value(v);
						withOne (obj_biome, (new obj_biome)->id, self->id)
						{
							self->name = DsMap(variant).Value(/*"name"*/ STR(804));
							self->group = false;
							self->txy = array_copy_1d(ObjType(obj_biome, self.otherId)->txy);
							self->hardcoded = ObjType(obj_biome, self.otherId)->hardcoded;
							self->color_foliage = ObjType(obj_biome, self.otherId)->color_foliage;
							if (is_string(DsMap(variant).Value(/*"foliage"*/ STR(849))))
							{
								self->color_foliage = hex_to_color(DsMap(variant).Value(/*"foliage"*/ STR(849)));
								self->hardcoded = true;
							}
							else
								if (ds_list_valid(DsMap(variant).Value(/*"foliage"*/ STR(849))))
								{
									self->color_foliage = c_white;
									self->txy = value_get_point2D(DsMap(variant).Value(/*"foliage"*/ STR(849)), vec2(IntType(0), IntType(0)));
									self->hardcoded = false;
								}
							
							if (is_string(DsMap(variant).Value(/*"grass"*/ STR(848))))
								self->color_grass = hex_to_color(DsMap(variant).Value(/*"grass"*/ STR(848)));
							else
								self->color_grass = ObjType(obj_biome, self.otherId)->color_grass;
							
							if (is_string(DsMap(variant).Value(/*"water"*/ STR(802))))
								self->color_water = hex_to_color(DsMap(variant).Value(/*"water"*/ STR(802)));
							else
								self->color_water = ObjType(obj_biome, self.otherId)->color_water;
							
							self->biome_base = biomeid;
							ds_list_add({ ObjType(obj_biome, self->biome_base)->biome_variants, self->id });
						}
						
					}
				}
			}
			
			ds_list_add({ global::biome_list, biomeid });
		}
	}
	
	void minecraft_assets_load_legacy_block_data(Scope<obj_minecraft_assets> self, VarType curid, VarType map, IntType bitmask, RealType bitbase)
	{
		VarType key = ds_map_find_first((IntType)(map));
		while (!is_undefined(key))
		{
			switch (StringType(key).id)
			{
				case 1735: // 0x1
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(1), IntType(1));
					break;
				}
				case 1736: // 0x2
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(2), IntType(2));
					break;
				}
				case 1737: // 0x4
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(4), IntType(4));
					break;
				}
				case 1738: // 0x8
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(8), IntType(8));
					break;
				}
				case 1739: // 0x1+0x2
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(3), IntType(1));
					break;
				}
				case 1740: // 0x1+0x2+0x4
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(7), IntType(1));
					break;
				}
				case 1741: // 0x4+0x8
				{
					minecraft_assets_load_legacy_block_data(self, curid, DsMap(map).Value(key), IntType(12), IntType(4));
					break;
				}
				default:
				{
					VarType val, statevars, newid, block;
					StringType newidnomc;
					val = string_get_real(key);
					statevars = string_get_state_vars(DsMap(map).Value(key));
					newid = state_vars_get_value(statevars, /*"id"*/ STR(82));
					if (newid != null_)
						newidnomc = string_replace(newid, /*"minecraft:"*/ STR(823), /*""*/ STR(0));
					block = null_;
					if (is_string(newid) && !is_undefined(DsMap(self->block_id_map).Value(newid)))
						block = DsMap(self->block_id_map).Value(newid);
					if (bitmask > IntType(0))
					{
						for (IntType d = IntType(0); d < IntType(16); d++)
						{
							if (((IntType)d & (IntType)bitmask) / bitbase == val)
							{
								if (global::legacy_block_state_vars[curid][d] == null_)
									global::legacy_block_state_vars[curid][d] = ArrType();
								if (block != null_)
								{
									global::legacy_block_obj[curid][d] = block;
									if (ObjType(obj_block, block)->id_state_vars_map != null_ && !is_undefined(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid)))
										state_vars_add(VarType::CreateRef(global::legacy_block_state_vars[curid][d]), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid));
								}
								state_vars_add(VarType::CreateRef(global::legacy_block_state_vars[curid][d]), statevars);
								if (newid != null_)
									global::legacy_block_mc_id[curid][d] = newidnomc;
							}
						}
					}
					else
					{
						if (global::legacy_block_state_vars[curid][val] == null_)
							global::legacy_block_state_vars[curid][val] = ArrType();
						if (block != null_)
						{
							global::legacy_block_obj[curid][val] = block;
							if (ObjType(obj_block, block)->id_state_vars_map != null_ && !is_undefined(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid)))
								state_vars_add(VarType::CreateRef(global::legacy_block_state_vars[curid][val]), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid));
						}
						state_vars_add(VarType::CreateRef(global::legacy_block_state_vars[curid][val]), statevars);
						if (newid != null_)
							global::legacy_block_mc_id[curid][val] = newidnomc;
					}
					
					break;
				}
			}
			
			key = ds_map_find_next((IntType)(map), key);
		}
		
	}
	
}
