/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.16 10:06:44 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void list_destroy(ScopeAny self, IntType list)
	{
		instance_destroy(self, { list });
	}
	
	void list_event_destroy(Scope<obj_list> self)
	{
		for (IntType i = IntType(0); i < ds_list_size(self->item); i++)
			instance_destroy(ScopeAny(self), { DsList(self->item).Value(i) });
		ds_list_destroy(self->item);
	}
	
	IntType list_init(ScopeAny self, VarType name)
	{
		list_init_start();
		if (sVar(menu_model_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_model_state), value_amount); i++)
				menu_add_item({ idVar(sInt(menu_model_state), value_name).Value(i), minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), idVar(sInt(menu_model_state), value_name).Value(i)) });
		}
		if (sVar(menu_block_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_block_state), value_amount); i++)
				menu_add_item({ idVar(sInt(menu_block_state), value_name).Value(i), minecraft_asset_get_name(/*"blockstatevalue"*/ STR(5), idVar(sInt(menu_block_state), value_name).Value(i)) });
		}
		if (sVar(menu_model_current) != null_ || sVar(menu_block_current) != null_)
			return list_init_end(self);
		switch (StringType(name).id)
		{
			case 766: // benchskin
			case 767: // benchskinmaterial
			case 768: // benchskinnormal
			case 770: // benchspblocktex
			case 771: // benchspblocktexmaterial
			case 772: // benchspblocktexnormal
			case 773: // benchbodypartskin
			case 774: // benchbodypartskinmaterial
			case 775: // benchbodypartskinnormal
			case 1339: // libraryskin
			case 1340: // libraryskinmaterial
			case 1341: // libraryskinnormal
			case 1342: // libraryspblocktex
			case 1343: // libraryspblocktexmaterial
			case 1344: // libraryspblocktexnormal
			case 1345: // librarybodypartskin
			case 1346: // librarybodypartskinmaterial
			case 1347: // librarybodypartskinnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(754)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0 && (name == /*"benchskin"*/ STR(766) || name == /*"libraryskin"*/ STR(1339)))
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1349) }), null_, icons_DOWNLOAD });
				VarType tex;
				withOne (obj_resource, global::mc_res, self->id)
				{
					if (string_contains(name, /*"material"*/ STR(642)))
						tex = res_get_model_texture_material(ScopeAny(self), model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
					else
						if (string_contains(name, /*"normal"*/ STR(631)))
							tex = res_get_model_tex_normal(ScopeAny(self), model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
						else
							tex = res_get_model_texture(ScopeAny(self), model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
					
					
				}
				
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, tex });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					withOne (Object, res, self->id)
					{
						if (string_contains(name, /*"material"*/ STR(642)))
							tex = res_get_model_texture_material(self, model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
						else
							if (string_contains(name, /*"normal"*/ STR(631)))
								tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
							else
								tex = res_get_model_texture(self, model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
						
						
					}
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 811: // benchmodeltex
			case 1350: // librarymodeltex
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(754)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1349) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, block_sheet_texture) == null_)
							texobj = global::mc_res;
					}
					else
					{
						if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
							texobj = global::mc_res;
					}
					
				}
				if (texobj != null_)
				{
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, sVar(model_file));
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 812: // benchmodeltexmaterial
			case 1351: // librarymodeltexmaterial
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(754)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1349) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, block_sheet_texture_material) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 813: // benchmodeltexnormal
			case 1352: // librarymodeltexnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(754)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1349) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, block_sheet_tex_normal) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
					{
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
					}
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 785: // benchscenery
			case 1353: // libraryscenery
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				menu_add_item({ e_option_IMPORT_WORLD, text_get({ /*"librarysceneryimport"*/ STR(1354) }), null_, icons_SCENERY });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SCENERY || idVar(res, type) == e_res_type_FROM_WORLD)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 786: // benchblocktex
			case 787: // benchblocktexmaterial
			case 788: // benchblocktexnormal
			case 1355: // libraryblocktex
			case 1356: // libraryblocktexmaterial
			case 1357: // libraryblocktexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idInt(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 795: // benchitemtex
			case 796: // benchitemtexmaterial
			case 797: // benchitemtexnormal
			case 1358: // libraryitemtex
			case 1359: // libraryitemtexmaterial
			case 1360: // libraryitemtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 776: // benchbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)); p++)
				{
					VarType part = DsList(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(780), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 1361: // templateeditorbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(idVar(global::temp_edit, model_file), file_part_list)); p++)
				{
					VarType part = DsList(idInt(idVar(global::temp_edit, model_file), file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(780), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 800: // benchtextfont
			case 1362: // librarytextfont
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 803: // benchshapetype
			{
				for (IntType i = IntType(0); i < e_shape_type_amount; i++)
					menu_add_item({ i, text_get({ /*"type"*/ STR(807) + DsList(global::tl_type_name_list).Value(e_tl_type_CUBE + i) }) });
				break;
			}
			
			case 804: // benchshapetex
			case 805: // benchshapetexmaterial
			case 806: // benchshapetexnormal
			case 1363: // libraryshapetex
			case 1364: // libraryshapetexmaterial
			case 1365: // libraryshapetexnormal
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"benchshapetex"*/ STR(804) || name == /*"libraryshapetex"*/ STR(1363))
				{
					withAll (obj_timeline, self->id)
						if (self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 765: // benchmodel
			case 1366: // librarymodel
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_MODEL)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1367: // particleeditorspawnregiontype
			{
				menu_add_item({ /*"sphere"*/ STR(556), text_get({ /*"particleeditorspawnregiontypesphere"*/ STR(1368) }), null_, icons_BOUNDARY_CIRCLE });
				menu_add_item({ /*"cube"*/ STR(3), text_get({ /*"particleeditorspawnregiontypecube"*/ STR(1369) }), null_, icons_BOUNDARY_CUBE });
				menu_add_item({ /*"box"*/ STR(1370), text_get({ /*"particleeditorspawnregiontypebox"*/ STR(1371) }), null_, icons_BOUNDARY_BOX });
				menu_add_item({ /*"path"*/ STR(562), text_get({ /*"particleeditorspawnregiontypepath"*/ STR(1372) }), null_, icons_PATH });
				break;
			}
			
			case 1373: // particleeditorspawnregionpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1374: // particleeditorboundingbox
			{
				menu_add_item({ /*"none"*/ STR(910), text_get({ /*"particleeditorboundingboxtypenone"*/ STR(1375) }) });
				menu_add_item({ /*"spawn"*/ STR(1376), text_get({ /*"particleeditorboundingboxtypespawn"*/ STR(1377) }) });
				menu_add_item({ /*"ground"*/ STR(143), text_get({ /*"particleeditorboundingboxtypeground"*/ STR(1378) }) });
				menu_add_item({ /*"custom"*/ STR(630), text_get({ /*"particleeditorboundingboxtypecustom"*/ STR(1379) }) });
				break;
			}
			
			case 1380: // particleeditortypetemp
			{
				menu_add_item({ particle_template, text_get({ /*"particleeditortypetemplate"*/ STR(1381) }) });
				menu_add_item({ particle_sheet, text_get({ /*"particleeditortypespritesheet"*/ STR(1382) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(lib_list), display_list)); i++)
				{
					VarType temp = DsList(idInt(sInt(lib_list), display_list)).Value(i);
					if (idVar(temp, type) != e_temp_type_PARTICLE_SPAWNER)
						menu_add_item({ temp, idVar(temp, display_name) });
				}
				break;
			}
			
			case 1383: // particleeditortypespritetex
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->particles_texture.Value(img) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idArr(res, particles_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, particles_texture).Value(img) });
				}
				break;
			}
			
			case 1384: // particleeditortypespritetemplatepack
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idVar(res, type) == e_res_type_PACK)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1385: // particleeditortypespritetemplate
			{
				for (IntType i = IntType(0); i < ds_list_size(global::particle_template_list); i++)
				{
					VarType temp = DsList(global::particle_template_list).Value(i);
					if (ObjType(obj_particle_template, temp)->animated)
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1385) + ObjType(obj_particle_template, temp)->name }) + /*" "*/ STR(21) + text_get({ /*"particleeditortypespritetemplateframes"*/ STR(1386), ObjType(obj_particle_template, temp)->frames }) });
					else
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1385) + ObjType(obj_particle_template, temp)->name }) });
					
				}
				break;
			}
			
			case 1387: // backgroundimage
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1388: // backgroundimagetype
			{
				menu_add_item({ /*"image"*/ STR(94), text_get({ /*"backgroundimagetypeimage"*/ STR(1389) }) });
				menu_add_item({ /*"sphere"*/ STR(556), text_get({ /*"backgroundimagetypesphere"*/ STR(1390) }) });
				menu_add_item({ /*"box"*/ STR(1370), text_get({ /*"backgroundimagetypebox"*/ STR(1391) }) });
				break;
			}
			
			case 1392: // backgroundskysuntex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->sun_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, sun_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, sun_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1393: // backgroundskymoontex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->moon_texture.Value(sVar(background_sky_moon_phase)) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idArr(res, moon_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, moon_texture).Value(sVar(background_sky_moon_phase)) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1394: // backgroundskymoonphase
			{
				for (IntType p = IntType(0); p < IntType(8); p++)
					menu_add_item({ p, text_get({ /*"backgroundskymoonphase"*/ STR(1394) + string(p + IntType(1)) }), idArr(sVar(background_sky_moon_tex), moon_texture).Value(p) });
				break;
			}
			
			case 1395: // backgroundskycloudstex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->clouds_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, clouds_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, clouds_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1396: // backgroundgroundtex
			case 1397: // backgroundgroundtexmaterial
			case 1398: // backgroundgroundtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (name == /*"backgroundgroundtexmaterial"*/ STR(1397))
					{
						if (res != global::mc_res && idInt(res, block_sheet_texture_material) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					}
					else
						if (name == /*"backgroundgroundtexnormal"*/ STR(1398))
						{
							if (res != global::mc_res && idInt(res, block_sheet_tex_normal) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
						else
						{
							if (res != global::mc_res && idInt(res, block_sheet_texture) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
					
					
				}
				break;
			}
			
			case 1399: // resourcespackimage
			{
				menu_add_item({ /*"preview"*/ STR(1400), text_get({ /*"resourcespackpreview"*/ STR(1401) }) });
				menu_add_item({ /*"modeltextures"*/ STR(1402), text_get({ /*"resourcespackmodeltextures"*/ STR(1403) }) });
				menu_add_item({ /*"blocksheet"*/ STR(571), text_get({ /*"resourcespackblocksheet"*/ STR(1404) }) });
				menu_add_item({ /*"colormap"*/ STR(1405), text_get({ /*"resourcespackcolormap"*/ STR(1406) }) });
				menu_add_item({ /*"itemsheet"*/ STR(569), text_get({ /*"resourcespackitemsheet"*/ STR(1407) }) });
				menu_add_item({ /*"particlesheet"*/ STR(573), text_get({ /*"resourcespackparticlesheet"*/ STR(1408) }) });
				menu_add_item({ /*"suntexture"*/ STR(1409), text_get({ /*"resourcespacksuntexture"*/ STR(1410) }) });
				menu_add_item({ /*"moontexture"*/ STR(1411), text_get({ /*"resourcespackmoontexture"*/ STR(1412) }) });
				menu_add_item({ /*"cloudtexture"*/ STR(1413), text_get({ /*"resourcespackcloudtexture"*/ STR(1414) }) });
				break;
			}
			
			case 1415: // resourcespackmaterial
			{
				menu_add_item({ /*"diffuse"*/ STR(637), text_get({ /*"resourcespackmaterialdiffuse"*/ STR(1416) }) });
				menu_add_item({ /*"material"*/ STR(642), text_get({ /*"resourcespackmaterialmaterial"*/ STR(1417) }) });
				menu_add_item({ /*"normal"*/ STR(631), text_get({ /*"resourcespackmaterialnormal"*/ STR(1418) }) });
				break;
			}
			
			case 1419: // resourcespackimagemodeltexture
			{
				for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list)); t++)
					menu_add_item({ DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t) });
				break;
			}
			
			case 1420: // resourcesscenerystructurepalette
			{
				for (IntType p = IntType(0); p < idInt(global::res_edit, scenery_palette_size); p++)
					menu_add_item({ p, text_get({ /*"resourcesscenerystructurepalettenumber"*/ STR(1421), p + IntType(1) }) });
				break;
			}
			
			case 1422: // frameeditorpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1423: // frameeditorchartex
			case 1424: // frameeditorspblocktex
			case 1425: // frameeditorbodyparttex
			case 1426: // frameeditormodeltex
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex), type) == e_res_type_PACK)
								texobj = sVar(block_tex);
							else
								texobj = sVar(model_tex);
							
						}
						
					}
				}
				if (texobj == null_)
				{
					texobj = idVar(temp, model);
					if (texobj != null_)
					{
						if (idInt(texobj, model_format) == e_model_format_BLOCK)
						{
							if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, block_sheet_texture) == null_)
								texobj = global::mc_res;
						}
						else
						{
							if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
								texobj = global::mc_res;
						}
						
					}
				}
				if (texobj != null_)
				{
					VarType modelfile = idVar(temp, model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, modelfile);
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1427: // frameeditorchartexmaterial
			case 1428: // frameeditorspblocktexmaterial
			case 1429: // frameeditorbodyparttexmaterial
			case 1430: // frameeditormodeltexmaterial
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_material);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_material), type) == e_res_type_PACK)
								texobj = sVar(block_tex_material);
							else
								texobj = sVar(model_tex_material);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1431: // frameeditorchartexnormal
			case 1432: // frameeditorspblocktexnormal
			case 1433: // frameeditorbodyparttexnormal
			case 1434: // frameeditormodeltexnormal
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_normal);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK)
								texobj = sVar(block_tex_normal);
							else
								texobj = sVar(model_tex_normal);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1435: // frameeditorblocktex
			case 1436: // frameeditorblocktexmaterial
			case 1437: // frameeditorblocktexnormal
			{
				VarType texobj = null_;
				if (name == /*"frameeditorblocktexmaterial"*/ STR(1436))
					texobj = idVar(idVar(global::tl_edit, temp), block_tex_material);
				else
					if (name == /*"frameeditorblocktexnormal"*/ STR(1437))
						texobj = idVar(idVar(global::tl_edit, temp), block_tex_normal);
					else
						if (name == /*"frameeditorblocktex"*/ STR(1435))
							texobj = idVar(idVar(global::tl_edit, temp), block_tex);
				
				
				if (idVar(global::tl_edit, type) == e_tl_type_BLOCK && idVar(global::tl_edit, part_of) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_of), type) == e_tl_type_SCENERY)
					{
						VarType temp = idVar(idVar(global::tl_edit, part_of), temp);
						withOne (Object, temp, self->id)
						{
							if (name == /*"frameeditorblocktexmaterial"*/ STR(1436))
							{
								if (idVar(sVar(block_tex_material), type) == e_res_type_PACK || idVar(sVar(block_tex_material), type) == e_res_type_BLOCK_SHEET)
									texobj = sVar(block_tex_material);
							}
							else
								if (name == /*"frameeditorblocktexnormal"*/ STR(1437))
								{
									if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK || idVar(sVar(block_tex_normal), type) == e_res_type_BLOCK_SHEET)
										texobj = sVar(block_tex_normal);
								}
								else
									if (name == /*"frameeditorblocktex"*/ STR(1435))
									{
										if (idVar(sVar(block_tex), type) == e_res_type_PACK || idVar(sVar(block_tex), type) == e_res_type_BLOCK_SHEET)
											texobj = sVar(block_tex);
									}
							
							
						}
						
					}
				}
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idInt(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1438: // frameeditoritemtex
			case 1439: // frameeditoritemtexmaterial
			case 1440: // frameeditoritemtexnormal
			{
				VarType texobj;
				if (name == /*"frameeditoritemtexmaterial"*/ STR(1439))
					texobj = idVar(idVar(global::tl_edit, temp), item_tex_material);
				else
					if (name == /*"frameeditoritemtexnormal"*/ STR(1440))
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_normal);
					else
						texobj = idVar(idVar(global::tl_edit, temp), item_tex);
				
				
				if (idVar(texobj, type) == e_res_type_TEXTURE)
					menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), idVar(texobj, texture) });
				else
					if (idInt(texobj, item_sheet_texture) != null_)
						menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 1441: // frameeditorshapetex
			case 1442: // frameeditorshapetexmaterial
			case 1443: // frameeditorshapetexnormal
			{
				VarType texobj;
				if (idVar(global::tl_edit, temp) == null_)
					texobj = null_;
				else
					if (name == /*"frameeditorshapetex"*/ STR(1441))
						texobj = idVar(idVar(global::tl_edit, temp), shape_tex);
					else
						if (name == /*"frameeditorshapetexmaterial"*/ STR(1442))
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_material);
						else
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_normal);
					
				
				
				if (texobj != null_)
				{
					if (Obj(texobj)->subAssetId == ID_obj_timeline)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }) });
					else
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(texobj, display_name) }), idVar(texobj, texture) });
					
					menu_add_item({ IntType(0), text_get({ /*"listnone"*/ STR(789) }) });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"frameeditorshapetex"*/ STR(1441) && idVar(global::tl_edit, type) != e_tl_type_PATH)
				{
					withAll (obj_timeline, self->id)
						if (self->id != texobj && self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 1444: // frameeditorcameralensdirttexture
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, null_, ID_action_tl_frame_cam_lens_dirt_tex_browse });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1445: // frameeditorlightgobotexture
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), text_get({ /*"listnone"*/ STR(789) }) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1348) }), null_, null_, ID_action_tl_frame_light_gobo_tex_browse });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1446: // frameeditorsoundfile
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(789) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SOUND)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1447: // frameeditortextfont
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(814), idVar(idVar(idVar(global::tl_edit, temp), text_font), display_name) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != idVar(idVar(global::tl_edit, temp), text_font) && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1448: // settingsminecraftversion
			{
				ArrType files = file_find(minecraft_directory, /*".midata"*/ STR(100));
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(files)); i++)
				{
					VarType fn = filename_new_ext(filename_name(files.Value(i)), /*""*/ STR(0));
					menu_add_item({ fn, fn });
				}
				break;
			}
			
			case 1449: // rendershadowssunbuffersize
			case 1450: // rendershadowsspotbuffersize
			case 1451: // rendershadowspointbuffersize
			{
				menu_add_item({ IntType(256), text_get({ /*"rendershadowsbuffersize256"*/ STR(1452) }) + /*" (256x256)"*/ STR(1453) });
				menu_add_item({ IntType(512), text_get({ /*"rendershadowsbuffersize512"*/ STR(1454) }) + /*" (512x512)"*/ STR(1455) });
				menu_add_item({ IntType(1024), text_get({ /*"rendershadowsbuffersize1024"*/ STR(1456) }) + /*" (1024x1024)"*/ STR(1457) });
				menu_add_item({ IntType(2048), text_get({ /*"rendershadowsbuffersize2048"*/ STR(1458) }) + /*" (2048x2048)"*/ STR(1459) });
				menu_add_item({ IntType(4096), text_get({ /*"rendershadowsbuffersize4096"*/ STR(1460) }) + /*" (4096x4096)"*/ STR(1461) });
				if (name != /*"rendershadowspointbuffersize"*/ STR(1451))
					menu_add_item({ IntType(8192), text_get({ /*"rendershadowsbuffersize8192"*/ STR(1462) }) + /*" (8192x8192)"*/ STR(1463) });
				break;
			}
			
			case 1464: // settingswatermarkpositionx
			{
				menu_add_item({ /*"left"*/ STR(203), text_get({ /*"settingswatermarkleft"*/ STR(1465) }) });
				menu_add_item({ /*"center"*/ STR(1466), text_get({ /*"settingswatermarkcenter"*/ STR(1467) }) });
				menu_add_item({ /*"right"*/ STR(204), text_get({ /*"settingswatermarkright"*/ STR(1468) }) });
				break;
			}
			
			case 1469: // settingswatermarkpositiony
			{
				menu_add_item({ /*"top"*/ STR(202), text_get({ /*"settingswatermarktop"*/ STR(1470) }) });
				menu_add_item({ /*"center"*/ STR(1466), text_get({ /*"settingswatermarkcenter"*/ STR(1467) }) });
				menu_add_item({ /*"bottom"*/ STR(201), text_get({ /*"settingswatermarkbottom"*/ STR(1471) }) });
				break;
			}
			
			case 1472: // projectvideosize
			case 1473: // exportmovievideosize
			case 1474: // exportimageimagesize
			case 1475: // frameeditorcameravideosize
			{
				if (ObjType(obj_menu, sVar(menu_current))->menu_name == /*"frameeditorcameravideosize"*/ STR(1475))
					menu_add_item({ null_, text_get({ /*"frameeditorcameravideosizeuseproject"*/ STR(1476) }) });
				for (IntType i = IntType(0); i < ds_list_size(global::videotemplate_list); i++)
					withOne (Object, DsList(global::videotemplate_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"projectvideosizetemplate"*/ STR(1477) + idVar(self->id, name) }) + /*" ("*/ STR(1156) + string(sVar(width)) + /*"x"*/ STR(852) + string(sVar(height)) + /*")"*/ STR(1132) });
				
				menu_add_item({ IntType(0), text_get({ /*"projectvideosizecustom"*/ STR(1478) }) });
				break;
			}
			
			case 1479: // exportmovieformat
			{
				menu_add_item({ /*"mp4"*/ STR(61), text_get({ /*"exportmovieformatmp4"*/ STR(1480) }) });
				menu_add_item({ /*"mov"*/ STR(62), text_get({ /*"exportmovieformatmov"*/ STR(1481) }) });
				menu_add_item({ /*"wmv"*/ STR(63), text_get({ /*"exportmovieformatwmv"*/ STR(1482) }) });
				menu_add_item({ /*"png"*/ STR(64), text_get({ /*"exportmovieformatpng"*/ STR(1483) }) });
				break;
			}
			
			case 1484: // exportmovievideoquality
			{
				for (IntType i = IntType(0); i < ds_list_size(global::videoquality_list); i++)
					withOne (Object, DsList(global::videoquality_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"exportmovievideoquality"*/ STR(1484) + idVar(self->id, name) }) });
				
				menu_add_item({ IntType(0), text_get({ /*"exportmovievideoqualitycustom"*/ STR(1485) }) });
				break;
			}
			
			case 1486: // exportmovieframerate
			{
				menu_add_item({ IntType(24), /*"24"*/ STR(1487) });
				menu_add_item({ IntType(30), /*"30"*/ STR(1488) });
				menu_add_item({ IntType(60), /*"60"*/ STR(1489) });
				menu_add_item({ IntType(0), text_get({ /*"exportmovieframeratecustom"*/ STR(1490) }) });
				break;
			}
			
			case 1491: // projectrendersettings
			{
				menu_add_item({ /*""*/ STR(0), text_get({ /*"projectrendersettingscustom"*/ STR(1492) }) });
				menu_add_item({ /*"performance"*/ STR(1493), text_get({ /*"projectrendersettingsperformance"*/ STR(1494) }), null_ });
				menu_add_item({ /*"balanced"*/ STR(1495), text_get({ /*"projectrendersettingsbalanced"*/ STR(1496) }), null_ });
				menu_add_item({ /*"extreme"*/ STR(1497), text_get({ /*"projectrendersettingsextreme"*/ STR(1498) }), null_ });
				StringType file = file_find_first(render_directory + /*"*.mirender"*/ STR(1499), IntType(0));
				while (file != /*""*/ STR(0))
				{
					if (file != /*"performance.mirender"*/ STR(1500) && file != /*"balanced.mirender"*/ STR(1501) && file != /*"extreme.mirender"*/ STR(1502))
						menu_add_item({ filename_change_ext(file, /*""*/ STR(0)), filename_change_ext(file, /*""*/ STR(0)), null_ });
					file = file_find_next();
				}
				
				break;
			}
			
			case 1503: // timelineeditorblendmode
			{
				for (IntType i = IntType(0); i < ds_list_size(global::blend_mode_list); i++)
					menu_add_item({ DsList(global::blend_mode_list).Value(i), text_get({ /*"timelineeditorblendmode"*/ STR(1503) + DsList(global::blend_mode_list).Value(i) }) });
				break;
			}
			
			case 1504: // startupsortby
			{
				list_item_add(text_get({ /*"recentsortdatenewest"*/ STR(1505) }), e_recent_sort_date_newest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortdateoldest"*/ STR(1506) }), e_recent_sort_date_oldest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortnameaz"*/ STR(1507) }), e_recent_sort_name_az, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortnameza"*/ STR(1508) }), e_recent_sort_name_za, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				break;
			}
			
			case 1509: // timelinemarkercolor
			{
				for (IntType i = IntType(0); i <= IntType(8); i++)
				{
					list_item_add(text_get({ /*"timelinemarkercolor"*/ STR(1509) + string(i) }), i, /*""*/ STR(0), ID_spr_16, null_, null_, null_);
					ObjType(obj_list_item, global::list_item_last)->thumbnail_blend = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(i);
				}
				break;
			}
			
			case 1510: // settingslanguage
			{
				withAll (obj_language, self->id)
					list_item_add(ObjType(obj_language, self->id)->name, languages_directory + ObjType(obj_language, self->id)->filename, ObjType(obj_language, self->id)->locale, null_, null_, null_, ID_action_setting_language_load);
				
				break;
			}
			
			case 1511: // viewmodepass
			{
				for (IntType i = IntType(0); i < e_render_pass_amount; i++)
					list_item_add(text_get({ /*"viewmodepass"*/ STR(1511) + DsList(global::render_pass_list).Value(i) }), i);
				break;
			}
			
			case 1512: // viewcameramain
			case 1513: // viewcamerasecond
			{
				list_item_add(text_get({ /*"viewcamerawork"*/ STR(1514) }), -IntType(4));
				VarType tlname = (sInt(timeline_camera) == -IntType(4) ? text_get({ /*"viewcamerawork"*/ STR(1514) }) : ObjType(obj_timeline, sInt(timeline_camera))->display_name);
				list_item_add(text_get({ /*"viewcameraactive"*/ STR(1515), tlname }), -IntType(5));
				withAll (obj_timeline, self->id)
					if (self->type == e_tl_type_CAMERA)
						list_item_add(self->display_name, self->id);
				
				break;
			}
			
			case 1516: // worldimportworld
			{
				world_import_world_menu_init();
				break;
			}
			
			case 1517: // worldimportdimension
			{
				world_import_dimension_menu_init();
				break;
			}
			
			case 1518: // settingsinterfacescale
			{
				menu_add_item({ IntType(1), /*"100%"*/ STR(1519) });
				if (interface_scale_default_get() >= IntType(2))
					menu_add_item({ IntType(2), /*"200%"*/ STR(1520) });
				if (interface_scale_default_get() >= IntType(3))
					menu_add_item({ IntType(3), /*"300%"*/ STR(1521) });
				break;
			}
			
			case 1522: // renderalphamode
			case 1523: // timelineeditoralphamode
			{
				if (name == /*"timelineeditoralphamode"*/ STR(1523))
					menu_add_item({ e_alpha_mode_DEFAULT, text_get({ /*"renderalphamodedefault"*/ STR(1524) }) });
				menu_add_item({ e_alpha_mode_HASHED, text_get({ /*"renderalphamodehashed"*/ STR(1525) }) });
				menu_add_item({ e_alpha_mode_BLEND, text_get({ /*"renderalphamodeblend"*/ STR(1526) }) });
				break;
			}
			
			case 1527: // rendertonemapper
			case 1528: // frameeditorcameratonemapper
			{
				menu_add_item({ e_tonemapper_NONE, text_get({ /*"rendertonemappernone"*/ STR(1529) }) });
				menu_add_item({ e_tonemapper_REINHARD, text_get({ /*"rendertonemapperreinhard"*/ STR(1530) }) });
				menu_add_item({ e_tonemapper_ACES, text_get({ /*"rendertonemapperaces"*/ STR(1531) }) });
				break;
			}
			
			case 1532: // armoreditorpatternhelmet
			case 1533: // armoreditorpatternchestplate
			case 1534: // armoreditorpatternleggings
			case 1535: // armoreditorpatternboots
			{
				menu_add_item({ /*"none"*/ STR(910), text_get({ /*"armoreditorpattern"*/ STR(1536) + /*"none"*/ STR(910) }) });
				for (IntType i = IntType(0); i < ds_list_size((IntType)(global::minecraft_armor_trim_pattern_list)); i++)
					menu_add_item({ DsList(global::minecraft_armor_trim_pattern_list).Value(i), text_get({ /*"armoreditorpattern"*/ STR(1536) + DsList(global::minecraft_armor_trim_pattern_list).Value(i) }) });
				break;
			}
			
			case 1537: // armoreditormaterialhelmet
			case 1538: // armoreditormaterialchestplate
			case 1539: // armoreditormaterialleggings
			case 1540: // armoreditormaterialboots
			{
				for (IntType i = IntType(0); i < ds_list_size((IntType)(global::minecraft_armor_trim_material_list)); i++)
					menu_add_item({ DsList(global::minecraft_armor_trim_material_list).Value(i), text_get({ /*"armoreditormaterial"*/ STR(1541) + DsList(global::minecraft_armor_trim_material_list).Value(i) }) });
				break;
			}
			
			case 1542: // timelineeditorglinttex
			{
				RealType itemglint = (idVar(global::tl_edit, glint_mode) == e_glint_ITEM);
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, (itemglint > 0) ? ObjType(obj_resource, global::mc_res)->glint_item_texture : ObjType(obj_resource, global::mc_res)->glint_entity_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idInt(res, glint_entity_texture) > 0 || idInt(res, glint_item_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), (itemglint > 0) ? idInt(res, glint_item_texture) : idInt(res, glint_entity_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1543: // frameeditortransition
			{
				for (IntType i = IntType(0); i < ds_list_size(global::transition_list_order); i++)
					menu_add_item({ DsList(global::transition_list_order).Value(i), text_get({ /*"menu"*/ STR(1102) + DsList(global::transition_list_order).Value(i) }) });
				break;
			}
			
		}
		
		return list_init_end(self);
	}
	
}
