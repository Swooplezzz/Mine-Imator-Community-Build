/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.10.18 22:48:01 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	BoolType app_mouse_box(ScopeAny self, VarType xx, VarType yy, VarType w, VarType h, StringType busy)
	{
		return (gmlGlobal::mouse_x >= xx && gmlGlobal::mouse_y >= yy && gmlGlobal::mouse_x < xx + w && gmlGlobal::mouse_y < yy + h && (sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == busy) && sStr(popup_ani_type) == /*""*/ STR(0));
	}
	
	void app_mouse_clear(ScopeAny self)
	{
		sBool(mouse_left) = false;
		sBool(mouse_left_pressed) = false;
		sBool(mouse_left_double_pressed) = false;
		sBool(mouse_left_released) = false;
		sBool(mouse_right) = false;
		sBool(mouse_right_pressed) = false;
		sBool(mouse_right_released) = false;
		sBool(mouse_middle) = false;
		sBool(mouse_middle_pressed) = false;
		sInt(mouse_click_count) = IntType(0);
		mouse_clear(mb_left);
		mouse_clear(mb_right);
		mouse_clear(mb_middle);
	}
	
	RealType app_mouse_wrap(VarType xx, VarType yy, VarType w, VarType h)
	{
		if (!window_mouse_get_permission())
			return IntType(0);
		VarType setx, sety;
		RealType size;
		setx = gmlGlobal::mouse_x;
		sety = gmlGlobal::mouse_y;
		size = IntType(8);
		if ((gmlGlobal::mouse_x - (size / 2.0)) < xx)
		{
			setx = xx + w - size;
			global::_app->mouse_wrap_x--;
		}
		if ((gmlGlobal::mouse_y - (size / 2.0)) < yy)
		{
			sety = yy + h - size;
			global::_app->mouse_wrap_y--;
		}
		if (gmlGlobal::mouse_x > (xx + w - (size / 2.0)) || (display_mouse_get_x() > (window_get_x() + window_get_width()) - (size / 2.0)))
		{
			setx = xx + size;
			global::_app->mouse_wrap_x++;
		}
		if (gmlGlobal::mouse_y > (yy + h - (size / 2.0)) || (display_mouse_get_y() > (window_get_y() + window_get_height()) - (size / 2.0)))
		{
			sety = yy + size;
			global::_app->mouse_wrap_y++;
		}
		if (setx != gmlGlobal::mouse_x || sety != gmlGlobal::mouse_y)
		{
			window_mouse_set((IntType)(setx), (IntType)(sety));
			global::_app->mouse_current_x = setx;
			global::_app->mouse_current_y = sety;
		}
		return 0.0;
	}
	
	void app_start_place(ScopeAny self, IntType tl, BoolType spawn)
	{
		sVar(window_busy) = /*"place"*/ STR(114);
		sInt(place_tl) = tl;
		sBool(place_tl_render) = false;
		sBool(place_spawn) = spawn;
		ObjType(obj_view, sInt(view_main))->update_depth = true;
		ObjType(obj_view, sInt(view_main))->surface_depth_value = 0.995;
		ObjType(obj_view, sInt(view_second))->update_depth = true;
		ObjType(obj_view, sInt(view_second))->surface_depth_value = 0.995;
		withOne (obj_timeline, sInt(place_tl), self->id)
			tl_mark_placed(ScopeAny(self), true);
		
	}
	
	void app_stop_place()
	{
		withOne (obj_timeline, global::_app->place_tl, global::_app->id)
			tl_mark_placed(ScopeAny(self), false);
		
		global::_app->place_tl = null_;
		global::_app->window_busy = /*""*/ STR(0);
		mouse_clear(mb_left);
	}
	
	RealType app_update_place(ScopeAny self)
	{
		if (sVar(window_busy) != /*"place"*/ STR(114))
			return IntType(0);
		sInt(mouse_cursor) = cr_drag;
		if (vec3_length(vec3_sub(sVec(cam_work_from), sVec(place_cam_work_from))) > IntType(1) || sVar(place_cam_work_angle_look_xy) != sVar(cam_work_angle_look_xy) || sVar(place_cam_work_angle_look_z) != sVar(cam_work_angle_look_z))
		{
			ObjType(obj_view, sInt(view_main))->update_depth = true;
			ObjType(obj_view, sInt(view_second))->update_depth = true;
			sVec(place_cam_work_from) = sVec(cam_work_from);
			sVar(place_cam_work_angle_look_xy) = sVar(cam_work_angle_look_xy);
			sVar(place_cam_work_angle_look_z) = sVar(cam_work_angle_look_z);
		}
		if (sVar(place_view_pos) != null_)
		{
			RealType snappos = sReal(setting_snap);
			if (keyboard_check(vk_shift))
				snappos = !(snappos > 0);
			if (snappos > 0)
			{
				sVar(place_view_pos)[X_] = snap(sVar(place_view_pos).Value(X_), sReal(setting_snap_size_position));
				sVar(place_view_pos)[Y_] = snap(sVar(place_view_pos).Value(Y_), sReal(setting_snap_size_position));
				sVar(place_view_pos)[Z_] = snap(sVar(place_view_pos).Value(Z_), sReal(setting_snap_size_position));
			}
			withOne (obj_timeline, sInt(place_tl), global::_app->id)
			{
				self->value[e_value_POS_X] = global::_app->place_view_pos.Value(X_);
				self->value[e_value_POS_Y] = global::_app->place_view_pos.Value(Y_);
				self->value[e_value_POS_Z] = global::_app->place_view_pos.Value(Z_);
				if (global::_app->place_spawn)
				{
					self->value_default[e_value_POS_X] = self->value.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = self->value.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = self->value.Value(e_value_POS_Z);
				}
				self->update_matrix = true;
			}
			
			tl_update_matrix(self);
			withOne (obj_history, sArr(history).Value(IntType(0)), global::_app->id)
			{
				self->value_default[e_value_POS_X] = global::_app->place_view_pos.Value(X_);
				self->value_default[e_value_POS_Y] = global::_app->place_view_pos.Value(Y_);
				self->value_default[e_value_POS_Z] = global::_app->place_view_pos.Value(Z_);
			}
			
			sVar(place_view_pos) = null_;
		}
		if (sInt(place_view_mouse) == null_ && sBool(mouse_left_pressed))
			app_stop_place();
		if (keyboard_check_pressed(vk_escape))
		{
		}
		sInt(place_view_mouse) = null_;
		return 0.0;
	}
	
	void tl_mark_placed(ScopeAny self, BoolType active)
	{
		sBool(placed) = active;
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
		{
			withOne (obj_timeline, DsList(sInt(tree_list)).Value(t), self->id)
			{
				self->parent_is_placed = active;
				tl_mark_placed(ScopeAny(self), active);
			}
			
		}
	}
	
	void action_setting_place_new(ScopeAny self, VarType argument0)
	{
		sVar(setting_place_new) = argument0;
	}
	
	BoolType app_startup(ScopeAny self)
	{
		sVar(startup_error) = true;
		if (!lib_startup())
			return false;
		if (!is_cpp())
			if (!file_lib_startup())
				return false;
		if (!file_exists_lib(legacy_file))
			return missing_file(legacy_file);
		if (!file_exists_lib(language_file))
			return missing_file(language_file);
		vertex_format_startup(self);
		if (!shader_startup())
			return false;
		if (!legacy_startup())
			return false;
		app_startup_lists(self);
		app_startup_collapse();
		app_startup_micro_animations();
		app_startup_window(self);
		app_startup_themes(self);
		app_startup_fonts(self);
		app_startup_interface_lists();
		app_startup_keybinds();
		app_startup_recent(self);
		toasts_startup(self);
		json_startup();
		settings_startup(self);
		project_startup(self);
		render_startup(self);
		camera_startup(self);
		if (!minecraft_assets_startup(self))
			return false;
		sVar(startup_error) = false;
		return true;
	}
	
	void app_startup_collapse()
	{
		global::collapse_ani = IntType(1);
		global::collapse_groups = IntType(0);
		global::collapse_map = ds_map_create();
		collapse_register(/*"backup"*/ STR(115));
		collapse_register(/*"watermark"*/ STR(29));
		collapse_register(/*"file"*/ STR(116));
		collapse_register(/*"edit"*/ STR(117));
		collapse_register(/*"tools"*/ STR(118));
		collapse_register(/*"viewport"*/ STR(119));
		collapse_register(/*"timeline"*/ STR(120));
		collapse_register(/*"camera"*/ STR(121));
		collapse_register(/*"texfilter"*/ STR(122));
		collapse_register(/*"ssao"*/ STR(123));
		collapse_register(/*"shadows"*/ STR(124));
		collapse_register(/*"subsurface"*/ STR(125));
		collapse_register(/*"indirect"*/ STR(126));
		collapse_register(/*"reflections"*/ STR(127));
		collapse_register(/*"glow"*/ STR(128));
		collapse_register(/*"glow_falloff"*/ STR(129));
		collapse_register(/*"aa"*/ STR(130));
		collapse_register(/*"light_management"*/ STR(131));
		collapse_register(/*"models_scenery"*/ STR(132));
		collapse_register(/*"sunlight"*/ STR(133));
		collapse_register(/*"sky"*/ STR(134));
		collapse_register(/*"clouds"*/ STR(135));
		collapse_register(/*"ground"*/ STR(136));
		collapse_register(/*"fog"*/ STR(137));
		collapse_register(/*"wind"*/ STR(138));
		collapse_register(/*"follow_path"*/ STR(139));
		collapse_register(/*"rotatepoint"*/ STR(140));
		collapse_register(/*"ik"*/ STR(141));
		collapse_register(/*"followrot"*/ STR(142));
		collapse_register(/*"followpos"*/ STR(143));
		collapse_register(/*"followscale"*/ STR(144));
		collapse_register(/*"path_shape"*/ STR(145));
		collapse_register(/*"path_shape_tube"*/ STR(146));
		collapse_register(/*"light_management_cam"*/ STR(147));
		collapse_register(/*"aperture"*/ STR(148));
		collapse_register(/*"camshake"*/ STR(149));
		collapse_register(/*"dof"*/ STR(150));
		collapse_register(/*"dof_fringe"*/ STR(151));
		collapse_register(/*"bloom"*/ STR(152));
		collapse_register(/*"lensdirt"*/ STR(153));
		collapse_register(/*"clrcor"*/ STR(154));
		collapse_register(/*"grain"*/ STR(155));
		collapse_register(/*"vignette"*/ STR(156));
		collapse_register(/*"ca"*/ STR(157));
		collapse_register(/*"distort"*/ STR(158));
		collapse_register(/*"itemslot"*/ STR(159));
		collapse_register(/*"material_color"*/ STR(160));
		collapse_register(/*"material_surface"*/ STR(161));
		collapse_register(/*"material_subsurface"*/ STR(162));
	}
	
	void app_startup_fonts(ScopeAny self)
	{
		sInt(font_subheading) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(163), (IntType)(8.5), false, false, IntType(32), IntType(1024));
		sInt(font_label) = font_add(fonts_directory + /*"noto_bold.ttf"*/ STR(164), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_value) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(165), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_digits) = font_add(fonts_directory + /*"notomono_regular.ttf"*/ STR(166), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_caption) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(165), IntType(8), false, false, IntType(32), IntType(1024));
		sInt(font_button) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(163), (IntType)(9.5), false, false, IntType(32), IntType(1024));
		sVar(font_upgrade) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(165), IntType(18), false, false, IntType(32), IntType(1024));
		sInt(font_heading) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(163), IntType(10), false, false, IntType(32), IntType(1024));
		sVar(font_body_big) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(165), IntType(12), false, false, IntType(32), IntType(1024));
		sInt(font_heading_big) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(163), IntType(13), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold_big) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(167), IntType(11), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(167), IntType(10), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold_secondary) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(167), (IntType)(8.5), false, false, IntType(32), IntType(1024));
	}
	
	void app_startup_interface(ScopeAny self)
	{
		window_main_restore(sVar(setting_main_window_rect), sVar(setting_main_window_maximized));
		app_startup_shortcut_bar();
		app_startup_interface_bench();
		app_startup_interface_timeline();
		app_startup_interface_export();
		app_startup_interface_menus();
		app_startup_interface_settings_menus();
		app_startup_interface_popups();
		app_startup_interface_panels();
		app_startup_interface_tabs();
		app_startup_interface_toolbar();
		app_startup_interface_views();
		app_startup_interface_world_import();
		app_startup_interface_context_menu();
		togglebutton_reset(self);
		textbox_startup();
		history_startup();
		textfield_group_reset(self);
		background_ground_startup();
		background_sky_startup();
		sInt(http_assets) = http_get(link_assets_versions);
		project_load_startup();
		if (sStr(project_startup_fn) == /*""*/ STR(0))
		{
			if (dev_mode)
			{
				popup_newproject_clear(self);
				if (dev_mode_project != /*""*/ STR(0))
				{
					project_reset(self);
					if (!file_exists_lib(dev_mode_project))
					{
						sStr(setting_project_folder) = filename_dir(filename_dir(dev_mode_project));
						ObjType(obj_popup, sInt(popup_newproject))->folder = filename_name(filename_dir(dev_mode_project));
						ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_name)->text = string_replace(filename_name(dev_mode_project), filename_ext(dev_mode_project), /*""*/ STR(0));
						project_create(self);
					}
					else
						project_load(self, { dev_mode_project });
					
				}
				else
				{
					StringType projfile = sStr(setting_project_folder) + ObjType(obj_popup, sInt(popup_newproject))->folder + /*"/New Project.miproject"*/ STR(168);
					if (file_exists_lib(projfile))
						project_load(self, { projfile });
					else
						project_create(self);
					
				}
				
				sStr(window_state) = /*""*/ STR(0);
			}
			else
			{
				project_reset(self);
				if (!file_exists_lib(settings_file))
					popup_show(self, sInt(popup_welcome));
			}
			
		}
		else
		{
			popup_newproject_clear(self);
			project_reset(self);
			project_load(self, { sStr(project_startup_fn) });
			sStr(window_state) = /*""*/ STR(0);
		}
		
	}
	
	void app_startup_interface_bench()
	{
		global::_app->bench_open = false;
		global::_app->bench_hover_ani = IntType(0);
		global::_app->bench_hover_ani_goal = IntType(0);
		global::_app->bench_click_ani = IntType(0);
		global::_app->bench_click_ani_goal = IntType(0);
		global::_app->bench_rotate_ani = IntType(0);
		global::_app->bench_button_hover = false;
		global::_app->bench_show_ani_type = /*""*/ STR(0);
		global::_app->bench_show_ani = IntType(0);
		global::_app->bench_settings_ani = IntType(0);
		global::_app->bench_height = IntType(325);
		global::_app->bench_type_list = list_new();
		global::list_edit = global::_app->bench_type_list;
		ObjType(obj_list, global::list_edit)->get_name = true;
		ObjType(obj_list, global::list_edit)->show_ticks = false;
		list_item_add(/*"typechar"*/ STR(169), e_tl_type_CHARACTER, /*""*/ STR(0), null_, icons_CHARACTER, null_, ID_bench_click);
		list_item_add(/*"typebodypart"*/ STR(170), e_tl_type_BODYPART, /*""*/ STR(0), null_, icons_PART, null_, ID_bench_click);
		list_item_add(/*"typemodel"*/ STR(171), e_tl_type_MODEL, /*""*/ STR(0), null_, icons_MODEL, null_, ID_bench_click);
		list_item_add(/*"typeitem"*/ STR(172), e_tl_type_ITEM, /*""*/ STR(0), null_, icons_ITEM, null_, ID_bench_click);
		list_item_add(/*"typescenery"*/ STR(173), e_tl_type_SCENERY, /*""*/ STR(0), null_, icons_SCENERY, null_, ID_bench_click);
		list_item_add(/*"typeblock"*/ STR(174), e_tl_type_BLOCK, /*""*/ STR(0), null_, icons_BLOCK, null_, ID_bench_click);
		list_item_add(/*"typespblock"*/ STR(175), e_tl_type_SPECIAL_BLOCK, /*""*/ STR(0), null_, icons_BLOCK_SPECIAL, null_, ID_bench_click);
		list_item_add(/*"typeshape"*/ STR(176), e_tl_type_SHAPE, /*""*/ STR(0), null_, icons_SHAPES, null_, ID_bench_click);
		list_item_add(/*"typetext"*/ STR(177), e_tl_type_TEXT, /*""*/ STR(0), null_, icons_TEXT, null_, ID_bench_click);
		list_item_add(/*"typepath"*/ STR(178), e_tl_type_PATH, /*""*/ STR(0), null_, icons_PATH, null_, ID_bench_click);
		list_item_add(/*"typecamera"*/ STR(179), e_tl_type_CAMERA, /*""*/ STR(0), null_, icons_CAMERA, null_, ID_bench_click);
		list_item_add(/*"typeparticles"*/ STR(180), e_tl_type_PARTICLE_SPAWNER, /*""*/ STR(0), null_, icons_FIREWORKS, null_, ID_bench_click);
		list_item_add(/*"typelightsource"*/ STR(181), e_tl_type_LIGHT_SOURCE, /*""*/ STR(0), null_, icons_LIGHT_POINT, null_, ID_bench_click);
		list_item_add(/*"typeaudio"*/ STR(182), e_tl_type_AUDIO, /*""*/ STR(0), null_, icons_NOTE, null_, ID_bench_click);
		list_item_add(/*"typebackground"*/ STR(183), e_tl_type_BACKGROUND, /*""*/ STR(0), null_, icons_CLOUD, null_, ID_bench_click);
		global::list_edit = null_;
		global::_app->bench_settings = (new obj_bench_settings)->id;
		withOne (obj_bench_settings, global::_app->bench_settings, global::_app->id)
		{
			self->posx = IntType(0);
			self->posy = IntType(0);
			self->height = IntType(0);
			self->height_goal = global::_app->bench_height;
			temp_event_create(ScopeAny(self));
			self->model_name = default_model;
			self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
			self->model_part_name = default_model_part;
			temp_update_model(ScopeAny(self));
			temp_update_model_part(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			self->block_state = array_copy_1d(ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(sVar(block_name)))->default_state);
			temp_particles_init(ScopeAny(self));
			self->model_tex = global::mc_res;
			self->model_tex_material = global::mc_res;
			self->model_tex_normal = global::mc_res;
			self->item_tex = global::mc_res;
			self->item_tex_material = global::mc_res;
			self->item_tex_normal = global::mc_res;
			self->block_tex = global::mc_res;
			self->block_tex_material = global::mc_res;
			self->block_tex_normal = global::mc_res;
			self->text_font = global::mc_res;
			self->particle_preset = /*""*/ STR(0);
			self->type = e_temp_type_CHARACTER;
			self->shape_type = e_shape_type_CUBE;
			self->light_type = e_tl_type_POINT_LIGHT;
			self->preview = (new obj_preview)->id;
			self->char_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->char_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->char_list, /*"charname"*/ STR(184), IntType(0));
			for (IntType c = IntType(0); c < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); c++)
				sortlist_add(self->char_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(c))->name);
			self->item_scroll = (new obj_scrollbar)->id;
			self->block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->block_list)->script = ID_action_bench_block_name;
			sortlist_column_add(self->block_list, /*"blockname"*/ STR(185), IntType(0));
			for (IntType b = IntType(0); b < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->block_list); b++)
				if (!(ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->timeline > 0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->tl_model_name == /*""*/ STR(0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->model_double > 0)
					sortlist_add(self->block_list, ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->name);
			self->special_block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->special_block_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->special_block_list, /*"spblockname"*/ STR(186), IntType(0));
			for (IntType c = IntType(0); c < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); c++)
				sortlist_add(self->special_block_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(c))->name);
			self->bodypart_model_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->bodypart_model_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->bodypart_model_list, /*"bodypartmodelname"*/ STR(187), IntType(0));
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(m))->name);
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(m))->name);
			self->particles_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->particles_list)->script = ID_action_bench_particles;
			sortlist_column_add(self->particles_list, /*"particlepresetname"*/ STR(188), IntType(0));
		}
		
	}
	
	void app_startup_interface_context_menu()
	{
		global::_app->context_group_copy_list = ds_list_create();
		for (IntType i = IntType(0); i < e_context_group_amount; i++)
			ds_list_add({ global::_app->context_group_copy_list, null_ });
		global::_app->context_menu_copy_axis_edit = X_;
		global::_app->context_menu_value_type = e_context_type_NONE;
		global::_app->context_menu_value = null_;
		global::_app->context_menu_value_name = /*""*/ STR(0);
		global::_app->context_menu_copy_type = e_context_type_NONE;
		global::_app->context_menu_copy = null_;
		global::_app->context_menu_value_script = null_;
		global::_app->context_menu_value_default = IntType(0);
		global::_app->context_menu_name = /*""*/ STR(0);
		global::_app->context_menu_level_amount = IntType(0);
		global::_app->context_menu_level = ds_list_create();
		global::_app->context_menu_mouseon = false;
		global::_app->context_menu_mouseon_level = IntType(0);
		global::_app->context_menu_mouseon_item = null_;
		global::_app->context_menu_mouseon_reset = false;
		global::_app->context_menu_busy_prev = /*""*/ STR(0);
		global::_app->context_menu_min_x = no_limit;
		global::_app->context_menu_min_y = no_limit;
		global::_app->context_menu_max_x = -no_limit;
		global::_app->context_menu_max_y = -no_limit;
		global::_app->context_menu_ani = /*""*/ STR(0);
		global::_app->context_menu_window = e_window_MAIN;
		global::_app->context_menu_tbx_action = false;
		global::_app->context_menu_tbx_cut = false;
		global::_app->context_menu_tbx_copy = false;
		global::_app->context_menu_tbx_paste = false;
		global::_app->context_menu_tbx_select_all = false;
		global::_app->context_menu_group_temp = null_;
		global::_app->context_menu_group = null_;
	}
	
	void app_startup_interface_export()
	{
		global::_app->export_surface = null_;
		global::_app->export_sample = IntType(0);
		global::_app->export_filename = /*""*/ STR(0);
		global::_app->export_escape_time = IntType(0);
		global::_app->exportmovie_format = /*""*/ STR(0);
		global::_app->exportmovie_marker_previous = IntType(0);
		global::_app->exportmovie_marker_start = IntType(0);
		global::_app->exportmovie_marker_end = IntType(0);
		global::_app->exportmovie_frame = IntType(0);
		global::_app->exportmovie_frame_rate = IntType(0);
		global::_app->exportmovie_framespersecond = IntType(0);
		global::_app->exportmovie_high_quality = true;
		global::_app->exportmovie_start = null_;
		global::_app->exportmovie_buffer = null_;
	}
	
	void app_startup_interface_lists()
	{
		global::list_edit = null_;
		global::list_item_last = null_;
		global::list_item_value = null_;
		global::list_item_script = null_;
		global::list_item_script_value = null_;
	}
	
	void app_startup_interface_menus()
	{
		global::_app->menu_list = ds_list_create();
		global::_app->menu_count = IntType(0);
		global::_app->menu_current = IntType(0);
		global::_app->menu_popup = null_;
		global::_app->menu_model_current = null_;
		global::_app->menu_model_state = null_;
		global::_app->menu_model_state_current = null_;
		global::_app->menu_block_current = null_;
		global::_app->menu_block_state = null_;
		global::_app->menu_block_state_current = null_;
		global::_app->menu_bench = false;
	}
	
	void app_startup_interface_panels()
	{
		global::_app->panel_map = ds_string_map_create();
		DsMap(global::_app->panel_map)[/*"left_secondary"*/ STR(189)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"left_secondary"*/ STR(189)])->size = global::_app->setting_panel_left_bottom_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"left_secondary"*/ STR(189)])->location = /*"left_secondary"*/ STR(189);
		DsMap(global::_app->panel_map)[/*"right_secondary"*/ STR(190)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"right_secondary"*/ STR(190)])->size = global::_app->setting_panel_right_bottom_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"right_secondary"*/ STR(190)])->location = /*"right_secondary"*/ STR(190);
		DsMap(global::_app->panel_map)[/*"bottom"*/ STR(191)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"bottom"*/ STR(191)])->size = global::_app->setting_panel_bottom_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"bottom"*/ STR(191)])->location = /*"bottom"*/ STR(191);
		DsMap(global::_app->panel_map)[/*"top"*/ STR(192)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"top"*/ STR(192)])->size = global::_app->setting_panel_top_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"top"*/ STR(192)])->location = /*"top"*/ STR(192);
		DsMap(global::_app->panel_map)[/*"left"*/ STR(193)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"left"*/ STR(193)])->size = global::_app->setting_panel_left_top_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"left"*/ STR(193)])->location = /*"left"*/ STR(193);
		DsMap(global::_app->panel_map)[/*"right"*/ STR(194)] = (new obj_panel)->id;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"right"*/ STR(194)])->size = global::_app->setting_panel_right_top_size;
		ObjType(obj_panel, DsMap(global::_app->panel_map)[/*"right"*/ STR(194)])->location = /*"right"*/ STR(194);
		global::_app->panel_window_obj = (new obj_panel)->id;
		global::_app->panel_area_x = IntType(0);
		global::_app->panel_area_y = IntType(0);
		global::_app->panel_area_width = IntType(0);
		global::_app->panel_area_height = IntType(0);
		global::_app->panel_resize = null_;
		global::_app->panel_resize_size = IntType(0);
	}
	
	void app_startup_interface_popups()
	{
		global::_app->popup_welcome = new_popup({ /*"welcome"*/ STR(195), ID_popup_welcome_draw, IntType(420), IntType(159), true, false, false, false });
		global::_app->popup_about = new_popup({ /*"about"*/ STR(196), ID_popup_about_draw, IntType(542), IntType(480), true, true, false, true });
		global::_app->popup_newproject = new_popup({ /*"newproject"*/ STR(197), ID_popup_newproject_draw, IntType(380), null_, true });
		withOne (obj_popup, global::_app->popup_newproject, global::_app->id)
		{
			self->folder = /*""*/ STR(0);
			self->tbx_name = new_textbox(true, IntType(0), /*""*/ STR(0));
			self->tbx_author = new_textbox(true, IntType(0), /*""*/ STR(0));
			self->tbx_description = new_textbox(false, IntType(0), /*""*/ STR(0));
		}
		
		global::_app->popup_saveas = new_popup({ /*"saveas"*/ STR(198), ID_popup_saveas_draw, IntType(380), null_, true });
		withOne (obj_popup, global::_app->popup_saveas, global::_app->id)
		{
			self->folder = /*""*/ STR(0);
			self->tbx_name = new_textbox(true, IntType(0), /*""*/ STR(0));
			self->tbx_author = new_textbox(true, IntType(0), /*""*/ STR(0));
			self->tbx_description = new_textbox(false, IntType(0), /*""*/ STR(0));
		}
		
		global::_app->popup_loading = new_popup({ /*"loading"*/ STR(199), ID_popup_loading_draw, IntType(400), null_, true, true });
		withOne (obj_popup, global::_app->popup_loading, global::_app->id)
		{
			self->load_object = null_;
			self->load_script = null_;
			self->progress = IntType(0);
			self->text = /*""*/ STR(0);
		}
		
		global::_app->popup_downloadskin = new_popup({ /*"downloadskin"*/ STR(200), ID_popup_downloadskin_draw, IntType(300), null_, true });
		withOne (obj_popup, global::_app->popup_downloadskin, global::_app->id)
		{
			self->value_script = null_;
			self->username = /*""*/ STR(0);
			self->texture = null_;
			self->fail_message = /*""*/ STR(0);
			self->start_time = IntType(0);
			self->tbx_username = new_textbox(true, IntType(0), /*""*/ STR(0));
		}
		
		global::_app->popup_importimage = new_popup({ /*"importimage"*/ STR(201), ID_popup_importimage_draw, IntType(512), null_, true });
		withOne (obj_popup, global::_app->popup_importimage, global::_app->id)
		{
			self->filename = /*""*/ STR(0);
			self->filenames = ds_list_create();
			self->texture = null_;
			self->type = e_res_type_SKIN;
		}
		
		global::_app->popup_importitemsheet = new_popup({ /*"importitemsheet"*/ STR(202), ID_popup_importitemsheet_draw, IntType(288), null_, true });
		withOne (obj_popup, global::_app->popup_importitemsheet, global::_app->id)
		{
			self->filename = /*""*/ STR(0);
			self->value_script = null_;
			self->texture = null_;
			self->is_sheet = true;
			self->sheet_size = vec2(item_sheet_width, item_sheet_height);
			self->sheet_size_def = self->sheet_size;
			self->tbx_sheet_width = new_textbox_integer();
			self->tbx_sheet_height = new_textbox_integer();
		}
		
		global::_app->popup_exportmovie = new_popup({ /*"exportmovie"*/ STR(203), ID_popup_exportmovie_draw, IntType(350), null_, true });
		withOne (obj_popup, global::_app->popup_exportmovie, global::_app->id)
		{
			self->format = global::_app->setting_export_movie_format.Str();
			self->frame_rate = global::_app->setting_export_movie_frame_rate;
			self->framespersecond = global::_app->setting_export_movie_framespersecond;
			self->bit_rate = global::_app->setting_export_movie_bit_rate;
			self->video_quality = find_videoquality(self->bit_rate);
			self->include_audio = global::_app->setting_export_movie_include_audio;
			self->remove_background = global::_app->setting_export_movie_remove_background;
			self->include_hidden = global::_app->setting_export_movie_include_hidden;
			self->high_quality = global::_app->setting_export_movie_high_quality;
			self->watermark = global::_app->setting_export_movie_watermark;
			self->tbx_video_size_custom_width = new_textbox_integer();
			self->tbx_video_size_custom_height = new_textbox_integer();
			self->tbx_framespersecond = new_textbox_integer();
			self->tbx_bit_rate = new_textbox_integer();
		}
		
		global::_app->popup_exportimage = new_popup({ /*"exportimage"*/ STR(204), ID_popup_exportimage_draw, IntType(350), null_, true });
		withOne (obj_popup, global::_app->popup_exportimage, global::_app->id)
		{
			self->remove_background = global::_app->setting_export_image_remove_background;
			self->include_hidden = global::_app->setting_export_image_include_hidden;
			self->high_quality = global::_app->setting_export_image_high_quality;
			self->watermark = global::_app->setting_export_image_watermark;
			self->tbx_image_size_custom_width = new_textbox_integer();
			self->tbx_image_size_custom_height = new_textbox_integer();
		}
		
		global::_app->popup_upgrade = new_popup({ /*"upgrade"*/ STR(107), ID_popup_upgrade_draw, IntType(420), null_, true, false, true });
		withOne (obj_popup, global::_app->popup_upgrade, global::_app->id)
		{
			self->tbx_key = new_textbox(true, IntType(8), /*""*/ STR(0));
			self->warntext = /*""*/ STR(0);
			self->page = IntType(0);
			self->page_ani = IntType(1);
			self->page_ani_type = /*"right"*/ STR(194);
			self->open_advanced = false;
			self->custom_rendering = /*"default"*/ STR(99);
		}
		
		global::_app->popup_advanced = new_popup({ /*"advanced"*/ STR(205), ID_popup_advanced_draw, IntType(420), null_, true });
		global::_app->popup_modelbench = new_popup({ /*"modelbench"*/ STR(206), ID_popup_modelbench_draw, IntType(420), null_, true });
		withOne (obj_popup, global::_app->popup_modelbench, global::_app->id)
		{
			self->hidden = global::_app->setting_modelbench_popup_hidden;
			self->not_now = false;
		}
		
		global::_app->popup_pattern_editor = new_popup({ /*"patterneditor"*/ STR(207), ID_popup_pattern_editor_draw, IntType(550), null_, true, false, false, false });
		withOne (obj_popup, global::_app->popup_pattern_editor, global::_app->id)
		{
			self->preview = (new obj_preview)->id;
			ObjType(obj_preview, self->preview)->fov = IntType(25);
			ObjType(obj_preview, self->preview)->xy_lock = true;
			self->layer_scrollbar = (new obj_scrollbar)->id;
			self->layer_remove = null_;
			self->layer_edit = null_;
			self->pattern_edit = null_;
			self->pattern_edit_preview = null_;
			self->pattern_list_edit = ds_list_create();
			self->pattern_color_list_edit = ds_list_create();
			self->pattern_sprites = ArrType();
			self->res_ratio = IntType(1);
			self->pattern_resource = global::mc_res;
			self->update = false;
			self->layer_move = null_;
			self->layer_move_x = IntType(0);
			self->layer_move_y = IntType(0);
		}
		
	}
	
	void app_startup_interface_settings_menus()
	{
		global::_app->settings_menu_name = /*""*/ STR(0);
		global::_app->settings_menu_ani = IntType(0);
		global::_app->settings_menu_ani_type = /*""*/ STR(0);
		global::_app->settings_menu_window = e_window_MAIN;
		global::_app->settings_menu_x = IntType(0);
		global::_app->settings_menu_y = IntType(0);
		global::_app->settings_menu_w = IntType(0);
		global::_app->settings_menu_h = IntType(0);
		global::_app->settings_menu_h_max = null_;
		global::_app->settings_menu_button_w = IntType(0);
		global::_app->settings_menu_button_h = IntType(0);
		global::_app->settings_menu_amount = IntType(0);
		global::_app->settings_menu_primary = false;
		global::_app->settings_menu_script = null_;
		global::_app->settings_menu_above = false;
		global::_app->settings_menu_list = null_;
		global::_app->settings_menu_amount = IntType(0);
		global::_app->settings_menu_busy_prev = /*""*/ STR(0);
		global::_app->settings_menu_scroll = (new obj_scrollbar)->id;
		global::_app->settings_menu_steps = IntType(0);
		colorpicker_startup();
		global::_app->tbx_grid_rows = new_textbox_integer();
		global::_app->tbx_grid_columns = new_textbox_integer();
		global::_app->tbx_snap_position = new_textbox_decimals();
		global::_app->tbx_snap_rotation = new_textbox_decimals();
		global::_app->tbx_snap_scale = new_textbox_decimals();
	}
	
	void app_startup_interface_tabs()
	{
		global::_app->tab_move = null_;
		global::_app->tab_move_name = /*""*/ STR(0);
		global::_app->tab_move_x = IntType(0);
		global::_app->tab_move_width = IntType(0);
		global::_app->tab_move_direction = e_scroll_VERTICAL;
		global::_app->tab_move_box_x = IntType(0);
		global::_app->tab_move_box_y = IntType(0);
		global::_app->tab_move_box_width = IntType(0);
		global::_app->tab_move_box_height = IntType(0);
		global::_app->tab_move_mouseon_panel = null_;
		global::_app->tab_move_mouseon_panel_prev = null_;
		global::_app->tab_move_mouseon_position = IntType(0);
		global::_app->properties = new_tab(global::_app->setting_properties_location, true);
		withOne (obj_tab, global::_app->properties, global::_app->id)
		{
			self->project = tab_add_category(self, /*"project"*/ STR(208), icons_CLAPPERBOARD_SMALL, ID_tab_properties_project, false);
			withOne (obj_category, self->project, self->id)
			{
				self->tbx_name = new_textbox(true, IntType(0), /*""*/ STR(0));
				self->tbx_author = new_textbox(true, IntType(0), /*""*/ STR(0));
				self->tbx_description = new_textbox(false, IntType(0), /*""*/ STR(0));
				self->tbx_video_size_custom_width = new_textbox_integer();
				self->tbx_video_size_custom_height = new_textbox_integer();
				self->tbx_tempo = new_textbox_integer();
			}
			
			self->render = tab_add_category(self, /*"render"*/ STR(9), icons_CAMERA_PHOTO_SMALL, ID_tab_properties_render, false);
			withOne (obj_category, self->render, self->id)
			{
				self->tbx_ssao_radius = new_textbox_decimals();
				self->tbx_ssao_power = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_ssao_power)->suffix = /*"%"*/ STR(209);
				self->tbx_samples = new_textbox_integer();
				self->tbx_render_distance = new_textbox_integer();
				self->tbx_subsurface_samples = new_textbox_integer();
				self->tbx_subsurface_highlight = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_subsurface_highlight)->suffix = /*"%"*/ STR(209);
				self->tbx_subsurface_highlight_strength = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_subsurface_highlight_strength)->suffix = /*"%"*/ STR(209);
				self->tbx_indirect_precision = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_indirect_precision)->suffix = /*"%"*/ STR(209);
				self->tbx_indirect_blur_radius = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_indirect_blur_radius)->suffix = /*"%"*/ STR(209);
				self->tbx_indirect_strength = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_indirect_strength)->suffix = /*"%"*/ STR(209);
				self->tbx_reflections_precision = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_reflections_precision)->suffix = /*"%"*/ STR(209);
				self->tbx_reflections_thickness = new_textbox_decimals();
				self->tbx_reflections_fade_amount = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_reflections_fade_amount)->suffix = /*"%"*/ STR(209);
				self->tbx_glow_radius = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_glow_radius)->suffix = /*"%"*/ STR(209);
				self->tbx_glow_intensity = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_glow_intensity)->suffix = /*"%"*/ STR(209);
				self->tbx_glow_falloff_radius = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_glow_falloff_radius)->suffix = /*"%"*/ STR(209);
				self->tbx_glow_falloff_intensity = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_glow_falloff_intensity)->suffix = /*"%"*/ STR(209);
				self->tbx_aa_power = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_aa_power)->suffix = /*"%"*/ STR(209);
				self->tbx_block_emissive = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_block_emissive)->suffix = /*"%"*/ STR(209);
				self->tbx_block_subsurface_radius = new_textbox_decimals();
				self->tbx_texture_filtering_level = new_textbox_integer();
				self->tbx_exposure = new_textbox_decimals();
				self->tbx_gamma = new_textbox_decimals();
			}
			
			self->library = tab_add_category(self, /*"library"*/ STR(210), icons_LIBRARY_SMALL, ID_tab_properties_library, false);
			withOne (obj_category, self->library, self->id)
			{
				self->preview = (new obj_preview)->id;
				ObjType(obj_preview, self->preview)->spawn_active = true;
				self->list = (new obj_sortlist)->id;
				idBool(self->list, can_deselect) = true;
				idVar(self->list, script) = ID_action_lib_list;
				sortlist_column_add(self->list, /*"libname"*/ STR(211), IntType(0));
				sortlist_column_add(self->list, /*"libtype"*/ STR(212), 0.35);
				sortlist_column_add(self->list, /*"libinstances"*/ STR(213), 0.65);
				self->tbx_name = new_textbox(IntType(1), IntType(0), /*""*/ STR(0));
				self->tbx_repeat_x = new_textbox_integer();
				self->tbx_repeat_y = new_textbox_integer();
				self->tbx_repeat_z = new_textbox_integer();
				self->tbx_shape_detail = new_textbox_integer();
				self->tbx_shape_tex_hoffset = new_textbox_ndecimals();
				self->tbx_shape_tex_voffset = new_textbox_ndecimals();
				self->tbx_shape_tex_hrepeat = new_textbox_decimals();
				self->tbx_shape_tex_vrepeat = new_textbox_decimals();
			}
			
			self->background = tab_add_category(self, /*"background"*/ STR(214), icons_WORLD_SMALL, ID_tab_properties_background, false);
			withOne (obj_category, self->background, self->id)
			{
				self->tbx_background_rotation = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_background_rotation)->suffix = /*"°"*/ STR(215);
				self->tbx_sky_time = new_textbox(true, IntType(10), /*"-:0123456789"*/ STR(216));
				self->tbx_sky_rotation = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_sky_rotation)->suffix = /*"°"*/ STR(215);
				self->tbx_sky_sun_angle = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_sky_sun_angle)->suffix = /*"°"*/ STR(215);
				self->tbx_sky_sun_scale = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_sky_sun_scale)->suffix = /*"%"*/ STR(209);
				self->tbx_sky_moon_angle = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_sky_moon_angle)->suffix = /*"°"*/ STR(215);
				self->tbx_sky_moon_scale = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_sky_moon_scale)->suffix = /*"%"*/ STR(209);
				self->tbx_sunlight_strength = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_sunlight_strength)->suffix = /*"%"*/ STR(209);
				self->tbx_sunlight_angle = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_sunlight_angle)->suffix = /*"°"*/ STR(215);
				self->tbx_sky_clouds_height = new_textbox_ndecimals();
				self->tbx_sky_clouds_size = new_textbox_decimals();
				self->tbx_sky_clouds_thickness = new_textbox_decimals();
				self->tbx_sky_clouds_speed = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_sky_clouds_speed)->suffix = /*"%"*/ STR(209);
				self->tbx_sky_clouds_offset = new_textbox_ndecimals();
				self->tbx_fog_distance = new_textbox_integer();
				self->tbx_fog_size = new_textbox_integer();
				self->tbx_fog_height = new_textbox_integer();
				self->tbx_wind_speed = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_wind_speed)->suffix = /*"%"*/ STR(209);
				self->tbx_wind_strength = new_textbox_decimals();
				self->tbx_wind_direction = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_wind_direction)->suffix = /*"°"*/ STR(215);
				self->tbx_wind_directional_speed = new_textbox_decimals();
				ObjType(obj_textbox, self->tbx_wind_directional_speed)->suffix = /*"%"*/ STR(209);
				self->tbx_wind_directional_strength = new_textbox_decimals();
				self->tbx_texture_animation_speed = new_textbox_ndecimals();
			}
			
			self->resources = tab_add_category(self, /*"resources"*/ STR(217), icons_FILE_SMALL, ID_tab_properties_resources, false);
			withOne (obj_category, self->resources, self->id)
			{
				self->preview = (new obj_preview)->id;
				self->list = (new obj_sortlist)->id;
				idBool(self->list, can_deselect) = true;
				idVar(self->list, script) = ID_action_res_list;
				sortlist_column_add(self->list, /*"resname"*/ STR(218), IntType(0));
				sortlist_column_add(self->list, /*"restype"*/ STR(219), 0.35);
				sortlist_column_add(self->list, /*"rescount"*/ STR(220), 0.65);
				sortlist_add(self->list, global::mc_res);
				self->tbx_item_sheet_width = new_textbox_integer();
				self->tbx_item_sheet_height = new_textbox_integer();
				self->tbx_scenery_integrity = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_scenery_integrity)->suffix = /*"%"*/ STR(209);
			}
			
		}
		
		global::_app->lib_preview = ObjType(obj_category, ObjType(obj_tab, global::_app->properties)->library)->preview;
		global::_app->lib_list = ObjType(obj_category, ObjType(obj_tab, global::_app->properties)->library)->list;
		global::_app->res_preview = ObjType(obj_category, ObjType(obj_tab, global::_app->properties)->resources)->preview;
		global::_app->res_list = ObjType(obj_category, ObjType(obj_tab, global::_app->properties)->resources)->list;
		global::_app->ground_editor = new_tab(global::_app->setting_ground_editor_location, false);
		ObjType(obj_tab, global::_app->ground_editor)->script = ID_tab_ground_editor;
		withOne (obj_tab, global::_app->ground_editor, global::_app->id)
			self->ground_scroll = (new obj_scrollbar)->id;
		
		global::_app->template_editor = new_tab(global::_app->setting_template_editor_location, false);
		ObjType(obj_tab, global::_app->template_editor)->script = ID_tab_template_editor;
		withOne (obj_tab, global::_app->template_editor, global::_app->id)
		{
			self->char_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->char_list)->script = ID_action_lib_model_name;
			sortlist_column_add(self->char_list, /*"charname"*/ STR(184), IntType(0));
			for (IntType c = IntType(0); c < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); c++)
				sortlist_add(self->char_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(c))->name);
			self->item_scroll = (new obj_scrollbar)->id;
			self->block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->block_list)->script = ID_action_lib_block_name;
			sortlist_column_add(self->block_list, /*"blockname"*/ STR(185), IntType(0));
			for (IntType b = IntType(0); b < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->block_list); b++)
				if (!(ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->timeline > 0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->tl_model_name == /*""*/ STR(0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->model_double > 0)
					sortlist_add(self->block_list, ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->name);
			self->special_block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->special_block_list)->script = ID_action_lib_model_name;
			sortlist_column_add(self->special_block_list, /*"spblockname"*/ STR(186), IntType(0));
			for (IntType b = IntType(0); b < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); b++)
				sortlist_add(self->special_block_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(b))->name);
			self->bodypart_model_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->bodypart_model_list)->script = ID_action_lib_bodypart_model_name;
			sortlist_column_add(self->bodypart_model_list, /*"bodypartmodelname"*/ STR(187), IntType(0));
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(m))->name);
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(m))->name);
			self->tbx_spawn_amount = new_textbox_integer();
			self->tbx_spawn_region_sphere_radius = new_textbox_decimals();
			self->tbx_spawn_region_path_radius = new_textbox_decimals();
			self->tbx_spawn_region_cube_size = new_textbox_decimals();
			self->tbx_spawn_region_box_xsize = new_textbox_decimals();
			self->tbx_spawn_region_box_ysize = new_textbox_decimals();
			self->tbx_spawn_region_box_zsize = new_textbox_decimals();
			self->tbx_bounding_box_ground_z = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_xstart = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_ystart = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_zstart = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_xend = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_yend = new_textbox_ndecimals();
			self->tbx_bounding_box_custom_zend = new_textbox_ndecimals();
			self->tbx_destroy_at_amount_val = new_textbox_integer();
			self->tbx_destroy_at_time_seconds = new_textbox_ndecimals();
			self->tbx_destroy_at_time_random = new_textbox_ndecimals();
			self->type_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->type_list)->script = ID_action_lib_pc_type_list;
			ObjType(obj_sortlist, self->type_list)->can_deselect = true;
			sortlist_column_add(self->type_list, /*"particleeditortypename"*/ STR(221), IntType(0));
			sortlist_column_add(self->type_list, /*"particleeditortypekind"*/ STR(222), 0.4);
			sortlist_column_add(self->type_list, /*"particleeditortyperate"*/ STR(223), 0.75);
			self->preview_start = current_time();
			self->preview_speed = IntType(1);
			self->tbx_type_name = new_textbox(true, IntType(0), /*""*/ STR(0));
			self->tbx_type_spawn_rate = new_textbox_integer();
			ObjType(obj_textbox, self->tbx_type_spawn_rate)->suffix = /*"%"*/ STR(209);
			self->tbx_type_text = new_textbox(false, IntType(0), /*""*/ STR(0));
			self->tbx_type_sprite_frame_width = new_textbox_integer();
			self->tbx_type_sprite_frame_height = new_textbox_integer();
			self->tbx_type_sprite_frame_start = new_textbox_integer();
			self->tbx_type_sprite_frame_end = new_textbox_integer();
			self->tbx_type_sprite_animation_speed = new_textbox_decimals();
			self->tbx_type_sprite_animation_speed_random = new_textbox_decimals();
			self->tbx_type_xangle = new_textbox_ndecimals();
			self->tbx_type_xangle_random = new_textbox_ndecimals();
			self->tbx_type_yangle = new_textbox_ndecimals();
			self->tbx_type_yangle_random = new_textbox_ndecimals();
			self->tbx_type_zangle = new_textbox_ndecimals();
			self->tbx_type_zangle_random = new_textbox_ndecimals();
			self->tbx_type_angle_speed = new_textbox_ndecimals();
			self->tbx_type_angle_speed_random = new_textbox_ndecimals();
			self->tbx_type_angle_speed_add = new_textbox_ndecimals();
			self->tbx_type_angle_speed_add_random = new_textbox_ndecimals();
			self->tbx_type_angle_speed_mul = new_textbox_ndecimals();
			self->tbx_type_angle_speed_mul_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_xangle)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xangle_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yangle)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yangle_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zangle)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zangle_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_xspd = new_textbox_ndecimals();
			self->tbx_type_xspd_random = new_textbox_ndecimals();
			self->tbx_type_yspd = new_textbox_ndecimals();
			self->tbx_type_yspd_random = new_textbox_ndecimals();
			self->tbx_type_zspd = new_textbox_ndecimals();
			self->tbx_type_zspd_random = new_textbox_ndecimals();
			self->tbx_type_xspd_add = new_textbox_ndecimals();
			self->tbx_type_xspd_add_random = new_textbox_ndecimals();
			self->tbx_type_yspd_add = new_textbox_ndecimals();
			self->tbx_type_yspd_add_random = new_textbox_ndecimals();
			self->tbx_type_zspd_add = new_textbox_ndecimals();
			self->tbx_type_zspd_add_random = new_textbox_ndecimals();
			self->tbx_type_xspd_mul = new_textbox_ndecimals();
			self->tbx_type_xspd_mul_random = new_textbox_ndecimals();
			self->tbx_type_yspd_mul = new_textbox_ndecimals();
			self->tbx_type_yspd_mul_random = new_textbox_ndecimals();
			self->tbx_type_zspd_mul = new_textbox_ndecimals();
			self->tbx_type_zspd_mul_random = new_textbox_ndecimals();
			self->tbx_type_xrot = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_xrot)->suffix = /*"°"*/ STR(215);
			self->tbx_type_xrot_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_xrot_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_yrot = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_yrot)->suffix = /*"°"*/ STR(215);
			self->tbx_type_yrot_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_yrot_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_zrot = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_zrot)->suffix = /*"°"*/ STR(215);
			self->tbx_type_zrot_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_zrot_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_xrot_spd = new_textbox_ndecimals();
			self->tbx_type_xrot_spd_random = new_textbox_ndecimals();
			self->tbx_type_yrot_spd = new_textbox_ndecimals();
			self->tbx_type_yrot_spd_random = new_textbox_ndecimals();
			self->tbx_type_zrot_spd = new_textbox_ndecimals();
			self->tbx_type_zrot_spd_random = new_textbox_ndecimals();
			self->tbx_type_xrot_spd_add = new_textbox_ndecimals();
			self->tbx_type_xrot_spd_add_random = new_textbox_ndecimals();
			self->tbx_type_yrot_spd_add = new_textbox_ndecimals();
			self->tbx_type_yrot_spd_add_random = new_textbox_ndecimals();
			self->tbx_type_zrot_spd_add = new_textbox_ndecimals();
			self->tbx_type_zrot_spd_add_random = new_textbox_ndecimals();
			self->tbx_type_xrot_spd_mul = new_textbox_ndecimals();
			self->tbx_type_xrot_spd_mul_random = new_textbox_ndecimals();
			self->tbx_type_yrot_spd_mul = new_textbox_ndecimals();
			self->tbx_type_yrot_spd_mul_random = new_textbox_ndecimals();
			self->tbx_type_zrot_spd_mul = new_textbox_ndecimals();
			self->tbx_type_zrot_spd_mul_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_xrot_spd)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xrot_spd_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xrot_spd_add)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xrot_spd_add_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd_add)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd_add_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd_add)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd_add_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xrot_spd_mul)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_xrot_spd_mul_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd_mul)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_yrot_spd_mul_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd_mul)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_zrot_spd_mul_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_sprite_angle = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_sprite_angle)->suffix = /*"°"*/ STR(215);
			self->tbx_type_sprite_angle_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_sprite_angle_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_sprite_angle_add = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_sprite_angle_add)->suffix = /*"°"*/ STR(215);
			self->tbx_type_sprite_angle_add_random = new_textbox_ndecimals();
			ObjType(obj_textbox, self->tbx_type_sprite_angle_add_random)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_sprite_angle_add)->suffix = /*"°"*/ STR(215);
			ObjType(obj_textbox, self->tbx_type_sprite_angle_add_random)->suffix = /*"°"*/ STR(215);
			self->tbx_type_scale = new_textbox_ndecimals();
			self->tbx_type_scale_random = new_textbox_ndecimals();
			self->tbx_type_scale_add = new_textbox_ndecimals();
			self->tbx_type_scale_add_random = new_textbox_ndecimals();
			self->tbx_type_alpha = new_textbox_integer();
			ObjType(obj_textbox, self->tbx_type_alpha)->suffix = /*"%"*/ STR(209);
			self->tbx_type_alpha_random = new_textbox_integer();
			ObjType(obj_textbox, self->tbx_type_alpha_random)->suffix = /*"%"*/ STR(209);
			self->tbx_type_alpha_add = new_textbox_ninteger();
			ObjType(obj_textbox, self->tbx_type_alpha_add)->suffix = /*"%"*/ STR(209);
			self->tbx_type_alpha_add_random = new_textbox_ninteger();
			ObjType(obj_textbox, self->tbx_type_alpha_add_random)->suffix = /*"%"*/ STR(209);
			self->tbx_type_color_mix_time = new_textbox_decimals();
			self->tbx_type_color_mix_time_random = new_textbox_decimals();
			self->tbx_type_bounce_factor = new_textbox_decimals();
		}
		
		global::_app->ptype_list = ObjType(obj_tab, global::_app->template_editor)->type_list;
		global::_app->timeline = new_tab(/*"bottom"*/ STR(191), true, null_, e_window_TIMELINE);
		idVar(global::_app->timeline, script) = ID_tab_timeline;
		idBool(global::_app->timeline, movable) = false;
		withOne (Object, global::_app->timeline, global::_app->id)
		{
			sInt(tbx_interval_size) = new_textbox_integer();
			sInt(tbx_interval_offset) = new_textbox_integer();
			sInt(tbx_marker_name) = new_textbox(true, IntType(0), /*""*/ STR(0));
			sInt(tbx_search) = new_textbox(true, IntType(0), /*""*/ STR(0));
			sInt(tbx_rename) = new_textbox(true, IntType(0), /*""*/ STR(0));
			sVar(list_width) = IntType(320);
			sInt(hor_scroll) = (new obj_scrollbar)->id;
			sInt(hor_scroll_tl) = (new obj_scrollbar)->id;
			sInt(ver_scroll) = (new obj_scrollbar)->id;
		}
		
		global::_app->timeline_editor = new_tab(global::_app->setting_timeline_editor_location, false);
		withOne (obj_tab, global::_app->timeline_editor, global::_app->id)
		{
			self->info = tab_add_category(self, /*"timelineeditorinfo"*/ STR(224), icons_LIST_BULLETED_SMALL, ID_tab_timeline_editor_info, true);
			withOne (obj_category, self->info, self->id)
			{
				self->tbx_name = new_textbox(true, IntType(0), /*""*/ STR(0));
				self->tbx_text = new_textbox(false, IntType(0), /*""*/ STR(0));
				self->tbx_rot_point_x = new_textbox_ndecimals();
				self->tbx_rot_point_y = new_textbox_ndecimals();
				self->tbx_rot_point_z = new_textbox_ndecimals();
			}
			
			self->hierarchy = tab_add_category(self, /*"timelineeditorhierarchy"*/ STR(225), icons_HIERARCHY_SMALL, ID_tab_timeline_editor_hierarchy, true);
			self->appearance = tab_add_category(self, /*"timelineeditorappearance"*/ STR(226), ArrType::From({ icons_SPHERE_SHADING_SMALL, icons_SPHERE_SHADING_SMALL__DARK }), ID_tab_timeline_editor_appearance, false);
			withOne (obj_category, self->appearance, self->id)
				self->tbx_depth = new_textbox_ninteger();
			
			self->audio = tab_add_category(self, /*"timelineeditoraudio"*/ STR(227), icons_NOTE_SMALL, ID_tab_timeline_editor_audio, true);
			self->path = tab_add_category(self, /*"timelineeditorpath"*/ STR(228), icons_PATH_SMALL, ID_tab_timeline_editor_path, true);
			withOne (obj_category, self->path, self->id)
			{
				self->tbx_detail = new_textbox_decimals();
				self->tbx_radius = new_textbox_decimals();
				self->tbx_tex_length = new_textbox_decimals();
				self->tbx_shape_detail = new_textbox_decimals();
			}
			
		}
		
		global::_app->frame_editor = new_tab(global::_app->setting_frame_editor_location, false);
		withOne (obj_tab, global::_app->frame_editor, global::_app->id)
		{
			self->transform = tab_add_category(self, /*"frameeditortransform"*/ STR(229), icons_TRANSFORM_SMALL, ID_tab_frame_editor_transform, false);
			withOne (obj_category, self->transform, self->id)
			{
				self->tbx_pos_x = new_textbox_ndecimals();
				self->tbx_pos_y = new_textbox_ndecimals();
				self->tbx_pos_z = new_textbox_ndecimals();
				self->tbx_rot_x = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_rot_x)->suffix = /*"°"*/ STR(215);
				self->tbx_rot_y = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_rot_y)->suffix = /*"°"*/ STR(215);
				self->tbx_rot_z = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_rot_z)->suffix = /*"°"*/ STR(215);
				self->scale_all = false;
				self->tbx_sca_x = new_textbox_decimals();
				self->tbx_sca_y = new_textbox_decimals();
				self->tbx_sca_z = new_textbox_decimals();
				self->bend_sliders = false;
				self->tbx_bend[IntType(0)] = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_bend[IntType(0)])->suffix = /*"°"*/ STR(215);
				self->tbx_bend[IntType(1)] = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_bend[IntType(1)])->suffix = /*"°"*/ STR(215);
				self->tbx_bend[IntType(2)] = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_bend[IntType(2)])->suffix = /*"°"*/ STR(215);
				self->tbx_path_point_angle = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_path_point_angle)->suffix = /*"°"*/ STR(215);
				self->tbx_path_point_scale = new_textbox_decimals();
			}
			
			self->constraints_path = tab_add_category(self, /*"frameeditorconstraintspath"*/ STR(230), icons_JOINT_SMALL, ID_tab_frame_editor_constraints_path_point, false);
			self->constraints = tab_add_category(self, /*"frameeditorconstraints"*/ STR(231), icons_JOINT_SMALL, ID_tab_frame_editor_constraints, false);
			withOne (obj_category, self->constraints, self->id)
			{
				self->tbx_path_offset = new_textbox_ndecimals();
				self->tbx_follow_pos_offset_x = new_textbox_decimals();
				self->tbx_follow_pos_offset_y = new_textbox_decimals();
				self->tbx_follow_pos_offset_z = new_textbox_decimals();
				self->tbx_ik_blend = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_ik_blend)->suffix = /*"%"*/ STR(209);
				self->tbx_ik_angle_offset = new_textbox_ndecimals();
				ObjType(obj_textbox, self->tbx_ik_angle_offset)->suffix = /*"°"*/ STR(215);
			}
			
			self->material = tab_add_category(self, /*"frameeditormaterial"*/ STR(232), ArrType::From({ icons_SPHERE_MATERIAL_SMALL, icons_SPHERE_MATERIAL_SMALL__DARK }), ID_tab_frame_editor_material, false);
			withOne (obj_category, self->material, self->id)
			{
				self->tbx_alpha = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_alpha)->suffix = /*"%"*/ STR(209);
				self->tbx_mix_percent = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_mix_percent)->suffix = /*"%"*/ STR(209);
				self->tbx_emissive = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_emissive)->suffix = /*"%"*/ STR(209);
				self->tbx_metallic = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_metallic)->suffix = /*"%"*/ STR(209);
				self->tbx_roughness = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_roughness)->suffix = /*"%"*/ STR(209);
				self->tbx_subsurface = new_textbox_decimals();
				self->tbx_subsurface_radius.Real(X_) = new_textbox_integer();
				idVar(self->tbx_subsurface_radius.Real(X_), suffix) = /*"%"*/ STR(209);
				self->tbx_subsurface_radius.Real(Y_) = new_textbox_integer();
				idVar(self->tbx_subsurface_radius.Real(Y_), suffix) = /*"%"*/ STR(209);
				self->tbx_subsurface_radius.Real(Z_) = new_textbox_integer();
				idVar(self->tbx_subsurface_radius.Real(Z_), suffix) = /*"%"*/ STR(209);
				self->tbx_wind_influence = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_wind_influence)->suffix = /*"%"*/ STR(209);
			}
			
			self->particles = tab_add_category(self, /*"frameeditorparticles"*/ STR(233), icons_PARTICLES_SMALL, ID_tab_frame_editor_particles, false);
			withOne (obj_category, self->particles, self->id)
			{
				self->tbx_seed = new_textbox_ninteger();
				self->tbx_force = new_textbox_ndecimals();
				self->tbx_force_directional = new_textbox_ndecimals();
				self->tbx_force_vortex = new_textbox_ndecimals();
			}
			
			self->light = tab_add_category(self, /*"frameeditorlight"*/ STR(234), icons_LIGHT_POINT_SMALL, ID_tab_frame_editor_light, false);
			withOne (obj_category, self->light, self->id)
			{
				self->has_spotlight = false;
				self->tbx_size = new_textbox_decimals();
				self->tbx_range = new_textbox_decimals();
				self->tbx_strength = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_strength)->suffix = /*"%"*/ STR(209);
				self->tbx_specular_strength = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_specular_strength)->suffix = /*"%"*/ STR(209);
				self->tbx_fade_size = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_fade_size)->suffix = /*"%"*/ STR(209);
				self->tbx_spot_radius = new_textbox_decimals();
				self->tbx_spot_sharpness = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_spot_sharpness)->suffix = /*"%"*/ STR(209);
			}
			
			self->camera = tab_add_category(self, /*"frameeditorcamera"*/ STR(235), icons_CAMERA_SMALL, ID_tab_frame_editor_camera, false);
			withOne (Object, self->camera, self->id)
			{
				sVar(video_template) = null_;
				sBool(look_at_rotate) = true;
				sInt(tbx_fov) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_fov))->suffix = /*"°"*/ STR(215);
				sInt(tbx_clip_near) = new_textbox_integer();
				sInt(tbx_clip_far) = new_textbox_integer();
				sInt(tbx_exposure) = new_textbox_decimals();
				sInt(tbx_gamma) = new_textbox_decimals();
				sInt(tbx_blade_amount) = new_textbox_integer();
				sInt(tbx_blade_angle) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_blade_angle))->suffix = /*"°"*/ STR(215);
				sInt(tbx_rotate_distance) = new_textbox_decimals();
				sInt(tbx_rotate_angle_xy) = new_textbox_ndecimals();
				ObjType(obj_textbox, sInt(tbx_rotate_angle_xy))->suffix = /*"°"*/ STR(215);
				sInt(tbx_rotate_angle_z) = new_textbox_ndecimals();
				ObjType(obj_textbox, sInt(tbx_rotate_angle_z))->suffix = /*"°"*/ STR(215);
				sInt(tbx_shake_strength_x) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_strength_x))->suffix = /*"%"*/ STR(209);
				sInt(tbx_shake_strength_y) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_strength_y))->suffix = /*"%"*/ STR(209);
				sInt(tbx_shake_strength_z) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_strength_z))->suffix = /*"%"*/ STR(209);
				sInt(tbx_shake_speed_x) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_speed_x))->suffix = /*"%"*/ STR(209);
				sInt(tbx_shake_speed_y) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_speed_y))->suffix = /*"%"*/ STR(209);
				sInt(tbx_shake_speed_z) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_shake_speed_z))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_depth) = new_textbox_decimals();
				sInt(tbx_dof_range) = new_textbox_decimals();
				sInt(tbx_dof_fade_size) = new_textbox_decimals();
				sInt(tbx_dof_blur_size) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_dof_blur_size))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_blur_ratio) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_blur_ratio))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_bias) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_bias))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_threshold) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_threshold))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_gain) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_gain))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_fringe_angle_red) = new_textbox_ndecimals();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_angle_red))->suffix = /*"°"*/ STR(215);
				sInt(tbx_dof_fringe_angle_green) = new_textbox_ndecimals();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_angle_green))->suffix = /*"°"*/ STR(215);
				sInt(tbx_dof_fringe_angle_blue) = new_textbox_ndecimals();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_angle_blue))->suffix = /*"°"*/ STR(215);
				sInt(tbx_dof_fringe_red) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_red))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_fringe_green) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_green))->suffix = /*"%"*/ STR(209);
				sInt(tbx_dof_fringe_blue) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_dof_fringe_blue))->suffix = /*"%"*/ STR(209);
				sInt(tbx_video_size_custom_width) = new_textbox_integer();
				sInt(tbx_video_size_custom_height) = new_textbox_integer();
				sInt(tbx_bloom_threshold) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_bloom_threshold))->suffix = /*"%"*/ STR(209);
				sInt(tbx_bloom_intensity) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_bloom_intensity))->suffix = /*"%"*/ STR(209);
				sInt(tbx_bloom_radius) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_bloom_radius))->suffix = /*"%"*/ STR(209);
				sInt(tbx_bloom_ratio) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_bloom_ratio))->suffix = /*"%"*/ STR(209);
				sInt(tbx_lens_dirt_radius) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_lens_dirt_radius))->suffix = /*"%"*/ STR(209);
				sInt(tbx_lens_dirt_intensity) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_lens_dirt_intensity))->suffix = /*"%"*/ STR(209);
				sInt(tbx_lens_dirt_power) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_lens_dirt_power))->suffix = /*"%"*/ STR(209);
				sInt(tbx_contrast) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_contrast))->suffix = /*"%"*/ STR(209);
				sInt(tbx_brightness) = new_textbox_ninteger();
				ObjType(obj_textbox, sInt(tbx_brightness))->suffix = /*"%"*/ STR(209);
				sInt(tbx_saturation) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_saturation))->suffix = /*"%"*/ STR(209);
				sInt(tbx_vibrance) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_vibrance))->suffix = /*"%"*/ STR(209);
				sInt(tbx_grain_strength) = new_textbox_ninteger();
				ObjType(obj_textbox, sInt(tbx_grain_strength))->suffix = /*"%"*/ STR(209);
				sInt(tbx_grain_saturation) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_grain_saturation))->suffix = /*"%"*/ STR(209);
				sInt(tbx_grain_size) = new_textbox_integer();
				sInt(tbx_vignette_radius) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_vignette_radius))->suffix = /*"%"*/ STR(209);
				sInt(tbx_vignette_softness) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_vignette_softness))->suffix = /*"%"*/ STR(209);
				sInt(tbx_vignette_strength) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_vignette_strength))->suffix = /*"%"*/ STR(209);
				sInt(tbx_ca_blur_amount) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_ca_blur_amount))->suffix = /*"%"*/ STR(209);
				sInt(tbx_ca_red_offset) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_ca_red_offset))->suffix = /*"%"*/ STR(209);
				sInt(tbx_ca_green_offset) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_ca_green_offset))->suffix = /*"%"*/ STR(209);
				sInt(tbx_ca_blue_offset) = new_textbox_integer();
				ObjType(obj_textbox, sInt(tbx_ca_blue_offset))->suffix = /*"%"*/ STR(209);
				sInt(tbx_distort_zoom_amount) = new_textbox_decimals();
				ObjType(obj_textbox, sInt(tbx_distort_zoom_amount))->suffix = /*"%"*/ STR(209);
				sInt(tbx_distort_amount) = new_textbox_ninteger();
				ObjType(obj_textbox, sInt(tbx_distort_amount))->suffix = /*"%"*/ STR(209);
			}
			
			self->sound = tab_add_category(self, /*"frameeditorsound"*/ STR(236), icons_VOLUME_SMALL, ID_tab_frame_editor_sound, true);
			withOne (obj_category, self->sound, self->id)
			{
				self->tbx_volume = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_volume)->suffix = /*"%"*/ STR(209);
				self->tbx_pitch = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_pitch)->suffix = /*"%"*/ STR(209);
				self->tbx_start = new_textbox_decimals();
				self->tbx_end = new_textbox_ndecimals();
			}
			
			self->text = tab_add_category(self, /*"frameeditortext"*/ STR(237), icons_TEXT_SMALL, ID_tab_frame_editor_text, false);
			withOne (Object, self->text, self->id)
				sInt(tbx_text) = new_textbox(false, IntType(0), /*""*/ STR(0));
			
			self->item = tab_add_category(self, /*"frameeditoritem"*/ STR(238), icons_ITEM_SMALL, ID_tab_frame_editor_item, false);
			withOne (obj_category, self->item, self->id)
			{
				self->item_scroll = (new obj_scrollbar)->id;
				self->item_slot = new_textbox_integer();
			}
			
			self->keyframe = tab_add_category(self, /*"frameeditorkeyframe"*/ STR(239), icons_KEYFRAME_SMALL, ID_tab_frame_editor_keyframe, false);
			withOne (obj_category, self->keyframe, self->id)
			{
				self->tbx_ease_in_x = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_ease_in_x)->suffix = /*"%"*/ STR(209);
				self->tbx_ease_in_y = new_textbox_ninteger();
				ObjType(obj_textbox, self->tbx_ease_in_y)->suffix = /*"%"*/ STR(209);
				self->tbx_ease_out_x = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_ease_out_x)->suffix = /*"%"*/ STR(209);
				self->tbx_ease_out_y = new_textbox_ninteger();
				ObjType(obj_textbox, self->tbx_ease_out_y)->suffix = /*"%"*/ STR(209);
				self->ease_link = false;
			}
			
		}
		
		global::_app->settings = new_tab(global::_app->setting_settings_location, false);
		withOne (obj_tab, global::_app->settings, global::_app->id)
		{
			self->program = tab_add_category(self, /*"settingsprogram"*/ STR(240), icons_SETTINGS_SMALL, ID_tab_settings_program, false);
			withOne (obj_category, self->program, self->id)
			{
				self->tbx_backup_time = new_textbox_integer();
				self->tbx_backup_amount = new_textbox_integer();
				self->tbx_watermark_padding = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_watermark_padding)->suffix = /*"%"*/ STR(209);
				self->tbx_watermark_scale = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_watermark_scale)->suffix = /*"%"*/ STR(209);
				self->tbx_watermark_opacity = new_textbox_integer();
				ObjType(obj_textbox, self->tbx_watermark_opacity)->suffix = /*"%"*/ STR(209);
			}
			
			self->interface_ = tab_add_category(self, /*"settingsinterface"*/ STR(241), icons_BRUSH_SMALL, ID_tab_settings_interface, false);
			self->controls = tab_add_category(self, /*"settingscontrols"*/ STR(242), icons_KEYBOARD_SMALL, ID_tab_settings_controls, false);
			withOne (obj_category, self->controls, self->id)
			{
				self->tbx_move_speed = new_textbox_decimals();
				self->tbx_look_sensitivity = new_textbox_decimals();
				self->tbx_fast_modifier = new_textbox_decimals();
				self->tbx_slow_modifier = new_textbox_decimals();
			}
			
		}
		
	}
	
}
