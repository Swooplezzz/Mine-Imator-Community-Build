/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.21 19:05:34 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_toolbar_exportmovie_video_quality(ScopeAny self, VarType videoquality)
	{
		idInt(sInt(popup), video_quality) = videoquality;
		if (idInt(sInt(popup), video_quality) > IntType(0))
			idReal(sInt(popup), bit_rate) = ObjType(obj_videoquality, idInt(sInt(popup), video_quality))->bit_rate;
	}
	
	void action_toolbar_exportmovie_watermark(ScopeAny self)
	{
		if (global::trial_version > 0)
		{
			popup_switch(self, sInt(popup_upgrade));
			ObjType(obj_popup, sInt(popup_upgrade))->page = IntType(0);
		}
		else
			idBool(sInt(popup), watermark) = !idBool(sInt(popup), watermark);
		
	}
	
	void action_toolbar_export_image(ScopeAny self)
	{
		popup_show(self, sInt(popup_exportimage));
	}
	
	void action_toolbar_export_movie(ScopeAny self)
	{
		popup_show(self, sInt(popup_exportmovie));
	}
	
	void action_toolbar_importimage_do_all(ScopeAny self, VarType value)
	{
		ObjType(obj_popup, sInt(popup_importimage))->do_all = !ObjType(obj_popup, sInt(popup_importimage))->do_all;
	}
	
	void action_toolbar_importimage_type(ScopeAny self, VarType type)
	{
		ObjType(obj_popup, sInt(popup_importimage))->type = type;
	}
	
	void action_toolbar_importitemsheet_is_sheet(ScopeAny self, VarType enable)
	{
		ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet = enable;
	}
	
	void action_toolbar_importitemsheet_sheet_size(ScopeAny self, VarType val, VarType add)
	{
		ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size.Real(global::axis_edit) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size.Real(global::axis_edit) * add + val;
	}
	
	void action_toolbar_import_asset(ScopeAny self)
	{
		StringType fn = file_dialog_open_asset();
		ArrType path_array = string_split(fn, /*"\n"*/ STR(76));
		IntType path_array_count = array_length(VarType::CreateRef(path_array));
		if (path_array_count == IntType(0))
		{
			return;
		}
		for (IntType i = IntType(0); i < path_array_count; i += IntType(1))
		{
			if (path_array.Value(i) == /*""*/ STR(0) || !file_exists_lib(path_array.Value(i)))
				return;
			asset_load(self, { path_array.Value(i) });
		}
	}
	
	void action_toolbar_new(ScopeAny self)
	{
		if (sInt(project_changed) > 0)
		{
			IntType res = show_message_ext(/*"Mine-imator"*/ STR(23), text_get({ /*"questionconfirmnew"*/ STR(77), sVar(project_name) }), text_get({ /*"questionsave"*/ STR(25) }), text_get({ /*"questiondontsave"*/ STR(26) }), text_get({ /*"questioncancel"*/ STR(27) }));
			if (res == IntType(0))
				project_save(self);
			else
				if (res != IntType(1))
					return;
			
		}
		popup_newproject_clear(self);
		popup_show(self, sInt(popup_newproject));
	}
	
	RealType action_toolbar_open(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count > IntType(0) && !file_exists_lib(argument[IntType(0)]))
		{
			error(/*"erroropenprojectexists"*/ STR(78));
			return IntType(0);
		}
		if (sInt(project_changed) > 0)
		{
			IntType res = show_message_ext(/*"Mine-imator"*/ STR(23), text_get({ /*"questionconfirmopen"*/ STR(24), sVar(project_name) }), text_get({ /*"questionsave"*/ STR(25) }), text_get({ /*"questiondontsave"*/ STR(26) }), text_get({ /*"questioncancel"*/ STR(27) }));
			if (res == IntType(0))
				project_save(self);
			else
				if (res != IntType(1))
					return IntType(0);
			
		}
		if (argument_count > IntType(0))
			project_load(self, { argument[IntType(0)] });
		else
			project_load(self);
		
		return 0.0;
	}
	
	void action_toolbar_open_folder(ScopeAny self)
	{
		open_url(sStr(project_folder));
	}
	
	RealType action_toolbar_open_last_backup(ScopeAny self)
	{
		StringType fn = sStr(project_folder) + /*"/"*/ STR(20) + filename_name(sStr(project_folder)) + /*".backup1"*/ STR(79);
		if (!file_exists(fn))
			return IntType(0);
		action_toolbar_open(self, { fn });
		return 0.0;
	}
	
	RealType action_toolbar_redo(ScopeAny self)
	{
		if (sReal(history_pos) == IntType(0))
			return IntType(0);
		action_tl_play_break(self);
		sReal(history_pos)--;
		global::history_data = sArr(history).Value(sReal(history_pos));
		global::temp_edit = save_id_find(ObjType(obj_history, global::history_data)->save_temp_edit);
		global::ptype_edit = save_id_find(ObjType(obj_history, global::history_data)->save_ptype_edit);
		global::tl_edit = save_id_find(ObjType(obj_history, global::history_data)->save_tl_edit);
		global::res_edit = save_id_find(ObjType(obj_history, global::history_data)->save_res_edit);
		global::axis_edit = ObjType(obj_history, global::history_data)->save_axis_edit;
		global::save_id_seed = ObjType(obj_history, global::history_data)->save_save_id_seed;
		log({ /*"Redo"*/ STR(80), script_get_name((IntType)(ObjType(obj_history, global::history_data)->script)) });
		sReal(history_redo) = true;
		if (ObjType(obj_history, global::history_data)->save_set_var)
			script_execute(self, { ObjType(obj_history, global::history_data)->script, ObjType(obj_history, global::history_data)->new_value, false });
		else
			script_execute(self, { ObjType(obj_history, global::history_data)->script });
		
		sReal(history_redo) = false;
		sBool(history_resource_update) = true;
		global::render_samples = -IntType(1);
		return 0.0;
	}
	
	void action_toolbar_save(ScopeAny self)
	{
		project_save(self);
		toast_new(self, e_toast_POSITIVE, text_get({ /*"alertprojectsaved"*/ STR(81) }));
	}
	
	void action_toolbar_save_as(ScopeAny self)
	{
		popup_saveas_clear(self);
		popup_show(self, sInt(popup_saveas));
	}
	
	void action_toolbar_settings(ScopeAny self)
	{
		tab_toggle(self, sInt(settings));
	}
	
	RealType action_toolbar_undo(ScopeAny self)
	{
		if (sReal(history_pos) == sReal(history_amount))
			return IntType(0);
		action_tl_play_break(self);
		global::history_data = sArr(history).Value(sReal(history_pos));
		global::temp_edit = save_id_find(ObjType(obj_history, global::history_data)->save_temp_edit);
		global::ptype_edit = save_id_find(ObjType(obj_history, global::history_data)->save_ptype_edit);
		global::tl_edit = save_id_find(ObjType(obj_history, global::history_data)->save_tl_edit);
		global::res_edit = save_id_find(ObjType(obj_history, global::history_data)->save_res_edit);
		global::axis_edit = ObjType(obj_history, global::history_data)->save_axis_edit;
		global::save_id_seed = ObjType(obj_history, global::history_data)->save_save_id_seed;
		log({ /*"Undo"*/ STR(82), script_get_name((IntType)(ObjType(obj_history, global::history_data)->script)) });
		sReal(history_undo) = true;
		if (ObjType(obj_history, global::history_data)->save_set_var)
			script_execute(self, { ObjType(obj_history, global::history_data)->script, ObjType(obj_history, global::history_data)->old_value, false });
		else
			script_execute(self, { ObjType(obj_history, global::history_data)->script });
		
		sReal(history_undo) = false;
		sReal(history_pos)++;
		sBool(history_resource_update) = true;
		global::render_samples = -IntType(1);
		return 0.0;
	}
	
	void action_tools_disable_all(ScopeAny self)
	{
		sBool(setting_tool_select) = false;
		sVar(setting_tool_move) = false;
		sBool(setting_tool_rotate) = false;
		sBool(setting_tool_scale) = false;
		sBool(setting_tool_bend) = false;
		sBool(setting_tool_transform) = false;
	}
	
	void action_value_copy(ScopeAny self)
	{
		sVar(context_menu_copy_type) = sVar(context_menu_value_type);
		sVar(context_menu_copy) = global::list_item_value;
	}
	
	void action_value_cut(ScopeAny self)
	{
		action_value_copy(self);
		action_value_reset(self);
	}
	
	void action_value_mix_color(ScopeAny self)
	{
		script_execute(self, { sVar(context_menu_value_script), minecraft_mix_colors(ArrType::From({ sVar(context_menu_value), global::list_item_script_value })), false });
	}
	
	void action_value_paste(ScopeAny self)
	{
		script_execute(self, { sVar(context_menu_value_script), sVar(context_menu_copy), false });
	}
	
	void action_value_reset(ScopeAny self)
	{
		script_execute(self, { sVar(context_menu_value_script), sVar(context_menu_value_default), false });
	}
	
	void action_value_set_color(ScopeAny self)
	{
		script_execute(self, { sVar(context_menu_value_script), global::list_item_script_value, false });
	}
	
	void action_view_camera(ScopeAny self, VarType cam)
	{
		ObjType(obj_view, sInt(settings_menu_view))->camera = cam;
	}
	
	RealType angle_difference_fix(RealType angle1, VarType angle2)
	{
		return (mod(((mod((angle1 - angle2), IntType(360))) + IntType(540)), IntType(360))) - IntType(180);
	}
	
	void app_event_create(ScopeAny self)
	{
		global::debug_indent = IntType(0);
		sBool(debug_info) = dev_mode;
		randomize();
		gml_release_mode(true);
		if (!app_startup(self))
			game_end();
	}
	
	void app_event_draw(ScopeAny self)
	{
		global::delta = clamp((RealType)gmlGlobal::delta_time / (1000000.0 / 60.0), 0.5, 1.5);
		draw_set_font(sInt(font_label));
		draw_set_color((IntType)(global::c_text_main));
		window_draw(self);
	}
	
	BoolType app_event_game_end(ScopeAny self)
	{
		if (sVar(startup_error) > 0)
			return true;
		audio_stop_all();
		if (sStr(window_state) != /*"new_assets"*/ STR(83) && sStr(window_state) != /*"load_assets"*/ STR(84))
		{
			if (sInt(project_changed) > 0)
			{
				IntType res = show_message_ext(/*"Mine-imator"*/ STR(23), text_get({ /*"questionconfirmexit"*/ STR(85), sVar(project_name) }), text_get({ /*"questionsave"*/ STR(25) }), text_get({ /*"questiondontsave"*/ STR(26) }), text_get({ /*"questioncancel"*/ STR(27) }));
				if (res == IntType(0))
					project_save(self);
				else
					if (res != IntType(1))
						return false;
				
			}
			settings_save(self);
		}
		log({ /*"Closing..."*/ STR(86) });
		return true;
	}
	
	BoolType app_event_http(ScopeAny self)
	{
		if (DsMap(gmlGlobal::async_load)[/*"id"*/ STR(87)] == sInt(http_assets) && DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] < IntType(1) && (!dev_mode || dev_mode_check_assets))
		{
			sInt(http_assets) = null_;
			if (DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] == IntType(0) && DsMap(gmlGlobal::async_load)[/*"http_status"*/ STR(89)] == http_ok)
			{
				IntType decodedmap = json_decode(DsMap(gmlGlobal::async_load)[/*"result"*/ STR(90)]);
				if (ds_map_valid(decodedmap))
				{
					VarType versionslist = DsMap(decodedmap).Value(/*"versions"*/ STR(91));
					if (ds_list_valid(versionslist))
					{
						VarType newversionmap = DsList(versionslist).Value(ds_list_size((IntType)(versionslist)) - IntType(1));
						if (ds_map_valid(newversionmap) && !file_exists_lib(minecraft_directory + DsMap(newversionmap).Value(/*"version"*/ STR(92)) + /*".zip"*/ STR(7)))
						{
							if (DsMap(newversionmap).Value(/*"format"*/ STR(93)) >= minecraft_assets_format)
							{
								sVar(setting_minecraft_assets_new_version) = DsMap(newversionmap).Value(/*"version"*/ STR(92));
								sVar(setting_minecraft_assets_new_format) = DsMap(newversionmap).Value(/*"format"*/ STR(93));
								sVar(setting_minecraft_assets_new_changes) = DsMap(newversionmap).Value(/*"changes"*/ STR(94));
								if (is_string(DsMap(newversionmap).Value(/*"image"*/ STR(95))))
								{
									sStr(setting_minecraft_assets_new_image) = mc_file_directory + DsMap(newversionmap).Value(/*"image"*/ STR(95));
									sInt(assets_http_image) = http_get_file(link_assets + DsMap(newversionmap).Value(/*"image"*/ STR(95)), sStr(setting_minecraft_assets_new_image));
								}
								else
									sStr(setting_minecraft_assets_new_image) = /*""*/ STR(0);
								
								toast_new(self, e_toast_INFO, text_get({ /*"alertnewassets"*/ STR(96), sVar(setting_minecraft_assets_new_version) }));
								ObjType(obj_toast, sInt(toast_last))->dismiss_time = no_limit;
								log({ /*"New assets found"*/ STR(97), sVar(setting_minecraft_assets_new_version) });
							}
						}
						else
							log({ /*"Using the latest assets"*/ STR(98) });
						
					}
					ds_map_destroy(decodedmap);
				}
			}
		}
		else
			if (DsMap(gmlGlobal::async_load)[/*"id"*/ STR(87)] == sInt(http_download_assets_file))
			{
				if (DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] == IntType(1))
					sReal(new_assets_download_progress) = ((RealType)DsMap(gmlGlobal::async_load)[/*"sizeDownloaded"*/ STR(99)] / DsMap(gmlGlobal::async_load)[/*"contentLength"*/ STR(100)]) * 0.25;
				else
				{
					sInt(http_download_assets_file) = null_;
					sInt(http_download_assets_zip) = http_get_file(link_assets + sStr(new_assets_version) + /*".zip"*/ STR(7), mc_file_directory + sStr(new_assets_version) + /*".zip"*/ STR(7));
				}
				
			}
			else
				if (DsMap(gmlGlobal::async_load)[/*"id"*/ STR(87)] == sInt(http_download_assets_zip))
				{
					if (DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] == IntType(1))
						sReal(new_assets_download_progress) = 0.25 + ((RealType)DsMap(gmlGlobal::async_load)[/*"sizeDownloaded"*/ STR(99)] / DsMap(gmlGlobal::async_load)[/*"contentLength"*/ STR(100)]) * 0.75;
					else
					{
						sInt(http_download_assets_zip) = null_;
						sStr(setting_minecraft_assets_version) = sStr(new_assets_version);
						sVar(setting_minecraft_assets_new_version) = /*""*/ STR(0);
						file_copy_lib(mc_file_directory + sStr(new_assets_version) + /*".midata"*/ STR(101), minecraft_directory + sStr(new_assets_version) + /*".midata"*/ STR(101));
						file_copy_lib(mc_file_directory + sStr(new_assets_version) + /*".zip"*/ STR(7), minecraft_directory + sStr(new_assets_version) + /*".zip"*/ STR(7));
						file_delete_lib(mc_file_directory + sStr(new_assets_version) + /*".midata"*/ STR(101));
						file_delete_lib(mc_file_directory + sStr(new_assets_version) + /*".zip"*/ STR(7));
						if (sVar(new_assets_image) != /*""*/ STR(0))
							file_delete_lib(mc_file_directory + sVar(new_assets_image));
						if (!minecraft_assets_load_startup(self))
						{
							error(/*"errorloadassets"*/ STR(102));
							game_end();
							return false;
						}
					}
					
				}
				else
					if (DsMap(gmlGlobal::async_load)[/*"id"*/ STR(87)] == sInt(http_alert_news) && DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] < IntType(1))
					{
						sInt(http_alert_news) = null_;
						if (DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] == IntType(0) && DsMap(gmlGlobal::async_load)[/*"http_status"*/ STR(89)] == http_ok)
						{
							IntType decodedmap = json_decode(DsMap(gmlGlobal::async_load)[/*"result"*/ STR(90)]);
							if (ds_map_valid(decodedmap))
							{
								VarType newslist = DsMap(decodedmap).Value(/*"default"*/ STR(103));
								for (IntType n = IntType(0); n < ds_list_size((IntType)(newslist)); n++)
								{
									VarType newsmap, title, text, icon, button, buttonurl, iid;
									newsmap = DsList(newslist).Value(n);
									if (ds_map_valid(newsmap))
									{
										title = DsMap(newsmap).Value(/*"title"*/ STR(104));
										text = DsMap(newsmap).Value(/*"text"*/ STR(105));
										icon = DsMap(newsmap).Value(/*"icon"*/ STR(106));
										switch (StringType(icon).id)
										{
											case 107: // website
											{
												icon = icons_WORLD;
												break;
											}
											case 108: // forums
											{
												icon = icons_COMMENT;
												break;
											}
											case 109: // save
											{
												icon = icons_SAVE;
												break;
											}
											case 110: // download
											{
												icon = icons_DOWNLOAD;
												break;
											}
											case 111: // cake
											{
												icon = icons_BIRTHDAY;
												break;
											}
											case 112: // upgrade
											{
												icon = icons_KEY;
												break;
											}
											case 13: // render
											{
												icon = (ObjType(obj_theme, sInt(setting_theme))->dark ? icons_SPHERE_MATERIAL__DARK : icons_SPHERE_MATERIAL);
												break;
											}
											default:
												icon = null_;
												break;
										}
										
										button = DsMap(newsmap).Value(/*"button"*/ STR(113));
										buttonurl = DsMap(newsmap).Value(/*"buttonurl"*/ STR(114));
										if (!is_undefined(DsMap(newsmap).Value(/*"saveclose"*/ STR(115))))
											iid = DsMap(newsmap).Value(/*"id"*/ STR(87));
										else
											iid = null_;
										
										if (!(iid > 0) || ds_list_find_index(sInt(closed_toast_list), iid) < IntType(0))
										{
											button = string_replace(button, /*"button"*/ STR(113), /*""*/ STR(0));
											toast_new(self, e_toast_INFO, text);
											toast_add_action(self, button, ID_popup_open_url, buttonurl);
											toast_add_action(self, /*"alertclose"*/ STR(116), ID_toast_set_close, sInt(toast_last));
											ObjType(obj_toast, sInt(toast_last))->dismiss_time = no_limit;
											ObjType(obj_toast, sInt(toast_last))->iid = iid;
										}
									}
								}
								ds_map_destroy(decodedmap);
							}
							else
								log({ /*"Failed to decode"*/ STR(117) });
							
						}
					}
					else
						if (DsMap(gmlGlobal::async_load)[/*"id"*/ STR(87)] == sInt(http_downloadskin) && DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] < IntType(1))
						{
							sInt(http_downloadskin) = null_;
							if (sInt(popup) == sInt(popup_downloadskin))
							{
								ObjType(obj_popup, sInt(popup_downloadskin))->fail_message = text_get({ /*"errordownloadskininternet"*/ STR(118) });
								if (ObjType(obj_popup, sInt(popup_downloadskin))->texture > 0)
								{
									texture_free(ObjType(obj_popup, sInt(popup_downloadskin))->texture);
									ObjType(obj_popup, sInt(popup_downloadskin))->texture = null_;
								}
							}
							else
							{
								ObjType(obj_builder, global::mc_builder)->block_skull_texture = null_;
								ObjType(obj_builder, global::mc_builder)->block_skull_texture_fail = false;
							}
							
							if (DsMap(gmlGlobal::async_load)[/*"status"*/ STR(88)] == IntType(0))
							{
								if (sInt(popup) == sInt(popup_downloadskin))
									ObjType(obj_popup, sInt(popup_downloadskin))->fail_message = text_get({ /*"errordownloadskinuser"*/ STR(119), string_remove_newline(ObjType(obj_popup, sInt(popup_downloadskin))->username) });
								else
									ObjType(obj_builder, global::mc_builder)->block_skull_texture_fail = true;
								
								if (DsMap(gmlGlobal::async_load)[/*"http_status"*/ STR(89)] == http_ok && file_exists_lib(download_image_file))
								{
									if (sInt(popup) == sInt(popup_downloadskin))
									{
										ObjType(obj_popup, sInt(popup_downloadskin))->texture = texture_create(download_image_file);
										ObjType(obj_popup, sInt(popup_downloadskin))->fail_message = /*""*/ STR(0);
									}
									else
									{
										ObjType(obj_builder, global::mc_builder)->block_skull_texture = texture_create(download_image_file);
										ObjType(obj_builder, global::mc_builder)->block_skull_texture_fail = false;
									}
									
								}
							}
						}
				
			
		
		
		return false;
	}
	
	RealType app_event_step(ScopeAny self)
	{
		if (dev_mode && !is_cpp())
		{
			if (keyboard_check_pressed(vk_f1))
				global::window_debug_current = e_window_MAIN;
			if (keyboard_check_pressed(vk_f2) && ds_list_size(global::window_list) > IntType(0))
				global::window_debug_current = DsList(global::window_list).Value(IntType(0));
			if (keyboard_check_pressed(vk_f3) && ds_list_size(global::window_list) > IntType(1))
				global::window_debug_current = DsList(global::window_list).Value(IntType(1));
			if (keyboard_check_pressed(vk_f4) && ds_list_size(global::window_list) > IntType(2))
				global::window_debug_current = DsList(global::window_list).Value(IntType(2));
		}
		app_update_window();
		if (window_mouse_is_active(window_get_current()))
			app_update_mouse();
		if (window_get_current() == e_window_MAIN || (window_get_current() != e_window_MAIN && dev_mode && !is_cpp()))
		{
			sStr(textbox_input) = gmlGlobal::keyboard_string;
			gmlGlobal::keyboard_string = /*""*/ STR(0);
			app_update_micro_animations();
			if (sStr(window_state) == /*"load_assets"*/ STR(84))
				return IntType(0);
			if (sStr(window_state) == /*"new_assets"*/ STR(83) || sStr(window_state) == /*"export_movie"*/ STR(53) || sStr(window_state) == /*"export_image"*/ STR(60))
				return IntType(0);
			app_update_place(self);
			app_update_keybinds();
			app_update_keyboard(self);
			app_update_play();
			app_update_animate(self);
			app_update_previews();
			app_update_backup(self);
			app_update_recent(self);
			app_update_work_camera(self);
			if (window_get_current() == e_window_MAIN)
				app_update_caption();
			app_update_toasts();
			app_update_interface(self);
			app_update_lists(self);
			app_update_minecraft_resources();
			global::current_step += 60.0 / gmlGlobal::room_speed;
		}
		return 0.0;
	}
	
	BoolType app_mouse_box(ScopeAny self, VarType xx, VarType yy, VarType w, VarType h, StringType busy)
	{
		return (gmlGlobal::mouse_x >= xx && gmlGlobal::mouse_y >= yy && gmlGlobal::mouse_x < xx + w && gmlGlobal::mouse_y < yy + h && (sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == busy) && sStr(popup_ani_type) == /*""*/ STR(0));
	}
	
	void app_mouse_clear(ScopeAny self)
	{
		sBool(mouse_left) = false;
		sBool(mouse_left_pressed) = false;
		sBool(mouse_left_double_pressed) = false;
		sBool(mouse_left_released) = false;
		sBool(mouse_right) = false;
		sBool(mouse_right_pressed) = false;
		sBool(mouse_right_released) = false;
		sBool(mouse_middle) = false;
		sBool(mouse_middle_pressed) = false;
		sInt(mouse_click_count) = IntType(0);
		mouse_clear(mb_left);
		mouse_clear(mb_right);
		mouse_clear(mb_middle);
	}
	
	RealType app_mouse_wrap(VarType xx, VarType yy, VarType w, VarType h)
	{
		if (!window_mouse_get_permission())
			return IntType(0);
		VarType setx, sety;
		RealType size;
		setx = gmlGlobal::mouse_x;
		sety = gmlGlobal::mouse_y;
		size = IntType(8);
		if ((gmlGlobal::mouse_x - (size / 2.0)) < xx)
		{
			setx = xx + w - size;
			global::_app->mouse_wrap_x--;
		}
		if ((gmlGlobal::mouse_y - (size / 2.0)) < yy)
		{
			sety = yy + h - size;
			global::_app->mouse_wrap_y--;
		}
		if (gmlGlobal::mouse_x > (xx + w - (size / 2.0)) || (display_mouse_get_x() > (window_get_x() + window_get_width()) - (size / 2.0)))
		{
			setx = xx + size;
			global::_app->mouse_wrap_x++;
		}
		if (gmlGlobal::mouse_y > (yy + h - (size / 2.0)) || (display_mouse_get_y() > (window_get_y() + window_get_height()) - (size / 2.0)))
		{
			sety = yy + size;
			global::_app->mouse_wrap_y++;
		}
		if (setx != gmlGlobal::mouse_x || sety != gmlGlobal::mouse_y)
		{
			window_mouse_set((IntType)(setx), (IntType)(sety));
			global::_app->mouse_current_x = setx;
			global::_app->mouse_current_y = sety;
		}
		return 0.0;
	}
	
	void app_start_place(ScopeAny self, IntType tl, BoolType spawn)
	{
		sVar(window_busy) = /*"place"*/ STR(120);
		sInt(place_tl) = tl;
		sBool(place_tl_render) = false;
		sBool(place_spawn) = spawn;
		ObjType(obj_view, sInt(view_main))->update_depth = true;
		ObjType(obj_view, sInt(view_main))->surface_depth_value = 0.995;
		ObjType(obj_view, sInt(view_second))->update_depth = true;
		ObjType(obj_view, sInt(view_second))->surface_depth_value = 0.995;
		withOne (obj_timeline, sInt(place_tl), self->id)
			tl_mark_placed(ScopeAny(self), true);
		
	}
	
	void app_stop_place(ScopeAny self)
	{
		withOne (obj_timeline, sInt(place_tl), self->id)
			tl_mark_placed(ScopeAny(self), false);
		
		sInt(place_tl) = null_;
		sVar(window_busy) = /*""*/ STR(0);
		mouse_clear(mb_left);
	}
	
	RealType app_update_place(ScopeAny self)
	{
		if (sVar(window_busy) != /*"place"*/ STR(120))
			return IntType(0);
		sInt(mouse_cursor) = cr_drag;
		if (vec3_length(vec3_sub(sVec(cam_work_from), sVec(place_cam_work_from))) > IntType(1) || sVar(place_cam_work_angle_look_xy) != sVar(cam_work_angle_look_xy) || sVar(place_cam_work_angle_look_z) != sVar(cam_work_angle_look_z))
		{
			ObjType(obj_view, sInt(view_main))->update_depth = true;
			ObjType(obj_view, sInt(view_second))->update_depth = true;
			sVec(place_cam_work_from) = sVec(cam_work_from);
			sVar(place_cam_work_angle_look_xy) = sVar(cam_work_angle_look_xy);
			sVar(place_cam_work_angle_look_z) = sVar(cam_work_angle_look_z);
		}
		if (sVar(place_view_pos) != null_)
		{
			RealType snappos = sReal(setting_snap);
			if (keyboard_check(vk_shift))
				snappos = !(snappos > 0);
			if (snappos > 0)
			{
				sVar(place_view_pos)[X_] = snap(sVar(place_view_pos).Value(X_), sReal(setting_snap_size_position));
				sVar(place_view_pos)[Y_] = snap(sVar(place_view_pos).Value(Y_), sReal(setting_snap_size_position));
				sVar(place_view_pos)[Z_] = snap(sVar(place_view_pos).Value(Z_), sReal(setting_snap_size_position));
			}
			withOne (obj_timeline, sInt(place_tl), global::_app->id)
			{
				self->value[e_value_POS_X] = global::_app->place_view_pos.Value(X_);
				self->value[e_value_POS_Y] = global::_app->place_view_pos.Value(Y_);
				self->value[e_value_POS_Z] = global::_app->place_view_pos.Value(Z_);
				if (global::_app->place_spawn)
				{
					self->value_default[e_value_POS_X] = self->value.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = self->value.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = self->value.Value(e_value_POS_Z);
				}
				self->update_matrix = true;
			}
			
			tl_update_matrix(self);
			withOne (obj_history, sArr(history).Value(IntType(0)), global::_app->id)
			{
				self->value_default[e_value_POS_X] = global::_app->place_view_pos.Value(X_);
				self->value_default[e_value_POS_Y] = global::_app->place_view_pos.Value(Y_);
				self->value_default[e_value_POS_Z] = global::_app->place_view_pos.Value(Z_);
			}
			
			sVar(place_view_pos) = null_;
		}
		if (sVar(place_view_mouse) == null_ && sBool(mouse_left_released))
		{
			withOne (obj_history, sArr(history).Value(IntType(0)), global::_app->id)
			{
				self->value_default[e_value_POS_X] = IntType(0);
				self->value_default[e_value_POS_Y] = IntType(0);
				self->value_default[e_value_POS_Z] = IntType(0);
			}
			
			withOne (obj_timeline, sInt(place_tl), global::_app->id)
			{
				self->value_default[e_value_POS_X] = IntType(0);
				self->value_default[e_value_POS_Y] = IntType(0);
				self->value_default[e_value_POS_Z] = IntType(0);
				self->value[e_value_POS_X] = IntType(0);
				self->value[e_value_POS_Y] = IntType(0);
				self->value[e_value_POS_Z] = IntType(0);
				self->update_matrix = true;
			}
			
			tl_update_matrix(self);
			app_stop_place(self);
		}
		sVar(place_view_mouse) = null_;
		return 0.0;
	}
	
	void tl_mark_placed(ScopeAny self, BoolType active)
	{
		sBool(placed) = active;
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
		{
			withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
			{
				sBool(parent_is_placed) = active;
				tl_mark_placed(self, active);
			}
			
		}
	}
	
	void action_setting_place_new(ScopeAny self, VarType argument0)
	{
		sVar(setting_place_new) = argument0;
	}
	
	BoolType app_startup(ScopeAny self)
	{
		sVar(startup_error) = true;
		if (!lib_startup())
			return false;
		if (!is_cpp())
			if (!file_lib_startup())
				return false;
		if (!file_exists_lib(legacy_file))
			return missing_file(legacy_file);
		if (!file_exists_lib(language_file))
			return missing_file(language_file);
		vertex_format_startup(self);
		if (!shader_startup())
			return false;
		if (!legacy_startup())
			return false;
		app_startup_lists(self);
		app_startup_collapse();
		app_startup_micro_animations();
		app_startup_window(self);
		app_startup_themes(self);
		app_startup_fonts(self);
		app_startup_interface_lists();
		app_startup_keybinds();
		app_startup_recent(self);
		toasts_startup(self);
		json_startup();
		settings_startup(self);
		project_startup(self);
		render_startup(self);
		camera_startup(self);
		if (!minecraft_assets_startup(self))
			return false;
		sVar(startup_error) = false;
		return true;
	}
	
	void app_startup_collapse()
	{
		global::collapse_ani = IntType(1);
		global::collapse_groups = IntType(0);
		global::collapse_map = ds_map_create();
		collapse_register(/*"backup"*/ STR(121));
		collapse_register(/*"watermark"*/ STR(33));
		collapse_register(/*"file"*/ STR(122));
		collapse_register(/*"edit"*/ STR(123));
		collapse_register(/*"tools"*/ STR(124));
		collapse_register(/*"viewport"*/ STR(125));
		collapse_register(/*"timeline"*/ STR(126));
		collapse_register(/*"camera"*/ STR(127));
		collapse_register(/*"texfilter"*/ STR(128));
		collapse_register(/*"ssao"*/ STR(129));
		collapse_register(/*"shadows"*/ STR(130));
		collapse_register(/*"subsurface"*/ STR(131));
		collapse_register(/*"indirect"*/ STR(132));
		collapse_register(/*"reflections"*/ STR(133));
		collapse_register(/*"glow"*/ STR(134));
		collapse_register(/*"glow_falloff"*/ STR(135));
		collapse_register(/*"aa"*/ STR(136));
		collapse_register(/*"light_management"*/ STR(137));
		collapse_register(/*"models_scenery"*/ STR(138));
		collapse_register(/*"glint"*/ STR(139));
		collapse_register(/*"sunlight"*/ STR(140));
		collapse_register(/*"sky"*/ STR(141));
		collapse_register(/*"clouds"*/ STR(142));
		collapse_register(/*"ground"*/ STR(143));
		collapse_register(/*"fog"*/ STR(144));
		collapse_register(/*"wind"*/ STR(145));
		collapse_register(/*"follow_path"*/ STR(146));
		collapse_register(/*"rotatepoint"*/ STR(147));
		collapse_register(/*"ik"*/ STR(148));
		collapse_register(/*"followrot"*/ STR(149));
		collapse_register(/*"followpos"*/ STR(150));
		collapse_register(/*"followscale"*/ STR(151));
		collapse_register(/*"path_shape"*/ STR(152));
		collapse_register(/*"path_shape_tube"*/ STR(153));
		collapse_register(/*"light_management_cam"*/ STR(154));
		collapse_register(/*"aperture"*/ STR(155));
		collapse_register(/*"camshake"*/ STR(156));
		collapse_register(/*"dof"*/ STR(157));
		collapse_register(/*"dof_fringe"*/ STR(158));
		collapse_register(/*"bloom"*/ STR(159));
		collapse_register(/*"lensdirt"*/ STR(160));
		collapse_register(/*"clrcor"*/ STR(161));
		collapse_register(/*"grain"*/ STR(162));
		collapse_register(/*"vignette"*/ STR(163));
		collapse_register(/*"ca"*/ STR(164));
		collapse_register(/*"distort"*/ STR(165));
		collapse_register(/*"itemslot"*/ STR(166));
		collapse_register(/*"material_color"*/ STR(167));
		collapse_register(/*"material_surface"*/ STR(168));
		collapse_register(/*"material_subsurface"*/ STR(169));
		collapse_register(/*"textoutline"*/ STR(170));
		collapse_register(/*"tl_glint"*/ STR(171));
	}
	
	void app_startup_fonts(ScopeAny self)
	{
		sInt(font_subheading) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(172), (IntType)(8.5), false, false, IntType(32), IntType(1024));
		sInt(font_label) = font_add(fonts_directory + /*"noto_bold.ttf"*/ STR(173), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_value) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(174), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_digits) = font_add(fonts_directory + /*"notomono_regular.ttf"*/ STR(175), IntType(9), false, false, IntType(32), IntType(1024));
		sInt(font_caption) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(174), IntType(8), false, false, IntType(32), IntType(1024));
		sInt(font_button) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(172), (IntType)(9.5), false, false, IntType(32), IntType(1024));
		sVar(font_upgrade) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(174), IntType(18), false, false, IntType(32), IntType(1024));
		sInt(font_heading) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(172), IntType(10), false, false, IntType(32), IntType(1024));
		sVar(font_body_big) = font_add(fonts_directory + /*"noto_regular.ttf"*/ STR(174), IntType(12), false, false, IntType(32), IntType(1024));
		sInt(font_heading_big) = font_add(fonts_directory + /*"rubik_medium.ttf"*/ STR(172), IntType(13), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold_big) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(176), IntType(11), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(176), IntType(10), false, false, IntType(32), IntType(1024));
		sInt(font_splash_bold_secondary) = font_add(fonts_directory + /*"rubik_semibold.ttf"*/ STR(176), (IntType)(8.5), false, false, IntType(32), IntType(1024));
	}
	
	void app_startup_interface(ScopeAny self)
	{
		window_main_restore(sVar(setting_main_window_rect), sVar(setting_main_window_maximized));
		app_startup_shortcut_bar();
		app_startup_interface_bench();
		app_startup_interface_timeline();
		app_startup_interface_export();
		app_startup_interface_menus();
		app_startup_interface_settings_menus();
		app_startup_interface_popups();
		app_startup_interface_panels();
		app_startup_interface_tabs();
		app_startup_interface_toolbar();
		app_startup_interface_views();
		app_startup_interface_world_import();
		app_startup_interface_context_menu();
		togglebutton_reset(self);
		textbox_startup();
		history_startup();
		textfield_group_reset(self);
		background_ground_startup();
		background_sky_startup();
		sInt(http_assets) = http_get(link_assets_versions);
		project_load_startup();
		if (sStr(project_startup_fn) == /*""*/ STR(0))
		{
			if (dev_mode)
			{
				popup_newproject_clear(self);
				if (dev_mode_project != /*""*/ STR(0))
				{
					project_reset(self);
					if (!file_exists_lib(dev_mode_project))
					{
						sStr(setting_project_folder) = filename_dir(filename_dir(dev_mode_project)) + /*"\\"*/ STR(177);
						ObjType(obj_popup, sInt(popup_newproject))->folder = filename_name(filename_dir(dev_mode_project));
						ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_name)->text = string_replace(filename_name(dev_mode_project), filename_ext(dev_mode_project), /*""*/ STR(0));
						project_create(self);
					}
					project_load(self, { dev_mode_project });
				}
				else
				{
					StringType projfile = sStr(setting_project_folder) + ObjType(obj_popup, sInt(popup_newproject))->folder + /*"\\New Project.miproject"*/ STR(178);
					if (file_exists_lib(projfile))
						project_load(self, { projfile });
					else
						project_create(self);
					
				}
				
				sStr(window_state) = /*""*/ STR(0);
			}
			else
			{
				project_reset(self);
				if (!file_exists_lib(settings_file))
					popup_show(self, sInt(popup_welcome));
			}
			
		}
		else
		{
			popup_newproject_clear(self);
			project_reset(self);
			project_load(self, { sStr(project_startup_fn) });
			sStr(window_state) = /*""*/ STR(0);
		}
		
	}
	
	void app_startup_interface_bench()
	{
		global::_app->bench_open = false;
		global::_app->bench_hover_ani = IntType(0);
		global::_app->bench_hover_ani_goal = IntType(0);
		global::_app->bench_click_ani = IntType(0);
		global::_app->bench_click_ani_goal = IntType(0);
		global::_app->bench_rotate_ani = IntType(0);
		global::_app->bench_button_hover = false;
		global::_app->bench_show_ani_type = /*""*/ STR(0);
		global::_app->bench_show_ani = IntType(0);
		global::_app->bench_settings_ani = IntType(0);
		global::_app->bench_height = IntType(325);
		global::_app->bench_type_list = list_new();
		global::list_edit = global::_app->bench_type_list;
		ObjType(obj_list, global::list_edit)->get_name = true;
		ObjType(obj_list, global::list_edit)->show_ticks = false;
		list_item_add(/*"typechar"*/ STR(179), e_tl_type_CHARACTER, /*""*/ STR(0), null_, icons_CHARACTER, null_, ID_bench_click);
		list_item_add(/*"typebodypart"*/ STR(180), e_tl_type_BODYPART, /*""*/ STR(0), null_, icons_PART, null_, ID_bench_click);
		list_item_add(/*"typemodel"*/ STR(181), e_tl_type_MODEL, /*""*/ STR(0), null_, icons_MODEL, null_, ID_bench_click);
		list_item_add(/*"typeitem"*/ STR(182), e_tl_type_ITEM, /*""*/ STR(0), null_, icons_ITEM, null_, ID_bench_click);
		list_item_add(/*"typescenery"*/ STR(183), e_tl_type_SCENERY, /*""*/ STR(0), null_, icons_SCENERY, null_, ID_bench_click);
		list_item_add(/*"typeblock"*/ STR(184), e_tl_type_BLOCK, /*""*/ STR(0), null_, icons_BLOCK, null_, ID_bench_click);
		list_item_add(/*"typespblock"*/ STR(185), e_tl_type_SPECIAL_BLOCK, /*""*/ STR(0), null_, icons_BLOCK_SPECIAL, null_, ID_bench_click);
		list_item_add(/*"typeshape"*/ STR(186), e_tl_type_SHAPE, /*""*/ STR(0), null_, icons_SHAPES, null_, ID_bench_click);
		list_item_add(/*"typetext"*/ STR(187), e_tl_type_TEXT, /*""*/ STR(0), null_, icons_TEXT, null_, ID_bench_click);
		list_item_add(/*"typepath"*/ STR(188), e_tl_type_PATH, /*""*/ STR(0), null_, icons_PATH, null_, ID_bench_click);
		list_item_add(/*"typecamera"*/ STR(189), e_tl_type_CAMERA, /*""*/ STR(0), null_, icons_CAMERA, null_, ID_bench_click);
		list_item_add(/*"typeparticles"*/ STR(190), e_tl_type_PARTICLE_SPAWNER, /*""*/ STR(0), null_, icons_FIREWORKS, null_, ID_bench_click);
		list_item_add(/*"typelightsource"*/ STR(191), e_tl_type_LIGHT_SOURCE, /*""*/ STR(0), null_, icons_LIGHT_POINT, null_, ID_bench_click);
		list_item_add(/*"typeaudio"*/ STR(192), e_tl_type_AUDIO, /*""*/ STR(0), null_, icons_NOTE, null_, ID_bench_click);
		list_item_add(/*"typebackground"*/ STR(193), e_tl_type_BACKGROUND, /*""*/ STR(0), null_, icons_CLOUD, null_, ID_bench_click);
		global::list_edit = null_;
		global::_app->bench_settings = (new obj_bench_settings)->id;
		withOne (obj_bench_settings, global::_app->bench_settings, global::_app->id)
		{
			self->posx = IntType(0);
			self->posy = IntType(0);
			self->height = IntType(0);
			self->height_goal = global::_app->bench_height;
			temp_event_create(ScopeAny(self));
			self->model_name = default_model;
			self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
			self->model_part_name = default_model_part;
			temp_update_model(ScopeAny(self));
			temp_update_model_part(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			self->block_state = array_copy_1d(ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(sVar(block_name)))->default_state);
			temp_particles_init(ScopeAny(self));
			self->model_tex = global::mc_res;
			self->model_tex_material = global::mc_res;
			self->model_tex_normal = global::mc_res;
			self->item_tex = global::mc_res;
			self->item_tex_material = global::mc_res;
			self->item_tex_normal = global::mc_res;
			self->block_tex = global::mc_res;
			self->block_tex_material = global::mc_res;
			self->block_tex_normal = global::mc_res;
			self->text_font = global::mc_res;
			self->particle_preset = /*""*/ STR(0);
			self->type = e_temp_type_CHARACTER;
			self->shape_type = e_shape_type_CUBE;
			self->light_type = e_tl_type_POINT_LIGHT;
			self->preview = (new obj_preview)->id;
			self->char_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->char_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->char_list, /*"charname"*/ STR(194), IntType(0));
			for (IntType c = IntType(0); c < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); c++)
				sortlist_add(self->char_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(c))->name);
			self->item_scroll = (new obj_scrollbar)->id;
			self->block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->block_list)->script = ID_action_bench_block_name;
			sortlist_column_add(self->block_list, /*"blockname"*/ STR(195), IntType(0));
			for (IntType b = IntType(0); b < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->block_list); b++)
				if (!(ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->timeline > 0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->tl_model_name == /*""*/ STR(0) || ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->model_double > 0)
					sortlist_add(self->block_list, ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(b))->name);
			self->special_block_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->special_block_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->special_block_list, /*"spblockname"*/ STR(196), IntType(0));
			for (IntType c = IntType(0); c < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); c++)
				sortlist_add(self->special_block_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(c))->name);
			self->bodypart_model_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->bodypart_model_list)->script = ID_action_bench_model_name;
			sortlist_column_add(self->bodypart_model_list, /*"bodypartmodelname"*/ STR(197), IntType(0));
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->char_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->char_list).Value(m))->name);
			for (IntType m = IntType(0); m < ds_list_size(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list); m++)
				sortlist_add(self->bodypart_model_list, ObjType(obj_model, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->special_block_list).Value(m))->name);
			self->particles_list = (new obj_sortlist)->id;
			ObjType(obj_sortlist, self->particles_list)->script = ID_action_bench_particles;
			sortlist_column_add(self->particles_list, /*"particlepresetname"*/ STR(198), IntType(0));
		}
		
	}
	
}
