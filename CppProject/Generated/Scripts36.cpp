/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 22:36:37 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void menu_draw(ScopeAny self)
	{
		IntType m;
		VarType menu_remove, yy, aniease;
		BoolType menu_active, updatewidth;
		RealType listh, menuh, contentmenu, menu_x_draw, menu_wid_draw;
		menu_remove = null_;
		sVar(menu_current) = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
		{
			m = DsList(sInt(menu_list)).Value(i);
			menu_active = (i == (ds_list_size(sInt(menu_list)) - IntType(1)));
			sVar(menu_current) = m;
			contentmenu = (ObjType(obj_menu, m)->menu_type == e_menu_TRANSITION_LIST || ObjType(obj_menu, m)->menu_type == e_menu_CONTENT);
			updatewidth = false;
			if (ObjType(obj_menu, m)->menu_window != window_get_current())
				continue;
			if (ObjType(obj_menu, m)->menu_ani_type == /*"hide"*/ STR(750))
			{
				ObjType(obj_menu, m)->menu_ani -= test_reduced_motion(IntType(1), (0.1 * global::delta));
				if (ObjType(obj_menu, m)->menu_ani <= IntType(0))
				{
					ObjType(obj_menu, m)->menu_ani = IntType(0);
					menu_remove = sVar(menu_current);
					continue;
				}
			}
			else
				if (ObjType(obj_menu, m)->menu_ani_type == /*"show"*/ STR(751))
				{
					ObjType(obj_menu, m)->menu_ani += test_reduced_motion(IntType(1), (0.1 * global::delta));
					if (ObjType(obj_menu, m)->menu_ani >= IntType(1))
					{
						ObjType(obj_menu, m)->menu_ani = IntType(1);
						ObjType(obj_menu, m)->menu_ani_type = /*""*/ STR(0);
					}
				}
			
			if (ObjType(obj_menu, m)->menu_steps == IntType(0))
				draw_set_alpha(0.0);
			ObjType(obj_menu, m)->menu_ani_ease = ease(((ObjType(obj_menu, m)->menu_ani_type == /*"show"*/ STR(751)) ? /*"easeoutexpo"*/ STR(594) : /*"easeinexpo"*/ STR(593)), ObjType(obj_menu, m)->menu_ani);
			aniease = ObjType(obj_menu, m)->menu_ani_ease;
			listh = ((contentmenu > 0) ? VarType(ObjType(obj_menu, m)->menu_height) : min({ ObjType(obj_menu, m)->menu_amount, ObjType(obj_menu, m)->menu_show_amount }) * ObjType(obj_menu, m)->menu_item_h) + (ObjType(obj_menu, m)->menu_padding * IntType(2));
			menuh = (aniease * listh) + (IntType(12) * (IntType)ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->needed);
			yy = ((ObjType(obj_menu, m)->menu_flip > 0) ? (ObjType(obj_menu, m)->menu_y - menuh) : (ObjType(obj_menu, m)->menu_y + ObjType(obj_menu, m)->menu_button_h));
			sVar(content_x) = ObjType(obj_menu, m)->menu_x;
			sVar(content_y) = yy;
			sVar(content_width) = ObjType(obj_menu, m)->menu_w;
			sVar(content_height) = menuh;
			menu_x_draw = lerp(ObjType(obj_menu, m)->menu_x_start, sVar(content_x), aniease);
			menu_wid_draw = lerp(ObjType(obj_menu, m)->menu_w_start, sVar(content_width), aniease);
			draw_box(menu_x_draw, yy, menu_wid_draw, menuh, false, global::c_level_top, IntType(1));
			if (menuh > IntType(2))
				draw_outline(menu_x_draw, yy, menu_wid_draw, menuh, IntType(1), global::c_border, global::a_border, true);
			draw_box(menu_x_draw + IntType(1), yy + (ObjType(obj_menu, m)->menu_flip), menu_wid_draw - IntType(2), menuh - IntType(1), false, global::c_level_top, IntType(1));
			VarType shadowy;
			RealType shadowh;
			if (ObjType(obj_menu, m)->menu_w > ObjType(obj_menu, m)->menu_w_start)
			{
				shadowy = yy;
				shadowh = menuh;
				draw_dropshadow(self, menu_x_draw, shadowy, menu_wid_draw, shadowh, c_black, aniease);
			}
			else
			{
				shadowy = ((ObjType(obj_menu, m)->menu_flip > 0) ? yy : yy - ObjType(obj_menu, m)->menu_button_h);
				shadowh = menuh + ObjType(obj_menu, m)->menu_button_h;
				draw_dropshadow(self, menu_x_draw, shadowy, menu_wid_draw, shadowh, c_black, aniease);
			}
			
			if (sVar(window_busy) == /*"menu"*/ STR(1099) && ObjType(obj_menu, m)->menu_ani_type != /*"hide"*/ STR(750) && menu_active)
				sVar(window_busy) = /*""*/ STR(0);
			sBool(content_mouseon) = app_mouse_box(self, ObjType(obj_menu, m)->menu_x, yy, ObjType(obj_menu, m)->menu_w, menuh);
			if (!(contentmenu > 0))
			{
				if (sVar(window_focus) == string(ObjType(obj_menu, m)->menu_scroll_vertical) && !sBool(mouse_left))
					sVar(menu_search_busy) = /*""*/ STR(0);
				if (sVar(window_focus) == string(ObjType(obj_menu, m)->menu_scroll_horizontal) && !sBool(mouse_left))
					sVar(menu_search_busy) = /*""*/ STR(0);
				if (ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed && sBool(content_mouseon))
					sStr(window_scroll_focus) = string(ObjType(obj_menu, m)->menu_scroll_vertical);
				if (ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->needed && sBool(content_mouseon) && keyboard_check(vk_shift))
					sStr(window_scroll_focus) = string(ObjType(obj_menu, m)->menu_scroll_horizontal);
				if (ObjType(obj_menu, m)->menu_amount * ObjType(obj_menu, m)->menu_item_h > listh)
					scrollbar_draw(self, ObjType(obj_menu, m)->menu_scroll_vertical, e_scroll_VERTICAL, ObjType(obj_menu, m)->menu_x + ObjType(obj_menu, m)->menu_w - IntType(12), yy, aniease * listh, (ObjType(obj_menu, m)->menu_amount * ObjType(obj_menu, m)->menu_item_h) + (ObjType(obj_menu, m)->menu_padding * IntType(2)));
				else
					ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed = false;
				
				scrollbar_draw(self, ObjType(obj_menu, m)->menu_scroll_horizontal, e_scroll_HORIZONTAL, ObjType(obj_menu, m)->menu_x, yy + menuh - IntType(12), ObjType(obj_menu, m)->menu_w - (IntType(12) * (IntType)ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed), ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->width);
			}
			else
			{
				ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed = false;
				ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->needed = false;
			}
			
			sVar(content_width) = ObjType(obj_menu, m)->menu_w - (IntType(12) * (IntType)ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed);
			sVar(content_height) = menuh - (IntType(12) * (IntType)ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->needed);
			menu_wid_draw = lerp(ObjType(obj_menu, m)->menu_w_start, sVar(content_width), aniease);
			sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
			BoolType menumouseon = app_mouse_box(self, ObjType(obj_menu, m)->menu_x, ObjType(obj_menu, m)->menu_y, ObjType(obj_menu, m)->menu_w, ObjType(obj_menu, m)->menu_button_h) && (ObjType(obj_menu, m)->menu_type != e_menu_CONTENT && ObjType(obj_menu, m)->menu_type != e_menu_TRANSITION_LIST);
			IntType mouseitem = null_;
			IntType toggledindex = -IntType(1);
			draw_set_font(sInt(font_value));
			switch ((IntType)ObjType(obj_menu, m)->menu_type)
			{
				case e_menu_LIST:
				case e_menu_LIST_SEAMLESS:
				case e_menu_TIMELINE:
				case e_menu_BIOME:
				{
					clip_begin(sVar(content_x), yy, sVar(content_width), sVar(content_height));
					if (!(ObjType(obj_menu, m)->menu_flip > 0))
						yy += (-listh + (listh * aniease));
					if (ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed)
						yy -= ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->value;
					yy += ObjType(obj_menu, m)->menu_padding;
					for (IntType j = IntType(0); j < ObjType(obj_menu, m)->menu_amount; j++)
					{
						IntType item;
						VarType itemy, itemh;
						item = DsList(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item).Value(j);
						itemy = yy;
						itemh = ObjType(obj_menu, m)->menu_item_h;
						if ((ObjType(obj_menu, m)->menu_value == ObjType(obj_list_item, item)->value) && !(ObjType(obj_list_item, item)->toggled > 0) && !ObjType(obj_menu, m)->menu_nav_use)
						{
							ObjType(obj_list_item, item)->toggled = true;
							updatewidth = true;
						}
						if (ObjType(obj_menu, m)->menu_nav_use)
							ObjType(obj_list_item, item)->toggled = (j == ObjType(obj_menu, m)->menu_nav_index);
						else
							if (j == ObjType(obj_menu, m)->menu_nav_index)
							{
								ObjType(obj_menu, m)->menu_nav_index = -IntType(1);
								ObjType(obj_list_item, item)->toggled = false;
							}
						
						if (ObjType(obj_menu, m)->menu_value == ObjType(obj_list_item, item)->value)
							toggledindex = j;
						list_item_draw(self, { item, menu_x_draw, itemy, menu_wid_draw, itemh, false, ObjType(obj_menu, m)->menu_margin, -ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->value });
						if (ObjType(obj_list_item, item)->hover > 0)
						{
							mouseitem = item;
							if (ObjType(obj_menu, m)->menu_nav_use && sInt(mouse_still) == IntType(0))
								ObjType(obj_menu, m)->menu_nav_use = false;
						}
						yy += ObjType(obj_menu, m)->menu_item_h;
					}
					clip_end();
					if (ObjType(obj_menu, m)->menu_type == e_menu_LIST || ObjType(obj_menu, m)->menu_type == e_menu_LIST_SEAMLESS)
					{
						if (updatewidth)
							list_update_width(self, ObjType(obj_menu, m)->menu_list);
						VarType w = ObjType(obj_menu, m)->menu_w;
						ObjType(obj_menu, m)->menu_w = max({ ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->width + IntType(16), ObjType(obj_menu, m)->menu_w });
						if ((ObjType(obj_menu, m)->menu_x + w) - ObjType(obj_menu, m)->menu_w > IntType(0))
							ObjType(obj_menu, m)->menu_x = (ObjType(obj_menu, m)->menu_x + w) - ObjType(obj_menu, m)->menu_w;
					}
					break;
				}
				
				case e_menu_CONTENT:
				case e_menu_TRANSITION_LIST:
				{
					clip_begin(menu_x_draw, sVar(content_y), sReal(window_width), sVar(content_height));
					if (ObjType(obj_menu, m)->menu_type == e_menu_CONTENT)
					{
						sVar(dx) = sVar(content_x) + IntType(12);
						sVar(dy) = sVar(content_y) + IntType(12);
						sVar(dw) = sVar(content_width) - IntType(24);
						sVar(dh) = sVar(content_height) - IntType(24);
						sVar(dy_start) = sVar(dy);
					}
					else
						sVar(dy_start) = sVar(content_y);
					
					script_execute(self, { ObjType(obj_menu, m)->menu_script, ObjType(obj_menu, m)->menu_x, yy, ObjType(obj_menu, m)->menu_w, ObjType(obj_menu, m)->menu_height });
					ObjType(obj_menu, m)->menu_height_goal = (sVar(dy) - sVar(dy_start));
					if (ObjType(obj_menu, m)->menu_type == e_menu_CONTENT)
						ObjType(obj_menu, m)->menu_height_goal += (IntType(24) - IntType(8));
					clip_end();
					IntType j = IntType(0);
					while ((((ObjType(obj_menu, m)->menu_y - ObjType(obj_menu, m)->menu_height_goal) < IntType(0) && ObjType(obj_menu, m)->menu_flip > 0) || (sVar(content_y) + ObjType(obj_menu, m)->menu_height_goal) > sReal(window_height) && !(ObjType(obj_menu, m)->menu_flip > 0)) && j < IntType(10))
					{
						ObjType(obj_menu, m)->menu_w += IntType(32);
						ObjType(obj_menu, m)->menu_x -= 32.0;
						sVar(content_x) = IntType(0);
						sVar(content_width) = IntType(0);
						clip_begin(IntType(0), IntType(0), IntType(0), IntType(0));
						script_execute(self, { ObjType(obj_menu, m)->menu_script, ObjType(obj_menu, m)->menu_x, yy, ObjType(obj_menu, m)->menu_w, ObjType(obj_menu, m)->menu_height });
						clip_end();
						ObjType(obj_menu, m)->menu_height_goal = (sVar(dy) - sVar(dy_start)) + (IntType(24) - IntType(8));
						j++;
					}
					
					if (ObjType(obj_menu, m)->menu_steps == IntType(0))
					{
						ObjType(obj_menu, m)->menu_height = ObjType(obj_menu, m)->menu_height_goal;
						if ((ObjType(obj_menu, m)->menu_y - ObjType(obj_menu, m)->menu_height) > (sReal(window_height) - (sVar(content_y) + ObjType(obj_menu, m)->menu_height)))
							ObjType(obj_menu, m)->menu_flip = true;
					}
					else
					{
						if (ObjType(obj_menu, m)->menu_flip > 0)
							ObjType(obj_menu, m)->menu_height_goal = max({ ObjType(obj_menu, m)->menu_height_goal, ObjType(obj_menu, m)->menu_height });
						ObjType(obj_menu, m)->menu_height += (ObjType(obj_menu, m)->menu_height_goal - ObjType(obj_menu, m)->menu_height) / max({ IntType(1), 4.0 / global::delta });
					}
					
					break;
				}
				
			}
			
			BoolType nav_close = false;
			if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_down))
			{
				if (!ObjType(obj_menu, m)->menu_nav_use)
				{
					ObjType(obj_menu, m)->menu_nav_use = true;
					ObjType(obj_menu, m)->menu_nav_index = toggledindex;
				}
				ObjType(obj_menu, m)->menu_nav_index += keyboard_check_pressed(vk_down) - keyboard_check_pressed(vk_up);
				ObjType(obj_menu, m)->menu_nav_index = mod_fix(ObjType(obj_menu, m)->menu_nav_index, ObjType(obj_menu, m)->menu_amount);
			}
			if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_escape))
			{
				if (ObjType(obj_menu, m)->menu_nav_use)
				{
					nav_close = true;
					mouseitem = DsList(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item).Value(ObjType(obj_menu, m)->menu_nav_index);
				}
				else
					ObjType(obj_menu, m)->menu_ani_type = /*"hide"*/ STR(750);
				
			}
			if (ObjType(obj_menu, m)->menu_type == e_menu_TIMELINE && ObjType(obj_menu, m)->menu_item_extend > 0)
			{
				app_mouse_clear(self);
				action_tl_extend(self, ObjType(obj_menu, m)->menu_item_extend);
				list_destroy(self, ObjType(obj_menu, m)->menu_list);
				ObjType(obj_menu, m)->menu_list = menu_timeline_init(self, m);
				ObjType(obj_menu, m)->menu_amount = ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
				ObjType(obj_menu, m)->menu_item_extend = null_;
				ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
			}
			if (ObjType(obj_menu, m)->menu_type == e_menu_BIOME && ObjType(obj_menu, m)->menu_item_extend > 0)
			{
				app_mouse_clear(self);
				idReal(ObjType(obj_menu, m)->menu_item_extend, variants_extend) = !(idReal(ObjType(obj_menu, m)->menu_item_extend, variants_extend) > 0);
				list_destroy(self, ObjType(obj_menu, m)->menu_list);
				ObjType(obj_menu, m)->menu_list = menu_biome_init(self, m);
				ObjType(obj_menu, m)->menu_amount = ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
				ObjType(obj_menu, m)->menu_item_extend = null_;
				ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
			}
			if ((!(ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->needed && ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_vertical)->mouseon) && !(ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->needed && ObjType(obj_scrollbar, ObjType(obj_menu, m)->menu_scroll_horizontal)->mouseon) && sBool(mouse_left_released) && menu_active && ObjType(obj_menu, m)->menu_ani_type != /*"hide"*/ STR(750) && sVar(menu_search_busy) == /*""*/ STR(0)) || nav_close)
			{
				BoolType close = false;
				if (contentmenu > 0)
				{
					if (!sBool(content_mouseon) && !menumouseon && sVar(window_focus) == /*""*/ STR(0))
						close = true;
				}
				else
				{
					if (mouseitem > 0)
					{
						ObjType(obj_menu, m)->menu_ani = IntType(2);
						ObjType(obj_menu, m)->menu_value = ObjType(obj_list_item, mouseitem)->value;
						global::list_item_script = (ObjType(obj_list_item, mouseitem)->script == null_ ? ObjType(obj_menu, m)->menu_script : ObjType(obj_list_item, mouseitem)->script);
						global::list_item_script_value = ObjType(obj_menu, m)->menu_value;
						for (IntType j = IntType(0); j < ObjType(obj_menu, m)->menu_amount; j++)
						{
							IntType item = DsList(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item).Value(j);
							if (item != mouseitem)
								ObjType(obj_list_item, item)->toggled = false;
						}
						app_mouse_clear(self);
						if (!keyboard_check(vk_shift))
							close = true;
					}
					if (!sBool(content_mouseon) && !menumouseon && !nav_close)
						close = true;
				}
				
				if (close)
				{
					ObjType(obj_menu, m)->menu_ani = IntType(1);
					ObjType(obj_menu, m)->menu_ani_type = /*"hide"*/ STR(750);
					if (ds_list_size(sInt(menu_list)) > IntType(1))
						sVar(window_busy) = /*"menu"*/ STR(1099);
					else
						sVar(window_busy) = ObjType(obj_menu, m)->menu_busy_prev;
					
				}
			}
			if (ObjType(obj_menu, m)->menu_steps == IntType(0))
				draw_set_alpha(1.0);
			ObjType(obj_menu, m)->menu_steps++;
			if (sVar(window_busy) == /*""*/ STR(0) && ObjType(obj_menu, m)->menu_ani_type != /*"hide"*/ STR(750) && menu_active)
				sVar(window_busy) = /*"menu"*/ STR(1099);
		}
		if (menu_remove != null_)
		{
			instance_destroy(self, { menu_remove });
			ObjType(obj_textbox, sInt(menu_search_tbx))->text = /*""*/ STR(0);
			sVar(menu_search_busy) = /*""*/ STR(0);
			if (ds_list_size(sInt(menu_list)) == IntType(0))
				sInt(menu_popup) = null_;
		}
		sVar(menu_current) = null_;
	}
	
	void menu_event_create(Scope<obj_menu> self)
	{
		self->menu_name = /*""*/ STR(0);
		self->menu_type = /*""*/ STR(0);
		self->menu_window = e_window_MAIN;
		self->menu_temp_edit = null_;
		self->menu_script = null_;
		self->menu_value = null_;
		self->menu_ani = IntType(0);
		self->menu_ani_ease = IntType(0);
		self->menu_ani_type = /*""*/ STR(0);
		self->menu_flip = false;
		self->menu_x = IntType(0);
		self->menu_x_start = IntType(0);
		self->menu_y = IntType(0);
		self->menu_w = IntType(0);
		self->menu_w_start = IntType(0);
		self->menu_button_h = IntType(0);
		self->menu_amount = IntType(0);
		self->menu_show_amount = IntType(0);
		self->menu_item[IntType(0)] = null_;
		self->menu_item_w = IntType(0);
		self->menu_item_h = IntType(0);
		self->menu_include_tl_edit = true;
		self->menu_count = IntType(0);
		self->menu_item_extend = null_;
		self->menu_scroll_vertical = (new obj_scrollbar)->id;
		self->menu_scroll_horizontal = (new obj_scrollbar)->id;
		self->menu_height = IntType(0);
		self->menu_height_goal = IntType(0);
		self->menu_transition = null_;
		self->menu_steps = IntType(0);
		self->menu_floating = false;
		self->menu_list = null_;
		self->menu_padding = IntType(4);
		self->menu_busy_prev = /*""*/ STR(0);
		self->menu_nav_use = false;
		self->menu_nav_index = IntType(0);
		global::_app->menu_count++;
		ds_list_add({ global::_app->menu_list, self->id });
	}
	
	void menu_event_destroy(ScopeAny self)
	{
		if (sInt(menu_list) != null_)
			list_destroy(self, sInt(menu_list));
		instance_destroy(self, { sInt(menu_scroll_vertical) });
		instance_destroy(self, { sInt(menu_scroll_horizontal) });
		ds_list_delete(global::_app->menu_list, ds_list_find_index(global::_app->menu_list, self->id));
		global::_app->menu_count--;
	}
	
	void menu_focus_selected(Scope<obj_menu> self)
	{
		for (IntType m = IntType(0); m < self->menu_amount; m++)
		{
			if (self->menu_value == ObjType(obj_list_item, DsList(ObjType(obj_list, self->menu_list)->item).Value(m))->value)
			{
				ObjType(obj_scrollbar, self->menu_scroll_vertical)->value = floor(clamp(m - floor(self->menu_show_amount / 2.0), IntType(0), max({ IntType(0), self->menu_amount - self->menu_show_amount })) / floor((RealType)self->menu_w / self->menu_item_w)) * self->menu_item_h;
				ObjType(obj_scrollbar, self->menu_scroll_vertical)->value_goal = ObjType(obj_scrollbar, self->menu_scroll_vertical)->value;
				break;
			}
		}
	}
	
	void menu_grid_settings(ScopeAny self)
	{
		draw_set_font(sInt(font_label));
		IntType draggerwid;
		draggerwid = text_max_width({ /*"viewgridrows"*/ STR(1718), /*"viewgridcolumns"*/ STR(1719) }) + IntType(16) + dragger_width;
		tab_control_dragger(self);
		draw_dragger(self, /*"viewgridrows"*/ STR(1718), sVar(dx), sVar(dy), dragger_width, sVar(project_grid_rows), 0.05, IntType(1), IntType(10), IntType(3), IntType(1), sInt(tbx_grid_rows), ID_action_project_grid_rows, null_, true);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewgridcolumns"*/ STR(1719), sVar(dx), sVar(dy), dragger_width, sVar(project_grid_columns), 0.05, IntType(1), IntType(10), IntType(3), IntType(1), sInt(tbx_grid_columns), ID_action_project_grid_columns, null_, true);
		tab_next(self);
		sVar(settings_menu_w) = (draggerwid + IntType(24));
	}
	
	void menu_item_set_extend(ScopeAny self, VarType item)
	{
		ObjType(obj_menu, sVar(menu_current))->menu_item_extend = item;
	}
	
	void menu_quality_settings(ScopeAny self)
	{
		IntType capwid;
		VarType text;
		draw_set_font(sInt(font_label));
		capwid = max({ IntType(176), text_max_width({ /*"viewmodepass"*/ STR(1508) }) + IntType(16) });
		text = text_get({ /*"viewmodepass"*/ STR(1508) + DsList(global::render_pass_list).Value(sInt(project_render_pass)) });
		tab_control_menu(self);
		draw_button_menu(self, { /*"viewmodepass"*/ STR(1508), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sInt(project_render_pass), text, ID_action_project_render_pass });
		tab_next(self);
		sVar(settings_menu_w) = (capwid + IntType(24));
	}
	
	RealType menu_settings_draw(ScopeAny self)
	{
		if (sInt(settings_menu_window) != window_get_current())
			return IntType(0);
		if (sStr(settings_menu_ani_type) == /*"hide"*/ STR(750))
		{
			if (sReal(settings_menu_quick) > 0)
				sVar(settings_menu_ani) = min({ 0.01, sVar(settings_menu_ani) });
			sVar(settings_menu_ani) -= test_reduced_motion(IntType(1), (0.08 * global::delta));
			if (sVar(settings_menu_ani) <= IntType(0))
			{
				sVar(settings_menu_ani) = IntType(0);
				sStr(settings_menu_name) = /*""*/ STR(0);
				sStr(settings_menu_ani_type) = /*""*/ STR(0);
				sVar(window_busy) = sVar(settings_menu_busy_prev);
				context_menu_close(self);
				list_destroy(self, sInt(settings_menu_list));
				return IntType(0);
			}
		}
		else
			if (sStr(settings_menu_ani_type) == /*"show"*/ STR(751))
			{
				if (sReal(settings_menu_quick) > 0)
					sVar(settings_menu_ani) = max({ 0.99, sVar(settings_menu_ani) });
				sVar(settings_menu_ani) += test_reduced_motion(IntType(1), (0.08 * global::delta));
				if (sVar(settings_menu_ani) >= IntType(1))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*""*/ STR(0);
				}
			}
		
		if (sStr(settings_menu_name) == /*""*/ STR(0))
			return IntType(0);
		VarType settingsmenuease = ease(((sStr(settings_menu_ani_type) == /*"show"*/ STR(751)) ? /*"easeoutexpo"*/ STR(594) : /*"easeinexpo"*/ STR(593)), sVar(settings_menu_ani));
		sVar(content_x) = sVar(settings_menu_x) - (round((RealType)sVar(settings_menu_w) / 2.0) * (IntType)sBool(settings_menu_primary));
		sVar(content_y) = sVar(settings_menu_y);
		sVar(content_width) = sVar(settings_menu_w);
		sVar(content_height) = ((sInt(settings_menu_script) > 0) ? sVar(settings_menu_h) : VarType((IntType(28) * sInt(settings_menu_amount))));
		if (sBool(settings_menu_above) && sVar(content_y) - sVar(content_height) > IntType(0))
			sVar(content_y) = ((sVar(content_y) - sVar(content_height)) + IntType(16)) - (IntType(16) * settingsmenuease);
		else
			sVar(content_y) = ((sVar(content_y) + sReal(settings_menu_button_h)) - IntType(16)) + (IntType(16) * settingsmenuease);
		
		sVar(content_y) = round(sVar(content_y));
		if (sVar(window_busy) == /*"settingsmenu"*/ STR(1050) && sStr(settings_menu_ani_type) == /*""*/ STR(0) && sVar(settings_menu_ani) == IntType(1))
			sVar(window_busy) = /*""*/ STR(0);
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		if (sInt(settings_menu_steps) < IntType(2))
		{
			if (sVar(content_x) + sVar(content_width) > sReal(window_width))
			{
				sVar(settings_menu_x) -= (sVar(settings_menu_w) - sReal(settings_menu_button_w));
			}
			draw_set_alpha(0.0);
		}
		else
			draw_set_alpha(settingsmenuease);
		
		draw_dropshadow(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), c_black, settingsmenuease);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_outline(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border * settingsmenuease, true);
		if (sInt(settings_menu_script) > 0)
		{
			sVar(dx) = sVar(content_x) + IntType(12);
			sVar(dy) = sVar(content_y) + IntType(12);
			sVar(dw) = sVar(settings_menu_w) - IntType(24);
			if (sBool(textbox_jump))
				ds_list_clear(sInt(textbox_list));
			script_execute(self, { sInt(settings_menu_script) });
			sVar(dy) += IntType(4);
			if (sVar(settings_menu_h_max) == null_)
				sVar(settings_menu_h) = sVar(dy) - sVar(content_y);
			else
			{
				sVar(settings_menu_h) = min({ sVar(dy) - sVar(content_y), sVar(settings_menu_h_max) });
				if ((sVar(dy) - sVar(content_y)) > sVar(settings_menu_h_max))
				{
					scrollbar_draw(self, sInt(settings_menu_scroll), e_scroll_VERTICAL, sVar(content_x) + sVar(content_width) - IntType(12), sVar(content_y), sVar(content_height), sVar(dy) - sVar(content_y));
					sStr(window_scroll_focus) = string(sInt(settings_menu_scroll));
				}
			}
			
		}
		else
		{
			VarType itemx, itemy;
			itemx = sVar(content_x);
			itemy = sVar(content_y);
			for (IntType i = IntType(0); i < sInt(settings_menu_amount); i++)
			{
				list_item_draw(self, { DsList(ObjType(obj_list, sInt(settings_menu_list))->item).Value(i), itemx, itemy, sVar(content_width), IntType(28), false });
				itemy += IntType(28);
			}
		}
		
		if (sBool(settings_menu_primary))
		{
			draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_level_middle, settingsmenuease });
			if (sInt(settings_menu_amount) > IntType(0) && ObjType(obj_list_item, DsList(ObjType(obj_list, sInt(settings_menu_list))->item).Value(IntType(0)))->hover > 0)
			{
				if (sBool(mouse_left))
					draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_accent_overlay, global::a_accent_overlay * settingsmenuease });
				else
					draw_image({ ID_spr_tooltip_arrow, IntType(0), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_overlay, global::a_overlay * settingsmenuease });
				
			}
			draw_image({ ID_spr_tooltip_arrow, IntType(1), sVar(settings_menu_x), sVar(content_y), IntType(1), IntType(1), global::c_border, global::a_border * settingsmenuease });
		}
		draw_set_alpha(1.0);
		if ((sVar(content_y) + sVar(content_height)) > sReal(window_height))
			sBool(settings_menu_above) = true;
		if (sStr(settings_menu_ani_type) == /*""*/ STR(0) && sBool(mouse_left_released) && !sBool(context_menu_mouseon) && (ds_list_size(sInt(menu_list)) == IntType(0)) && (sVar(window_focus) == /*""*/ STR(0) || sVar(window_focus) == string(sInt(settings_menu_scroll))))
		{
			if (sInt(settings_menu_script) > 0)
			{
				if (!app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*"hide"*/ STR(750);
					sVar(window_busy) = /*"settingsmenu"*/ STR(1050);
					sVar(window_focus) = /*""*/ STR(0);
					context_menu_close(self);
				}
			}
			else
			{
				if (!sBool(context_menu_mouseon))
				{
					sVar(settings_menu_ani) = IntType(1);
					sStr(settings_menu_ani_type) = /*"hide"*/ STR(750);
					sVar(window_busy) = /*"settingsmenu"*/ STR(1050);
					sVar(window_focus) = /*""*/ STR(0);
					context_menu_close(self);
				}
			}
			
		}
		sInt(settings_menu_steps)++;
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(750))
			sVar(window_busy) = /*"settingsmenu"*/ STR(1050);
		return 0.0;
	}
	
	void menu_settings_set(ScopeAny self, VarType xx, VarType yy, StringType name, RealType buttonheight)
	{
		sVar(settings_menu_busy_prev) = sVar(window_busy);
		sVar(window_busy) = /*"settingsmenu"*/ STR(1050);
		sVar(window_focus) = /*""*/ STR(0);
		app_mouse_clear(self);
		sInt(settings_menu_window) = window_get_current();
		sStr(settings_menu_name) = name;
		sVar(settings_menu_ani) = IntType(0);
		sStr(settings_menu_ani_type) = /*"show"*/ STR(751);
		sInt(settings_menu_steps) = IntType(0);
		sReal(settings_menu_quick) = false;
		sVar(settings_menu_sortlist) = /*""*/ STR(0);
		ObjType(obj_scrollbar, sInt(settings_menu_scroll))->value_goal = IntType(0);
		ObjType(obj_scrollbar, sInt(settings_menu_scroll))->value = IntType(0);
		sBool(settings_menu_primary) = false;
		sVar(settings_menu_x) = xx;
		sVar(settings_menu_y) = yy;
		sVar(settings_menu_h_max) = null_;
		sBool(settings_menu_above) = false;
		sInt(settings_menu_list) = list_init(self, sStr(settings_menu_name));
		sInt(settings_menu_amount) = ds_list_size(ObjType(obj_list, sInt(settings_menu_list))->item);
		list_update_width(self, sInt(settings_menu_list));
		sVar(settings_menu_w) = (ObjType(obj_list, sInt(settings_menu_list))->width + IntType(12));
		if ((sVar(settings_menu_x) + ((RealType)sVar(settings_menu_w) / 2.0)) > sReal(window_width))
			sVar(settings_menu_x) += sReal(window_width) - (sVar(settings_menu_x) + ((RealType)sVar(settings_menu_w) / 2.0));
		sReal(settings_menu_button_h) = buttonheight;
		sReal(settings_menu_button_w) = IntType(16);
	}
	
	void menu_settings_transitions(ScopeAny self)
	{
		menu_transitions(self, sVar(settings_menu_x), sVar(settings_menu_y), sVar(settings_menu_w), sVar(settings_menu_h));
	}
	
	void menu_snap_settings(ScopeAny self)
	{
		draw_set_font(sInt(font_label));
		IntType draggerwid, switchwid;
		draggerwid = text_max_width({ /*"viewsnapmove"*/ STR(1720), /*"viewsnaprotate"*/ STR(1721), /*"viewsnapscale"*/ STR(1722) }) + IntType(16) + dragger_width;
		switchwid = text_max_width({ /*"viewsnapabsolute"*/ STR(1723) }) + IntType(28) + IntType(16) + IntType(24);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnapmove"*/ STR(1720), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_position), 0.01, snap_min, no_limit, IntType(1), snap_min, sInt(tbx_snap_position), ID_action_setting_snap_size_position);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnaprotate"*/ STR(1721), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_rotation), 0.01, snap_min, no_limit, IntType(15), snap_min, sInt(tbx_snap_rotation), ID_action_setting_snap_size_rotation);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"viewsnapscale"*/ STR(1722), sVar(dx), sVar(dy), dragger_width, sReal(setting_snap_size_scale), 0.01, snap_min, no_limit, IntType(1), snap_min, sInt(tbx_snap_scale), ID_action_setting_snap_size_scale);
		tab_next(self);
		draw_divide(sVar(content_x), sVar(dy), sVar(content_width));
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"viewsnapabsolute"*/ STR(1723), sVar(dx), sVar(dy), sVar(setting_snap_absolute), ID_action_setting_snap_absolute, /*"viewsnapabsolutetip"*/ STR(1724));
		tab_next(self);
		sVar(settings_menu_w) = (max({ draggerwid, switchwid }) + IntType(24));
	}
	
	BoolType menu_swatches_draw(ScopeAny self)
	{
		VarType dystart = sVar(dy);
		sVar(dx) += IntType(8);
		sVar(dy) += IntType(8);
		for (IntType s = IntType(0); s < array_length(VarType::CreateRef(global::minecraft_swatch_array)); s++)
		{
			IntType swatch = global::minecraft_swatch_array.Value(s);
			sVar(dy) += IntType(14);
			draw_label(self, { text_get({ /*"swatch"*/ STR(1725) + ObjType(obj_swatch, swatch)->name }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
			sVar(dy) += IntType(9);
			VarType xx;
			xx = sVar(dx);
			for (IntType c = IntType(0); c < array_length(VarType::CreateRef(ObjType(obj_swatch, swatch)->colors)); c++)
			{
				if (draw_button_swatch(self, xx, sVar(dy), IntType(20), IntType(20), /*"swatch"*/ STR(1725) + ObjType(obj_swatch, swatch)->name + ObjType(obj_swatch, swatch)->color_names.Value(c), ObjType(obj_swatch, swatch)->colors.Value(c)))
				{
					if (ObjType(obj_context_menu_level, sVar(context_menu_current))->name == /*"contextmenuswatchset"*/ STR(1555))
						global::list_item_script = ID_action_value_set_color;
					else
						global::list_item_script = ID_action_value_mix_color;
					
					global::list_item_script_value = ObjType(obj_swatch, swatch)->colors.Value(c);
					context_menu_close(self);
					app_mouse_clear(self);
					sVar(window_busy) = sVar(context_menu_busy_prev);
					return true;
				}
				xx += IntType(24);
				if ((mod(c, IntType(8))) == IntType(7) && (c != array_length(VarType::CreateRef(ObjType(obj_swatch, swatch)->colors)) - IntType(1)))
				{
					sVar(dy) += IntType(24);
					xx = sVar(dx);
				}
			}
			sVar(dy) += IntType(24);
		}
		sVar(dy) += IntType(8);
		ObjType(obj_context_menu_level, sVar(context_menu_current))->level_height = (sVar(dy) - dystart);
		return false;
	}
	
	IntType menu_timeline_init(ScopeAny self, VarType menu)
	{
		list_init_start();
		menu_add_timeline(self, null_, null_, -IntType(1), menu);
		return list_init_end(self);
	}
	
	VarType menu_transitions(ScopeAny self, VarType xx, VarType yy, VarType wid, VarType hei)
	{
		VarType transition = null_;
		sVar(dx_start) = xx + IntType(12);
		sVar(dx) = sVar(dx_start);
		sVar(dy_start) = yy;
		sVar(dy) = sVar(dy_start) + IntType(12);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenuother"*/ STR(1726) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (!string_contains(DsList(global::transition_list).Value(i), /*"ease"*/ STR(608)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dy) += IntType(36) + IntType(10);
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueasein"*/ STR(1727) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easein"*/ STR(609)) && !string_contains(DsList(global::transition_list).Value(i), /*"easeinout"*/ STR(610)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueaseout"*/ STR(1728) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easeout"*/ STR(611)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		sVar(dy) += IntType(14);
		draw_label(self, { text_get({ /*"transitionmenueaseinout"*/ STR(1729) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(12);
		for (IntType i = IntType(0); i < ds_list_size(global::transition_list); i++)
		{
			if (string_contains(DsList(global::transition_list).Value(i), /*"easeinout"*/ STR(610)))
			{
				if (sVar(dx) + IntType(46) > xx + wid)
				{
					sVar(dx) = sVar(dx_start);
					sVar(dy) += IntType(46);
				}
				if (draw_button_transition(self, sVar(dx), sVar(dy), DsList(global::transition_list).Value(i)))
					transition = DsList(global::transition_list).Value(i);
				sVar(dx) += IntType(46);
			}
		}
		sVar(dx) = sVar(dx_start);
		sVar(dy) += IntType(46);
		if (sStr(settings_menu_name) != /*""*/ STR(0) && transition != null_)
		{
			action_tl_frame_transition(self, transition);
			sStr(settings_menu_ani_type) = /*"hide"*/ STR(750);
			sVar(settings_menu_ani) = ((sReal(settings_menu_quick) > 0) ? 0.01 : 1.0);
			sVar(window_busy) = /*""*/ STR(0);
			return true;
		}
		if (sVar(context_menu_name) != /*""*/ STR(0) && transition != null_)
		{
			action_tl_frame_transition(self, transition);
			context_menu_close(self);
			app_mouse_clear(self);
			return true;
		}
		else
			if (transition != null_)
			{
				action_tl_frame_transition(self, transition);
				ObjType(obj_menu, sVar(menu_current))->menu_ani = IntType(1);
				ObjType(obj_menu, sVar(menu_current))->menu_ani_type = /*"hide"*/ STR(750);
				sVar(window_busy) = /*""*/ STR(0);
				return true;
			}
		
		return transition;
	}
	
	void microani_set(VarType name, VarType script, VarType hover, BoolType click, VarType active, RealType disabled, RealType spd, RealType custom, RealType goalval)
	{
		StringType aniname;
		IntType animation;
		aniname = global::microani_prefix + name + string(script);
		animation = DsMap(global::microanis).Value(aniname);
		if (animation == VarType())
		{
			animation = (new micro_animation(aniname))->id;
			ObjType(value_animation, ObjType(micro_animation, animation)->active)->init(active);
			ObjType(value_animation, ObjType(micro_animation, animation)->hover)->init(hover);
			ObjType(value_animation, ObjType(micro_animation, animation)->holding)->init(click);
			ObjType(value_animation, ObjType(micro_animation, animation)->disable)->init(disabled);
			ObjType(value_animation, ObjType(micro_animation, animation)->custom)->init(custom);
			ObjType(value_animation, ObjType(micro_animation, animation)->fade)->init(IntType(1));
			ObjType(micro_animation, animation)->goal_value = goalval;
			ObjType(micro_animation, animation)->goal_ease = goalval;
		}
		global::current_microani = animation;
		ObjType(micro_animation, global::current_microani)->steps_hidden = IntType(0);
		global::microani_arr[e_microani_HOVER_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value_ani_linear;
		global::microani_arr[e_microani_PRESS_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value_ani_linear;
		global::microani_arr[e_microani_ACTIVE_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value_ani_linear;
		global::microani_arr[e_microani_DISABLED_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value_ani_linear;
		global::microani_arr[e_microani_CUSTOM_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value_ani_linear;
		global::microani_arr[e_microani_FADE_LINEAR] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value_ani_linear;
		global::microani_arr[e_microani_HOVER] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value_ani_ease;
		global::microani_arr[e_microani_PRESS] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value_ani_ease;
		global::microani_arr[e_microani_ACTIVE] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value_ani_ease;
		global::microani_arr[e_microani_DISABLED] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value_ani_ease;
		global::microani_arr[e_microani_CUSTOM] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value_ani_ease;
		global::microani_arr[e_microani_FADE] = ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value_ani_ease;
		global::microani_arr[e_microani_GOAL_EASE] = ObjType(micro_animation, global::current_microani)->goal_ease;
	}
	
	void microani_update(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::current_microani != null_)
		{
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value = argument[IntType(0)];
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->value = argument[IntType(1)];
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = argument[IntType(2)];
			if (argument_count > IntType(3))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->disable)->value = argument[IntType(3)];
			if (argument_count > IntType(4))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->custom)->value = argument[IntType(4)];
			if (argument_count > IntType(5))
				ObjType(micro_animation, global::current_microani)->goal_value = argument[IntType(5)];
		}
	}
	
	void minecraft_assets_event_create(Scope<obj_minecraft_assets> self)
	{
		self->version = /*""*/ STR(0);
		self->model_name_map = ds_map_create();
		self->char_list = ds_list_create();
		self->special_block_list = ds_list_create();
		self->block_list = ds_list_create();
		self->block_name_map = ds_map_create();
		self->block_id_map = ds_map_create();
		self->block_liquid_slot_map = ds_map_create();
		self->model_texture_list = ds_list_create();
		self->block_texture_list = ds_list_create();
		self->block_texture_ani_list = ds_list_create();
		self->block_texture_color_map = ds_map_create();
		self->item_texture_list = ds_list_create();
		self->particle_texture_list = ds_list_create();
		self->block_texture_preview_map = ds_map_create();
	}
	
	BoolType minecraft_assets_load()
	{
		withOne (obj_minecraft_assets, global::mc_assets, noone)
		{
			switch (StringType(global::load_assets_stage).id)
			{
				case 1317: // unzip
				{
					if (global::current_step < IntType(5))
						break;
					RealType exists = directory_exists_lib(global::load_assets_dir + mc_assets_directory);
					if (array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_character_directory, /*".mimodel"*/ STR(730)))) == IntType(0) || array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_block_directory, /*".json"*/ STR(731)))) == IntType(0) || array_length(VarType::CreateRef(file_find(global::load_assets_dir + mc_textures_directory + /*"block/"*/ STR(821), /*".png"*/ STR(10)))) == IntType(0))
						exists = false;
					if (!(exists > 0))
					{
						debug_timer_start();
						if (!unzip(global::load_assets_zip_file, global::load_assets_dir))
						{
							log({ /*"Could not unzip archive"*/ STR(1730) });
							directory_delete_lib(global::load_assets_dir);
							access_error();
							return false;
						}
						debug_timer_stop(/*"Unzip archive"*/ STR(1731));
					}
					else
						log({ /*"Archive already unzipped, re-using"*/ STR(1732), global::load_assets_dir + mc_assets_directory });
					
					global::load_assets_stage = /*"biomes"*/ STR(1733);
					global::load_assets_progress = 0.3;
					global::file_copy_temp = false;
					break;
				}
				
				case 1733: // biomes
				{
					withOne (obj_resource, global::mc_res, self->id)
						minecraft_assets_load_biomes(global::biome_list, DsMap(global::load_assets_map).Value(/*"biomes"*/ STR(1733)));
					
					global::_app->background_biome = ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name;
					global::_app->background_foliage_color = c_plains_biome_foliage;
					global::_app->background_grass_color = c_plains_biome_grass;
					global::_app->background_water_color = c_plains_biome_water;
					global::_app->background_leaves_oak_color = c_plains_biome_foliage;
					global::_app->background_leaves_spruce_color = c_plains_biome_foliage_2;
					global::_app->background_leaves_birch_color = c_plains_biome_foliage_2;
					global::_app->background_leaves_jungle_color = c_plains_biome_foliage;
					global::_app->background_leaves_acacia_color = c_plains_biome_foliage;
					global::_app->background_leaves_dark_oak_color = c_plains_biome_foliage;
					global::_app->background_leaves_mangrove_color = c_plains_biome_foliage;
					global::load_assets_stage = /*"textures"*/ STR(842);
					global::load_assets_progress = 0.4;
					break;
				}
				
				case 842: // textures
				{
					VarType modeltextureslist = DsMap(global::load_assets_map).Value(/*"model_textures"*/ STR(1734));
					if (is_undefined(modeltextureslist))
					{
						log({ /*"No model textures found"*/ STR(1735) });
						return false;
					}
					ds_list_copy((IntType)(self->model_texture_list), (IntType)(modeltextureslist));
					VarType blocktextureslist = DsMap(global::load_assets_map).Value(/*"block_textures"*/ STR(1736));
					if (is_undefined(blocktextureslist))
					{
						log({ /*"No block textures found"*/ STR(1737) });
						return false;
					}
					ds_list_copy((IntType)(self->block_texture_list), (IntType)(blocktextureslist));
					VarType blocktexturesanimatedlist = DsMap(global::load_assets_map).Value(/*"block_textures_animated"*/ STR(1738));
					if (is_undefined(blocktexturesanimatedlist))
					{
						log({ /*"No animated block textures found"*/ STR(1739) });
						return false;
					}
					ds_list_copy((IntType)(self->block_texture_ani_list), (IntType)(blocktexturesanimatedlist));
					VarType blocktexturescolorlist = DsMap(global::load_assets_map).Value(/*"block_textures_color"*/ STR(1740));
					if (is_undefined(blocktexturescolorlist))
					{
						log({ /*"No block texture colors found"*/ STR(1741) });
						return false;
					}
					ds_map_copy((IntType)(self->block_texture_color_map), (IntType)(blocktexturescolorlist));
					VarType key = ds_map_find_first((IntType)(self->block_texture_color_map));
					while (!is_undefined(key))
					{
						if (string_char_at(DsMap(self->block_texture_color_map).Value(key), IntType(1)) == /*"#"*/ STR(859))
							DsMap(self->block_texture_color_map)[key] = hex_to_color(DsMap(self->block_texture_color_map).Value(key));
						key = ds_map_find_next((IntType)(self->block_texture_color_map), key);
					}
					
					VarType blocktexturepreview = DsMap(global::load_assets_map).Value(/*"block_textures_preview"*/ STR(1742));
					if (!is_undefined(blocktexturepreview))
						ds_map_copy((IntType)(self->block_texture_preview_map), (IntType)(blocktexturepreview));
					VarType itemtextureslist = DsMap(global::load_assets_map).Value(/*"item_textures"*/ STR(1743));
					if (is_undefined(itemtextureslist))
					{
						log({ /*"No item textures found"*/ STR(1744) });
						return false;
					}
					ds_list_copy((IntType)(self->item_texture_list), (IntType)(itemtextureslist));
					VarType particletextureslist = DsMap(global::load_assets_map).Value(/*"particle_textures"*/ STR(1745));
					if (is_undefined(particletextureslist))
					{
						log({ /*"No particle textures found"*/ STR(1746) });
						return false;
					}
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"particles"*/ STR(551))))
					{
						log({ /*"No particle list found"*/ STR(1747) });
						return false;
					}
					ds_list_copy((IntType)(self->particle_texture_list), (IntType)(particletextureslist));
					withOne (obj_resource, global::mc_res, self->id)
					{
						res_load_pack_model_textures(ScopeAny(self));
						res_load_pack_block_textures(ScopeAny(self));
						res_load_pack_item_textures(ScopeAny(self), /*"diffuse"*/ STR(635), /*""*/ STR(0));
						self->item_sheet_texture_material = sprite_duplicate(ID_spr_default_material);
						self->item_sheet_tex_normal = sprite_duplicate(ID_spr_default_normal);
						minecraft_assets_load_particles(DsMap(global::load_assets_map).Value(/*"particles"*/ STR(551)));
						res_load_pack_particle_textures(ScopeAny(self));
						res_load_pack_misc(ScopeAny(self));
						res_update_colors(ScopeAny(self), { ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name });
					}
					
					global::load_assets_stage = /*"misc"*/ STR(1748);
					global::load_assets_progress = 0.45;
					break;
				}
				
				case 1748: // misc
				{
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"patterns"*/ STR(1749))))
					{
						log({ /*"No pattern designs list found"*/ STR(1750) });
						return false;
					}
					VarType patternlist = DsMap(global::load_assets_map).Value(/*"patterns"*/ STR(1749));
					for (IntType i = IntType(0); i < ds_list_size((IntType)(patternlist)); i++)
					{
						VarType pattern = DsList(patternlist).Value(i);
						ds_list_add({ global::minecraft_pattern_list, DsList(pattern).Value(IntType(0)) });
						ds_list_add({ global::minecraft_pattern_short_list, DsList(pattern).Value(IntType(1)) });
					}
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"sherds"*/ STR(967))))
					{
						log({ /*"No sherd keys found"*/ STR(1751) });
						return false;
					}
					else
						ds_map_copy((IntType)(global::minecraft_sherd_map), (IntType)(DsMap(global::load_assets_map).Value(/*"sherds"*/ STR(967))));
					
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"armor"*/ STR(781))))
					{
						log({ /*"No armor data found"*/ STR(1752) });
						return false;
					}
					else
					{
						VarType armormap = DsMap(global::load_assets_map).Value(/*"armor"*/ STR(781));
						ds_list_copy((IntType)(global::minecraft_armor_trim_pattern_list), (IntType)(DsMap(armormap).Value(/*"pattern"*/ STR(1753))));
						ds_list_copy((IntType)(global::minecraft_armor_trim_material_list), (IntType)(DsMap(armormap).Value(/*"material"*/ STR(640))));
					}
					
					if (is_undefined(DsMap(global::load_assets_map).Value(/*"map_colors"*/ STR(1754))))
					{
						log({ /*"No map colors found"*/ STR(1755) });
						return false;
					}
					VarType colors = DsMap(global::load_assets_map).Value(/*"map_colors"*/ STR(1754));
					IntType size, s1, s2, s3;
					VarType col;
					size = ds_list_size((IntType)(colors));
					s1 = make_color_rgb(IntType(180), IntType(180), IntType(180));
					s2 = make_color_rgb(IntType(220), IntType(220), IntType(220));
					s3 = make_color_rgb(IntType(135), IntType(135), IntType(135));
					global::minecraft_map_color_array = array_create({ size * IntType(4) });
					for (IntType i = IntType(0); i < ds_list_size((IntType)(colors)); i++)
					{
						col = hex_to_color(DsList(colors).Value(i));
						global::minecraft_map_color_array[i * IntType(4) + IntType(0)] = color_multiply(col, s1);
						global::minecraft_map_color_array[i * IntType(4) + IntType(1)] = color_multiply(col, s2);
						global::minecraft_map_color_array[i * IntType(4) + IntType(2)] = col;
						global::minecraft_map_color_array[i * IntType(4) + IntType(3)] = color_multiply(col, s3);
					}
					global::load_assets_stage = /*"models"*/ STR(1756);
					global::load_assets_progress = 0.5;
					VarType swatches = DsMap(global::load_assets_map).Value(/*"swatches"*/ STR(1757));
					if (is_undefined(swatches))
					{
						log({ /*"No swatches found"*/ STR(1758) });
						return false;
					}
					for (IntType i = IntType(0); i < ds_list_size((IntType)(swatches)); i++)
					{
						VarType swatch = DsList(swatches).Value(i);
						IntType s = (new obj_swatch)->id;
						array_add(VarType::CreateRef(global::minecraft_swatch_array), s);
						ObjType(obj_swatch, s)->name = DsMap(swatch).Value(/*"name"*/ STR(819));
						ObjType(obj_swatch, s)->colors = ArrType::From({});
						ObjType(obj_swatch, s)->color_names = ArrType::From({});
						ObjType(obj_swatch, s)->map = ds_map_create();
						VarType colors = DsMap(swatch).Value(/*"colors"*/ STR(1759));
						for (IntType j = IntType(0); j < ds_list_size((IntType)(colors)); j++)
						{
							VarType c = DsList(colors).Value(j);
							array_add(VarType::CreateRef(ObjType(obj_swatch, s)->color_names), DsMap(c).Value(/*"name"*/ STR(819)));
							array_add(VarType::CreateRef(ObjType(obj_swatch, s)->colors), hex_to_color(DsMap(c).Value(/*"value"*/ STR(829))));
							ds_map_add(ObjType(obj_swatch, s)->map, DsMap(c).Value(/*"name"*/ STR(819)), hex_to_color(DsMap(c).Value(/*"value"*/ STR(829))));
							ds_map_add(global::minecraft_swatch_color_map, DsMap(swatch).Value(/*"name"*/ STR(819)) + /*":"*/ STR(788) + DsMap(c).Value(/*"name"*/ STR(819)), hex_to_color(DsMap(c).Value(/*"value"*/ STR(829))));
						}
						ObjType(obj_swatch, s)->size = array_length(VarType::CreateRef(ObjType(obj_swatch, s)->colors));
					}
					global::minecraft_swatch_dyes = minecraft_get_swatch(/*"dye"*/ STR(1760));
					if (global::minecraft_swatch_dyes == null_)
					{
						log({ /*"No dyes found"*/ STR(1761) });
						return false;
					}
					break;
				}
				
				case 1756: // models
				{
					VarType characterslist = DsMap(global::load_assets_map).Value(/*"characters"*/ STR(1762));
					if (is_undefined(characterslist))
					{
						log({ /*"No character list found"*/ STR(1763) });
						return false;
					}
					debug_timer_start();
					for (IntType i = IntType(0); i < ds_list_size((IntType)(characterslist)); i++)
					{
						IntType model = model_load(DsList(characterslist).Value(i), global::load_assets_dir + mc_character_directory);
						if (!(model > 0))
						{
							log({ /*"Could not load model"*/ STR(1764) });
							continue;
						}
						DsMap(self->model_name_map)[ObjType(obj_model, model)->name] = model;
						ds_list_add({ self->char_list, model });
					}
					debug_timer_stop(/*"Load characters"*/ STR(1765));
					VarType specialblockslist = DsMap(global::load_assets_map).Value(/*"special_blocks"*/ STR(1766));
					if (is_undefined(specialblockslist))
					{
						log({ /*"No special block list found"*/ STR(1767) });
						return false;
					}
					debug_timer_start();
					for (IntType i = IntType(0); i < ds_list_size((IntType)(specialblockslist)); i++)
					{
						IntType model = model_load(DsList(specialblockslist).Value(i), global::load_assets_dir + mc_special_block_directory);
						if (!(model > 0))
						{
							log({ /*"Could not load model"*/ STR(1764) });
							continue;
						}
						DsMap(self->model_name_map)[ObjType(obj_model, model)->name] = model;
						ds_list_add({ self->special_block_list, model });
					}
					debug_timer_stop(/*"Load special blocks"*/ STR(1768));
					debug_timer_start();
					global::load_assets_stage = /*"blocks"*/ STR(1023);
					global::load_assets_progress = 0.6;
					break;
				}
				
				case 1023: // blocks
				{
					VarType blockslist = DsMap(global::load_assets_map).Value(/*"blocks"*/ STR(1023));
					if (is_undefined(blockslist))
					{
						log({ /*"No block list found"*/ STR(1769) });
						return false;
					}
					for (IntType _it = 0, _it_max = IntType(20); _it < _it_max; _it++)
					{
						if (global::load_assets_block_index == ds_list_size((IntType)(blockslist)))
						{
							global::load_assets_stage = /*"done"*/ STR(1770);
							break;
						}
						VarType blockmap;
						IntType block;
						blockmap = DsList(blockslist).Value(global::load_assets_block_index);
						block = block_load(blockmap, global::load_assets_type_map);
						if (!(block > 0))
						{
							log({ /*"Could not load block"*/ STR(1771) });
							continue;
						}
						DsMap(self->block_name_map)[ObjType(obj_block, block)->name] = block;
						ds_list_add({ self->block_list, block });
						global::load_assets_block_index++;
					}
					global::load_assets_progress = 0.6 + 0.4 * (global::load_assets_block_index / ds_list_size((IntType)(blockslist)));
					if (dev_mode_skip_blocks)
						global::load_assets_stage = /*"done"*/ STR(1770);
					if (global::load_assets_stage == /*"done"*/ STR(1770))
					{
						DsMap(self->block_name_map)[/*"flowing_water"*/ STR(1772)] = DsMap(self->block_name_map).Value(/*"water"*/ STR(817));
						DsMap(self->block_name_map)[/*"flowing_lava"*/ STR(1773)] = DsMap(self->block_name_map).Value(/*"lava"*/ STR(1774));
						DsMap(self->block_liquid_slot_map)[/*"water"*/ STR(817)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/water_still"*/ STR(1775));
						DsMap(self->block_liquid_slot_map)[/*"lava"*/ STR(1774)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/lava_still"*/ STR(1776));
						DsMap(self->block_liquid_slot_map)[/*"flowing_water"*/ STR(1772)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/water_flow"*/ STR(1777));
						DsMap(self->block_liquid_slot_map)[/*"flowing_lava"*/ STR(1773)] = ds_list_find_index((IntType)(self->block_texture_ani_list), /*"block/lava_flow"*/ STR(1778));
						if (!dev_mode_skip_blocks)
							DsMap(self->block_id_map)[/*"minecraft:grass_path"*/ STR(1779)] = DsMap(self->block_id_map).Value(/*"minecraft:dirt_path"*/ STR(1780));
						VarType key = ds_map_find_first((IntType)(global::legacy_block_id));
						while (!is_undefined(key))
						{
							VarType curid;
							IntType curmap;
							curid = string_get_real(key);
							curmap = ds_map_find_value((IntType)(global::legacy_block_id), key);
							global::legacy_block_set[curid] = true;
							VarType newid, block, statevars;
							StringType newidnomc;
							newid = DsMap(curmap).Value(/*"id"*/ STR(86));
							if (!is_undefined(newid))
								newidnomc = string_replace(DsMap(curmap).Value(/*"id"*/ STR(86)), /*"minecraft:"*/ STR(838), /*""*/ STR(0));
							else
								newidnomc = /*""*/ STR(0);
							
							block = null_;
							statevars = null_;
							if (is_string(newid) && !is_undefined(DsMap(self->block_id_map).Value(newid)))
							{
								block = DsMap(self->block_id_map).Value(newid);
								if (ObjType(obj_block, block)->id_state_vars_map != null_ && !is_undefined(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid)))
									statevars = DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(newid);
							}
							for (IntType d = IntType(0); d < IntType(16); d++)
							{
								global::legacy_block_mc_id[curid][d] = newidnomc;
								global::legacy_block_obj[curid][d] = block;
								if (statevars != null_)
									global::legacy_block_state_vars[curid][d] = array_copy_1d(statevars);
								else
									global::legacy_block_state_vars[curid][d] = null_;
								
								global::legacy_block_state_id[curid][d] = IntType(0);
							}
							if (!is_undefined(DsMap(curmap).Value(/*"data"*/ STR(1781))))
								minecraft_assets_load_legacy_block_data(self, curid, DsMap(curmap).Value(/*"data"*/ STR(1781)), IntType(0), IntType(1));
							for (IntType d = IntType(0); d < IntType(16); d++)
								if (global::legacy_block_obj[curid][d] != null_ && global::legacy_block_state_vars[curid][d] != null_)
									global::legacy_block_state_id[curid][d] = block_get_state_id(global::legacy_block_obj[curid][d], global::legacy_block_state_vars[curid][d]);
							key = ds_map_find_next((IntType)(global::legacy_block_id), key);
						}
						
						debug_timer_stop(/*"Load blocks"*/ STR(1782));
						key = ds_map_find_first(global::load_assets_model_file_map);
						while (!is_undefined(key))
						{
							withOne (obj_block_load_model_file, DsMap(global::load_assets_model_file_map).Value(key), self->id)
								instance_destroy(ScopeAny(self));
							
							key = ds_map_find_next(global::load_assets_model_file_map, key);
						}
						
						if (dev_mode_debug_unused)
						{
							ArrType filesarr = file_find(global::load_assets_dir + mc_blockstates_directory, /*".json"*/ STR(731));
							IntType unusedlist = ds_list_create();
							for (IntType f = IntType(0); f < array_length(VarType::CreateRef(filesarr)); f++)
								if (is_undefined(DsMap(global::load_assets_state_file_map).Value(filename_name(filesarr.Value(f)))))
									ds_list_add({ unusedlist, filesarr.Value(f) });
							if (ds_list_size(unusedlist) > IntType(0))
							{
								ds_list_sort(unusedlist, true);
								StringType str = /*"The following blockstates were unused:\n"*/ STR(1783);
								for (IntType i = IntType(0); i < ds_list_size(unusedlist); i++)
									str += /*"  "*/ STR(1784) + filename_name(DsList(unusedlist).Value(i)) + /*"\n"*/ STR(710);
								log({ str });
							}
							filesarr = file_find(global::load_assets_dir + mc_models_directory + /*"block/"*/ STR(821), /*".json"*/ STR(731));
							ds_list_clear(unusedlist);
							for (IntType f = IntType(0); f < array_length(VarType::CreateRef(filesarr)); f++)
								if (is_undefined(DsMap(global::load_assets_model_file_map).Value(filename_name(filesarr.Value(f)))))
									ds_list_add({ unusedlist, filesarr.Value(f) });
							if (ds_list_size(unusedlist) > IntType(0))
							{
								ds_list_sort(unusedlist, true);
								StringType str = /*"The following block models were unused:\n"*/ STR(1785);
								for (IntType i = IntType(0); i < ds_list_size(unusedlist); i++)
									str += /*"  "*/ STR(1784) + filename_name(DsList(unusedlist).Value(i)) + /*"\n"*/ STR(710);
								log({ str });
							}
							ds_list_destroy(unusedlist);
						}
						global::file_copy_temp = !is_cpp();
						ds_map_destroy(global::load_assets_state_file_map);
						ds_map_destroy(global::load_assets_model_file_map);
						ds_map_destroy(global::load_assets_map);
						ds_map_destroy(global::load_assets_type_map);
						buffer_delete(global::load_assets_block_preview_buffer);
						buffer_delete(global::load_assets_block_preview_ani_buffer);
						log({ /*"Loaded assets successfully"*/ STR(1786) });
						move_all_to_texture_page();
					}
					break;
				}
				
			}
			
			return true;
		}
		
		return false;
	}
	
}
