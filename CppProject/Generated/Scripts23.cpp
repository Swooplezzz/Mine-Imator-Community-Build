/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.25 01:36:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	VarType block_load_state_file(StringType fname, IntType block, ArrType state)
	{
		if (!file_exists_lib(fname))
		{
			log({ /*"Could not find state file"*/ STR(873), filename_name(fname) });
			return null_;
		}
		IntType jsontypemap, map;
		jsontypemap = ds_int_map_create();
		map = json_load({ fname, jsontypemap });
		if (!ds_map_valid(map))
		{
			log({ /*"Could not parse state file"*/ STR(874), filename_name(fname) });
			ds_map_destroy(jsontypemap);
			return null_;
		}
		VarType variantsmap, multipartlist;
		variantsmap = DsMap(map).Value(/*"variants"*/ STR(875));
		multipartlist = DsMap(map).Value(/*"multipart"*/ STR(876));
		if (!ds_map_valid(variantsmap) && !ds_list_valid(multipartlist))
		{
			log({ /*"No models in the states file"*/ STR(877), fname });
			ds_map_destroy(map);
			return null_;
		}
		withOne (obj_block_load_state_file, (new obj_block_load_state_file)->id, noone)
		{
			self->name = filename_name(fname);
			self->state_id_map = ds_map_create();
			self->state_default_variant_id = IntType(0);
			self->model_preview_color_yp = -IntType(1);
			self->model_preview_alpha_yp = -IntType(1);
			self->model_preview_color_zp = -IntType(1);
			self->model_preview_alpha_zp = -IntType(1);
			if (ds_map_valid(DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_preview_map).Value(sVar(name))))
			{
				VarType blockmap = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_preview_map).Value(sVar(name));
				if (DsMap(blockmap).Value(/*"colorZ"*/ STR(878)) != VarType())
				{
					if (is_string(DsMap(blockmap).Value(/*"colorZ"*/ STR(878))))
						self->model_preview_color_yp = hex_to_color(DsMap(blockmap).Value(/*"colorZ"*/ STR(878)));
					else
					{
						self->model_preview_color_yp = null_;
						self->model_preview_alpha_yp = null_;
					}
					
				}
				if (self->model_preview_alpha_yp != null_ && DsMap(blockmap).Value(/*"alphaZ"*/ STR(879)) != VarType())
					self->model_preview_alpha_yp = DsMap(blockmap).Value(/*"alphaZ"*/ STR(879));
				if (DsMap(blockmap).Value(/*"colorY"*/ STR(880)) != VarType())
				{
					if (is_string(DsMap(blockmap).Value(/*"colorY"*/ STR(880))))
						self->model_preview_color_zp = hex_to_color(DsMap(blockmap).Value(/*"colorY"*/ STR(880)));
					else
					{
						self->model_preview_color_zp = null_;
						self->model_preview_alpha_zp = null_;
					}
					
				}
				if (self->model_preview_alpha_zp != null_ && DsMap(blockmap).Value(/*"alphaY"*/ STR(881)) != VarType())
					self->model_preview_alpha_zp = DsMap(blockmap).Value(/*"alphaY"*/ STR(881));
			}
			BoolType first_state = true;
			if (ds_map_valid(variantsmap))
			{
				VarType variant = ds_map_find_first((IntType)(variantsmap));
				while (!is_undefined(variant))
				{
					withOne (obj_block_load_variant, (new obj_block_load_variant)->id, self->id)
					{
						if (variant != /*""*/ STR(0) && variant != /*"normal"*/ STR(630))
						{
							VarType vars = string_get_state_vars(variant);
							if (vars == null_)
							{
								instance_destroy(ScopeAny(self));
								break;
							}
							state_vars_add(VarType::CreateRef(vars), state);
							DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[block_get_state_id(block, vars)] = self->id;
							if (first_state)
								ObjType(obj_block_load_state_file, self.otherId)->state_default_variant_id = block_get_state_id(block, vars);
						}
						else
							DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[IntType(0)] = self->id;
						
						first_state = false;
						self->model_amount = IntType(0);
						self->total_weight = IntType(0);
						if (ds_map_find_value((IntType)(DsMap(jsontypemap).Value(variantsmap)), variant) == e_json_type_ARRAY)
						{
							VarType modellist = DsMap(variantsmap).Value(variant);
							for (IntType i = IntType(0); i < ds_list_size((IntType)(modellist)); i++)
								if (!block_load_variant_model(ScopeAny(self), DsList(modellist).Value(i), ObjType(obj_block, block)->type))
									return false;
						}
						else
							if (!block_load_variant_model(ScopeAny(self), DsMap(variantsmap).Value(variant), ObjType(obj_block, block)->type))
								return null_;
						
					}
					
					variant = ds_map_find_next((IntType)(variantsmap), variant);
				}
				
			}
			else
				if (ds_list_valid(multipartlist))
				{
					for (IntType c = IntType(0); c < ds_list_size((IntType)(multipartlist)); c++)
					{
						VarType mcase = DsList(multipartlist).Value(c);
						withOne (obj_block_load_multipart_case, (new obj_block_load_multipart_case)->id, self->id)
						{
							VarType whenmap = DsMap(mcase).Value(/*"when"*/ STR(882));
							if (ds_map_valid(whenmap) && ds_map_size((IntType)(whenmap)) > IntType(0))
							{
								VarType orlist = DsMap(whenmap).Value(/*"OR"*/ STR(883));
								VarType andlist = DsMap(whenmap).Value(/*"AND"*/ STR(884));
								if (ds_list_valid(orlist))
								{
									for (IntType oc = IntType(0); oc < ds_list_size((IntType)(orlist)); oc++)
									{
										VarType curcondmap, cond;
										ArrType condvars;
										curcondmap = DsList(orlist).Value(oc);
										condvars = ArrType();
										cond = ds_map_find_first((IntType)(curcondmap));
										while (!is_undefined(cond))
										{
											VarType val = DsMap(curcondmap).Value(cond);
											if (ds_map_find_value((IntType)(DsMap(jsontypemap).Value(curcondmap)), cond) == e_json_type_BOOL)
												val = ((val > 0) ? /*"true"*/ STR(777) : /*"false"*/ STR(778));
											if (string_contains(val, /*"|"*/ STR(885)))
												state_vars_set_value(VarType::CreateRef(condvars), cond, string_split(val, /*"|"*/ STR(885)));
											else
												state_vars_set_value(VarType::CreateRef(condvars), cond, val);
											
											cond = ds_map_find_next((IntType)(curcondmap), cond);
										}
										
										for (IntType i = IntType(0); i < ObjType(obj_block, block)->state_id_amount; i++)
											if (state_vars_match_state_id(condvars, block, i))
												DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i] = array_add(VarType::CreateRef(DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i]), self->id);
									}
								}
								else
									if (ds_list_valid(andlist))
									{
										ArrType condarr = ArrType::From({});
										for (IntType oc = IntType(0); oc < ds_list_size((IntType)(andlist)); oc++)
										{
											VarType curcondmap, cond;
											ArrType condvars;
											curcondmap = DsList(andlist).Value(oc);
											condvars = ArrType();
											cond = ds_map_find_first((IntType)(curcondmap));
											while (!is_undefined(cond))
											{
												VarType val = DsMap(curcondmap).Value(cond);
												if (ds_map_find_value((IntType)(DsMap(jsontypemap).Value(curcondmap)), cond) == e_json_type_BOOL)
													val = ((val > 0) ? /*"true"*/ STR(777) : /*"false"*/ STR(778));
												if (string_contains(val, /*"|"*/ STR(885)))
													state_vars_set_value(VarType::CreateRef(condvars), cond, string_split(val, /*"|"*/ STR(885)));
												else
													state_vars_set_value(VarType::CreateRef(condvars), cond, val);
												
												cond = ds_map_find_next((IntType)(curcondmap), cond);
											}
											
											condarr = array_add(VarType::CreateRef(condarr), condvars, false);
										}
										for (IntType i = IntType(0); i < ObjType(obj_block, block)->state_id_amount; i++)
										{
											BoolType match = true;
											for (IntType j = IntType(0); j < array_length(VarType::CreateRef(condarr)); j++)
											{
												if (!match)
													continue;
												if (!state_vars_match_state_id(condarr.Value(j), block, i))
													match = false;
											}
											if (match)
												DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i] = array_add(VarType::CreateRef(DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i]), self->id);
										}
									}
									else
									{
										ArrType condvars;
										VarType cond;
										condvars = ArrType();
										cond = ds_map_find_first((IntType)(whenmap));
										while (!is_undefined(cond))
										{
											VarType val = DsMap(whenmap).Value(cond);
											if (ds_map_find_value((IntType)(DsMap(jsontypemap).Value(whenmap)), cond) == e_json_type_BOOL)
												val = ((val > 0) ? /*"true"*/ STR(777) : /*"false"*/ STR(778));
											if (string_contains(val, /*"|"*/ STR(885)))
												state_vars_set_value(VarType::CreateRef(condvars), cond, string_split(val, /*"|"*/ STR(885)));
											else
												state_vars_set_value(VarType::CreateRef(condvars), cond, val);
											
											cond = ds_map_find_next((IntType)(whenmap), cond);
										}
										
										for (IntType i = IntType(0); i < ObjType(obj_block, block)->state_id_amount; i++)
										{
											if (state_vars_match_state_id(condvars, block, i))
											{
												DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i] = array_add(VarType::CreateRef(DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i]), self->id);
												if (first_state)
												{
													ObjType(obj_block_load_state_file, self.otherId)->state_default_variant_id = i;
													first_state = false;
												}
											}
										}
									}
								
								
							}
							else
							{
								for (IntType i = IntType(0); i < ObjType(obj_block, block)->state_id_amount; i++)
								{
									DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i] = array_add(VarType::CreateRef(DsMap(ObjType(obj_block_load_state_file, self.otherId)->state_id_map)[i]), self->id);
									if (first_state)
									{
										ObjType(obj_block_load_state_file, self.otherId)->state_default_variant_id = i;
										first_state = false;
									}
								}
							}
							
							self->model_amount = IntType(0);
							self->total_weight = IntType(0);
							if (ds_map_find_value((IntType)(DsMap(jsontypemap).Value(mcase)), /*"apply"*/ STR(886)) == e_json_type_ARRAY)
							{
								VarType modellist = DsMap(mcase).Value(/*"apply"*/ STR(886));
								for (IntType i = IntType(0); i < ds_list_size((IntType)(modellist)); i++)
									if (!block_load_variant_model(ScopeAny(self), DsList(modellist).Value(i), ObjType(obj_block, block)->type))
										return false;
							}
							else
								if (!block_load_variant_model(ScopeAny(self), DsMap(mcase).Value(/*"apply"*/ STR(886)), ObjType(obj_block, block)->type))
									return null_;
							
						}
						
					}
				}
			
			DsMap(global::load_assets_state_file_map)[filename_name(fname)] = self->id;
			ds_map_destroy(jsontypemap);
			return self->id;
		}
		
		return VarType();
	}
	
	void block_load_timeline(Scope<obj_block> self, VarType map, VarType typemap)
	{
		self->timeline = true;
		if (is_string(DsMap(map).Value(/*"model"*/ STR(8))))
		{
			self->tl_model_name = DsMap(map).Value(/*"model"*/ STR(8));
			self->tl_model_state = ArrType();
			self->tl_model_state_amount = IntType(0);
			self->tl_has_model_state = false;
			if (DsMap(typemap).Value(/*"model_state"*/ STR(887)) == e_json_type_STRING)
			{
				self->tl_model_state = string_get_state_vars(DsMap(map).Value(/*"model_state"*/ STR(887)));
				self->tl_has_model_state = true;
			}
			else
				if (DsMap(typemap).Value(/*"model_state"*/ STR(887)) == e_json_type_OBJECT)
				{
					VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"model_state"*/ STR(887))));
					while (!is_undefined(key))
					{
						withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
						{
							self->vars = string_get_state_vars(key);
							self->value = string_get_state_vars(ds_map_find_value((IntType)(DsMap(map).Value(/*"model_state"*/ STR(887))), key));
							self->state_id = ArrType();
							for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
								if (state_vars_match_state_id(self->vars, self.otherId, i))
									self->state_id = array_add(VarType::CreateRef(self->state_id), i);
							ObjType(obj_block, self.otherId)->tl_model_state[ObjType(obj_block, self.otherId)->tl_model_state_amount++] = self->id;
						}
						
						key = ds_map_find_next((IntType)(DsMap(map).Value(/*"model_state"*/ STR(887))), key);
					}
					
					self->tl_has_model_state = true;
				}
			
		}
		else
		{
			self->tl_model_name = /*""*/ STR(0);
			self->tl_has_model_state = false;
		}
		
		if (is_bool(DsMap(map).Value(/*"model_double"*/ STR(888))))
			self->model_double = DsMap(map).Value(/*"model_double"*/ STR(888));
		self->tl_has_text = false;
		self->tl_text_front_position = ArrType::From({});
		self->tl_text_front_rotation = ArrType::From({});
		self->tl_text_front_scale = IntType(1);
		self->tl_text_back_position = ArrType::From({});
		self->tl_text_back_rotation = ArrType::From({});
		self->tl_text_back_scale = IntType(1);
		if (ds_map_valid(DsMap(map).Value(/*"text"*/ STR(104))))
		{
			VarType textmap = DsMap(map).Value(/*"text"*/ STR(104));
			if (ds_map_valid(DsMap(textmap).Value(/*"front"*/ STR(889))))
			{
				VarType front = DsMap(textmap).Value(/*"front"*/ STR(889));
				self->tl_text_front_position = value_get_point3D(DsMap(front).Value(/*"position"*/ STR(44)), point3D(IntType(0), IntType(0), IntType(0)));
				self->tl_text_front_rotation = value_get_point3D(DsMap(front).Value(/*"rotation"*/ STR(847)), point3D(IntType(0), IntType(0), IntType(0)));
				self->tl_text_front_scale = value_get_real(DsMap(front).Value(/*"scale"*/ STR(890)), IntType(1));
			}
			if (ds_map_valid(DsMap(textmap).Value(/*"back"*/ STR(891))))
			{
				VarType back = DsMap(textmap).Value(/*"back"*/ STR(891));
				self->tl_text_back_position = value_get_point3D(DsMap(back).Value(/*"position"*/ STR(44)), point3D(IntType(0), IntType(0), IntType(0)));
				self->tl_text_back_rotation = value_get_point3D(DsMap(back).Value(/*"rotation"*/ STR(847)), point3D(IntType(0), IntType(0), IntType(0)));
				self->tl_text_back_scale = value_get_real(DsMap(back).Value(/*"scale"*/ STR(890)), IntType(1));
			}
			self->tl_has_text = true;
		}
		self->tl_pattern_type = /*""*/ STR(0);
		if (is_string(DsMap(map).Value(/*"pattern_type"*/ STR(892))))
			self->tl_pattern_type = DsMap(map).Value(/*"pattern_type"*/ STR(892));
		self->tl_rot_point = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_rot_point_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"rotation_point"*/ STR(893)) == e_json_type_ARRAY)
			self->tl_rot_point = value_get_point3D(DsMap(map).Value(/*"rotation_point"*/ STR(893)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"rotation_point"*/ STR(893)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(893))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(893))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_rot_point_state[ObjType(obj_block, self.otherId)->tl_rot_point_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(893))), key);
				}
				
			}
		
		self->tl_position = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_position_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"position"*/ STR(44)) == e_json_type_ARRAY)
			self->tl_position = value_get_point3D(DsMap(map).Value(/*"position"*/ STR(44)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"position"*/ STR(44)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"position"*/ STR(44))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"position"*/ STR(44))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_position_state[ObjType(obj_block, self.otherId)->tl_position_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"position"*/ STR(44))), key);
				}
				
			}
		
		self->tl_rotation = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_rotation_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"rotation"*/ STR(847)) == e_json_type_ARRAY)
			self->tl_rotation = value_get_point3D(DsMap(map).Value(/*"rotation"*/ STR(847)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"rotation"*/ STR(847)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"rotation"*/ STR(847))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"rotation"*/ STR(847))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_rotation_state[ObjType(obj_block, self.otherId)->tl_rotation_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"rotation"*/ STR(847))), key);
				}
				
			}
		
	}
	
	BoolType block_load_variant_model(ScopeAny self, VarType map, VarType type)
	{
		if (is_undefined(DsMap(map).Value(/*"model"*/ STR(8))))
		{
			log({ /*"Missing parameter \"model\""*/ STR(894) });
			return false;
		}
		StringType blockname;
		VarType blockmodel;
		blockname = string_replace(DsMap(map).Value(/*"model"*/ STR(8)), /*"minecraft:"*/ STR(839), /*""*/ STR(0));
		blockmodel = block_load_model_file(global::load_assets_dir + mc_models_directory + blockname + /*".json"*/ STR(732));
		if (!(blockmodel > 0))
			return false;
		VecType rot = vec3(IntType(0), IntType(0), IntType(0));
		if (!is_undefined(DsMap(map).Value(/*"x"*/ STR(851))))
			rot.Real(X_) = clamp(snap(DsMap(map).Value(/*"x"*/ STR(851)), IntType(90)), IntType(0), IntType(270));
		if (!is_undefined(DsMap(map).Value(/*"y"*/ STR(834))))
			rot.Real(Z_) = clamp(snap(DsMap(map).Value(/*"y"*/ STR(834)), IntType(90)), IntType(0), IntType(270));
		VarType uvlock = false;
		if (is_bool(DsMap(map).Value(/*"uvlock"*/ STR(895))))
			uvlock = DsMap(map).Value(/*"uvlock"*/ STR(895));
		else
			if (is_string(DsMap(map).Value(/*"uvlock"*/ STR(895))))
				uvlock = (DsMap(map).Value(/*"uvlock"*/ STR(895)) == /*"true"*/ STR(777));
		
		VarType weight = IntType(1);
		if (!is_undefined(DsMap(map).Value(/*"weight"*/ STR(896))))
			weight = DsMap(map).Value(/*"weight"*/ STR(896));
		sVar(total_weight) += weight;
		sInt(model_state_obj) = self.otherId;
		sVar(model)[sInt(model_amount)] = block_load_render_model(self, blockmodel, rot, uvlock, false, weight);
		if (type == /*"leaves"*/ STR(897))
			idInt(sVar(model)[sInt(model_amount)], opaque) = block_load_render_model(self, blockmodel, rot, uvlock, true, weight);
		sInt(model_amount)++;
		return true;
	}
	
	void block_render_model_generate(Scope<obj_builder_thread> self, IntType model)
	{
		instance_activate_object(model);
		RealType offx, offy, offz;
		offx = ObjType(obj_block_render_model, model)->offset_x + self->block_pos_x;
		offy = ObjType(obj_block_render_model, model)->offset_y + self->block_pos_y;
		offz = ObjType(obj_block_render_model, model)->offset_z + self->block_pos_z;
		if (self->block_vertex_emissive == null_)
			self->block_vertex_emissive = ObjType(obj_block_render_model, model)->emissive;
		for (IntType e = IntType(0); e < ObjType(obj_block_render_model, model)->element_amount; e++)
		{
			VarType el = ObjType(obj_block_render_model, model)->element.Value(e);
			instance_activate_object(el);
			RealType x1, x2, y1, y2, z1, z2;
			VarType mat;
			x1 = idReal(el, from_x);
			y1 = idReal(el, from_y);
			z1 = idReal(el, from_z);
			x2 = idReal(el, to_x);
			y2 = idReal(el, to_y);
			z2 = idReal(el, to_z);
			if (idBool(el, rotated))
				mat = matrix_multiply(idVar(el, matrix), matrix_build(offx, offy, offz, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
			else
			{
				mat = null_;
				x1 += offx;
				y1 += offy;
				z1 += offz;
				x2 += offx;
				y2 += offy;
				z2 += offz;
			}
			
			if (idVar(el, face_render_xp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_EAST))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_xp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_xp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_xp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_xp)][idInt(el, face_block_vbuffer_xp)];
				
				builder_add_face(self, x2, y2, z2, x2, y1, z2, x2, y1, z1, x2, y2, z1, idReal(el, face_uv_xp_0_x), idReal(el, face_uv_xp_0_y), idReal(el, face_uv_xp_1_x), idReal(el, face_uv_xp_1_y), idReal(el, face_uv_xp_2_x), idReal(el, face_uv_xp_2_y), idReal(el, face_uv_xp_3_x), idReal(el, face_uv_xp_3_y), mat);
			}
			if (idVar(el, face_render_xn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_WEST))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_xn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_xn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_xn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_xn)][idInt(el, face_block_vbuffer_xn)];
				
				builder_add_face(self, x1, y1, z2, x1, y2, z2, x1, y2, z1, x1, y1, z1, idReal(el, face_uv_xn_0_x), idReal(el, face_uv_xn_0_y), idReal(el, face_uv_xn_1_x), idReal(el, face_uv_xn_1_y), idReal(el, face_uv_xn_2_x), idReal(el, face_uv_xn_2_y), idReal(el, face_uv_xn_3_x), idReal(el, face_uv_xn_3_y), mat);
			}
			if (idVar(el, face_render_yp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_SOUTH))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_yp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_yp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_yp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_yp)][idInt(el, face_block_vbuffer_yp)];
				
				builder_add_face(self, x1, y2, z2, x2, y2, z2, x2, y2, z1, x1, y2, z1, idReal(el, face_uv_yp_0_x), idReal(el, face_uv_yp_0_y), idReal(el, face_uv_yp_1_x), idReal(el, face_uv_yp_1_y), idReal(el, face_uv_yp_2_x), idReal(el, face_uv_yp_2_y), idReal(el, face_uv_yp_3_x), idReal(el, face_uv_yp_3_y), mat);
			}
			if (idVar(el, face_render_yn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_NORTH))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_yn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_yn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_yn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_yn)][idInt(el, face_block_vbuffer_yn)];
				
				builder_add_face(self, x2, y1, z2, x1, y1, z2, x1, y1, z1, x2, y1, z1, idReal(el, face_uv_yn_0_x), idReal(el, face_uv_yn_0_y), idReal(el, face_uv_yn_1_x), idReal(el, face_uv_yn_1_y), idReal(el, face_uv_yn_2_x), idReal(el, face_uv_yn_2_y), idReal(el, face_uv_yn_3_x), idReal(el, face_uv_yn_3_y), mat);
			}
			if (idVar(el, face_render_zp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_UP))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_zp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_zp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_zp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_zp)][idInt(el, face_block_vbuffer_zp)];
				
				builder_add_face(self, x1, y1, z2, x2, y1, z2, x2, y2, z2, x1, y2, z2, idReal(el, face_uv_zp_0_x), idReal(el, face_uv_zp_0_y), idReal(el, face_uv_zp_1_x), idReal(el, face_uv_zp_1_y), idReal(el, face_uv_zp_2_x), idReal(el, face_uv_zp_2_y), idReal(el, face_uv_zp_3_x), idReal(el, face_uv_zp_3_y), mat);
			}
			if (idVar(el, face_render_zn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_DOWN))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_zn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_zn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_zn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_zn)][idInt(el, face_block_vbuffer_zn)];
				
				builder_add_face(self, x1, y2, z1, x2, y2, z1, x2, y1, z1, x1, y1, z1, idReal(el, face_uv_zn_0_x), idReal(el, face_uv_zn_0_y), idReal(el, face_uv_zn_1_x), idReal(el, face_uv_zn_1_y), idReal(el, face_uv_zn_2_x), idReal(el, face_uv_zn_2_y), idReal(el, face_uv_zn_3_x), idReal(el, face_uv_zn_3_y), mat);
			}
			self->block_vertex_rgb = c_white;
			instance_deactivate_object(ObjType(obj_block_render_model, model)->element.Value(e));
		}
		instance_deactivate_object(model);
	}
	
	BoolType block_render_model_generate_face_cull(Scope<obj_builder_thread> self, IntType model, VarType el, IntType culldir)
	{
		switch ((IntType)culldir)
		{
			case e_dir_EAST:
			{
				if (!idBool(el, face_edge_xp) || self->block_face_min_depth_xp == null_ || self->block_face_min_depth_xp > ObjType(obj_block_render_model, model)->face_min_depth_xp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_xp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_xp || (self->block_face_min_xp <= idReal(el, from_z) && self->block_face_max_xp >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_WEST:
			{
				if (!idBool(el, face_edge_xn) || self->block_face_min_depth_xn == null_ || self->block_face_min_depth_xn > ObjType(obj_block_render_model, model)->face_min_depth_xn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_xn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_xn || (self->block_face_min_xn <= idReal(el, from_z) && self->block_face_max_xn >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_SOUTH:
			{
				if (!idBool(el, face_edge_yp) || self->block_face_min_depth_yp == null_ || self->block_face_min_depth_yp > ObjType(obj_block_render_model, model)->face_min_depth_yp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_yp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_yp || (self->block_face_min_yp <= idReal(el, from_z) && self->block_face_max_yp >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_NORTH:
			{
				if (!idBool(el, face_edge_yn) || self->block_face_min_depth_yn == null_ || self->block_face_min_depth_yn > ObjType(obj_block_render_model, model)->face_min_depth_yn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_yn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_yn || (self->block_face_min_yn <= idReal(el, from_z) && self->block_face_max_yn >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_UP:
			{
				if (!idBool(el, face_edge_zp) || self->block_face_min_depth_zp == null_ || self->block_face_min_depth_zp > ObjType(obj_block_render_model, model)->face_min_depth_zp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_zp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_zp || (self->block_face_min_zp <= idReal(el, from_y) && self->block_face_max_zp >= idReal(el, to_y)))
					return true;
				break;
			}
			
			case e_dir_DOWN:
			{
				if (!idBool(el, face_edge_zn) || self->block_face_min_depth_zn == null_ || self->block_face_min_depth_zn > ObjType(obj_block_render_model, model)->face_min_depth_zn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(897) && self->block_face_min_depth_zn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_zn || (self->block_face_min_zn <= idReal(el, from_y) && self->block_face_max_zn >= idReal(el, to_y)))
					return true;
				break;
			}
			
		}
		
		return false;
	}
	
	RealType block_set_bars(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"false"*/ STR(778);
		west = /*"false"*/ STR(778);
		south = /*"false"*/ STR(778);
		north = /*"false"*/ STR(778);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(898) || idVar(block, type) == /*"colored_bars"*/ STR(899))) || (sInt(block_face_min_depth_xp) != e_block_depth_DEPTH1 && sBool(block_face_full_xp)))
				east = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(898) || idVar(block, type) == /*"colored_bars"*/ STR(899))) || (sInt(block_face_min_depth_xn) != e_block_depth_DEPTH1 && sBool(block_face_full_xn)))
				west = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(898) || idVar(block, type) == /*"colored_bars"*/ STR(899))) || (sInt(block_face_min_depth_yp) != e_block_depth_DEPTH1 && sBool(block_face_full_yp)))
				south = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(898) || idVar(block, type) == /*"colored_bars"*/ STR(899))) || (sInt(block_face_min_depth_yn) != e_block_depth_DEPTH1 && sBool(block_face_full_yn)))
				north = /*"true"*/ STR(777);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(900), east, /*"west"*/ STR(901), west, /*"south"*/ STR(902), south, /*"north"*/ STR(903), north }));
		return IntType(0);
	}
	
	VarType block_set_bed(Scope<obj_builder_thread> self)
	{
		if (block_get_state_id_value(self->block_current, self->block_state_id_current, /*"part"*/ STR(904)) == /*"head"*/ STR(905))
			return null_;
		return IntType(0);
	}
	
	RealType block_set_big_dripleaf(Scope<obj_builder_thread> self)
	{
		if ((self->builder_scenery && !self->builder_scenery_legacy) || block_get_state_id_value(self->block_current, self->block_state_id_current, /*"type"*/ STR(806)) == /*"big_dripleaf_stem"*/ STR(906))
			return IntType(0);
		if (self->build_pos_z != (self->build_size_z - IntType(1)))
		{
			VarType facing = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"facing"*/ STR(907));
			self->block_state_id_current = block_get_state_id(self->block_current, ArrType::From({ /*"type"*/ STR(806), /*"big_dripleaf_stem"*/ STR(906), /*"facing"*/ STR(907), facing, /*"tilt"*/ STR(908), /*"none"*/ STR(909) }));
		}
		return IntType(0);
	}
	
	RealType block_set_cave_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block == null_ || idVar(block, type) != /*"cave_vines"*/ STR(910))
				global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		}
		else
			global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"type"*/ STR(806)) == /*"cave_vines_plant"*/ STR(911))
			return IntType(0);
		VarType berries = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"berries"*/ STR(912));
		if (sInt(build_pos_z) == IntType(0))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"type"*/ STR(806), /*"cave_vines"*/ STR(910), /*"berries"*/ STR(912), berries }));
		else
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"type"*/ STR(806), /*"cave_vines_plant"*/ STR(911), /*"berries"*/ STR(912), berries }));
		
		return IntType(0);
	}
	
	VarType block_set_chest(ScopeAny self)
	{
		VarType type;
		StringType double_;
		type = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"type"*/ STR(806));
		double_ = /*"false"*/ STR(778);
		switch (StringType(type).id)
		{
			case 913: // single
			{
				break;
			}
			case 204: // right
			{
				double_ = /*"true"*/ STR(777);
				break;
			}
			case 203: // left
			{
				return null_;
			}
			case 914: // legacy
			{
				if (idVar(sInt(block_current), name) == /*"ender_chest"*/ STR(915))
					break;
				IntType connectblock, discardblock;
				connectblock = null_;
				discardblock = null_;
				VarType facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(907));
				switch (StringType(facing).id)
				{
					case 900: // east
					{
						if (!sBool(build_edge_yn))
							connectblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
						if (!sBool(build_edge_yp))
							discardblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
						break;
					}
					
					case 901: // west
					{
						if (!sBool(build_edge_yp))
							connectblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
						if (!sBool(build_edge_yn))
							discardblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
						break;
					}
					
					case 902: // south
					{
						if (!sBool(build_edge_xp))
							connectblock = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						if (!sBool(build_edge_xn))
							discardblock = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						break;
					}
					
					case 903: // north
					{
						if (!sBool(build_edge_xn))
							connectblock = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						if (!sBool(build_edge_xp))
							discardblock = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						break;
					}
					
				}
				
				if (discardblock == sInt(block_current))
					return null_;
				if (connectblock == sInt(block_current))
					double_ = /*"true"*/ STR(777);
				else
					double_ = /*"false"*/ STR(778);
				
			}
			
		}
		
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"double"*/ STR(916), double_);
		return IntType(0);
	}
	
	RealType block_set_chorus_plant(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_total) == IntType(1))
			return IntType(0);
		StringType east, west, south, north, up, down;
		east = /*"false"*/ STR(778);
		west = /*"false"*/ STR(778);
		south = /*"false"*/ STR(778);
		north = /*"false"*/ STR(778);
		up = /*"false"*/ STR(778);
		down = /*"false"*/ STR(778);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917)))
				east = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917)))
				west = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917)))
				south = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917)))
				north = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917)))
				up = /*"true"*/ STR(777);
		}
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(917) || idVar(block, name) == /*"end_stone"*/ STR(918)))
				down = /*"true"*/ STR(777);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(900), east, /*"west"*/ STR(901), west, /*"south"*/ STR(902), south, /*"north"*/ STR(903), north, /*"up"*/ STR(919), up, /*"down"*/ STR(920), down }));
		return IntType(0);
	}
	
	RealType block_set_colored_bars(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		VarType color = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"color"*/ STR(921));
		block_set_bars(self);
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"color"*/ STR(921), color);
		return IntType(0);
	}
	
	VarType block_set_door(ScopeAny self)
	{
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(922)) == /*"upper"*/ STR(923))
			return null_;
		VarType hinge = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"hinge"*/ STR(924));
		if (!sBool(build_edge_zp))
		{
			IntType aboveblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (aboveblock == sInt(block_current))
			{
				IntType abovestateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				hinge = block_get_state_id_value(sInt(block_current), abovestateid, /*"hinge"*/ STR(924));
				sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"hinge"*/ STR(924), hinge);
			}
		}
		VarType facing, open, dir;
		StringType location;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(907));
		open = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"open"*/ STR(925));
		if (facing == /*"east"*/ STR(900))
		{
			location = (hinge == /*"right"*/ STR(204) ? /*"south_west"*/ STR(926) : /*"north_west"*/ STR(927));
			if (open == /*"false"*/ STR(778))
				dir = (hinge == /*"right"*/ STR(204) ? /*"north"*/ STR(903) : /*"south"*/ STR(902));
		}
		else
			if (facing == /*"west"*/ STR(901))
			{
				location = (hinge == /*"right"*/ STR(204) ? /*"north_east"*/ STR(928) : /*"south_east"*/ STR(929));
				if (open == /*"false"*/ STR(778))
					dir = (hinge == /*"right"*/ STR(204) ? /*"south"*/ STR(902) : /*"north"*/ STR(903));
			}
			else
				if (facing == /*"south"*/ STR(902))
				{
					location = (hinge == /*"right"*/ STR(204) ? /*"north_west"*/ STR(927) : /*"north_east"*/ STR(928));
					if (open == /*"false"*/ STR(778))
						dir = (hinge == /*"right"*/ STR(204) ? /*"east"*/ STR(900) : /*"west"*/ STR(901));
				}
				else
					if (facing == /*"north"*/ STR(903))
					{
						location = (hinge == /*"right"*/ STR(204) ? /*"south_east"*/ STR(929) : /*"south_west"*/ STR(926));
						if (open == /*"false"*/ STR(778))
							dir = (hinge == /*"right"*/ STR(204) ? /*"west"*/ STR(901) : /*"east"*/ STR(900));
					}
			
		
		
		if (open == /*"true"*/ STR(777))
			dir = facing;
		VarType bottommodel = idVar(sInt(block_current), state_id_model_obj).Value(sReal(block_state_id_current));
		VarType topmodel = idVar(sInt(block_current), state_id_model_obj).Value(block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(922), /*"upper"*/ STR(923)));
		if (is_undefined(bottommodel) || is_undefined(topmodel))
			return null_;
		ArrType models = ArrType::From({ ObjType(obj_block_load_variant, bottommodel)->model.Value(IntType(0)), ObjType(obj_block_load_variant, topmodel)->model.Value(IntType(0)) });
		ObjType(obj_block_render_model, models[IntType(1)])->offset_z = block_size_;
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"location"*/ STR(930), location);
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"direction"*/ STR(931), dir);
		return ArrType::From({ ObjType(obj_block_render_model, models.Value(IntType(0)))->rendermodel_id, ObjType(obj_block_render_model, models.Value(IntType(1)))->rendermodel_id });
	}
	
	VarType block_set_double_plant(Scope<obj_builder_thread> self)
	{
		if (block_get_state_id_value(self->block_current, self->block_state_id_current, /*"half"*/ STR(922)) == /*"upper"*/ STR(923))
			return null_;
		ArrType models = ArrType::From({ ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(sReal(block_state_id_current)))->model.Value(IntType(0)), ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(922), /*"upper"*/ STR(923))))->model.Value(IntType(0)) });
		ObjType(obj_block_render_model, models[IntType(1)])->offset_z = block_size_;
		return ArrType::From({ ObjType(obj_block_render_model, models.Value(IntType(0)))->rendermodel_id, ObjType(obj_block_render_model, models.Value(IntType(1)))->rendermodel_id });
	}
	
	RealType block_set_dripstone(Scope<obj_builder_thread> self)
	{
		if (self->builder_scenery && !self->builder_scenery_legacy)
			return IntType(0);
		VarType thicknessprev, dir, thickness;
		RealType size, sizeoffset;
		thicknessprev = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"thickness"*/ STR(932));
		if (thicknessprev == /*"base"*/ STR(933))
			return IntType(0);
		dir = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"vertical_direction"*/ STR(934));
		size = (dir == /*"up"*/ STR(919) ? (self->build_size_z - IntType(1)) - self->build_pos_z : self->build_pos_z);
		sizeoffset = size;
		if (thicknessprev == /*"frustum"*/ STR(935))
			sizeoffset += IntType(1);
		else
			if (thicknessprev == /*"middle"*/ STR(936))
				sizeoffset += IntType(2);
			else
				if (thicknessprev == /*"base"*/ STR(933))
					sizeoffset += IntType(3);
		
		
		if (sizeoffset == IntType(0))
			thickness = thicknessprev;
		else
			if (sizeoffset == IntType(1))
				thickness = /*"frustum"*/ STR(935);
			else
				if (size >= (self->build_size_z - IntType(1)))
					thickness = /*"base"*/ STR(933);
				else
					thickness = /*"middle"*/ STR(936);
			
		
		
		self->block_state_id_current = block_get_state_id(self->block_current, ArrType::From({ /*"vertical_direction"*/ STR(934), dir, /*"thickness"*/ STR(932), thickness }));
		return IntType(0);
	}
	
}
