/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.07.16 06:12:48 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType block_set_snowy(ScopeAny self)
	{
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(939)) == /*"true"*/ STR(768))
			return IntType(0);
		StringType snowy = /*"false"*/ STR(769);
		if (!sBool(build_edge_zp))
		{
			IntType otherblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (otherblock != null_ && idVar(otherblock, type) == /*"snow"*/ STR(940))
				snowy = /*"true"*/ STR(768);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(939), snowy);
		return IntType(0);
	}
	
	RealType block_set_stairs(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		StringType shape;
		VarType half, facing;
		shape = /*"straight"*/ STR(941);
		half = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(912));
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(897));
		if (!sBool(build_edge_xp) && (facing == /*"east"*/ STR(890) || facing == /*"west"*/ STR(891)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(942))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(912)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(897));
					if (facing == /*"east"*/ STR(890))
					{
						if (otherfacing == /*"south"*/ STR(892))
							shape = /*"outer_right"*/ STR(943);
						else
							if (otherfacing == /*"north"*/ STR(893))
								shape = /*"outer_left"*/ STR(944);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(892))
							shape = /*"inner_left"*/ STR(945);
						else
							if (otherfacing == /*"north"*/ STR(893))
								shape = /*"inner_right"*/ STR(946);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_xn) && (facing == /*"east"*/ STR(890) || facing == /*"west"*/ STR(891)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(942))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(912)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(897));
					if (facing == /*"east"*/ STR(890))
					{
						if (otherfacing == /*"south"*/ STR(892))
							shape = /*"inner_right"*/ STR(946);
						else
							if (otherfacing == /*"north"*/ STR(893))
								shape = /*"inner_left"*/ STR(945);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(892))
							shape = /*"outer_left"*/ STR(944);
						else
							if (otherfacing == /*"north"*/ STR(893))
								shape = /*"outer_right"*/ STR(943);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yp) && (facing == /*"south"*/ STR(892) || facing == /*"north"*/ STR(893)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(942))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(912)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(897));
					if (facing == /*"south"*/ STR(892))
					{
						if (otherfacing == /*"east"*/ STR(890))
							shape = /*"outer_left"*/ STR(944);
						else
							if (otherfacing == /*"west"*/ STR(891))
								shape = /*"outer_right"*/ STR(943);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(890))
							shape = /*"inner_right"*/ STR(946);
						else
							if (otherfacing == /*"west"*/ STR(891))
								shape = /*"inner_left"*/ STR(945);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yn) && (facing == /*"south"*/ STR(892) || facing == /*"north"*/ STR(893)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(942))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(912)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(897));
					if (facing == /*"south"*/ STR(892))
					{
						if (otherfacing == /*"east"*/ STR(890))
							shape = /*"inner_left"*/ STR(945);
						else
							if (otherfacing == /*"west"*/ STR(891))
								shape = /*"inner_right"*/ STR(946);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(890))
							shape = /*"outer_right"*/ STR(943);
						else
							if (otherfacing == /*"west"*/ STR(891))
								shape = /*"outer_left"*/ STR(944);
						
					}
					
				}
			}
		}
		if (shape != /*"straight"*/ STR(941))
			sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"shape"*/ STR(545), shape);
		return IntType(0);
	}
	
	RealType block_set_state_id_value(IntType block, RealType stateid, StringType name, VarType val)
	{
		VarType state;
		if (block == null_ || ObjType(obj_block, block)->states_map == null_)
			return stateid;
		state = DsMap(ObjType(obj_block, block)->states_map).Value(name);
		if (is_undefined(state))
			return stateid;
		stateid -= (mod(((IntType)(stateid / idReal(state, value_id))), idReal(state, value_amount))) * idReal(state, value_id);
		stateid += DsMap(idInt(state, value_map)).Value(val) * idReal(state, value_id);
		return stateid;
	}
	
	RealType block_set_tripwire(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"false"*/ STR(769);
		west = /*"false"*/ STR(769);
		south = /*"false"*/ STR(769);
		north = /*"false"*/ STR(769);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(947) || idVar(block, name) == /*"tripwire_hook"*/ STR(948)))
				east = /*"true"*/ STR(768);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(947) || idVar(block, name) == /*"tripwire_hook"*/ STR(948)))
				west = /*"true"*/ STR(768);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(947) || idVar(block, name) == /*"tripwire_hook"*/ STR(948)))
				south = /*"true"*/ STR(768);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(947) || idVar(block, name) == /*"tripwire_hook"*/ STR(948)))
				north = /*"true"*/ STR(768);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(890), east, /*"west"*/ STR(891), west, /*"south"*/ STR(892), south, /*"north"*/ STR(893), north }));
		return IntType(0);
	}
	
	RealType block_set_twisting_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block == null_ || idVar(block, type) != /*"twisting_vines"*/ STR(949))
				global::vertex_wave_zmin = sInt(block_pos_z);
		}
		else
			global::vertex_wave_zmin = sInt(block_pos_z);
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(806)) == /*"twisting_vines_plant"*/ STR(950))
			return IntType(0);
		if (sInt(build_pos_z) != (sInt(build_size_z) - IntType(1)))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(806), /*"twisting_vines_plant"*/ STR(950) }));
		return IntType(0);
	}
	
	RealType block_set_vine(ScopeAny self)
	{
		if (!sBool(builder_scenery_legacy))
			return IntType(0);
		StringType up = /*"false"*/ STR(769);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && block != sInt(block_current))
				up = /*"true"*/ STR(768);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"up"*/ STR(909), up);
		return IntType(0);
	}
	
	RealType block_set_wall(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		IntType east, west, south, north, i;
		VarType variant;
		ArrType states;
		BoolType tall;
		east = IntType(0);
		west = IntType(0);
		south = IntType(0);
		north = IntType(0);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(806));
		states = ArrType::From({ /*"none"*/ STR(899), /*"low"*/ STR(605), /*"tall"*/ STR(951) });
		tall = false;
		i = IntType(0);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
					tall = true;
			}
		}
		for (IntType _it = 0, _it_max = IntType(2); _it < _it_max; _it++)
		{
			if (!sBool(build_edge_xp) && (i == IntType(0) || (i == IntType(1) && east > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
						east++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(927))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(897));
							if (facing != /*"east"*/ STR(890) && facing != /*"west"*/ STR(891))
								east++;
						}
					
				}
			}
			if (!sBool(build_edge_xn) && (i == IntType(0) || (i == IntType(1) && west > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
						west++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(927))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(897));
							if (facing != /*"east"*/ STR(890) && facing != /*"west"*/ STR(891))
								west++;
						}
					
				}
			}
			if (!sBool(build_edge_yp) && (i == IntType(0) || (i == IntType(1) && south > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
						south++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(927))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(897));
							if (facing != /*"south"*/ STR(892) && facing != /*"north"*/ STR(893))
								south++;
						}
					
				}
			}
			if (!sBool(build_edge_yn) && (i == IntType(0) || (i == IntType(1) && north > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
						north++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(927))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(897));
							if (facing != /*"south"*/ STR(892) && facing != /*"north"*/ STR(893))
								north++;
						}
					
				}
			}
			if (!tall)
				break;
			else
				i++;
			
		}
		StringType up;
		if ((east > IntType(0) && west > IntType(0) && south == IntType(0) && north == IntType(0)) || (east == IntType(0) && west == IntType(0) && south > IntType(0) && north > IntType(0)))
			up = /*"false"*/ STR(769);
		else
			up = /*"true"*/ STR(768);
		
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(806), variant, /*"east"*/ STR(890), states.Value(east), /*"west"*/ STR(891), states.Value(west), /*"south"*/ STR(892), states.Value(south), /*"north"*/ STR(893), states.Value(north), /*"up"*/ STR(909), up }));
		return IntType(0);
	}
	
	RealType block_set_weeping_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block == null_ || idVar(block, type) != /*"weeping_vines"*/ STR(952))
				global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		}
		else
			global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(806)) == /*"weeping_vines_plant"*/ STR(953))
			return IntType(0);
		if (sInt(build_pos_z) == IntType(0))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(806), /*"weeping_vines"*/ STR(952) }));
		else
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(806), /*"weeping_vines_plant"*/ STR(953) }));
		
		return IntType(0);
	}
	
	VarType block_texture_get_blend(VarType texname, VarType res)
	{
		VarType col = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_color_map).Value(texname);
		if (!is_undefined(col))
		{
			if (!res_is_ready(res))
				res = global::mc_res;
			if (is_real(col))
				return col;
			switch (StringType(col).id)
			{
				case 854: // grass
				{
					return idVar(res, color_grass);
				}
				case 855: // foliage
				{
					return idVar(res, color_foliage);
				}
				case 808: // water
				{
					return idVar(res, color_water);
				}
				case 856: // oak_leaves
				{
					return idVar(res, color_leaves_oak);
				}
				case 857: // spruce_leaves
				{
					return idVar(res, color_leaves_spruce);
				}
				case 858: // birch_leaves
				{
					return idVar(res, color_leaves_birch);
				}
				case 859: // jungle_leaves
				{
					return idVar(res, color_leaves_jungle);
				}
				case 860: // acacia_leaves
				{
					return idVar(res, color_leaves_acacia);
				}
				case 861: // dark_oak_leaves
				{
					return idVar(res, color_leaves_dark_oak);
				}
				case 862: // mangrove_leaves
				{
					return idVar(res, color_leaves_mangrove);
				}
			}
			
		}
		return c_white;
	}
	
	RealType block_texture_get_frame(RealType realtime)
	{
		return mod(floor(((realtime > 0) ? global::current_step : global::_app->background_time) * global::_app->background_texture_animation_speed), block_sheet_ani_frames);
	}
	
	void block_tile_entity_banner(Scope<obj_builder_thread> self, IntType map)
	{
		VarType patterns, base;
		BoolType legacy;
		ArrType patternlist, patterncolorlist;
		patterns = DsMap(map).Value(/*"Patterns"*/ STR(954));
		if (ds_map_exists(map, /*"Base"*/ STR(955)))
		{
			base = DsMap(map).Value(/*"Base"*/ STR(955));
			legacy = true;
		}
		else
		{
			base = null_;
			legacy = false;
		}
		
		patternlist = ArrType();
		patterncolorlist = ArrType();
		if (ds_list_valid(patterns))
		{
			for (IntType i = IntType(0); i < ds_list_size((IntType)(patterns)); i++)
			{
				VarType patternmap = DsList(patterns).Value(i);
				if (!ds_map_valid(patternmap))
					continue;
				VarType pattern, color;
				IntType patternindex;
				pattern = value_get_string(DsMap(patternmap).Value(/*"Pattern"*/ STR(956)), DsList(global::minecraft_pattern_short_list).Value(IntType(1)));
				color = value_get_real(DsMap(patternmap).Value(/*"Color"*/ STR(957)), IntType(0));
				patternindex = ds_list_find_index(global::minecraft_pattern_short_list, pattern);
				if (legacy)
					color = (ds_list_size(global::minecraft_color_list) - IntType(1)) - color;
				array_add(VarType::CreateRef(patternlist), DsList(global::minecraft_pattern_list).Value(patternindex));
				array_add(VarType::CreateRef(patterncolorlist), DsList(global::minecraft_color_list).Value(color));
			}
		}
		RealType colorindex = IntType(0);
		if (legacy)
			colorindex = (ds_list_size(global::minecraft_color_list) - IntType(1)) - base;
		else
		{
			VarType color = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(911));
			if (!is_undefined(color))
				colorindex = ds_list_find_index(global::minecraft_color_name_list, color);
		}
		
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_color_map)[self->build_pos] = DsList(global::minecraft_color_list).Value(colorindex);
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_patterns_map)[self->build_pos] = patternlist;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_pattern_colors_map)[self->build_pos] = patterncolorlist;
	}
	
	RealType block_tile_entity_bed(Scope<obj_builder_thread> self, IntType map)
	{
		VarType colorid = DsMap(map).Value(/*"color"*/ STR(911));
		if (!is_real(colorid))
			return IntType(0);
		if (is_undefined(colorid) || colorid >= ds_list_size(global::minecraft_color_list))
			return IntType(0);
		RealType newstate = block_set_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(911), DsList(global::minecraft_color_name_list).Value(colorid));
		builder_set_state_id(self, self->build_pos_x, self->build_pos_y, self->build_pos_z, newstate);
		return 0.0;
	}
	
	void block_tile_entity_hanging_sign(Scope<obj_builder_thread> self, VarType map)
	{
		block_tile_entity_sign(self, map);
	}
	
	RealType block_tile_entity_sign(Scope<obj_builder_thread> self, IntType map)
	{
		VarType frontmap = DsMap(map).Value(/*"front_text"*/ STR(958));
		VarType text, colorname, glowing;
		IntType color;
		text = /*""*/ STR(0);
		if (ds_map_valid(frontmap))
		{
			colorname = value_get_string(DsMap(frontmap).Value(/*"color"*/ STR(911)), /*"black"*/ STR(623));
			color = DsList(global::minecraft_color_list).Value(ds_list_find_index(global::minecraft_color_name_list, colorname));
			glowing = value_get_real(DsMap(frontmap).Value(/*"has_glowing_text"*/ STR(959)), IntType(0));
			VarType messagemap = value_get_array(DsMap(frontmap).Value(/*"messages"*/ STR(960)), /*""*/ STR(0));
			for (IntType i = IntType(0); i < IntType(4); i++)
			{
				VarType line = /*""*/ STR(0);
				IntType textmap = json_decode(messagemap.Value(i));
				if (ds_map_valid(textmap))
				{
					if (is_string(DsMap(textmap).Value(/*"text"*/ STR(99))))
						line = DsMap(textmap).Value(/*"text"*/ STR(99));
					ds_map_destroy(textmap);
				}
				if (line == /*""*/ STR(0))
					line = /*" "*/ STR(17);
				if (i > IntType(0))
					text += /*"\n"*/ STR(961);
				text += line;
			}
		}
		else
		{
			colorname = value_get_string(DsMap(map).Value(/*"Color"*/ STR(957)), /*"black"*/ STR(623));
			color = DsList(global::minecraft_color_list).Value(ds_list_find_index(global::minecraft_color_name_list, colorname));
			glowing = value_get_real(DsMap(map).Value(/*"GlowingText"*/ STR(962)), IntType(0));
			for (IntType i = IntType(0); i < IntType(4); i++)
			{
				VarType line = DsMap(map).Value(/*"Text"*/ STR(963) + string(i + IntType(1)));
				if (!is_string(line))
					return IntType(0);
				IntType textmap = json_decode(line);
				if (ds_map_valid(textmap))
				{
					if (ds_list_valid(DsMap(textmap).Value(/*"extra"*/ STR(964))) && ds_list_size((IntType)(DsMap(textmap).Value(/*"extra"*/ STR(964)))) > IntType(0))
					{
						IntType extramap = ds_list_find_value(DsMap(textmap).Value(/*"extra"*/ STR(964)), IntType(0));
						if (ds_map_valid(extramap) && is_string(DsMap(extramap).Value(/*"text"*/ STR(99))))
							textmap = extramap;
					}
					if (is_string(DsMap(textmap).Value(/*"text"*/ STR(99))))
						line = DsMap(textmap).Value(/*"text"*/ STR(99));
					ds_map_destroy(textmap);
				}
				if (line == /*""*/ STR(0))
					line = /*" "*/ STR(17);
				if (i > IntType(0))
					text += /*"\n"*/ STR(961);
				text += line;
			}
		}
		
		DsMap(ObjType(obj_builder, global::mc_builder)->block_text_map)[self->build_pos] = text;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_text_color_map)[self->build_pos] = color;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_text_glowing_map)[self->build_pos] = glowing;
		return 0.0;
	}
	
	RealType block_tile_entity_skull(Scope<obj_builder_thread> self, VarType map)
	{
		StringType mapname, ownerid, texvalue, texurl;
		VarType texlist;
		mapname = /*"Owner"*/ STR(965);
		if (!ds_map_valid(DsMap(map).Value(mapname)))
		{
			mapname = /*"SkullOwner"*/ STR(966);
			if (!ds_map_valid(DsMap(map).Value(mapname)))
				return IntType(0);
		}
		map = DsMap(map).Value(mapname);
		ownerid = string(DsMap(map).Value(/*"Id"*/ STR(967)));
		map = DsMap(map).Value(/*"Properties"*/ STR(968));
		if (!ds_map_valid(map))
			return IntType(0);
		texlist = DsMap(map).Value(/*"textures"*/ STR(833));
		if (!ds_list_valid(texlist))
			return IntType(0);
		map = DsList(texlist).Value(IntType(0));
		texvalue = base64_decode(DsMap(map).Value(/*"Value"*/ STR(969)));
		map = json_decode(texvalue);
		if (!ds_map_valid(map))
			return IntType(0);
		if (!ds_map_valid(DsMap(map).Value(/*"textures"*/ STR(833))))
			return IntType(0);
		map = DsMap(map).Value(/*"textures"*/ STR(833));
		map = DsMap(map).Value(/*"SKIN"*/ STR(970));
		texurl = DsMap(map).Value(/*"url"*/ STR(971)).Str();
		ownerid = filename_change_ext(filename_name(texurl), /*""*/ STR(0));
		DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_map)[self->build_pos] = ownerid;
		if (ds_map_find_value(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map, ownerid) == VarType())
			DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map)[ownerid] = texurl;
		return 0.0;
	}
	
	void block_vbuffer_destroy(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
	}
	
	void block_vbuffer_done(ScopeAny self)
	{
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				vertex_end((IntType)(sVar(block_vbuffer)[d][vb]));
				sVar(block_vbuffer)[d][vb] = vbuffer_generate_tangents(sVar(block_vbuffer)[d][vb]);
				vertex_freeze((IntType)(sVar(block_vbuffer)[d][vb]));
			}
		}
	}
	
	void block_vbuffer_start(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				sVar(block_vbuffer)[d][vb] = vbuffer_start();
				vertex_buffer_set_save_data(sVar(block_vbuffer)[d][vb], true);
				ObjType(obj_builder, global::mc_builder)->vbuffer[d][vb] = sVar(block_vbuffer)[d][vb];
			}
		}
	}
	
	RealType bool_to_float(VarType val)
	{
		if (val > 0)
			return IntType(1);
		return IntType(0);
	}
	
	RealType buffer_is_eof()
	{
		return (buffer_tell(global::buffer_current) >= buffer_get_size(global::buffer_current));
	}
	
	IntType buffer_load_lib(VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			file_copy_lib(fn, temp_file);
			return buffer_load(temp_file);
		}
		else
			return buffer_load(fn);
		
		return IntType(0);
	}
	
	RealType buffer_read_alpha(RealType xx, RealType yy, RealType wid)
	{
		return real((RealType)buffer_peek(global::buffer_current, (IntType)((xx + yy * wid) * IntType(4) + IntType(3)), buffer_u8) / 255.0);
	}
	
	IntType buffer_read_byte()
	{
		return real(buffer_read(global::buffer_current, buffer_u8));
	}
	
	IntType buffer_read_color(RealType xx, RealType yy, RealType wid)
	{
		RealType off;
		IntType r, g, b;
		off = (xx + yy * wid) * IntType(4);
		r = real(buffer_peek(global::buffer_current, (IntType)(off), buffer_u8));
		g = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(1)), buffer_u8));
		b = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(2)), buffer_u8));
		return make_color_rgb(r, g, b);
	}
	
	RealType buffer_read_double()
	{
		return real(buffer_read(global::buffer_current, buffer_f64));
	}
	
	RealType buffer_read_double_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(8); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(8), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(8); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(7) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f64));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_float()
	{
		return real(buffer_read(global::buffer_current, buffer_f32));
	}
	
	RealType buffer_read_float_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(4); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(4), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(4); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(3) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f32));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_int()
	{
		return real(buffer_read(global::buffer_current, buffer_s32));
	}
	
	RealType buffer_read_int_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		byte[IntType(2)] = buffer_read_byte();
		byte[IntType(3)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(16777216) + byte.Value(IntType(1)) * IntType(65536) + byte.Value(IntType(2)) * IntType(256) + byte.Value(IntType(3));
	}
	
	IntType buffer_read_int_uns()
	{
		return buffer_read(global::buffer_current, buffer_u32);
	}
	
	RealType buffer_read_long_be()
	{
		RealType i1, i2;
		i1 = buffer_read_int_be();
		i2 = buffer_read_int_be();
		return i1 * IntType(4294967296) + i2;
	}
	
	RealType buffer_read_short()
	{
		return real(buffer_read(global::buffer_current, buffer_s16));
	}
	
	RealType buffer_read_short_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(256) + byte.Value(IntType(1));
	}
	
	StringType buffer_read_string_int()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = real(buffer_read_int()); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	StringType buffer_read_string_short_be()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = buffer_read_short_be(); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	void buffer_save_lib(IntType buffer, VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			buffer_save(buffer, temp_file);
			file_copy_lib(temp_file, fn);
		}
		else
			buffer_save(buffer, fn);
		
	}
	
	void buffer_skip(RealType bytes)
	{
		buffer_seek(global::buffer_current, buffer_seek_relative, (IntType)(bytes));
	}
	
	void buffer_write_byte(VarType val)
	{
		buffer_write(global::buffer_current, buffer_u8, val);
	}
	
	void buffer_write_double(VarType val)
	{
		buffer_write(global::buffer_current, buffer_f64, val);
	}
	
	void buffer_write_double_be(VarType val)
	{
		IntType tmpbuf;
		ArrType byte;
		tmpbuf = buffer_create(IntType(8), buffer_fixed, IntType(1));
		buffer_write(tmpbuf, buffer_f64, val);
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		for (IntType b = IntType(0); b < IntType(8); b++)
			byte[b] = buffer_read(tmpbuf, buffer_s8);
		buffer_delete(tmpbuf);
		for (IntType b = IntType(0); b < IntType(8); b++)
			buffer_write_byte(byte.Value(IntType(7) - b));
	}
	
	void buffer_write_float_be(VarType val)
	{
		IntType tmpbuf;
		ArrType byte;
		tmpbuf = buffer_create(IntType(4), buffer_fixed, IntType(1));
		buffer_write(tmpbuf, buffer_f32, val);
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		for (IntType b = IntType(0); b < IntType(4); b++)
			byte[b] = buffer_read(tmpbuf, buffer_s8);
		buffer_delete(tmpbuf);
		for (IntType b = IntType(0); b < IntType(4); b++)
			buffer_write_byte(byte.Value(IntType(3) - b));
	}
	
	void buffer_write_int(IntType val)
	{
		buffer_write(global::buffer_current, buffer_s32, val);
	}
	
	void buffer_write_short(VarType val)
	{
		buffer_write(global::buffer_current, buffer_u16, val);
	}
	
	void buffer_write_string_int(StringType str)
	{
		IntType len = string_length(str);
		buffer_write_int(len);
		for (IntType p = IntType(0); p < len; p++)
			buffer_write_byte(ord(string_char_at(str, p + IntType(1))));
	}
	
	void builder_combine_threads(Scope<obj_builder> self)
	{
		for (IntType t = IntType(0); t < ds_list_size(self->thread_list); t++)
		{
			withOne (obj_builder_thread, DsList(self->thread_list).Value(t), self->id)
			{
				if (self->block_multithreaded_skip)
					ObjType(obj_builder, self.otherId)->block_multithreaded_skip = true;
				if (self->block_tl_map != null_)
				{
					VarType key = ds_map_find_first(self->block_tl_map);
					while (!is_undefined(key))
					{
						VarType arr = DsMap(self->block_tl_map).Value(key);
						builder_thread_set_pos(self, key);
						ds_list_add({ ObjType(obj_builder, self.otherId)->block_tl_list, block_get_timeline(self, arr.Value(IntType(0)), arr.Value(IntType(1))) });
						key = ds_map_find_next(self->block_tl_map, key);
					}
					
					ds_map_destroy(self->block_tl_map);
				}
				VarType key = ds_map_find_first(self->block_render_model_multipart_map);
				while (!is_undefined(key))
				{
					builder_thread_set_pos(self, key);
					builder_add_render_model_multi_part(self, self->build_pos_x, self->build_pos_y, self->build_pos_z, DsMap(self->block_render_model_multipart_map).Value(key));
					key = ds_map_find_next(self->block_render_model_multipart_map, key);
				}
				
				ds_map_destroy(self->block_render_model_multipart_map);
				instance_destroy(ScopeAny(self));
			}
			
		}
		if (ds_list_size(self->thread_list) > IntType(1))
			thread_task_end();
		ds_list_clear(self->thread_list);
	}
	
	void builder_event_create(Scope<obj_builder> self)
	{
		self->sch_palette_blocks = null_;
		self->sch_palette_stateids = null_;
		self->sch_palette_waterlogged = null_;
		self->sch_blockdata_array = null_;
		self->sch_blockdata_ints = false;
		self->sch_legacy_blocksarray = null_;
		self->sch_legacy_dataarray = null_;
		self->sch_timeline_amount = IntType(0);
		self->sch_tileentity_list = null_;
		self->build_size = vec3(IntType(0), IntType(0), IntType(0));
		self->build_size_x = IntType(0);
		self->build_size_y = IntType(0);
		self->build_size_xy = IntType(0);
		self->build_size_z = IntType(0);
		self->build_size_total = IntType(0);
		self->build_size_sqrt = IntType(0);
		self->build_pos_x = IntType(0);
		self->build_pos_y = IntType(0);
		self->build_pos_z = IntType(0);
		self->build_edge_xp = false;
		self->build_edge_xn = false;
		self->build_edge_yp = false;
		self->build_edge_yn = false;
		self->build_edge_zp = false;
		self->build_edge_zn = false;
		self->build_edges = true;
		self->build_single_block = null_;
		self->build_single_stateid = IntType(0);
		self->build_multithreaded = null_;
		self->build_randomize = false;
		self->block_obj = null_;
		self->block_waterlogged = null_;
		self->block_current = IntType(0);
		self->block_state_id = null_;
		self->block_state_id_current = IntType(0);
		self->block_render_model = null_;
		self->block_text_map = ds_int_map_create();
		self->block_text_color_map = ds_int_map_create();
		self->block_text_glowing_map = ds_int_map_create();
		self->block_banner_color_map = ds_int_map_create();
		self->block_banner_patterns_map = ds_int_map_create();
		self->block_banner_pattern_colors_map = ds_int_map_create();
		self->block_skull_map = ds_int_map_create();
		self->block_skull_res_map = ds_map_create();
		self->block_skull_texture_map = ds_string_map_create();
		self->block_skull_texture_fail = false;
		self->block_skull_texture_name = /*""*/ STR(0);
		self->block_skull_texture = null_;
		self->block_skull_download_time = IntType(0);
		self->block_skull_download_wait = false;
		self->block_skull_texture_count = IntType(0);
		self->block_skull_finish_count = IntType(0);
		self->block_skull_fail_count = IntType(0);
		self->block_multithreaded_skip = false;
		self->block_tl_add = false;
		self->block_tl_list = null_;
		self->block_color = null_;
		self->file_map = /*""*/ STR(0);
		self->builder_scenery = false;
		self->builder_scenery_legacy = false;
		self->thread_list = ds_list_create();
	}
	
	RealType builder_generate(ScopeAny self)
	{
		sInt(block_current) = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		if (sInt(block_current) == null_)
			return IntType(0);
		if (ObjType(obj_builder, global::mc_builder)->build_multithreaded != null_)
		{
			if (idVar(sInt(block_current), multithreaded) != ObjType(obj_builder, global::mc_builder)->build_multithreaded)
			{
				sBool(block_multithreaded_skip) = true;
				return IntType(0);
			}
		}
		sBool(build_edge_xp) = (sInt(build_pos_x) == sInt(build_size_x) - IntType(1));
		sBool(build_edge_xn) = (sInt(build_pos_x) == IntType(0));
		sBool(build_edge_yp) = (sInt(build_pos_y) == sInt(build_size_y) - IntType(1));
		sBool(build_edge_yn) = (sInt(build_pos_y) == IntType(0));
		sBool(build_edge_zp) = (sInt(build_pos_z) == sInt(build_size_z) - IntType(1));
		sBool(build_edge_zn) = (sInt(build_pos_z) == IntType(0));
		sBool(block_face_full_xp) = false;
		sInt(block_face_min_depth_xp) = null_;
		if (sBool(build_edge_xp))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_xp) = true;
				sInt(block_face_min_depth_xp) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_xp) = idBool(othermodel, face_full_xn);
				sVar(block_face_min_xp) = idVar(othermodel, face_min_xn);
				sVar(block_face_max_xp) = idVar(othermodel, face_max_xn);
				sInt(block_face_min_depth_xp) = idInt(othermodel, face_min_depth_xn);
			}
		}
		
		sBool(block_face_full_xn) = false;
		sInt(block_face_min_depth_xn) = null_;
		if (sBool(build_edge_xn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_xn) = true;
				sInt(block_face_min_depth_xn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_xn) = idBool(othermodel, face_full_xp);
				sVar(block_face_min_xn) = idVar(othermodel, face_min_xp);
				sVar(block_face_max_xn) = idVar(othermodel, face_max_xp);
				sInt(block_face_min_depth_xn) = idInt(othermodel, face_min_depth_xp);
			}
		}
		
		sBool(block_face_full_yp) = false;
		sInt(block_face_min_depth_yp) = null_;
		if (sBool(build_edge_yp))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_yp) = true;
				sInt(block_face_min_depth_yp) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_yp) = idBool(othermodel, face_full_yn);
				sVar(block_face_min_yp) = idVar(othermodel, face_min_yn);
				sVar(block_face_max_yp) = idVar(othermodel, face_max_yn);
				sInt(block_face_min_depth_yp) = idInt(othermodel, face_min_depth_yn);
			}
		}
		
		sBool(block_face_full_yn) = false;
		sInt(block_face_min_depth_yn) = null_;
		if (sBool(build_edge_yn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_yn) = true;
				sInt(block_face_min_depth_yn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_yn) = idBool(othermodel, face_full_yp);
				sVar(block_face_min_yn) = idVar(othermodel, face_min_yp);
				sVar(block_face_max_yn) = idVar(othermodel, face_max_yp);
				sInt(block_face_min_depth_yn) = idInt(othermodel, face_min_depth_yp);
			}
		}
		
		sBool(block_face_full_zp) = false;
		sInt(block_face_min_depth_zp) = null_;
		if (!sBool(build_edge_zp))
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (othermodel != null_)
			{
				sBool(block_face_full_zp) = idBool(othermodel, face_full_zn);
				sVar(block_face_min_zp) = idVar(othermodel, face_min_zn);
				sVar(block_face_max_zp) = idVar(othermodel, face_max_zn);
				sInt(block_face_min_depth_zp) = idInt(othermodel, face_min_depth_zn);
			}
		}
		sBool(block_face_full_zn) = false;
		sInt(block_face_min_depth_zn) = null_;
		if (sBool(build_edge_zn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_zn) = true;
				sInt(block_face_min_depth_zn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (othermodel != null_)
			{
				sBool(block_face_full_zn) = idBool(othermodel, face_full_zp);
				sVar(block_face_min_zn) = idVar(othermodel, face_min_zp);
				sVar(block_face_max_zn) = idVar(othermodel, face_max_zp);
				sInt(block_face_min_depth_zn) = idInt(othermodel, face_min_depth_zp);
			}
		}
		
		if (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp) && sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn) && sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp) && sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn) && sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp) && sInt(block_face_min_depth_zn) == e_block_depth_DEPTH0 && sBool(block_face_full_zn))
			return IntType(0);
		sReal(block_state_id_current) = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		sInt(block_pos_x) = sInt(build_pos_x) * block_size_;
		sInt(block_pos_y) = sInt(build_pos_y) * block_size_;
		sInt(block_pos_z) = sInt(build_pos_z) * block_size_;
		sInt(block_color) = null_;
		if (idInt(sInt(block_current), generate_script) > -IntType(1))
			script_execute(self, { idInt(sInt(block_current), generate_script) });
		else
		{
			VarType model = null_;
			if (idVar(sInt(block_current), require_models) > 0)
				model = builder_set_model(self, true);
			else
			{
				IntType modelindex = builder_get_render_model_index(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
				if (modelindex > IntType(0))
					model = modelindex;
				else
					if (modelindex < IntType(0))
						model = builder_get_render_model_multipart(sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z), -modelindex);
				
			}
			
			IntType singlemodel = null_;
			if (is_array(model))
				singlemodel = global::block_rendermodels.Value(model.Value(IntType(0)));
			else
				if (model > IntType(0))
					singlemodel = global::block_rendermodels.Value(model);
			
			if (singlemodel != null_)
			{
				if ((ObjType(obj_block_render_model, singlemodel)->random_offset > 0 && (sInt(build_size_total) > IntType(1))) || (ObjType(obj_block_render_model, singlemodel)->random_offset_xy > 0 && (sInt(build_size_xy) > IntType(1))))
				{
					if (ObjType(obj_block_render_model, singlemodel)->random_offset > 0)
					{
						random_set_seed((IntType)(sInt(build_pos_x) * sInt(build_size_y) * sInt(build_size_z) + sInt(build_pos_y) * sInt(build_size_z) + sInt(build_pos_z)));
						sInt(block_pos_z) += irandom_range(-IntType(3), IntType(0));
					}
					else
						random_set_seed(sInt(build_pos_x) + sInt(build_size_x) * sInt(build_pos_y));
					
					sInt(block_pos_x) += irandom_range(-IntType(4), IntType(4));
					sInt(block_pos_y) += irandom_range(-IntType(4), IntType(4));
				}
			}
			sVar(block_vertex_emissive) = null_;
			sInt(block_vertex_wave) = idInt(sInt(block_current), wind_axis);
			if (idVar(sInt(block_current), wind_zmin) != null_)
				sInt(block_vertex_wave_zmin) = sInt(block_pos_z) + idVar(sInt(block_current), wind_zmin);
			sVar(block_vertex_subsurface) = idVar(sInt(block_current), subsurface);
			if (is_array(model))
			{
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(model)); i++)
					block_render_model_generate(Scope<obj_builder_thread>(self), global::block_rendermodels.Value(model.Value(i)));
			}
			else
				if (model > IntType(0))
					block_render_model_generate(Scope<obj_builder_thread>(self), global::block_rendermodels.Value(model));
			
		}
		
		sInt(block_vertex_wave) = e_vertex_wave_NONE;
		sInt(block_vertex_wave_zmin) = null_;
		sInt(block_vertex_wave_zmax) = null_;
		sVar(block_vertex_emissive) = IntType(0);
		sVar(block_vertex_subsurface) = IntType(0);
		if (builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z)))
		{
			sInt(block_pos_x) = sInt(build_pos_x) * block_size_;
			sInt(block_pos_y) = sInt(build_pos_y) * block_size_;
			sInt(block_pos_z) = sInt(build_pos_z) * block_size_;
			sInt(block_current) = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(/*"water"*/ STR(808));
			block_generate_liquid(self, true);
			sInt(block_vertex_wave) = e_vertex_wave_NONE;
			sInt(block_vertex_wave_zmin) = null_;
			sInt(block_vertex_wave_zmax) = null_;
			sVar(block_vertex_emissive) = IntType(0);
			sVar(block_vertex_subsurface) = IntType(0);
		}
		return 0.0;
	}
	
}
