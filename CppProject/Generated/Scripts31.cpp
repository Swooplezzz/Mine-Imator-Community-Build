/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.14 19:47:40 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void history_save_temp_usage_tl(ScopeAny self, VarType temp, IntType save, VarType treeobj)
	{
		for (IntType t = IntType(0); t < ds_list_size(idInt(treeobj, tree_list)); t++)
		{
			VarType tl = DsList(idInt(treeobj, tree_list)).Value(t);
			if (ObjType(obj_timeline, tl)->temp == temp)
			{
				ObjType(obj_history_save, save)->usage_tl_save_obj[ObjType(obj_history_save, save)->usage_tl_amount] = history_save_tl(self, tl);
				ObjType(obj_history_save, save)->usage_tl_amount++;
			}
			else
				history_save_temp_usage_tl(self, temp, save, tl);
			
		}
	}
	
	IntType history_save_tl(ScopeAny self, VarType tl)
	{
		IntType save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (Object, tl, self->id)
			tl_copy(self, save);
		
		withOne (obj_history_save, save, self->id)
		{
			self->save_id = idVar(tl, save_id);
			tl_get_save_ids(self);
			for (IntType v = IntType(0); v < e_value_amount; v++)
				self->value_default[v] = tl_value_get_save_id(v, idArr(tl, value_default).Value(v));
			self->kf_amount = ds_list_size(idInt(tl, keyframe_list));
			for (IntType k = IntType(0); k < self->kf_amount; k++)
			{
				withOne (obj_keyframe, DsList(idInt(tl, keyframe_list)).Value(k), self->id)
				{
					ObjType(obj_history_save, save)->kf_pos[k] = self->position;
					for (IntType v = IntType(0); v < e_value_amount; v++)
						ObjType(obj_history_save, save)->kf_value[k][v] = tl_value_get_save_id(v, self->value.Value(v));
				}
				
			}
			self->usage_temp_shape_tex_amount = IntType(0);
			self->usage_temp_path_amount = IntType(0);
			withAll (obj_template, self->id)
			{
				if (self->shape_tex == tl)
				{
					ObjType(obj_history_save, save)->usage_temp_shape_tex_save_id[ObjType(obj_history_save, save)->usage_temp_shape_tex_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_temp_shape_tex_amount++;
				}
				if (self->type == e_temp_type_PARTICLE_SPAWNER && self->pc_spawn_region_path == tl)
				{
					ObjType(obj_history_save, save)->usage_temp_path_save_id[ObjType(obj_history_save, save)->usage_temp_path_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_temp_path_amount++;
				}
			}
			
			self->usage_tl_texture_amount = IntType(0);
			self->usage_tl_path_amount = IntType(0);
			self->usage_tl_attractor_amount = IntType(0);
			self->usage_tl_ik_target_amount = IntType(0);
			self->usage_tl_flw_rot_target_amount = IntType(0);
			self->usage_tl_flw_pos_target_amount = IntType(0);
			self->usage_tl_flw_scale_target_amount = IntType(0);
			self->usage_tl_ik_target_angle_amount = IntType(0);
			withAll (obj_timeline, self->id)
			{
				if (self->value.Value(e_value_TEXTURE_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_texture_save_id[ObjType(obj_history_save, save)->usage_tl_texture_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_texture_amount++;
				}
				if (self->value.Value(e_value_PATH_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_path_save_id[ObjType(obj_history_save, save)->usage_tl_path_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_path_amount++;
				}
				if (self->value.Value(e_value_ATTRACTOR) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_attractor_save_id[ObjType(obj_history_save, save)->usage_tl_attractor_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_attractor_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_ik_target_save_id[ObjType(obj_history_save, save)->usage_tl_ik_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_ik_target_amount++;
				}
				if (self->value.Value(e_value_ROT_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_rot_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_rot_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_rot_target_amount++;
				}
				if (self->value.Value(e_value_POS_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_pos_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_pos_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_pos_target_amount++;
				}
				if (self->value.Value(e_value_SCALE_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_scale_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_scale_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_scale_target_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_ik_target_angle_save_id[ObjType(obj_history_save, save)->usage_tl_ik_target_angle_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_ik_target_angle_amount++;
				}
			}
			
			self->usage_kf_texture_amount = IntType(0);
			self->usage_kf_path_amount = IntType(0);
			self->usage_kf_ik_target_amount = IntType(0);
			self->usage_kf_flw_rot_target_amount = IntType(0);
			self->usage_kf_flw_pos_target_amount = IntType(0);
			self->usage_kf_flw_scale_target_amount = IntType(0);
			self->usage_kf_ik_target_angle_amount = IntType(0);
			self->usage_kf_attractor_amount = IntType(0);
			withAll (obj_keyframe, self->id)
			{
				if (self->value.Value(e_value_TEXTURE_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_texture_tl_save_id[ObjType(obj_history_save, save)->usage_kf_texture_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_texture_index[ObjType(obj_history_save, save)->usage_kf_texture_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_texture_amount++;
				}
				if (self->value.Value(e_value_PATH_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_path_tl_save_id[ObjType(obj_history_save, save)->usage_kf_path_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_path_index[ObjType(obj_history_save, save)->usage_kf_path_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_path_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_ik_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_ik_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_ik_target_index[ObjType(obj_history_save, save)->usage_kf_ik_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_ik_target_amount++;
				}
				if (self->value.Value(e_value_ROT_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_index[ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount++;
				}
				if (self->value.Value(e_value_POS_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_index[ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount++;
				}
				if (self->value.Value(e_value_SCALE_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_index[ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_tl_save_id[ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_index[ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount++;
				}
				if (self->value.Value(e_value_ATTRACTOR) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_attractor_tl_save_id[ObjType(obj_history_save, save)->usage_kf_attractor_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_attractor_index[ObjType(obj_history_save, save)->usage_kf_attractor_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_attractor_amount++;
				}
			}
			
			self->pattern_type = /*""*/ STR(0);
			if (idVar(tl, pattern_type) != /*""*/ STR(0) && idVar(tl, pattern_base_color) != null_)
			{
				self->pattern_type = idVar(tl, pattern_type);
				self->pattern_base_color = idVar(tl, pattern_base_color);
				self->pattern_pattern_list = array_copy_1d(idVar(tl, pattern_pattern_list));
				self->pattern_color_list = array_copy_1d(idVar(tl, pattern_color_list));
			}
			self->tree_amount = ds_list_size(idInt(tl, tree_list));
			for (IntType t = IntType(0); t < self->tree_amount; t++)
				self->tree_save_obj[t] = history_save_tl(ScopeAny(self), DsList(idInt(tl, tree_list)).Value(t));
			if (idInt(tl, part_list) != null_)
			{
				self->part_amount = ds_list_size(idInt(tl, part_list));
				for (IntType p = IntType(0); p < self->part_amount; p++)
					self->part_save_id[p] = save_id_get(DsList(idInt(tl, part_list)).Value(p));
			}
			else
				self->part_amount = IntType(0);
			
		}
		
		return save;
	}
	
	void history_save_tl_select(ScopeAny self)
	{
		sInt(tl_sel_amount) = IntType(0);
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0))
				continue;
			idArr(self.otherId, tl_sel_save_id)[idInt(self.otherId, tl_sel_amount)] = self->save_id;
			idArr(self.otherId, tl_sel_kf_amount)[idInt(self.otherId, tl_sel_amount)] = IntType(0);
			for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
			{
				IntType kf = DsList(self->keyframe_list).Value(k);
				if (!(ObjType(obj_keyframe, kf)->selected > 0))
					continue;
				idArr(self.otherId, tl_sel_kf_index)[idInt(self.otherId, tl_sel_amount)][idArr(self.otherId, tl_sel_kf_amount).Value(idInt(self.otherId, tl_sel_amount))] = k;
				idArr(self.otherId, tl_sel_kf_amount)[idInt(self.otherId, tl_sel_amount)]++;
			}
			idInt(self.otherId, tl_sel_amount)++;
		}
		
	}
	
	void history_save_tl_select_new(ScopeAny self)
	{
		sInt(tl_sel_new_amount) = IntType(0);
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0))
				continue;
			idArr(self.otherId, tl_sel_new_save_id)[idInt(self.otherId, tl_sel_new_amount)] = self->save_id;
			idArr(self.otherId, tl_sel_new_kf_amount)[idInt(self.otherId, tl_sel_new_amount)] = IntType(0);
			for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
			{
				IntType kf = DsList(self->keyframe_list).Value(k);
				if (!(ObjType(obj_keyframe, kf)->selected > 0))
					continue;
				idArr(self.otherId, tl_sel_new_kf_index)[idInt(self.otherId, tl_sel_new_amount)][idArr(self.otherId, tl_sel_new_kf_amount).Value(idInt(self.otherId, tl_sel_new_amount))] = k;
				idArr(self.otherId, tl_sel_new_kf_amount)[idInt(self.otherId, tl_sel_new_amount)]++;
			}
			idInt(self.otherId, tl_sel_new_amount)++;
		}
		
	}
	
	void history_save_tl_tree(ScopeAny self, VarType treeobj)
	{
		for (IntType t = IntType(0); t < ds_list_size(idInt(treeobj, tree_list)); t++)
		{
			VarType tl = DsList(idInt(treeobj, tree_list)).Value(t);
			if (ObjType(obj_timeline, tl)->selected > 0 && ObjType(obj_timeline, tl)->part_of == null_)
			{
				sArr(tl_save_obj)[sInt(tl_save_amount)] = history_save_tl(self, tl);
				sInt(tl_save_amount)++;
			}
			else
				history_save_tl_tree(self, tl);
			
		}
	}
	
	void history_save_var(Scope<obj_history> self, VarType object, VarType oldvalue, VarType newvalue)
	{
		self->save_var_save_id[self->save_var_amount] = save_id_get(object);
		if (self->first)
			self->save_var_old_value[self->save_var_amount] = oldvalue;
		self->save_var_new_value[self->save_var_amount] = newvalue;
		self->save_var_amount++;
	}
	
	VarType history_save_var_start(ScopeAny self, IntType script, RealType combine)
	{
		VarType hobj;
		history_pop(self);
		if (combine > 0 && sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->script == script && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_axis_edit == global::axis_edit)
		{
			hobj = sArr(history).Value(IntType(0));
			ObjType(obj_history, hobj)->first = false;
		}
		else
		{
			history_push(self);
			debug({ /*"history_save_var_start("*/ STR(1197) + script_get_name(script) + /*", "*/ STR(1027) + string(combine) + /*")"*/ STR(1090) });
			hobj = new_history(script);
			ObjType(obj_history, hobj)->first = true;
			sArr(history)[IntType(0)] = hobj;
		}
		
		ObjType(obj_history, hobj)->save_var_amount = IntType(0);
		return hobj;
	}
	
	IntType history_set(ScopeAny self, IntType script)
	{
		IntType hobj;
		history_pop(self);
		history_push(self);
		log({ /*"Action"*/ STR(1198), script_get_name(script) });
		hobj = new_history(script);
		sArr(history)[IntType(0)] = hobj;
		return hobj;
	}
	
	IntType history_set_res(ScopeAny self, IntType script, VarType fn, VarType oldres, IntType newres)
	{
		history_pop(self);
		history_push(self);
		log({ /*"Action Load resource"*/ STR(1199), script_get_name(script), fn });
		withOne (obj_history, new_history(script), self->id)
		{
			self->filename = fn;
			self->type = null_;
			self->old_res_save_id = save_id_get(oldres);
			self->new_res_save_id = save_id_get(newres);
			self->replaced = false;
			self->copied = false;
			if (newres != null_ && Obj(newres)->subAssetId == ID_obj_resource)
			{
				self->type = idVar(newres, type);
				self->replaced = idBool(newres, replaced);
				self->copied = idBool(newres, copied);
				self->player_skin = idVar(newres, player_skin);
			}
			idArr(self.otherId, history)[IntType(0)] = self->id;
			return self->id;
		}
		
		return IntType(0);
	}
	
	VarType history_set_var(ScopeAny self, IntType script, VarType oldval, VarType newval, RealType combine)
	{
		VarType hobj;
		history_pop(self);
		if (combine > 0 && sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->script == script && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_temp_edit == save_id_get(global::temp_edit) && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_axis_edit == global::axis_edit)
			hobj = sArr(history).Value(IntType(0));
		else
		{
			history_push(self);
			log({ /*"Action Set variable"*/ STR(1200), script_get_name(script), oldval, newval, combine });
			hobj = new_history(script);
			ObjType(obj_history, hobj)->old_value = oldval;
			ObjType(obj_history, hobj)->save_set_var = true;
			sArr(history)[IntType(0)] = hobj;
		}
		
		ObjType(obj_history, hobj)->new_value = newval;
		return hobj;
	}
	
	void history_startup()
	{
		global::_app->history[IntType(0)] = null_;
		global::_app->history_amount = IntType(0);
		global::_app->history_pos = IntType(0);
		global::_app->history_undo = IntType(0);
		global::_app->history_redo = IntType(0);
		global::_app->history_resource_update = false;
		global::history_data = null_;
	}
	
	IntType history_undo_res()
	{
		if (ObjType(obj_history, global::history_data)->filename != /*""*/ STR(0) && (!ObjType(obj_history, global::history_data)->replaced || ObjType(obj_history, global::history_data)->copied))
		{
			withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->new_res_save_id), noone)
			{
				file_delete_lib(global::_app->project_folder + /*"/"*/ STR(16) + sVar(filename));
				instance_destroy(self);
			}
			
		}
		return save_id_find(ObjType(obj_history, global::history_data)->old_res_save_id);
	}
	
	void interface_update_accent()
	{
		global::c_accent_hover = merge_color((IntType)(global::c_accent), c_white, .2);
		global::c_accent_pressed = merge_color((IntType)(global::c_accent), c_black, .2);
		global::c_accent_overlay = global::c_accent;
		global::c_hover = global::c_accent;
	}
	
	void interface_update_instant(ScopeAny self)
	{
		IntType theme = sInt(setting_theme);
		global::c_text_main = ObjType(obj_theme, theme)->text_main;
		global::c_text_secondary = ObjType(obj_theme, theme)->text_secondary;
		global::c_text_tertiary = ObjType(obj_theme, theme)->text_tertiary;
		global::c_border = ObjType(obj_theme, theme)->border;
		global::c_overlay = ObjType(obj_theme, theme)->overlay;
		global::c_button_text = ObjType(obj_theme, theme)->button_text;
		global::a_button_text = ObjType(obj_theme, theme)->button_text_alpha;
		global::a_dark_overlay = ObjType(obj_theme, theme)->dark_overlay_alpha;
		global::c_level_top = ObjType(obj_theme, theme)->level_top;
		global::c_level_middle = ObjType(obj_theme, theme)->level_middle;
		global::c_level_bottom = ObjType(obj_theme, theme)->level_bottom;
		global::c_viewport_top = ObjType(obj_theme, theme)->viewport_top;
		global::c_viewport_bottom = ObjType(obj_theme, theme)->viewport_bottom;
		global::c_error = ObjType(obj_theme, theme)->red_error;
		global::c_warning = ObjType(obj_theme, theme)->yellow_warning;
		global::c_success = ObjType(obj_theme, theme)->green_success;
		global::c_axisred = ObjType(obj_theme, theme)->red;
		global::c_axisgreen = ObjType(obj_theme, theme)->green;
		global::c_axisblue = ObjType(obj_theme, theme)->blue;
		global::c_bend = ObjType(obj_theme, theme)->pink;
		global::c_axiscyan = ObjType(obj_theme, theme)->cyan;
		global::c_axisyellow = ObjType(obj_theme, theme)->yellow;
		global::c_axismagenta = ObjType(obj_theme, theme)->magenta;
		if (sInt(setting_accent) == IntType(9))
			global::c_accent = sVar(setting_accent_custom);
		else
			global::c_accent = ObjType(obj_theme, theme)->accent_list.Value(sInt(setting_accent));
		
		interface_update_accent();
	}
	
	VarType json_file_convert_unicode(VarType src, StringType dest)
	{
		return lib_json_file_convert_unicode(src, dest);
	}
	
	BoolType json_load_array()
	{
		IntType list = ds_list_create();
		while (json_load_char())
		{
			if (global::json_char == e_json_char_SQUARE_END)
				break;
			if (!json_load_value())
				break;
			ds_list_add({ list, global::json_value });
			switch ((IntType)global::json_value_type)
			{
				case e_json_type_OBJECT:
				{
					ds_list_mark_as_map(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
				case e_json_type_ARRAY:
				{
					ds_list_mark_as_list(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
			}
			
			if (global::json_char == e_json_char_SQUARE_END)
				break;
			if (global::json_char != e_json_char_COMMA)
			{
				global::json_error = /*"Expected \",\""*/ STR(1205);
				break;
			}
		}
		
		if (global::json_error != /*""*/ STR(0))
		{
			ds_list_destroy(list);
			return false;
		}
		global::json_value = list;
		global::json_value_type = e_json_type_ARRAY;
		json_load_char();
		return true;
	}
	
	BoolType json_load_char()
	{
		if (buffer_is_eof())
		{
			global::json_error = /*"Unexpected end of file"*/ STR(1206);
			return false;
		}
		do
		{
			global::json_char = buffer_read_byte();
			if (global::json_char == e_json_char_TAB)
				global::json_column += IntType(4);
			else
				if (global::json_char == e_json_char_NEW_LINE)
				{
					global::json_line++;
					global::json_column = IntType(0);
				}
				else
					global::json_column++;
			
			
		}
		while (!(global::json_char != e_json_char_TAB && global::json_char != e_json_char_SPACE && global::json_char != e_json_char_NEW_LINE && global::json_char != e_json_char_RETURN && global::json_char < IntType(127)));
		return true;
	}
	
	BoolType json_load_number()
	{
		StringType str, ex;
		BoolType expart;
		str = /*""*/ STR(0);
		expart = false;
		ex = /*""*/ STR(0);
		do
		{
			if (!expart)
				str += chr(global::json_char);
			else
				ex += chr(global::json_char);
			
			global::json_char = buffer_read_byte();
			global::json_column++;
			if (buffer_is_eof())
			{
				global::json_error = /*"Unexpected end of file"*/ STR(1206);
				return false;
			}
			if (global::json_char == e_json_char_E || global::json_char == e_json_char_CAPITAL_E)
			{
				if (expart)
				{
					global::json_error = /*"Unexpected symbol"*/ STR(1207);
					return false;
				}
				global::json_char = buffer_read_byte();
				global::json_column++;
				if (buffer_is_eof())
				{
					global::json_error = /*"Unexpected end of file"*/ STR(1206);
					return false;
				}
				expart = true;
			}
		}
		while (!((global::json_char < e_json_char_NUM_0 || global::json_char > e_json_char_NUM_9) && global::json_char != e_json_char_POINT && global::json_char != e_json_char_MINUS && global::json_char != e_json_char_PLUS));
		if (global::json_char == e_json_char_TAB || global::json_char == e_json_char_SPACE || global::json_char == e_json_char_NEW_LINE || global::json_char == e_json_char_RETURN)
		{
			if (!json_load_char())
				return false;
		}
		global::json_value = string_get_real({ str });
		global::json_value_type = e_json_type_NUMBER;
		if (expart)
			global::json_value = power(global::json_value, string_get_real({ ex }));
		if (is_undefined(global::json_value))
		{
			global::json_error = /*"Invalid number \""*/ STR(1208) + str + /*"\""*/ STR(1117);
			return false;
		}
		return true;
	}
	
	BoolType json_load_object(BoolType root)
	{
		IntType map = ds_map_create();
		if (global::json_type_map != null_)
			ds_map_add_map((IntType)(global::json_type_map), map, ds_map_create());
		while (json_load_char())
		{
			if (global::json_char == e_json_char_CURLY_END)
				break;
			if (!json_load_string())
				break;
			VarType name = global::json_value;
			if (global::json_char != e_json_char_COLON)
			{
				global::json_error = /*"Expected \":\""*/ STR(1209);
				break;
			}
			if (!json_load_char())
				break;
			if (!json_load_value())
				break;
			switch ((IntType)global::json_value_type)
			{
				case e_json_type_OBJECT:
				{
					ds_map_add_map(map, name, (IntType)(global::json_value));
					break;
				}
				case e_json_type_ARRAY:
				{
					ds_map_add_list(map, name, (IntType)(global::json_value));
					break;
				}
				default:
					DsMap(map)[name] = global::json_value;
			}
			
			if (global::json_type_map != null_)
				ds_map_add(DsMap(global::json_type_map).Value(map), name, global::json_value_type);
			if (global::json_char == e_json_char_CURLY_END)
				break;
			if (global::json_char != e_json_char_COMMA)
			{
				global::json_error = /*"Expected \",\""*/ STR(1205);
				break;
			}
		}
		
		if (!root)
			json_load_char();
		if (global::json_error != /*""*/ STR(0))
		{
			ds_map_destroy(map);
			return false;
		}
		global::json_value = map;
		global::json_value_type = e_json_type_OBJECT;
		return true;
	}
	
	BoolType json_load_string()
	{
		StringType str = /*""*/ STR(0);
		while (true)
		{
			if (buffer_is_eof())
			{
				global::json_error = /*"Unexpected end of file"*/ STR(1206);
				return false;
			}
			global::json_char = buffer_read_byte();
			global::json_column++;
			if (global::json_char == e_json_char_QUOTE)
				break;
			if (global::json_char == e_json_char_RETURN || global::json_char == e_json_char_NEW_LINE)
			{
				global::json_error = /*"Unexpected linebreak in string"*/ STR(1210);
				return false;
			}
			if (global::json_char == e_json_char_BACKSLASH)
			{
				if (buffer_is_eof())
				{
					global::json_error = /*"Unexpected end of file"*/ STR(1206);
					return false;
				}
				global::json_char = buffer_read_byte();
				global::json_column++;
				if (global::json_char == e_json_char_QUOTE)
					str += /*"\""*/ STR(1117);
				else
					if (global::json_char == e_json_char_BACKSLASH)
						str += /*"\\"*/ STR(1115);
					else
						if (global::json_char == e_json_char_N)
							str += /*"\n"*/ STR(953);
						else
							if (global::json_char == e_json_char_T)
								str += /*"\t"*/ STR(1025);
							else
								if (global::json_char == e_json_char_U)
								{
									StringType hex = /*""*/ STR(0);
									for (IntType _it = 0, _it_max = IntType(4); _it < _it_max; _it++)
									{
										if (buffer_is_eof())
										{
											global::json_error = /*"Unexpected end of file"*/ STR(1206);
											return false;
										}
										global::json_char = buffer_read_byte();
										global::json_column++;
										hex += chr(global::json_char);
									}
									str += chr((IntType)(hex_to_dec(hex)));
								}
								else
									str += chr(global::json_char);
							
						
					
				
				
			}
			else
				str += chr(global::json_char);
			
		}
		
		if (!json_load_char())
			return false;
		global::json_value = str;
		global::json_value_type = e_json_type_STRING;
		return true;
	}
	
	BoolType json_load_value()
	{
		if (global::json_char == e_json_char_CURLY_BEGIN)
			return json_load_object(false);
		else
			if (global::json_char == e_json_char_SQUARE_BEGIN)
				return json_load_array();
			else
				if (global::json_char == e_json_char_QUOTE)
					return json_load_string();
				else
					if ((global::json_char >= e_json_char_NUM_0 && global::json_char <= e_json_char_NUM_9) || global::json_char == e_json_char_MINUS)
						return json_load_number();
					else
						return json_load_word();
				
			
		
		
		return false;
	}
	
	BoolType json_load_word()
	{
		if (global::json_char == e_json_char_T)
		{
			for (IntType _it = 0, _it_max = IntType(4); _it < _it_max; _it++)
				if (!json_load_char())
					return false;
			global::json_value = true;
			global::json_value_type = e_json_type_BOOL;
		}
		else
			if (global::json_char == e_json_char_F)
			{
				for (IntType _it = 0, _it_max = IntType(5); _it < _it_max; _it++)
					if (!json_load_char())
						return false;
				global::json_value = false;
				global::json_value_type = e_json_type_BOOL;
			}
			else
				if (global::json_char == e_json_char_N)
				{
					for (IntType _it = 0, _it_max = IntType(4); _it < _it_max; _it++)
						if (!json_load_char())
							return false;
					global::json_value = null_;
					global::json_value_type = e_json_type_NULL_;
				}
				else
				{
					global::json_error = /*"Unrecognized word"*/ STR(1211);
					return false;
				}
			
		
		
		return true;
	}
	
	void json_save_array(VarType arr, IntType size)
	{
		buffer_write_byte(e_json_char_SQUARE_BEGIN);
		buffer_write_byte(e_json_char_SPACE);
		for (IntType i = IntType(0); i < size; i++)
		{
			if (i > IntType(0))
			{
				buffer_write_byte(e_json_char_COMMA);
				buffer_write_byte(e_json_char_SPACE);
			}
			json_save_value(arr.Value(i));
		}
		buffer_write_byte(e_json_char_SPACE);
		buffer_write_byte(e_json_char_SQUARE_END);
	}
	
	void json_save_array_done()
	{
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		global::json_indent--;
		json_save_indent();
		buffer_write_byte(e_json_char_SQUARE_END);
		global::json_add_comma = true;
	}
	
	void json_save_array_start(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		if (argument_count > IntType(0))
		{
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_string(argument[IntType(0)]);
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_byte(e_json_char_COLON);
			buffer_write_byte(e_json_char_SPACE);
		}
		buffer_write_byte(e_json_char_SQUARE_BEGIN);
		global::json_indent++;
		global::json_add_comma = false;
	}
	
	void json_save_array_value(VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		json_save_value(val);
		global::json_add_comma = true;
	}
	
	void json_save_done()
	{
		buffer_resize(global::buffer_current, buffer_tell(global::buffer_current));
		buffer_save_lib(global::buffer_current, global::json_filename);
		buffer_delete(global::buffer_current);
	}
	
	void json_save_indent()
	{
		for (IntType _it = 0, _it_max = global::json_indent; _it < _it_max; _it++)
			buffer_write_byte(e_json_char_TAB);
	}
	
	void json_save_object_done()
	{
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		global::json_indent--;
		json_save_indent();
		buffer_write_byte(e_json_char_CURLY_END);
		global::json_add_comma = true;
	}
	
	void json_save_object_start(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		if (!global::json_empty)
		{
			buffer_write_byte(e_json_char_RETURN);
			buffer_write_byte(e_json_char_NEW_LINE);
		}
		else
			global::json_empty = false;
		
		json_save_indent();
		if (argument_count > IntType(0))
		{
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_string(argument[IntType(0)]);
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_byte(e_json_char_COLON);
			buffer_write_byte(e_json_char_SPACE);
		}
		buffer_write_byte(e_json_char_CURLY_BEGIN);
		global::json_indent++;
		global::json_add_comma = false;
	}
	
	void json_save_start(VarType fn)
	{
		global::json_filename = fn;
		global::json_indent = IntType(0);
		global::json_empty = true;
		global::json_add_comma = false;
		global::buffer_current = buffer_create(IntType(8), buffer_grow, IntType(1));
	}
	
	void json_save_value(VarType val)
	{
		if (is_real(val) || is_int32(val) || is_int64(val))
			buffer_write_string(string_decimals(val));
		else
			if (is_array(val))
				json_save_array(val, array_length(VarType::CreateRef(val)));
			else
				if (is_bool(val))
					buffer_write_string(string(val));
				else
				{
					buffer_write_byte(e_json_char_QUOTE);
					buffer_write_string(val);
					buffer_write_byte(e_json_char_QUOTE);
				}
			
		
		
	}
	
	void json_save_var(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		json_save_value(val);
		global::json_add_comma = true;
	}
	
	void json_save_var_bool(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		buffer_write_string((val > 0) ? /*"true"*/ STR(759) : /*"false"*/ STR(760));
		global::json_add_comma = true;
	}
	
	void json_save_var_color(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		json_save_value(/*"#"*/ STR(841) + color_to_hex(val));
		global::json_add_comma = true;
	}
	
	void json_save_var_nullable(StringType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (val == null_)
			json_save_value(/*"null"*/ STR(1212));
		else
			json_save_value(val);
		
		global::json_add_comma = true;
	}
	
	void json_save_var_point2D(StringType name, VarType value)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (value == null_)
			json_save_value(/*"null"*/ STR(1212));
		else
			json_save_value(point2D(value.Value(X_), value.Value(Y_)));
		
		global::json_add_comma = true;
	}
	
	void json_save_var_point3D(StringType name, VarType value)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (value == null_)
			json_save_value(/*"null"*/ STR(1212));
		else
			json_save_value(point3D(value.Value(X_), value.Value(Z_), value.Value(Y_)));
		
		global::json_add_comma = true;
	}
	
	void json_save_var_save_id(StringType name, VarType obj)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (obj == null_)
			json_save_value(/*"null"*/ STR(1212));
		else
		{
			json_save_value(save_id_get(obj));
			idBool(obj, save) = true;
		}
		
		global::json_add_comma = true;
	}
	
}
