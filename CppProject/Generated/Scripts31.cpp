/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.17 00:48:08 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	VarType file_dialog_open_project(ScopeAny self)
	{
		return file_dialog_open(text_get({ /*"filedialogopenproject"*/ STR(1168) }) + /*" (*.miproject; *.zip; *.mproj; *.mani)|*miproject;*.zip;*.mproj;*.mani|"*/ STR(1169) + text_get({ /*"filedialogopenbackup"*/ STR(1170) }) + /*" (*.backup*; *.mbackup*)|*.backup*;*.mbackup*"*/ STR(1171), /*""*/ STR(0), sStr(setting_project_folder), text_get({ /*"filedialogopenprojectcaption"*/ STR(1172) }));
	}
	
	StringType file_dialog_open_render()
	{
		return file_dialog_open(text_get({ /*"filedialogopenrender"*/ STR(1173) }) + /*" (*.mirender)|*mirender"*/ STR(1174), /*""*/ STR(0), /*""*/ STR(0), text_get({ /*"filedialogopenrendercaption"*/ STR(1175) }));
	}
	
	StringType file_dialog_open_scenery()
	{
		return file_dialog_open(text_get({ /*"filedialogopenscenery"*/ STR(1176) }) + /*" (*.schematic; *.nbt; *.blocks)|*.schematic;*.nbt;*.blocks"*/ STR(1177), /*""*/ STR(0), schematics_directory, text_get({ /*"filedialogopenscenerycaption"*/ STR(1178) }));
	}
	
	StringType file_dialog_open_sound()
	{
		return file_dialog_open(text_get({ /*"filedialogopensound"*/ STR(1179) }) + /*" (*.mp3; *.wav; *.ogg; *.flac; *.wma; *.m4a)|*.mp3;*.wav;*.ogg;*.flac;*.wma;*.m4a;"*/ STR(1180), /*""*/ STR(0), /*""*/ STR(0), text_get({ /*"filedialogopensoundcaption"*/ STR(1181) }));
	}
	
	StringType file_dialog_save(VarType filter, VarType filename, StringType directory, VarType title)
	{
		return string(get_save_filename_ext(filter, filename, directory, title));
	}
	
	StringType file_dialog_save_image(VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsaveimage"*/ STR(1182) }) + /*" (*.png)|*.png"*/ STR(1183), filename_get_valid(fn), /*""*/ STR(0), text_get({ /*"filedialogsaveimagecaption"*/ STR(1184) }));
	}
	
	StringType file_dialog_save_keyframes(VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsavekeyframes"*/ STR(1185) }) + /*" (*.miframes)|*.miframes"*/ STR(1186), filename_get_valid(fn), /*""*/ STR(0), text_get({ /*"filedialogsavekeyframescaption"*/ STR(1187) }));
	}
	
	StringType file_dialog_save_movie_mov(ScopeAny self, VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsavemoviemov"*/ STR(1188) }) + /*" (*.mov)|*.mov"*/ STR(1189), filename_get_valid(fn), sStr(project_folder), text_get({ /*"filedialogsavemoviecaption"*/ STR(1190) }));
	}
	
	StringType file_dialog_save_movie_mp4(ScopeAny self, VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsavemoviemp4"*/ STR(1191) }) + /*" (*.mp4)|*.mp4"*/ STR(1192), filename_get_valid(fn), sStr(project_folder), text_get({ /*"filedialogsavemoviecaption"*/ STR(1190) }));
	}
	
	StringType file_dialog_save_movie_png(ScopeAny self, VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsavemoviepng"*/ STR(1193) }) + /*" (*.png)|*.png"*/ STR(1183), filename_get_valid(fn), sStr(project_folder), text_get({ /*"filedialogsavemoviecaption"*/ STR(1190) }));
	}
	
	StringType file_dialog_save_movie_wmv(ScopeAny self, VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsavemoviewmv"*/ STR(1194) }) + /*" (*.wmv)|*.wmv"*/ STR(1195), filename_get_valid(fn), sStr(project_folder), text_get({ /*"filedialogsavemoviecaption"*/ STR(1190) }));
	}
	
	StringType file_dialog_save_object(VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsaveobject"*/ STR(1196) }) + /*" (*.miobject)|*.miobject"*/ STR(1197), filename_get_valid(fn), /*""*/ STR(0), text_get({ /*"filedialogsaveobjectcaption"*/ STR(1198) }));
	}
	
	StringType file_dialog_save_particles(VarType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsaveparticles"*/ STR(1199) }) + /*" (*.miparticles)|*.miparticles"*/ STR(1200), filename_get_valid(fn), particles_directory, text_get({ /*"filedialogsaveparticlescaption"*/ STR(1201) }));
	}
	
	StringType file_dialog_save_project(ScopeAny self, VarType fn)
	{
		return file_dialog_save(/*""*/ STR(0), fn, sStr(setting_project_folder), text_get({ /*"filedialogsaveprojectcaption"*/ STR(1202) }));
	}
	
	StringType file_dialog_save_render(StringType fn)
	{
		return file_dialog_save(text_get({ /*"filedialogsaverender"*/ STR(1203) }) + /*" (*.mirender)|*.mirender"*/ STR(1204), filename_get_valid(fn), render_directory, text_get({ /*"filedialogsaverendercaption"*/ STR(1205) }));
	}
	
	StringType file_dialog_save_resource(VarType fn, StringType exts)
	{
		return file_dialog_save(/*" * "*/ STR(699) + exts + /*"|*"*/ STR(1206) + exts, filename_get_valid(fn), /*""*/ STR(0), text_get({ /*"filedialogsaveresourcecaption"*/ STR(1207) }));
	}
	
	RealType file_exists_lib(VarType fn)
	{
		if (fn == /*""*/ STR(0))
			return IntType(0);
		return lib_file_exists(fn);
	}
	
	ArrType file_find(StringType dir, StringType exts)
	{
		ArrType ret;
		StringType f;
		ret = ArrType();
		f = file_find_first(dir + /*"*"*/ STR(1118), IntType(0));
		while (f != /*""*/ STR(0))
		{
			if (string_contains(exts, filename_ext(f)))
				ret[array_length(VarType::CreateRef(ret))] = dir + f;
			f = file_find_next();
		}
		
		file_find_close();
		return ret;
	}
	
	StringType file_find_single(StringType dir, StringType exts)
	{
		ArrType ret = file_find(dir, exts);
		if (array_length(VarType::CreateRef(ret)) > IntType(0))
			return ret.Value(IntType(0));
		else
			return /*""*/ STR(0);
		
		return "";
	}
	
	BoolType file_lib_startup()
	{
		log({ /*"working_directory"*/ STR(1208), gmlGlobal::working_directory });
		if (!directory_exists_lib(gmlGlobal::working_directory))
		{
			log({ /*"directory broken"*/ STR(1209) });
			access_error();
			return false;
		}
		IntType surf;
		StringType tmpfile1, tmpfile2;
		surf = surface_create(IntType(32), IntType(32));
		tmpfile1 = file_directory + /*"tmp.png"*/ STR(1210);
		tmpfile2 = data_directory + /*"tmp.png"*/ STR(1210);
		log({ /*"Trying to save files"*/ STR(1211) });
		file_delete_lib(tmpfile1);
		file_delete_lib(tmpfile2);
		surface_save(surf, tmpfile1);
		file_copy_lib(tmpfile1, tmpfile2);
		surface_free(surf);
		if (!file_exists_lib(tmpfile1))
		{
			log({ /*"Couldn't save to file_directory"*/ STR(1212) });
			access_error();
			return false;
		}
		if (!file_exists_lib(tmpfile2))
		{
			log({ /*"Couldn't save to data_directory"*/ STR(1213) });
			access_error();
			return false;
		}
		log({ /*"surface_save OK"*/ STR(1214) });
		IntType tex1, tex2;
		tex1 = texture_create(tmpfile1);
		tex2 = texture_create(tmpfile2);
		if (tex1 < IntType(0) || texture_width(tex1) != IntType(32) || texture_height(tex1) != IntType(32))
		{
			log({ /*"Couldn't load texture from file_directory"*/ STR(1215) });
			access_error();
			return false;
		}
		if (tex2 < IntType(0) || texture_width(tex2) != IntType(32) || texture_height(tex2) != IntType(32))
		{
			log({ /*"Couldn't load texture from data_directory"*/ STR(1216) });
			access_error();
			return false;
		}
		log({ /*"texture_create OK"*/ STR(1217) });
		file_delete_lib(tmpfile1);
		file_delete_lib(tmpfile2);
		if (file_exists_lib(tmpfile1))
		{
			log({ /*"Couldn't delete from file_directory"*/ STR(1218) });
			access_error();
			return false;
		}
		if (file_exists_lib(tmpfile1))
		{
			log({ /*"Couldn't delete from data_directory"*/ STR(1219) });
			access_error();
			return false;
		}
		log({ /*"file_delete_lib OK"*/ STR(1220) });
		return true;
	}
	
	RealType file_rename_lib(VarType oldname, VarType newname)
	{
		if (oldname == /*""*/ STR(0) || oldname == newname)
			return IntType(0);
		return lib_file_rename(oldname, newname);
	}
	
	StringType file_text_contents(StringType fname)
	{
		StringType str;
		IntType line;
		str = /*""*/ STR(0);
		line = IntType(0);
		if (file_exists_lib(fname))
		{
			file_delete_lib(temp_file);
			file_copy_lib(fname, temp_file);
			IntType f = file_text_open_read(temp_file);
			if (f > -IntType(1))
			{
				while (!file_text_eof(f))
				{
					if (line++ > IntType(0))
						str += /*"\n"*/ STR(708);
					str += file_text_read_string(f);
					file_text_readln(f);
				}
				
				file_text_close(f);
			}
		}
		return str;
	}
	
	IntType find_biome(VarType biomename)
	{
		IntType biome = null_;
		for (IntType i = IntType(0); i < IntType(5) && ds_map_exists(global::legacy_biomes_map, biomename); i++)
			biomename = DsMap(global::legacy_biomes_map).Value(biomename);
		withAll (obj_biome, noone)
		{
			if (self->name == biomename)
			{
				biome = self->id;
				break;
			}
		}
		
		return biome;
	}
	
	IntType find_videoquality(RealType bitrate)
	{
		withAll (obj_videoquality, noone)
			if (self->bit_rate == bitrate)
				return self->id;
		
		return null_;
	}
	
	VarType find_videotemplate(VarType w, VarType h)
	{
		withAll (obj_videotemplate, noone)
			if (self->width == w && self->height == h)
				return self->id;
		
		return IntType(0);
	}
	
	IntType font_add_lib(StringType fname, IntType size, BoolType bold, BoolType italic, BoolType aa)
	{
		StringType tmpfile = file_directory + /*"tmp.ttf"*/ STR(1221);
		file_copy_lib(fname, tmpfile);
		if (file_exists_lib(tmpfile))
		{
			font_add_enable_aa(aa);
			IntType fnt = font_add(tmpfile, size, bold, italic, IntType(32), IntType(1024));
			font_add_enable_aa(true);
			if (font_exists(fnt))
				return fnt;
		}
		return null_;
	}
	
	VarType gzunzip(StringType src, StringType dest)
	{
		return lib_gzunzip(src, dest);
	}
	
	RealType halton(RealType i, RealType xx)
	{
		RealType f, r;
		f = IntType(1);
		r = IntType(0);
		while (i > IntType(0))
		{
			f /= xx;
			r = r + f * (mod(i, xx));
			i = floor(i / xx);
		}
		
		return r;
	}
	
	VarType hex_to_color(VarType oldstr)
	{
		StringType str, hex;
		str = string_replace(oldstr, /*"#"*/ STR(857), /*""*/ STR(0));
		str = string_upper(str + string_repeat(/*"0"*/ STR(1077), (IntType)(IntType(6) - string_length(oldstr))));
		hex = /*"0123456789ABCDEF"*/ STR(1050);
		return make_color_rgb((IntType)(string_pos(string_char_at(str, IntType(1)), hex) * IntType(16) + string_pos(string_char_at(str, IntType(2)), hex) - IntType(17)), (IntType)(string_pos(string_char_at(str, IntType(3)), hex) * IntType(16) + string_pos(string_char_at(str, IntType(4)), hex) - IntType(17)), (IntType)(string_pos(string_char_at(str, IntType(5)), hex) * IntType(16) + string_pos(string_char_at(str, IntType(6)), hex) - IntType(17)));
	}
	
	RealType hex_to_dec(StringType hex)
	{
		RealType dec;
		StringType h;
		IntType p;
		hex = string_upper(hex);
		dec = IntType(0);
		h = /*"0123456789ABCDEF"*/ STR(1050);
		for (p = IntType(1); p <= string_length(hex); p++)
			dec = (IntType)dec << (IntType)(IntType)IntType(4) | (IntType)(string_pos(string_char_at(hex, p), h) - IntType(1));
		return dec;
	}
	
	void history_clear(ScopeAny self)
	{
		sReal(history_amount) = IntType(0);
		sReal(history_pos) = IntType(0);
		withAll (obj_history, self->id)
			instance_destroy(ScopeAny(self));
		
		withAll (obj_history_save, self->id)
			instance_destroy(ScopeAny(self));
		
	}
	
	void history_copy_render_settings(ScopeAny self, IntType obj)
	{
		sVar(project_render_samples) = idVar(obj, project_render_samples);
		sVar(project_render_ssao) = idVar(obj, project_render_ssao);
		sVar(project_render_ssao_radius) = idVar(obj, project_render_ssao_radius);
		sVar(project_render_ssao_power) = idVar(obj, project_render_ssao_power);
		sVar(project_render_ssao_color) = idVar(obj, project_render_ssao_color);
		sVar(project_render_shadows) = idVar(obj, project_render_shadows);
		sVar(project_render_shadows_sun_buffer_size) = idVar(obj, project_render_shadows_sun_buffer_size);
		sVar(project_render_shadows_spot_buffer_size) = idVar(obj, project_render_shadows_spot_buffer_size);
		sVar(project_render_shadows_point_buffer_size) = idVar(obj, project_render_shadows_point_buffer_size);
		sVar(project_render_shadows_transparent) = idVar(obj, project_render_shadows_transparent);
		sVar(project_render_subsurface_samples) = idVar(obj, project_render_subsurface_samples);
		sVar(project_render_subsurface_highlight) = idVar(obj, project_render_subsurface_highlight);
		sVar(project_render_subsurface_highlight_strength) = idVar(obj, project_render_subsurface_highlight);
		sVar(project_render_indirect) = idVar(obj, project_render_indirect);
		sVar(project_render_indirect_precision) = idVar(obj, project_render_indirect_precision);
		sVar(project_render_indirect_blur_radius) = idVar(obj, project_render_indirect_blur_radius);
		sVar(project_render_indirect_strength) = idVar(obj, project_render_indirect_strength);
		sVar(project_render_reflections) = idVar(obj, project_render_reflections);
		sVar(project_render_reflections_precision) = idVar(obj, project_render_reflections_precision);
		sVar(project_render_reflections_thickness) = idVar(obj, project_render_reflections_thickness);
		sVar(project_render_reflections_fade_amount) = idVar(obj, project_render_reflections_fade_amount);
		sVar(project_render_glow) = idVar(obj, project_render_glow);
		sVar(project_render_glow_radius) = idVar(obj, project_render_glow_radius);
		sVar(project_render_glow_intensity) = idVar(obj, project_render_glow_intensity);
		sVar(project_render_glow_falloff) = idVar(obj, project_render_glow_falloff);
		sVar(project_render_glow_falloff_radius) = idVar(obj, project_render_glow_falloff_radius);
		sVar(project_render_glow_falloff_intensity) = idVar(obj, project_render_glow_falloff_intensity);
		sVar(project_render_aa) = idVar(obj, project_render_aa);
		sVar(project_render_aa_power) = idVar(obj, project_render_aa_power);
		sVar(project_render_texture_filtering) = idVar(obj, project_render_texture_filtering);
		sVar(project_render_transparent_block_texture_filtering) = idVar(obj, project_render_transparent_block_texture_filtering);
		sVar(project_render_texture_filtering_level) = idVar(obj, project_render_texture_filtering_level);
		sVar(project_bend_style) = idVar(obj, project_bend_style);
		sVar(project_render_opaque_leaves) = idVar(obj, project_render_opaque_leaves);
		sVar(project_render_liquid_animation) = idVar(obj, project_render_liquid_animation);
		sVar(project_render_water_reflections) = idVar(obj, project_render_water_reflections);
		sVar(project_render_block_emissive) = idVar(obj, project_render_block_emissive);
		sVar(project_render_block_subsurface) = idVar(obj, project_render_block_subsurface);
		sVar(project_render_glint_speed) = idVar(obj, project_render_glint_speed);
		sVar(project_render_glint_strength) = idVar(obj, project_render_glint_strength);
	}
	
	void history_destroy_loaded(Scope<obj_history> self)
	{
		for (IntType i = IntType(0); i < self->loaded_amount; i++)
		{
			withOne (Object, save_id_find(self->loaded_save_id.Value(i)), self->id)
			{
				if (self->subAssetId == ID_obj_resource && sBool(copied))
					file_delete_lib(global::_app->project_folder + /*"/"*/ STR(20) + sVar(filename));
				instance_destroy(self);
			}
			
		}
	}
	
	void history_pop(ScopeAny self)
	{
		sInt(project_changed) = true;
		action_tl_play_break(self);
		if (sReal(history_pos) > IntType(0))
		{
			sReal(history_amount) -= sReal(history_pos);
			for (IntType h = IntType(0); h < sReal(history_amount); h++)
			{
				if (h < sReal(history_pos))
				{
					withOne (obj_history, sArr(history).Value(h), self->id)
					{
						withAll (obj_history_save, self->id)
							if (self->hobj == self.otherId)
								instance_destroy(ScopeAny(self));
						
						instance_destroy(ScopeAny(self));
					}
					
				}
				sArr(history)[h] = sArr(history).Value(h + sReal(history_pos));
			}
		}
		sReal(history_pos) = IntType(0);
		global::render_samples = -IntType(1);
		sBool(history_resource_update) = true;
	}
	
	void history_push(ScopeAny self)
	{
		sReal(history_amount)++;
		for (RealType h = sReal(history_amount); h > IntType(0); h--)
			sArr(history)[h] = sArr(history).Value(h - IntType(1));
	}
	
	IntType history_redo_res(ScopeAny self)
	{
		IntType res;
		if (ObjType(obj_history, global::history_data)->filename != /*""*/ STR(0) && !ObjType(obj_history, global::history_data)->replaced)
		{
			res = new_res(self, ObjType(obj_history, global::history_data)->filename, ObjType(obj_history, global::history_data)->type);
			idVar(res, save_id) = ObjType(obj_history, global::history_data)->new_res_save_id;
			if (ObjType(obj_history, global::history_data)->type == e_res_type_SKIN)
				idVar(res, player_skin) = ObjType(obj_history, global::history_data)->player_skin;
			else
				if (ObjType(obj_history, global::history_data)->type == e_res_type_DOWNLOADED_SKIN)
					idVar(res, player_skin) = true;
				else
					if (ObjType(obj_history, global::history_data)->type == e_res_type_ITEM_SHEET)
						idVar(res, item_sheet_size) = array_copy_1d(ObjType(obj_history, global::history_data)->item_sheet_size);
			
			
			withOne (Object, res, self->id)
				res_load(self);
			
		}
		else
			res = save_id_find(ObjType(obj_history, global::history_data)->new_res_save_id);
		
		return res;
	}
	
	void history_restore_bench(ScopeAny self, IntType save)
	{
		withOne (obj_history_save, save, self->id)
			temp_copy(ScopeAny(self), global::_app->bench_settings);
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			temp_find_save_ids(ScopeAny(self));
			temp_update(ScopeAny(self), true);
			global::temp_creator = global::_app->bench_settings;
			for (IntType t = IntType(0); t < ObjType(obj_history_save, save)->temp_amount; t++)
			{
				withOne (obj_history_save, ObjType(obj_history_save, save)->temp_save_obj.Value(t), self->id)
				{
					IntType ntemp = (new obj_template)->id;
					temp_copy(ScopeAny(self), ntemp);
					withOne (obj_template, ntemp, self->id)
					{
						self->save_id = ObjType(obj_history_save, self.otherId)->save_id;
						temp_find_save_ids(ScopeAny(self));
						temp_update(ScopeAny(self));
					}
					
				}
				
			}
			global::temp_creator = global::_app->id;
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
			{
				temp_particles_type_clear(ScopeAny(self));
				for (IntType p = IntType(0); p < ObjType(obj_history_save, save)->pc_type_amount; p++)
					history_restore_ptype(ObjType(obj_history_save, save)->pc_type_save_obj.Value(p), self->id);
				temp_particles_restart(ScopeAny(self));
			}
		}
		
	}
	
	void history_restore_keyframes(Scope<obj_history> self)
	{
		for (IntType k = IntType(0); k < self->save_kf_amount; k++)
		{
			withOne (Object, save_id_find(self->save_kf_tl_save_id.Value(k)), self->id)
			{
				IntType kf = tl_keyframe_add(self, ObjType(obj_history, self.otherId)->save_kf_pos.Value(k));
				for (IntType v = IntType(0); v < e_value_amount; v++)
					ObjType(obj_keyframe, kf)->value[v] = tl_value_find_save_id(v, ObjType(obj_keyframe, kf)->value.Value(v), ObjType(obj_history, self.otherId)->save_kf_value[k][v]);
			}
			
		}
	}
	
	void history_restore_parts(Scope<obj_history> self)
	{
		for (IntType t = IntType(0); t < self->part_amount; t++)
		{
			IntType tl = history_restore_tl(self->part_save_obj.Value(t));
			ds_list_add({ idInt(ObjType(obj_timeline, tl)->part_of, part_list), tl });
		}
		for (IntType m = IntType(0); m < self->part_child_amount; m++)
			withOne (Object, save_id_find(self->part_child_save_id.Value(m)), self->id)
				tl_set_parent(self, { save_id_find(ObjType(obj_history, global::history_data)->part_child_parent_save_id.Value(m)), ObjType(obj_history, global::history_data)->part_child_parent_tree_index.Value(m) });
		
		history_restore_tl_select(self);
		if (self->part_amount > IntType(0))
			history_restore_part_usage_tl(global::history_data);
	}
	
	void history_restore_part_usage_tl(VarType hobj)
	{
		IntType tl;
		VarType kfindex;
		withOne (obj_history, hobj, noone)
		{
			for (IntType i = IntType(0); i < self->usage_tl_attractor_amount; i++)
			{
				tl = save_id_find(self->usage_tl_attractor_save_id.Value(i));
				idVar(tl, value)[e_value_ATTRACTOR] = save_id_find(self->usage_tl_attractor_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_tl_ik_target_amount; i++)
			{
				tl = save_id_find(self->usage_tl_ik_target_save_id.Value(i));
				idVar(tl, value)[e_value_IK_TARGET] = save_id_find(self->usage_tl_ik_target_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_tl_flw_rot_target_amount; i++)
			{
				tl = save_id_find(self->usage_tl_flw_rot_target_save_id.Value(i));
				idVar(tl, value)[e_value_ROT_TARGET] = save_id_find(self->usage_tl_flw_rot_target_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_tl_ik_target_angle_amount; i++)
			{
				tl = save_id_find(self->usage_tl_ik_target_angle_save_id.Value(i));
				idVar(tl, value)[e_value_IK_TARGET_ANGLE] = save_id_find(self->usage_tl_ik_target_angle_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_attractor_amount; i++)
			{
				tl = save_id_find(self->usage_kf_attractor_tl_save_id.Value(i));
				kfindex = self->usage_kf_attractor_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_ATTRACTOR] = save_id_find(self->usage_kf_attractor_tl_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_ik_target_amount; i++)
			{
				tl = save_id_find(self->usage_kf_ik_target_tl_save_id.Value(i));
				kfindex = self->usage_kf_ik_target_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_IK_TARGET] = save_id_find(self->usage_kf_ik_target_tl_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_flw_rot_target_amount; i++)
			{
				tl = save_id_find(self->usage_kf_flw_rot_target_tl_save_id.Value(i));
				kfindex = self->usage_kf_flw_rot_target_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_ROT_TARGET] = save_id_find(self->usage_kf_flw_rot_target_tl_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_flw_pos_target_amount; i++)
			{
				tl = save_id_find(self->usage_kf_flw_pos_target_tl_save_id.Value(i));
				kfindex = self->usage_kf_flw_pos_target_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_POS_TARGET] = save_id_find(self->usage_kf_flw_pos_target_tl_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_flw_scale_target_amount; i++)
			{
				tl = save_id_find(self->usage_kf_flw_scale_target_tl_save_id.Value(i));
				kfindex = self->usage_kf_flw_scale_target_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_SCALE_TARGET] = save_id_find(self->usage_kf_flw_scale_target_tl_part_save_id.Value(i));
			}
			for (IntType i = IntType(0); i < self->usage_kf_ik_target_angle_amount; i++)
			{
				tl = save_id_find(self->usage_kf_ik_target_angle_tl_save_id.Value(i));
				kfindex = self->usage_kf_ik_target_angle_index.Value(i);
				ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list))[kfindex])->value[e_value_IK_TARGET_ANGLE] = save_id_find(self->usage_kf_ik_target_tl_part_save_id.Value(i));
			}
		}
		
	}
	
	IntType history_restore_ptype(VarType save, VarType creator)
	{
		IntType ptype;
		ptype = (new obj_particle_type)->id;
		global::save_id_seed--;
		withOne (obj_history_save, save, noone)
			ptype_copy(ScopeAny(self), ptype);
		
		withOne (obj_particle_type, ptype, noone)
		{
			self->save_id = ObjType(obj_history_save, save)->save_id;
			ptype_find_save_ids(self);
			ObjType(obj_particle_type, self->id)->creator = creator;
			ds_list_insert(idInt(ObjType(obj_particle_type, self->id)->creator, pc_type_list), self->creator_index, self->id);
			idInt(self->sprite_tex, count)++;
			idInt(self->sprite_template_tex, count)++;
			ptype_update_sprite_vbuffers(ScopeAny(self));
		}
		
		return ptype;
	}
	
	IntType history_restore_res(IntType save)
	{
		IntType res;
		res = (new obj_resource)->id;
		withOne (obj_history_save, save, noone)
			res_copy(ScopeAny(self), res);
		
		global::save_folder = global::_app->project_folder;
		global::load_folder = global::_app->project_folder;
		withOne (obj_resource, res, noone)
		{
			self->save_id = ObjType(obj_history_save, save)->save_id;
			res_load(ScopeAny(self));
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_model_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_model_save_id.Value(s)), self->id)
				{
					if (sVar(model) != null_)
						idInt(sVar(model), count)--;
					sVar(model) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_model_tex_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_model_tex_save_id.Value(s)), self->id)
				{
					idInt(sVar(model_tex), count)--;
					sVar(model_tex) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_model_tex_material_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_model_tex_material_save_id.Value(s)), self->id)
				{
					idInt(sVar(model_tex_material), count)--;
					sVar(model_tex_material) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_model_tex_normal_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_model_tex_normal_save_id.Value(s)), self->id)
				{
					idInt(sVar(model_tex_normal), count)--;
					sVar(model_tex_normal) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_item_tex_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_item_tex_save_id.Value(s)), self->id)
				{
					idInt(sVar(item_tex), count)--;
					sVar(item_tex) = res;
					render_generate_item(self);
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_item_tex_material_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_item_tex_material_save_id.Value(s)), self->id)
				{
					idInt(sVar(item_tex_material), count)--;
					sVar(item_tex_material) = res;
					render_generate_item(self);
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_item_tex_normal_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_item_tex_normal_save_id.Value(s)), self->id)
				{
					idInt(sVar(item_tex_normal), count)--;
					sVar(item_tex_normal) = res;
					render_generate_item(self);
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_block_tex_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_block_tex_save_id.Value(s)), self->id)
				{
					idInt(sVar(block_tex), count)--;
					sVar(block_tex) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_block_tex_material_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_block_tex_material_save_id.Value(s)), self->id)
				{
					idInt(sVar(block_tex_material), count)--;
					sVar(block_tex_material) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_block_tex_normal_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_block_tex_normal_save_id.Value(s)), self->id)
				{
					idInt(sVar(block_tex_normal), count)--;
					sVar(block_tex_normal) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_scenery_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_scenery_save_id.Value(s)), self->id)
					sVar(scenery) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_shape_tex_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_shape_tex_save_id.Value(s)), self->id)
					sVar(shape_tex) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_shape_tex_material_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_shape_tex_material_save_id.Value(s)), self->id)
					sVar(shape_tex_material) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_shape_tex_normal_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_shape_tex_normal_save_id.Value(s)), self->id)
					sVar(shape_tex_normal) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_text_font_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_text_font_save_id.Value(s)), self->id)
				{
					idInt(sVar(text_font), count)--;
					sVar(text_font) = res;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_sprite_tex_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_sprite_tex_save_id.Value(s)), self->id)
					sVar(sprite_tex) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_sprite_template_tex_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_sprite_template_tex_save_id.Value(s)), self->id)
					sVar(sprite_template_tex) = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_texture_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_texture_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_texture_index.Value(s)])->value[e_value_TEXTURE_OBJ] = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_sound_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_sound_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_sound_index.Value(s)])->value[e_value_SOUND_OBJ] = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_text_font_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_text_font_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_text_font_index.Value(s)])->value[e_value_TEXT_FONT] = res;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_texture_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_texture_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_TEXTURE_OBJ] = res;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_sound_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_sound_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_SOUND_OBJ] = res;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_text_font_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_text_font_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_TEXT_FONT] = res;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_glint_tex_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_glint_tex_save_id.Value(s)), self->id)
				{
					idInt(sVar(glint_tex), count)--;
					sVar(glint_tex) = res;
				}
				
			}
			if (ObjType(obj_history_save, save)->usage_background_image)
				global::_app->background_image = res;
			if (ObjType(obj_history_save, save)->usage_background_sky_sun_tex)
			{
				idInt(global::_app->background_sky_sun_tex, count)--;
				global::_app->background_sky_sun_tex = res;
			}
			if (ObjType(obj_history_save, save)->usage_background_sky_moon_tex)
			{
				idInt(global::_app->background_sky_moon_tex, count)--;
				global::_app->background_sky_moon_tex = res;
			}
			if (ObjType(obj_history_save, save)->usage_background_sky_clouds_tex)
			{
				idInt(global::_app->background_sky_clouds_tex, count)--;
				global::_app->background_sky_clouds_tex = res;
			}
			if (ObjType(obj_history_save, save)->usage_background_ground_tex)
			{
				withOne (app, global::_app->id, self->id)
				{
					idInt(global::_app->background_ground_tex, count)--;
					global::_app->background_ground_tex = res;
					background_ground_update_texture(ScopeAny(self));
				}
				
			}
			if (ObjType(obj_history_save, save)->usage_background_ground_tex_material)
			{
				withOne (app, global::_app->id, self->id)
				{
					idInt(global::_app->background_ground_tex_material, count)--;
					global::_app->background_ground_tex_material = res;
					background_ground_update_texture_material(ScopeAny(self));
				}
				
			}
			if (ObjType(obj_history_save, save)->usage_background_ground_tex_normal)
			{
				withOne (app, global::_app->id, self->id)
				{
					idInt(global::_app->background_ground_tex_normal, count)--;
					global::_app->background_ground_tex_normal = res;
					background_ground_update_texture_normal(ScopeAny(self));
				}
				
			}
			self->count += ObjType(obj_history_save, save)->usage_model_amount;
			self->count += ObjType(obj_history_save, save)->usage_model_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_model_tex_material_amount;
			self->count += ObjType(obj_history_save, save)->usage_model_tex_normal_amount;
			self->count += ObjType(obj_history_save, save)->usage_item_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_block_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_block_tex_material_amount;
			self->count += ObjType(obj_history_save, save)->usage_block_tex_normal_amount;
			self->count += ObjType(obj_history_save, save)->usage_scenery_amount;
			self->count += ObjType(obj_history_save, save)->usage_shape_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_text_font_amount;
			self->count += ObjType(obj_history_save, save)->usage_sprite_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_sprite_template_tex_amount;
			self->count += ObjType(obj_history_save, save)->usage_kf_sound_amount;
			self->count += ObjType(obj_history_save, save)->usage_background_image;
			self->count += ObjType(obj_history_save, save)->usage_background_sky_sun_tex;
			self->count += ObjType(obj_history_save, save)->usage_background_sky_moon_tex;
			self->count += ObjType(obj_history_save, save)->usage_background_sky_clouds_tex;
			self->count += ObjType(obj_history_save, save)->usage_background_ground_tex;
		}
		
		sortlist_add(global::_app->res_list, res);
		return res;
	}
	
	IntType history_restore_temp(IntType save)
	{
		IntType temp;
		temp = (new obj_template)->id;
		withOne (obj_history_save, save, noone)
			temp_copy(ScopeAny(self), temp);
		
		withOne (obj_template, temp, noone)
		{
			self->save_id = ObjType(obj_history_save, save)->save_id;
			temp_find_save_ids(ScopeAny(self));
			if (self->model != null_)
				idInt(self->model, count)++;
			if (self->model_tex != null_)
				idInt(self->model_tex, count)++;
			if (self->model_tex_material != null_)
				idInt(self->model_tex_material, count)++;
			if (self->model_tex_normal != null_)
				idInt(self->model_tex_normal, count)++;
			if (self->item_tex != null_)
				idInt(self->item_tex, count)++;
			if (self->item_tex_material != null_)
				idInt(self->item_tex_material, count)++;
			if (self->item_tex_normal != null_)
				idInt(self->item_tex_normal, count)++;
			if (self->block_tex != null_)
				idInt(self->block_tex, count)++;
			if (self->block_tex_material != null_)
				idInt(self->block_tex_material, count)++;
			if (self->block_tex_normal != null_)
				idInt(self->block_tex_normal, count)++;
			if (self->scenery != null_)
				idInt(self->scenery, count)++;
			if (self->shape_tex != null_ && idVar(self->shape_tex, type) != e_tl_type_CAMERA)
				idInt(self->shape_tex, count)++;
			if (self->shape_tex_material != null_)
				idInt(self->shape_tex_material, count)++;
			if (self->shape_tex_normal != null_)
				idInt(self->shape_tex_normal, count)++;
			if (self->text_font != null_)
				idInt(self->text_font, count)++;
			temp_update(ScopeAny(self), true);
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
			{
				self->pc_type_list = ds_list_create();
				for (IntType p = IntType(0); p < ObjType(obj_history_save, save)->pc_type_amount; p++)
					history_restore_ptype(ObjType(obj_history_save, save)->pc_type_save_obj.Value(p), self->id);
				temp_particles_restart(ScopeAny(self));
			}
			for (IntType t = IntType(0); t < ObjType(obj_history_save, save)->usage_ptype_temp_amount; t++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_ptype_temp_save_id.Value(t)), self->id)
					idVar(self->id, temp) = temp;
			
			for (IntType t = IntType(0); t < ObjType(obj_history_save, save)->usage_tl_amount; t++)
				history_restore_tl(ObjType(obj_history_save, save)->usage_tl_save_obj.Value(t));
		}
		
		sortlist_add(global::_app->lib_list, temp);
		return temp;
	}
	
	IntType history_restore_tl(VarType save, IntType tl)
	{
		if (tl == null_)
			tl = (new obj_timeline)->id;
		withOne (obj_history_save, save, noone)
			tl_copy(ScopeAny(self), tl);
		
		withOne (obj_timeline, tl, noone)
		{
			self->save_id = ObjType(obj_history_save, save)->save_id;
			tl_find_save_ids(self);
			if (self->temp != null_ && self->part_of == null_)
				idInt(self->temp, count)++;
			for (IntType v = IntType(0); v < e_value_amount; v++)
				self->value_default[v] = tl_value_find_save_id(v, null_, ObjType(obj_history_save, save)->value_default.Value(v));
			for (IntType k = IntType(0); k < ObjType(obj_history_save, save)->kf_amount; k++)
			{
				withOne (obj_keyframe, (new obj_keyframe)->id, self->id)
				{
					self->position = ObjType(obj_history_save, save)->kf_pos.Value(k);
					self->timeline = tl;
					self->selected = false;
					self->sound_play_index = null_;
					for (IntType v = IntType(0); v < e_value_amount; v++)
						self->value[v] = tl_value_find_save_id(v, null_, ObjType(obj_history_save, save)->kf_value[k][v]);
					ds_list_add({ ObjType(obj_timeline, self.otherId)->keyframe_list, self->id });
				}
				
			}
			ds_list_insert(idInt(self->parent, tree_list), (IntType)(self->parent_tree_index), self->id);
			if (ObjType(obj_history_save, save)->pattern_type != /*""*/ STR(0))
			{
				self->pattern_type = ObjType(obj_history_save, save)->pattern_type;
				self->pattern_base_color = ObjType(obj_history_save, save)->pattern_base_color;
				self->pattern_pattern_list = array_copy_1d(ObjType(obj_history_save, save)->pattern_pattern_list);
				self->pattern_color_list = array_copy_1d(ObjType(obj_history_save, save)->pattern_color_list);
				array_add(VarType::CreateRef(global::pattern_update), self->id);
			}
			tl_update_scenery_part(ScopeAny(self));
			tl_update(ScopeAny(self));
			tl_update_values(ScopeAny(self));
			for (IntType t = IntType(0); t < ObjType(obj_history_save, save)->tree_amount; t++)
				history_restore_tl(ObjType(obj_history_save, save)->tree_save_obj.Value(t));
			if (ObjType(obj_history_save, save)->part_amount > IntType(0))
				self->part_list = ds_list_create();
			for (IntType p = IntType(0); p < ObjType(obj_history_save, save)->part_amount; p++)
				ds_list_add({ self->part_list, save_id_find(ObjType(obj_history_save, save)->part_save_id.Value(p)) });
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_temp_shape_tex_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_temp_shape_tex_save_id.Value(s)), self->id)
					sVar(shape_tex) = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_temp_path_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_temp_path_save_id.Value(s)), self->id)
					sVar(pc_spawn_region_path) = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_texture_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_texture_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_TEXTURE_OBJ] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_path_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_path_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_PATH_OBJ] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_flw_rot_target_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_flw_rot_target_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_ROT_TARGET] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_flw_pos_target_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_flw_pos_target_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_POS_TARGET] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_flw_scale_target_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_flw_scale_target_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_SCALE_TARGET] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_attractor_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_attractor_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_ATTRACTOR] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_ik_target_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_ik_target_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_IK_TARGET] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_tl_ik_target_angle_amount; s++)
			{
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_tl_ik_target_angle_save_id.Value(s)), self->id)
				{
					sVar(value)[e_value_IK_TARGET_ANGLE] = tl;
					sBool(update_matrix) = true;
				}
				
			}
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_texture_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_texture_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_texture_index.Value(s)])->value[e_value_TEXTURE_OBJ] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_path_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_path_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_path_index.Value(s)])->value[e_value_PATH_OBJ] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_attractor_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_attractor_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_attractor_index.Value(s)])->value[e_value_ATTRACTOR] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_ik_target_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_ik_target_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_ik_target_index.Value(s)])->value[e_value_IK_TARGET] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_flw_rot_target_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_flw_rot_target_index.Value(s)])->value[e_value_ROT_TARGET] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_flw_pos_target_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_flw_pos_target_index.Value(s)])->value[e_value_POS_TARGET] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_flw_scale_target_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_flw_scale_target_index.Value(s)])->value[e_value_SCALE_TARGET] = tl;
			
			for (IntType s = IntType(0); s < ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount; s++)
				withOne (Object, save_id_find(ObjType(obj_history_save, save)->usage_kf_ik_target_angle_tl_save_id.Value(s)), self->id)
					ObjType(obj_keyframe, DsList(sInt(keyframe_list))[ObjType(obj_history_save, save)->usage_kf_ik_target_angle_index.Value(s)])->value[e_value_IK_TARGET_ANGLE] = tl;
			
		}
		
		return tl;
	}
	
}
