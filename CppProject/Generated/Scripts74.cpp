/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.11 15:56:29 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType view_control_scale_plane(ScopeAny self, IntType view, IntType control, VecType axes, IntType color, VarType mat, VecType normal, VecType corner1, VecType corner2, VecType corner3, VecType corner4)
	{
		normal = vec3_mul_matrix(normal, mat);
		for (IntType i = X_; i <= Z_; i++)
		{
			if (sArr(view_control_move_flip_axis).Value(i))
			{
				corner1.Real(i) *= -1.0;
				corner2.Real(i) *= -1.0;
				corner3.Real(i) *= -1.0;
				corner4.Real(i) *= -1.0;
			}
		}
		VecType corner13D, corner12D;
		corner13D = point3D_mul_matrix(corner1, mat);
		corner12D = view_shape_project(corner13D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner23D, corner22D;
		corner23D = point3D_mul_matrix(corner2, mat);
		corner22D = view_shape_project(corner23D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner33D;
		ArrType corner32D;
		corner33D = point3D_mul_matrix(corner3, mat);
		corner32D = view_shape_project(corner33D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner43D, corner42D;
		corner43D = point3D_mul_matrix(corner4, mat);
		corner42D = view_shape_project(corner43D);
		if (global::point3D_project_error)
			return IntType(0);
		if (vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat)))) < IntType(0))
			normal = vec3_mul(normal, -IntType(1));
		RealType alpha = percent(abs(vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat))))), .1, .2);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == control)
			alpha = IntType(1);
		if (alpha == IntType(0) || (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) != control))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != control || sInt(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			view_control_plane_update();
			draw_set_color(c_white);
			if (sBool(mouse_left_released))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
			}
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = control;
					sInt(view_control_edit_view) = view;
					view_control_plane_start(idVar(global::tl_edit, world_pos), normal);
					sVar(view_control_value) = point3D(idVar(global::tl_edit, value).Value(e_value_SCA_X), idVar(global::tl_edit, value).Value(e_value_SCA_Y), idVar(global::tl_edit, value).Value(e_value_SCA_Z));
					sBool(view_control_plane) = true;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					tl_value_set_start(self, ID_action_tl_frame_scale_xyz, true);
					for (IntType i = X_; i <= Z_; i++)
					{
						if (axes.Real(i))
							tl_value_set(self, { e_value_SCA_X + i, tl_value_default(e_value_SCA_X + i), false });
					}
					tl_value_set_done();
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(corner12D, corner22D);
		view_shape_line_draw(corner22D, corner42D);
		view_shape_line_draw(corner12D, corner42D);
		draw_set_alpha(.35);
		render_set_culling(false);
		draw_primitive_begin(pr_trianglelist);
		view_shape_triangle_draw(corner12D, corner22D, corner42D);
		draw_primitive_end();
		render_set_culling(true);
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		if (point_in_triangle(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), corner12D.Real(X_), corner12D.Real(Y_), corner22D.Real(X_), corner22D.Real(Y_), corner42D.Real(X_), corner42D.Real(Y_)) && sInt(place_tl) == null_ && sBool(content_mouseon))
			ObjType(obj_view, view)->control_mouseon = control;
		return 0.0;
	}
	
	RealType view_draw(ScopeAny self, IntType view)
	{
		VarType cam, camname;
		VarType captionx, captionw;
		RealType captiony, captionh;
		RealType boxx, boxy;
		VarType boxw, boxh;
		RealType padding, dx, dy;
		StringType location;
		RealType split;
		BoolType mouseonresizesplit, mouseonresizehor, mouseonresizever;
		mouseonresizesplit = false;
		mouseonresizehor = false;
		mouseonresizever = false;
		if (!(ObjType(obj_view, view)->show > 0))
			return IntType(0);
		if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER && ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		if (window_get_current() == e_window_VIEW_SECOND)
		{
			boxx = IntType(0);
			boxy = IntType(0);
			boxw = sReal(window_width);
			boxh = sReal(window_height);
			location = /*"full"*/ STR(2807);
			sBool(mouseon) = true;
		}
		else
		{
			if (view == sInt(view_second) && window_exists(e_window_VIEW_SECOND))
				return IntType(0);
			boxx = sReal(view_area_x);
			boxy = sReal(view_area_y);
			boxw = sReal(view_area_width);
			boxh = sReal(view_area_height);
			mouseonresizesplit = false;
			mouseonresizehor = false;
			mouseonresizever = false;
			location = ObjType(obj_view, view)->location;
			split = sReal(view_split);
			if (view == sInt(view_second))
				split = IntType(1) - split;
			else
				if (!(ObjType(obj_view, sInt(view_second))->show > 0) || window_exists(e_window_VIEW_SECOND))
					location = /*"full"*/ STR(2807);
			
			ObjType(obj_view, view)->location_last = location;
			switch (StringType(location).id)
			{
				case 202: // top
				{
					boxh -= sReal(view_area_height) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
				case 204: // right
				{
					boxx += sReal(view_area_width) * split;
					boxw -= sReal(view_area_width) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					break;
				}
				case 201: // bottom
				{
					boxy += sReal(view_area_height) * split;
					boxh -= sReal(view_area_height) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 203: // left
				{
					boxw -= sReal(view_area_width) * split;
					mouseonresizesplit = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					break;
				}
				case 3964: // right_top
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxx += sReal(view_area_width) - boxw;
					mouseonresizehor = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
				case 2808: // right_bottom
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxx += sReal(view_area_width) - boxw;
					boxy += sReal(view_area_height) - boxh;
					mouseonresizehor = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 3965: // left_bottom
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxy += sReal(view_area_height) - boxh;
					mouseonresizehor = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 3966: // left_top
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					mouseonresizehor = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
			}
			
			if (sBool(popup_mouseon))
			{
				mouseonresizehor = false;
				mouseonresizever = false;
				mouseonresizesplit = false;
			}
			boxx = floor(boxx);
			boxy = floor(boxy);
			boxw = ceil(boxw);
			boxh = ceil(boxh);
			if (boxw < IntType(1) || boxh < IntType(1))
				return IntType(0);
		}
		
		sVar(content_x) = boxx;
		sVar(content_y) = boxy;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh;
		sBool(content_mouseon) = (ObjType(obj_view, view)->mouseon && !sBool(popup_mouseon));
		if (sVar(window_busy) == /*"viewmove"*/ STR(3967) && view == sInt(view_second))
		{
			boxx = gmlGlobal::mouse_x - ((RealType)boxw / 2.0);
			boxy = gmlGlobal::mouse_y;
			sVar(content_x) = boxx;
			sVar(content_y) = boxy;
			draw_set_alpha(1.0);
		}
		if (view == sInt(view_second))
			draw_dropshadow(self, boxx, boxy, boxw, boxh, c_black, IntType(1));
		draw_box(boxx, boxy, boxw, boxh, false, global::c_level_middle, IntType(1));
		if (ObjType(obj_view, view)->camera != -IntType(4) && ObjType(obj_view, view)->camera != -IntType(5) && !instance_exists(ObjType(obj_view, view)->camera))
			ObjType(obj_view, view)->camera = -IntType(5);
		cam = ObjType(obj_view, view)->camera;
		if (cam == -IntType(5))
			cam = sInt(timeline_camera);
		padding = IntType(4);
		captionx = boxx + IntType(12);
		captiony = boxy + padding;
		captionw = boxw;
		captionh = IntType(32);
		clip_begin(boxx, boxy, boxw, IntType(32));
		sVar(dw) = IntType(24);
		sVar(dh) = IntType(24);
		dx = boxx + boxw - (sVar(dw) + padding);
		dy = boxy + padding;
		global::microani_prefix = string(view);
		if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->show > 0 && !window_exists(e_window_VIEW_SECOND) && sVar(window_busy) != /*"viewmove"*/ STR(3967))
		{
			if (ObjType(obj_view, sInt(view_second))->location == /*"left_top"*/ STR(3966))
				captionx += ObjType(obj_view, sInt(view_second))->width;
			if (ObjType(obj_view, sInt(view_second))->location == /*"right_top"*/ STR(3964))
				dx -= ObjType(obj_view, sInt(view_second))->width;
			if (ObjType(obj_view, sInt(view_second))->location == /*"left_top"*/ STR(3966) || ObjType(obj_view, sInt(view_second))->location == /*"right_top"*/ STR(3964))
				captionw -= ObjType(obj_view, sInt(view_second))->width;
		}
		if (view == sInt(view_second))
		{
			if (window_get_current() != e_window_VIEW_SECOND)
			{
				if (draw_button_icon(self, { /*"viewclose"*/ STR(3968), dx, dy, sVar(dw), sVar(dh), false, icons_CLOSE, null_, false, /*"viewclose"*/ STR(3968) }))
				{
					ObjType(obj_view, view)->show = false;
					sBool(view_render) = false;
				}
				dx -= sVar(dw) + padding;
				if (draw_button_icon(self, { /*"viewpopout"*/ STR(3969), dx, dy, sVar(dw), sVar(dh), false, icons_EXTERNAL, null_, false, /*"viewpopout"*/ STR(3969) }))
					window_create(e_window_VIEW_SECOND, boxx, boxy, boxw, boxh);
			}
			else
			{
				if (draw_button_icon(self, { /*"viewpopout"*/ STR(3969), dx, dy, sVar(dw), sVar(dh), false, icons_INTERNAL, null_, false, /*"viewpopin"*/ STR(3970) }))
				{
					window_close(e_window_VIEW_SECOND);
					ObjType(obj_view, view)->location = ObjType(obj_view, view)->location_last;
					ObjType(obj_view, view)->show = true;
				}
			}
			
		}
		else
		{
			tip_set_keybind(self, e_keybind_SECONDARY_VIEW);
			if (draw_button_icon(self, { /*"viewsecond"*/ STR(3971), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, sInt(view_second))->show, icons_VIEWPORT_SECONDARY, null_, false, (ObjType(obj_view, sInt(view_second))->show > 0) ? /*"viewseconddisable"*/ STR(3972) : /*"viewsecondenable"*/ STR(3973) }))
				action_setting_secondary_view(self);
		}
		
		dx -= (padding + 1.0);
		draw_divide_vertical(dx, dy, sVar(dh));
		dx -= 16.0 + padding;
		if (draw_button_icon(self, { /*"viewqualitysettings"*/ STR(3974), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewqualitysettings"*/ STR(3974)), icons_CHEVRON_DOWN_TINY }))
		{
			menu_settings_set(self, dx, dy, (string(view) + /*"viewqualitysettings"*/ STR(3974)), IntType(24));
			sInt(settings_menu_view) = view;
			sInt(settings_menu_script) = ID_menu_quality_settings;
		}
		if (sStr(settings_menu_name) == (string(view) + /*"viewqualitysettings"*/ STR(3974)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(751))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		dx -= sVar(dw);
		tip_set_keybind(self, e_keybind_RENDER_MODE);
		if (draw_button_icon(self, { /*"viewmoderender"*/ STR(3975), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_RENDER, ObjType(obj_theme, sInt(setting_theme))->dark ? icons_SPHERE_MATERIAL__DARK : icons_SPHERE_MATERIAL, null_, false, /*"viewmoderender"*/ STR(3975) }))
		{
			ObjType(obj_view, view)->quality = e_view_mode_RENDER;
			if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
				ObjType(obj_view, sInt(view_second))->quality = e_view_mode_SHADED;
			if (view == sInt(view_second) && ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER)
				ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		}
		dx -= sVar(dw) + padding;
		tip_set_keybind(self, e_keybind_RENDER_MODE);
		if (draw_button_icon(self, { /*"viewmodeshaded"*/ STR(3976), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_SHADED, ObjType(obj_theme, sInt(setting_theme))->dark ? icons_SPHERE_SHADING__DARK : icons_SPHERE_SHADING, null_, false, /*"viewmodeshaded"*/ STR(3976) }))
			ObjType(obj_view, view)->quality = e_view_mode_SHADED;
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewmodeflat"*/ STR(3977), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_FLAT, icons_SPHERE_FLAT, null_, false, /*"viewmodeflat"*/ STR(3977) }))
			ObjType(obj_view, view)->quality = e_view_mode_FLAT;
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewparticles"*/ STR(3978), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->particles, icons_FIREWORKS, null_, false, (ObjType(obj_view, view)->particles > 0) ? /*"viewparticlesdisable"*/ STR(3979) : /*"viewparticlesenable"*/ STR(3980) }))
			ObjType(obj_view, view)->particles = !(ObjType(obj_view, view)->particles > 0);
		if (cam != null_)
		{
			dx -= sVar(dw) + padding;
			if (draw_button_icon(self, { /*"vieweffects"*/ STR(3981), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->effects, icons_WAND, null_, false, (ObjType(obj_view, view)->effects > 0) ? /*"vieweffectsdisable"*/ STR(3982) : /*"vieweffectsenable"*/ STR(3983) }))
			{
				ObjType(obj_view, view)->effects = !(ObjType(obj_view, view)->effects > 0);
				global::render_samples = -IntType(1);
			}
		}
		dx -= (padding + 1.0);
		draw_divide_vertical(dx, dy, sVar(dh));
		dx -= 16.0 + padding;
		if (draw_button_icon(self, { /*"viewgridsettings"*/ STR(3984), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewgridsettings"*/ STR(3984)), icons_CHEVRON_DOWN_TINY }))
		{
			menu_settings_set(self, dx, dy, (string(view) + /*"viewgridsettings"*/ STR(3984)), IntType(24));
			sInt(settings_menu_view) = view;
			sInt(settings_menu_script) = ID_menu_grid_settings;
		}
		if (sStr(settings_menu_name) == (string(view) + /*"viewgridsettings"*/ STR(3984)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(751))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		dx -= sVar(dw);
		if (draw_button_icon(self, { /*"viewgrid"*/ STR(3985), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->grid, icons_GRID, null_, false, (ObjType(obj_view, view)->grid > 0) ? /*"viewgriddisable"*/ STR(3986) : /*"viewgridenable"*/ STR(3987) }))
			ObjType(obj_view, view)->grid = !(ObjType(obj_view, view)->grid > 0);
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewaspectratio"*/ STR(3988), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->aspect_ratio, icons_LETTERBOX, null_, false, (ObjType(obj_view, view)->aspect_ratio > 0) ? /*"viewaspectratiodisable"*/ STR(3989) : /*"viewaspectratioenable"*/ STR(3990) }))
			ObjType(obj_view, view)->aspect_ratio = !(ObjType(obj_view, view)->aspect_ratio > 0);
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewoverlays"*/ STR(3991), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->gizmos, icons_OVERLAYS, null_, false, (ObjType(obj_view, view)->gizmos > 0) ? /*"viewoverlaysdisable"*/ STR(3992) : /*"viewoverlaysenable"*/ STR(3993) }))
			ObjType(obj_view, view)->gizmos = !(ObjType(obj_view, view)->gizmos > 0);
		if (view == sInt(view_main))
		{
			dx -= (padding + 1.0);
			draw_divide_vertical(dx, dy, sVar(dh));
			dx -= 16.0 + padding;
			if (draw_button_icon(self, { /*"viewsnapsettings"*/ STR(3994), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewsnapsettings"*/ STR(3994)), icons_CHEVRON_DOWN_TINY }))
			{
				menu_settings_set(self, dx, dy, (string(view) + /*"viewsnapsettings"*/ STR(3994)), IntType(24));
				sInt(settings_menu_view) = view;
				sInt(settings_menu_script) = ID_menu_snap_settings;
			}
			if (sStr(settings_menu_name) == (string(view) + /*"viewsnapsettings"*/ STR(3994)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(751))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
			dx -= sVar(dw);
			tip_set_keybind(self, e_keybind_SNAP);
			if (draw_button_icon(self, { /*"viewsnap"*/ STR(3995), dx, dy, sVar(dw), sVar(dh), sReal(setting_snap), icons_MAGNET, null_, false, (sReal(setting_snap) > 0) ? /*"viewsnapdisable"*/ STR(3996) : /*"viewsnapenable"*/ STR(3997) }))
				sReal(setting_snap) = !(sReal(setting_snap) > 0);
		}
		StringType listname;
		BoolType menuactive;
		listname = (view == sInt(view_main) ? /*"viewcameramain"*/ STR(1511) : /*"viewcamerasecond"*/ STR(1512));
		menuactive = false;
		withAll (obj_menu, global::_app->id)
		{
			if (self->menu_name == listname)
			{
				menuactive = true;
				break;
			}
		}
		
		if (ObjType(obj_view, view)->camera == -IntType(4) && cam == -IntType(4))
			camname = text_get({ /*"viewworkcamera"*/ STR(3998) });
		else
			if (ObjType(obj_view, view)->camera == -IntType(5))
				camname = text_get({ /*"viewactivecamera"*/ STR(3999), (cam == -IntType(4) ? text_get({ /*"viewworkcamera"*/ STR(3998) }) : string_remove_newline(idVar(cam, display_name))) });
			else
				camname = idVar(cam, display_name);
		
		
		draw_set_font(sInt(font_value));
		if (draw_button_menu(self, { listname, e_menu_LIST_SEAMLESS, captionx - IntType(8), dy, min({ string_width(camname) + IntType(52), dx - captionx }), IntType(24), ObjType(obj_view, view)->camera, camname, ID_action_view_camera }))
			sInt(settings_menu_view) = view;
		ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value = IntType(1);
		ObjType(obj_view, sInt(view_second))->title = camname;
		global::microani_prefix = /*""*/ STR(0);
		clip_end();
		sVar(content_x) = boxx;
		sVar(content_y) = boxy + captionh;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh - captionh;
		sBool(content_mouseon) = false;
		if (location != /*"full"*/ STR(2807) && location != /*"top"*/ STR(202) && location != /*"bottom"*/ STR(201))
		{
			if (!string_contains(location, /*"left"*/ STR(203)))
			{
				sVar(content_x) += IntType(3);
				sVar(content_width) -= 3.0;
			}
			if (!string_contains(location, /*"right"*/ STR(204)))
				sVar(content_width) -= 3.0;
			if (location == /*"right_top"*/ STR(3964) || location == /*"left_top"*/ STR(3966))
				sVar(content_height) -= 3.0;
		}
		if (sVar(content_width) > IntType(0) && sVar(content_height) > IntType(0))
		{
			draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, c_black, IntType(1));
			draw_outline(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border, false);
			if (ObjType(obj_view, view)->aspect_ratio > 0)
			{
				VarType wid, hei;
				RealType scale;
				if (cam > 0 && !(idVar(cam, value).Value(e_value_CAM_SIZE_USE_PROJECT) > 0))
				{
					wid = idVar(cam, value).Value(e_value_CAM_WIDTH);
					hei = idVar(cam, value).Value(e_value_CAM_HEIGHT);
				}
				else
				{
					wid = sVar(project_video_width);
					hei = sVar(project_video_height);
				}
				
				if ((RealType)wid / hei < (RealType)sVar(content_width) / sVar(content_height))
				{
					scale = (RealType)sVar(content_height) / hei;
					sVar(content_x) += (sVar(content_width) - scale * wid) / 2.0;
					sVar(content_width) = wid * scale;
				}
				else
				{
					scale = (RealType)sVar(content_width) / wid;
					sVar(content_y) += (sVar(content_height) - scale * hei) / 2.0;
					sVar(content_height) = hei * scale;
				}
				
			}
			sVar(content_x) = floor(sVar(content_x));
			sVar(content_y) = floor(sVar(content_y));
			sVar(content_width) = ceil(sVar(content_width));
			sVar(content_height) = ceil(sVar(content_height));
			sBool(content_mouseon) = (app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), /*"place"*/ STR(119)) && ObjType(obj_view, view)->mouseon && !ObjType(obj_view, view)->toolbar_mouseon && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
			if (sBool(content_mouseon))
				sStr(shortcut_bar_state) = /*"viewport"*/ STR(124) + (cam == null_ ? /*""*/ STR(0) : /*"cam"*/ STR(4000));
			if (ObjType(obj_view, view)->quality != e_view_mode_RENDER || sBool(view_render_real_time))
				view_update(self, view, cam);
			else
				if (sVar(window_focus) == string(view) && !sBool(mouse_left) && !sBool(mouse_right))
					sVar(window_busy) = /*""*/ STR(0);
			
			draw_surface_size(ObjType(obj_view, view)->surface, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
			if (ObjType(obj_view, view)->grid > 0)
			{
				RealType cellwid, cellhei;
				cellwid = (RealType)sVar(content_width) / sVar(project_grid_rows);
				cellhei = (RealType)sVar(content_height) / sVar(project_grid_columns);
				for (IntType i = IntType(1); i < sVar(project_grid_rows); i++)
				{
					draw_line_ext(sVar(content_x) + cellwid * i - IntType(1), sVar(content_y), sVar(content_x) + cellwid * i - IntType(1), sVar(content_y) + sVar(content_height), c_white, IntType(1));
					draw_line_ext(sVar(content_x) + cellwid * i + IntType(1), sVar(content_y), sVar(content_x) + cellwid * i + IntType(1), sVar(content_y) + sVar(content_height), c_white, IntType(1));
				}
				for (IntType i = IntType(1); i < sVar(project_grid_columns); i++)
				{
					draw_line_ext(sVar(content_x), sVar(content_y) + cellhei * i - IntType(1), sVar(content_x) + sVar(content_width), sVar(content_y) + cellhei * i - IntType(1), c_white, IntType(1));
					draw_line_ext(sVar(content_x), sVar(content_y) + cellhei * i + IntType(1), sVar(content_x) + sVar(content_width), sVar(content_y) + cellhei * i + IntType(1), c_white, IntType(1));
				}
			}
			if (sVar(window_busy) == /*"place"*/ STR(119) && gmlGlobal::mouse_x >= sVar(content_x) && gmlGlobal::mouse_y >= sVar(content_y) && gmlGlobal::mouse_x < sVar(content_x) + sVar(content_width) && gmlGlobal::mouse_y < sVar(content_y) + sVar(content_height))
			{
				if (ObjType(obj_view, view)->update_depth)
				{
					surface_clear_depth_cache(ObjType(obj_view, view)->surface_depth);
					render_start({ ObjType(obj_view, view)->surface_depth, null_, sVar(content_width), sVar(content_height) });
					global::render_camera = cam;
					render_update_camera();
					sBool(place_tl_render) = false;
					global::render_target = surface_require(global::render_target, global::render_width, global::render_height);
					surface_set_target((IntType)(global::render_target));
				{
					draw_clear_alpha(c_black, 0.0);
					render_world_background();
					render_world_start();
					render_world_sky();
					render_world(self, e_render_mode_COLOR_FOG);
					render_world_done();
				}
					surface_reset_target();
					ObjType(obj_view, view)->surface_depth = render_done();
					ObjType(obj_view, view)->update_depth = false;
				}
				RealType mx = gmlGlobal::mouse_x - sVar(content_x);
				RealType my = gmlGlobal::mouse_y - sVar(content_y);
				RealType tx = mx / sVar(content_width);
				RealType ty = IntType(1) - my / sVar(content_height);
				RealType depthval = surface_get_depth(ObjType(obj_view, view)->surface_depth, mx, my);
				if (depthval < IntType(1))
					ObjType(obj_view, view)->surface_depth_value = depthval;
				VecType clipspace = vec4(tx * IntType(2) - IntType(1), ty * IntType(2) - IntType(1), min({ 0.99975, ObjType(obj_view, view)->surface_depth_value }) * IntType(2) - IntType(1), IntType(1));
				VecType viewspace = vec4_homogenize(vec4_mul_matrix(clipspace, matrix_inverse(global::proj_matrix)));
				sVar(place_view_pos) = point3D_mul_matrix(viewspace, matrix_inverse(global::view_matrix));
				sBool(place_tl_render) = true;
				global::render_samples = -IntType(1);
			}
		}
		sVar(content_x) = boxx;
		sVar(content_y) = boxy + captionh;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh - captionh;
		if (view == sInt(view_main))
		{
			RealType benchx, benchy, benchscale, benchrot;
			BoolType benchempty;
			benchx = boxx + IntType(3);
			benchy = boxy + captionh + IntType(8);
			benchscale = sReal(bench_click_ani);
			benchrot = sin(sReal(bench_rotate_ani) * pi_ * IntType(5)) * (IntType(1) - abs(sReal(bench_rotate_ani) * IntType(2) - IntType(1))) * IntType(10);
			benchempty = (instance_number(ID_obj_timeline) == IntType(0) && instance_number(ID_obj_template) == IntType(0));
			ObjType(obj_bench_settings, sInt(bench_settings))->posx = benchx + IntType(86) + IntType(8);
			ObjType(obj_bench_settings, sInt(bench_settings))->posy = benchy;
			if (benchrot != IntType(0) || benchscale < IntType(1))
				gpu_set_tex_filter(true);
			draw_image({ ID_spr_bench, IntType(0), benchx + IntType(43), benchy + IntType(43), benchscale, benchscale, null_, sReal(bench_hover_ani), benchrot });
			if (benchrot != IntType(0) || benchscale < IntType(1))
				gpu_set_tex_filter(false);
			if (sBool(bench_open))
			{
				sStr(bench_show_ani_type) = /*"show"*/ STR(752);
				sVar(window_busy) = /*"bench"*/ STR(753);
				sVar(bench_settings_ani) = IntType(1);
				sBool(bench_open) = false;
			}
			if (sReal(bench_rotate_ani) == IntType(0) && benchempty && sVar(bench_show_ani) == IntType(0) && sStr(bench_show_ani_type) == /*""*/ STR(0))
				sReal(bench_rotate_ani) = IntType(1);
			if (ObjType(obj_view, sInt(view_main))->mouseon && app_mouse_box(self, benchx, benchy, IntType(86), IntType(86)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon) && !(ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_second))->mouseon))
			{
				sInt(mouse_cursor) = cr_handpoint;
				sBool(bench_button_hover) = true;
				sReal(bench_hover_ani_goal) = IntType(1);
				if (sReal(bench_rotate_ani) == IntType(0))
					sReal(bench_rotate_ani) = IntType(1);
				if (sBool(mouse_left))
				{
					sReal(bench_click_ani_goal) = .9;
					sReal(bench_rotate_ani) = IntType(0);
					sReal(bench_hover_ani_goal) = .5;
				}
				else
					sReal(bench_click_ani_goal) = IntType(1);
				
				sBool(tip_force_right) = true;
				tip_set(self, text_get({ /*"viewworkbenchtip"*/ STR(4001) }), benchx, benchy, IntType(86), IntType(86), false);
				sBool(tip_force_right) = false;
				if (sBool(mouse_left_pressed))
					sBool(bench_open) = true;
			}
			else
			{
				if (ObjType(obj_view, view)->toolbar_alpha_goal == IntType(1))
					sReal(bench_hover_ani_goal) = ObjType(obj_view, view)->toolbar_alpha_goal;
				else
					sReal(bench_hover_ani_goal) = .5;
				
				if (benchempty)
					sReal(bench_hover_ani_goal) = IntType(1);
				else
					sReal(bench_rotate_ani) = IntType(0);
				
				sReal(bench_click_ani_goal) = IntType(1);
				sBool(bench_button_hover) = false;
			}
			
			if (sVar(window_busy) == /*"bench"*/ STR(753) || sVar(bench_show_ani) == IntType(1))
			{
				sReal(bench_hover_ani_goal) = .5;
				sReal(bench_click_ani_goal) = .9;
			}
			sReal(bench_hover_ani) += (sReal(bench_hover_ani_goal) - sReal(bench_hover_ani)) / max({ IntType(1), 4.0 / global::delta });
			sReal(bench_click_ani) += (sReal(bench_click_ani_goal) - sReal(bench_click_ani)) / max({ IntType(1), 2.0 / global::delta });
			sReal(bench_rotate_ani) = max({ IntType(0), sReal(bench_rotate_ani) - 0.01 * global::delta });
			view_toolbar_draw(self, view, boxx + IntType(8), boxy + captionh + IntType(8) + IntType(86) + IntType(12));
		}
		if (view == sInt(view_second) && window_get_current() != e_window_VIEW_SECOND)
		{
			if (ObjType(obj_view, view)->mouseon && (sInt(mouse_cursor) == cr_default || sBool(content_mouseon)))
			{
				if (mouseonresizehor && mouseonresizever)
				{
					if (ObjType(obj_view, view)->location == /*"right_top"*/ STR(3964) || ObjType(obj_view, view)->location == /*"left_bottom"*/ STR(3965))
						sInt(mouse_cursor) = cr_size_nesw;
					else
						sInt(mouse_cursor) = cr_size_nwse;
					
					if (sBool(mouse_left_pressed))
					{
						sVar(window_busy) = /*"viewresizeboth"*/ STR(3960);
						sVar(view_resize_width) = ObjType(obj_view, view)->width;
						sVar(view_resize_height) = ObjType(obj_view, view)->height;
					}
				}
				else
					if (mouseonresizehor)
					{
						sInt(mouse_cursor) = cr_size_we;
						if (sBool(mouse_left_pressed))
						{
							sVar(window_busy) = /*"viewresizehor"*/ STR(3959);
							sVar(view_resize_width) = ObjType(obj_view, view)->width;
						}
					}
					else
						if (mouseonresizever)
						{
							sInt(mouse_cursor) = cr_size_ns;
							if (sBool(mouse_left_pressed))
							{
								sVar(window_busy) = /*"viewresizever"*/ STR(3961);
								sVar(view_resize_height) = ObjType(obj_view, view)->height;
							}
						}
						else
							if (app_mouse_box(self, boxx, boxy, boxw, captionh) && !sBool(popup_mouseon) && sBool(mouse_left_pressed))
								sVar(window_busy) = /*"viewclickcaption"*/ STR(4002);
					
				
				
			}
			if (sVar(window_busy) == /*"viewclickcaption"*/ STR(4002))
			{
				if (sReal(mouse_move) > IntType(10))
				{
					ObjType(obj_view, sInt(view_main))->location = /*"full"*/ STR(2807);
					sVar(window_busy) = /*"viewmove"*/ STR(3967);
					sVar(view_glow_ani) = IntType(0);
					sStr(view_glow_location_prev) = /*""*/ STR(0);
				}
				else
					if (!sBool(mouse_left))
						sVar(window_busy) = /*""*/ STR(0);
				
			}
			if (sVar(window_busy) == /*"viewmove"*/ STR(3967))
			{
				StringType mouselocation = /*""*/ STR(0);
				if (gmlGlobal::mouse_x < sReal(view_area_x) + sReal(view_area_width) * 0.3)
					mouselocation = /*"left"*/ STR(203);
				if (gmlGlobal::mouse_x > sReal(view_area_x) + sReal(view_area_width) * 0.7)
					mouselocation = /*"right"*/ STR(204);
				if (gmlGlobal::mouse_y < sReal(view_area_y) + sReal(view_area_height) * 0.3)
					mouselocation += /*"_top"*/ STR(1979);
				else
					if (gmlGlobal::mouse_y >= sReal(view_area_y) + sReal(view_area_height) * 0.7)
						mouselocation += /*"_bottom"*/ STR(1980);
				
				if (mouselocation == /*"_top"*/ STR(1979))
					mouselocation = /*"top"*/ STR(202);
				if (mouselocation == /*"_bottom"*/ STR(1980))
					mouselocation = /*"bottom"*/ STR(201);
				sBool(view_glow_left_top) = false;
				sBool(view_glow_top) = false;
				sBool(view_glow_right_top) = false;
				sBool(view_glow_right) = false;
				sBool(view_glow_right_bottom) = false;
				sBool(view_glow_bottom) = false;
				sBool(view_glow_left_bottom) = false;
				sBool(view_glow_left) = false;
				switch (StringType(mouselocation).id)
				{
					case 3966: // left_top
					{
						sBool(view_glow_left_top) = true;
						break;
					}
					case 202: // top
					{
						sBool(view_glow_top) = true;
						break;
					}
					case 3964: // right_top
					{
						sBool(view_glow_right_top) = true;
						break;
					}
					case 204: // right
					{
						sBool(view_glow_right) = true;
						break;
					}
					case 2808: // right_bottom
					{
						sBool(view_glow_right_bottom) = true;
						break;
					}
					case 201: // bottom
					{
						sBool(view_glow_bottom) = true;
						break;
					}
					case 3965: // left_bottom
					{
						sBool(view_glow_left_bottom) = true;
						break;
					}
					case 203: // left
					{
						sBool(view_glow_left) = true;
						break;
					}
				}
				
				if (sStr(view_glow_location_prev) != mouselocation)
					sVar(view_glow_ani) = IntType(0);
				sStr(view_glow_location_prev) = mouselocation;
				if (!sBool(mouse_left))
				{
					if (mouselocation != /*""*/ STR(0))
						ObjType(obj_view, view)->location = mouselocation;
					else
						window_create(e_window_VIEW_SECOND, boxx, boxy, boxw, boxh);
					
					switch (StringType(ObjType(obj_view, view)->location).id)
					{
						case 202: // top
						{
							ObjType(obj_view, sInt(view_main))->location = /*"bottom"*/ STR(201);
							break;
						}
						case 201: // bottom
						{
							ObjType(obj_view, sInt(view_main))->location = /*"top"*/ STR(202);
							break;
						}
						case 204: // right
						{
							ObjType(obj_view, sInt(view_main))->location = /*"left"*/ STR(203);
							break;
						}
						case 203: // left
						{
							ObjType(obj_view, sInt(view_main))->location = /*"right"*/ STR(204);
							break;
						}
						default:
							ObjType(obj_view, sInt(view_main))->location = /*"full"*/ STR(2807);
							break;
					}
					
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
		}
		else
			if (sVar(window_busy) == /*"viewmove"*/ STR(3967))
			{
				sVar(view_glow_ani) += test_reduced_motion(IntType(1), (0.035 * global::delta));
				sVar(view_glow_ani) = clamp(sVar(view_glow_ani), IntType(0), IntType(1));
				RealType ani = ceil((sVar(view_glow_ani) - IntType(16)) + (IntType(16) * ease(/*"easeoutcirc"*/ STR(598), sVar(view_glow_ani))));
				if (sBool(view_glow_left_top))
					draw_box(sReal(view_area_x), sReal(view_area_y), ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + ani, false, global::c_accent, glow_alpha);
				if (sBool(view_glow_top))
					draw_box(sReal(view_area_x), sReal(view_area_y), sReal(view_area_width), (sReal(view_area_height) * split) + ani, false, global::c_accent, glow_alpha);
				if (sBool(view_glow_right_top))
					draw_box(sReal(view_area_x) + sReal(view_area_width) - (ObjType(obj_view, sInt(view_second))->width + ani), sReal(view_area_y), ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + ani, false, global::c_accent, glow_alpha);
				if (sBool(view_glow_right))
					draw_box(sReal(view_area_x) + sReal(view_area_width) - (sReal(view_area_width) * split) - ani, sReal(view_area_y), (sReal(view_area_width) * split) + IntType(8), sReal(view_area_height), false, global::c_accent, glow_alpha);
				if (sBool(view_glow_right_bottom))
					draw_box(sReal(view_area_x) + sReal(view_area_width) - ObjType(obj_view, sInt(view_second))->width - ani, sReal(view_area_y) + sReal(view_area_height) - ObjType(obj_view, sInt(view_second))->height - ani, ObjType(obj_view, sInt(view_second))->width + IntType(8), ObjType(obj_view, sInt(view_second))->height + IntType(8), false, global::c_accent, glow_alpha);
				if (sBool(view_glow_bottom))
					draw_box(sReal(view_area_x), sReal(view_area_y) + sReal(view_area_height) - (sReal(view_area_height) * split) - ani, sReal(view_area_width), (sReal(view_area_height) * split) + IntType(8), false, global::c_accent, glow_alpha);
				if (sBool(view_glow_left_bottom))
					draw_box(sReal(view_area_x), sReal(view_area_y) + sReal(view_area_height) - ObjType(obj_view, sInt(view_second))->height - ani, ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + IntType(8), false, global::c_accent, glow_alpha);
				if (sBool(view_glow_left))
					draw_box(sReal(view_area_x), sReal(view_area_y), (sReal(view_area_width) * split) + ani, sReal(view_area_height), false, global::c_accent, glow_alpha);
			}
		
		if (mouseonresizesplit && (sInt(mouse_cursor) == cr_default || sBool(content_mouseon)))
		{
			StringType mouselocation = /*""*/ STR(0);
			if (ObjType(obj_view, view)->location == /*"right"*/ STR(204) || ObjType(obj_view, view)->location == /*"left"*/ STR(203))
			{
				sInt(mouse_cursor) = cr_size_we;
				mouselocation = /*"hor"*/ STR(4003);
			}
			else
			{
				sInt(mouse_cursor) = cr_size_ns;
				mouselocation = /*"ver"*/ STR(4004);
			}
			
			if (sBool(mouse_left_pressed))
				sVar(window_busy) = /*"viewresizesplit"*/ STR(4005) + mouselocation;
		}
		if (view == sInt(view_second))
		{
			BoolType linetop, linebottom, lineleft, lineright;
			linetop = false;
			linebottom = false;
			lineleft = false;
			lineright = false;
			if (location == /*"top"*/ STR(202) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplitver"*/ STR(3963)))
				linetop = true;
			if (location == /*"bottom"*/ STR(201) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplitver"*/ STR(3963)))
				linebottom = true;
			if (location == /*"left"*/ STR(203) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplithor"*/ STR(3962)))
				lineright = true;
			if (location == /*"right"*/ STR(204) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplithor"*/ STR(3962)))
				lineleft = true;
			if ((mouseonresizever || mouseonresizehor) || (sVar(window_busy) == /*"viewresizeboth"*/ STR(3960) || sVar(window_busy) == /*"viewresizever"*/ STR(3961) || sVar(window_busy) == /*"viewresizehor"*/ STR(3959)))
			{
				if (location == /*"left_top"*/ STR(3966))
				{
					lineright = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3959) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
					linetop = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3961) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
				}
				if (location == /*"right_top"*/ STR(3964))
				{
					lineleft = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3959) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
					linetop = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3961) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
				}
				if (location == /*"left_bottom"*/ STR(3965))
				{
					lineright = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3959) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
					linebottom = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3961) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
				}
				if (location == /*"right_bottom"*/ STR(2808))
				{
					lineleft = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3959) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
					linebottom = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3961) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3960));
				}
			}
			if (linetop)
				draw_box(boxx, boxy + boxh - IntType(2), boxw, IntType(4), false, global::c_hover, global::a_hover);
			if (linebottom)
				draw_box(boxx, boxy - IntType(2), boxw, IntType(4), false, global::c_hover, global::a_hover);
			if (lineright)
				draw_box(boxx + boxw - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover);
			if (lineleft)
				draw_box(boxx - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover);
		}
		if (ObjType(obj_view, view)->quality == e_view_mode_RENDER)
		{
			VarType infotext;
			if (sBool(view_render_real_time))
				infotext = text_get({ /*"viewrenderfps"*/ STR(4006), string(gmlGlobal::fps), max({ IntType(1), global::render_samples }), sVar(project_render_samples) });
			else
				infotext = /*""*/ STR(0);
			
			draw_label(self, { infotext, sVar(content_x) + IntType(17), sVar(content_y) + sVar(content_height) - IntType(15), fa_left, fa_bottom, c_black, .75, sInt(font_caption) });
			draw_label(self, { infotext, sVar(content_x) + IntType(16), sVar(content_y) + sVar(content_height) - IntType(16), fa_left, fa_bottom, gmlGlobal::fps < IntType(25) ? ObjType(obj_theme, sInt(setting_theme))->toast_color.Value(e_toast_NEGATIVE) : VarType(c_white), IntType(1), sInt(font_caption) });
			if (sInt(project_render_pass) != e_render_pass_COMBINED)
			{
				infotext = text_get({ /*"viewrenderpass"*/ STR(4007), text_get({ /*"viewmodepass"*/ STR(1510) + DsList(global::render_pass_list).Value(sInt(project_render_pass)) }) });
				draw_label(self, { infotext, sVar(content_x) + IntType(17), sVar(content_y) + sVar(content_height) - IntType(31), fa_left, fa_bottom, c_black, .75, sInt(font_caption) });
				draw_label(self, { infotext, sVar(content_x) + IntType(16), sVar(content_y) + sVar(content_height) - IntType(32), fa_left, fa_bottom, c_white, IntType(1), sInt(font_caption) });
			}
		}
		if (sVar(window_busy) == /*"viewmove"*/ STR(3967) && view == sInt(view_second))
			draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_middle, .25);
		ObjType(obj_view, view)->mouseon = app_mouse_box(self, boxx, boxy, boxw, boxh, /*"place"*/ STR(119));
		if (ObjType(obj_view, view)->mouseon && view == sInt(view_second))
			ObjType(obj_view, sInt(view_main))->mouseon = false;
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	void view_event_create(Scope<obj_view> self)
	{
		self->show = true;
		self->location = /*"full"*/ STR(2807);
		self->location_last = /*"full"*/ STR(2807);
		self->surface = null_;
		self->surface_depth = null_;
		self->surface_depth_value = IntType(0);
		self->surface_select = null_;
		self->surface_camera = null_;
		self->mouseon = false;
		self->control_mouseon = null_;
		self->control_mouseon_last = null_;
		self->render = false;
		self->width = IntType(440);
		self->height = IntType(280);
		self->toolbar_height = IntType(0);
		self->toolbar_mouseon = false;
		self->toolbar_alpha = IntType(1);
		self->toolbar_alpha_goal = self->toolbar_alpha;
	}
	
	void view_shape_bone(VarType pos, RealType length, MatrixType mat)
	{
		MatrixType bonemat = matrix_multiply(matrix_create(vec3(IntType(0)), vec3(IntType(0)), vec3(length)), mat);
		ArrType points, points2D, points2Derror, pointlines;
		points = ArrType::From({ ArrType::From({ IntType(0), IntType(0), IntType(0) }), ArrType::From({ .125, .125, 1.0 / 6.0 }), ArrType::From({ -.125, .125, 1.0 / 6.0 }), ArrType::From({ -.125, -.125, 1.0 / 6.0 }), ArrType::From({ .125, -.125, 1.0 / 6.0 }), ArrType::From({ IntType(0), IntType(0), IntType(1) }) });
		pointlines = ArrType::From({ IntType(0), IntType(1), IntType(0), IntType(2), IntType(0), IntType(3), IntType(0), IntType(4), IntType(1), IntType(2), IntType(2), IntType(3), IntType(3), IntType(4), IntType(4), IntType(1), IntType(5), IntType(1), IntType(5), IntType(2), IntType(5), IntType(3), IntType(5), IntType(4) });
		for (IntType i = IntType(0); i < IntType(6); i++)
		{
			points[i] = point3D_add(pos, point3D_mul_matrix(points.Value(i), bonemat));
			points2D[i] = view_shape_project(points.Value(i));
			points2Derror[i] = global::point3D_project_error;
		}
		IntType p1, p2;
		render_set_culling(false);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(pointlines)); i += IntType(2))
		{
			p1 = pointlines.Value(i);
			p2 = pointlines.Value(i + IntType(1));
			if (!points2Derror.Value(p1) && !points2Derror.Value(p2))
				draw_line_width((IntType)(points2D[p1][X_]), (IntType)(points2D[p1][Y_]), (IntType)(points2D[p2][X_]), (IntType)(points2D[p2][Y_]), IntType(2));
		}
		render_set_culling(true);
	}
	
	void view_shape_box(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType p1, p2;
		ArrType points;
		p1 = argument[IntType(0)];
		p2 = argument[IntType(1)];
		points = ArrType::From({ p1, point3D(p1.Value(X_), p1.Value(Y_), p2.Value(Z_)), point3D(p1.Value(X_), p2.Value(Y_), p1.Value(Z_)), point3D(p1.Value(X_), p2.Value(Y_), p2.Value(Z_)), point3D(p2.Value(X_), p1.Value(Y_), p1.Value(Z_)), point3D(p2.Value(X_), p1.Value(Y_), p2.Value(Z_)), point3D(p2.Value(X_), p2.Value(Y_), p1.Value(Z_)), p2 });
		if (argument_count > IntType(2))
			view_shape_draw({ points, argument[IntType(2)] });
		else
			view_shape_draw({ points });
		
	}
	
	void view_shape_camera(IntType tl)
	{
		view_shape_box({ point3D(-3.5, -IntType(5), -IntType(4)), point3D(3.5, IntType(5), IntType(4)), ObjType(obj_timeline, tl)->matrix });
		ArrType lens = ArrType::From({ point3D(-1.5, IntType(5), -1.5), point3D(-1.5, IntType(5), 1.5), point3D(1.5, IntType(5), -1.5), point3D(1.5, IntType(5), 1.5), point3D(-IntType(3), IntType(9), -IntType(3)), point3D(-IntType(3), IntType(9), IntType(3)), point3D(IntType(3), IntType(9), -IntType(3)), point3D(IntType(3), IntType(9), IntType(3)) });
		view_shape_draw({ lens, ObjType(obj_timeline, tl)->matrix });
		view_shape_circle({ point3D(IntType(0), IntType(3), 6.5), 2.5, ObjType(obj_timeline, tl)->matrix });
		view_shape_circle({ point3D(IntType(0), -IntType(3), 6.5), 2.5, ObjType(obj_timeline, tl)->matrix });
	}
	
	RealType view_shape_circle(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType pos, rad;
		VecType pos2D;
		RealType rad2D, detail;
		pos = argument[IntType(0)];
		rad = argument[IntType(1)];
		if (argument_count > IntType(2))
		{
			ArrType mat = array_copy_1d(argument[IntType(2)]);
			matrix_remove_scale(VarType::CreateRef(mat));
			pos = point3D_mul_matrix(pos, mat);
		}
		pos2D = view_shape_project(pos);
		if (global::point3D_project_error)
			return IntType(0);
		rad2D = (((RealType)rad / point3D_distance(pos, global::cam_from)) * global::render_height) / ((RealType)global::cam_fov / 60.0);
		detail = IntType(32);
		for (RealType i = IntType(0); i < IntType(1); i += 1.0 / detail)
		{
			view_shape_line_draw(point2D(pos2D.Real(X_) + lengthdir_x(rad2D, (i - 1.0 / detail) * IntType(360)), pos2D.Real(Y_) + lengthdir_y(rad2D, (i - 1.0 / detail) * IntType(360))), point2D(pos2D.Real(X_) + lengthdir_x(rad2D, i * IntType(360)), pos2D.Real(Y_) + lengthdir_y(rad2D, i * IntType(360))));
		}
		return 0.0;
	}
	
	RealType view_shape_cone_draw(MatrixType mat, VarType position, ArrType rotation, RealType size)
	{
		MatrixType rotmat;
		RealType detail;
		rotmat = matrix_create(vec3(IntType(0)), rotation, vec3(IntType(1)));
		detail = IntType(8);
		VecType top3D, end3D;
		ArrType top2D, start2D, end2D;
		top3D = point3D_mul_matrix(point3D(IntType(0), IntType(0), size * 1.5), rotmat);
		top3D = point3D_add(top3D, position);
		top3D = point3D_mul_matrix(top3D, mat);
		top2D = view_shape_project(top3D);
		if (global::point3D_project_error)
			return IntType(0);
		render_set_culling(false);
		draw_primitive_begin(pr_trianglelist);
		for (RealType i = .125; i <= 1.125; i += 1.0 / detail)
		{
			end3D = point3D_mul_matrix(point3D(cos(pi_ * IntType(2) * i) * size, sin(pi_ * IntType(2) * i) * size, -(size * 1.5)), rotmat);
			end3D = point3D_mul_matrix(point3D_add(end3D, position), mat);
			end2D = view_shape_project(end3D);
			if (global::point3D_project_error)
				break;
			if (i > .125)
				view_shape_triangle_draw(start2D, end2D, top2D);
			start2D = end2D;
		}
		draw_primitive_end();
		render_set_culling(true);
		return 0.0;
	}
	
}
