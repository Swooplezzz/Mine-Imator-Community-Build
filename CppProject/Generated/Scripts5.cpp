/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.04 17:45:23 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType action_lib_model_tex_material(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (idVar(global::temp_edit, type) == e_tl_type_MODEL && idVar(global::temp_edit, model) != null_ && idInt(idVar(global::temp_edit, model), model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (idVar(global::temp_edit, model_file) != null_)
							idVar(res, player_skin) = idVar(idVar(global::temp_edit, model_file), player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_lib_model_tex_material, fn, idVar(global::temp_edit, model_tex_material), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			if (sVar(model_tex_material) != null_)
				idInt(sVar(model_tex_material), count)--;
			sVar(model_tex_material) = res;
			if (sVar(model_tex_material) != null_)
				idInt(sVar(model_tex_material), count)++;
			if (sVar(pattern_type) != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), global::temp_edit);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_model_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (idVar(global::temp_edit, type) == e_tl_type_MODEL && idVar(global::temp_edit, model) != null_ && idInt(idVar(global::temp_edit, model), model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (idVar(global::temp_edit, model_file) != null_)
							idVar(res, player_skin) = idVar(idVar(global::temp_edit, model_file), player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_lib_model_tex_normal, fn, idVar(global::temp_edit, model_tex_normal), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			if (sVar(model_tex_normal) != null_)
				idInt(sVar(model_tex_normal), count)--;
			sVar(model_tex_normal) = res;
			if (sVar(model_tex_normal) != null_)
				idInt(sVar(model_tex_normal), count)++;
			if (sVar(pattern_type) != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), global::temp_edit);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_name(ScopeAny self, VarType name)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_name, idVar(global::temp_edit, name), name, true);
		withOne (Object, global::temp_edit, self->id)
		{
			idVar(self->id, name) = name;
			temp_update_display_name(self);
		}
		
	}
	
	void action_lib_pc_bounding_box_custom_end(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_bounding_box_custom_end, idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit), idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit) * add + val, true);
		idVar(global::temp_edit, pc_bounding_box_custom_end)[global::axis_edit] = idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_bounding_box_custom_start(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_bounding_box_custom_start, idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit) * add + val, true);
		idVar(global::temp_edit, pc_bounding_box_custom_start)[global::axis_edit] = idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_bounding_box_ground_z(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_bounding_box_ground_z, idVar(global::temp_edit, pc_bounding_box_ground_z), idVar(global::temp_edit, pc_bounding_box_ground_z) * add + val, true);
		idVar(global::temp_edit, pc_bounding_box_ground_z) = idVar(global::temp_edit, pc_bounding_box_ground_z) * add + val;
	}
	
	void action_lib_pc_bounding_box_relative(ScopeAny self, VarType relative)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_bounding_box_relative, idVar(global::temp_edit, pc_bounding_box_relative), relative, false);
		idVar(global::temp_edit, pc_bounding_box_relative) = relative;
	}
	
	void action_lib_pc_bounding_box_type(ScopeAny self, VarType type)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_bounding_box_type, idVar(global::temp_edit, pc_bounding_box_type), type, false);
		idVar(global::temp_edit, pc_bounding_box_type) = type;
	}
	
	void action_lib_pc_clear()
	{
		withAll (obj_timeline, noone)
			if (self->particle_list != null_)
				particle_spawner_clear(ScopeAny(self));
		
		withAll (obj_preview, noone)
			particle_spawner_clear(ScopeAny(self));
		
	}
	
	void action_lib_pc_destroy_at_amount(ScopeAny self, VarType destroy)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_amount, idVar(global::temp_edit, pc_destroy_at_amount), destroy, false);
		idVar(global::temp_edit, pc_destroy_at_amount) = destroy;
	}
	
	void action_lib_pc_destroy_at_amount_val(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_amount_val, idVar(global::temp_edit, pc_destroy_at_amount_val), idVar(global::temp_edit, pc_destroy_at_amount_val) * add + val, true);
		idVar(global::temp_edit, pc_destroy_at_amount_val) = idVar(global::temp_edit, pc_destroy_at_amount_val) * add + val;
	}
	
	void action_lib_pc_destroy_at_animation_finish(ScopeAny self, VarType destroy)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_animation_finish, idVar(global::temp_edit, pc_destroy_at_animation_finish), destroy, false);
		idVar(global::temp_edit, pc_destroy_at_animation_finish) = destroy;
	}
	
	void action_lib_pc_destroy_at_bounding_box(ScopeAny self, VarType destroy)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_bounding_box, idVar(global::temp_edit, pc_destroy_at_bounding_box), destroy, false);
		idVar(global::temp_edit, pc_destroy_at_bounding_box) = destroy;
	}
	
	void action_lib_pc_destroy_at_time(ScopeAny self, VarType destroy)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_time, idVar(global::temp_edit, pc_destroy_at_time), destroy, false);
		idVar(global::temp_edit, pc_destroy_at_time) = destroy;
	}
	
	void action_lib_pc_destroy_at_time_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_time_israndom, idVar(global::temp_edit, pc_destroy_at_time_israndom), israndom, false);
		idVar(global::temp_edit, pc_destroy_at_time_israndom) = israndom;
	}
	
	void action_lib_pc_destroy_at_time_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_time_random_max, idVar(global::temp_edit, pc_destroy_at_time_random_max), idVar(global::temp_edit, pc_destroy_at_time_random_max) * add + val, true);
		idVar(global::temp_edit, pc_destroy_at_time_random_max) = idVar(global::temp_edit, pc_destroy_at_time_random_max) * add + val;
	}
	
	void action_lib_pc_destroy_at_time_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_time_random_min, idVar(global::temp_edit, pc_destroy_at_time_random_min), idVar(global::temp_edit, pc_destroy_at_time_random_min) * add + val, true);
		idVar(global::temp_edit, pc_destroy_at_time_random_min) = idVar(global::temp_edit, pc_destroy_at_time_random_min) * add + val;
	}
	
	void action_lib_pc_destroy_at_time_seconds(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_destroy_at_time_seconds, idVar(global::temp_edit, pc_destroy_at_time_seconds), idVar(global::temp_edit, pc_destroy_at_time_seconds) * add + val, true);
		idVar(global::temp_edit, pc_destroy_at_time_seconds) = idVar(global::temp_edit, pc_destroy_at_time_seconds) * add + val;
	}
	
	RealType action_lib_pc_open(ScopeAny self)
	{
		StringType fn = file_dialog_open_particles();
		if (fn == /*""*/ STR(0))
			return IntType(0);
		particles_load(self, fn, global::temp_edit);
		return 0.0;
	}
	
	void action_lib_pc_spawn()
	{
		withAll (obj_timeline, noone)
		{
			if (self->type != e_temp_type_PARTICLE_SPAWNER)
				continue;
			if (self->temp == global::temp_edit || self->selected > 0)
			{
				if (idVar(self->temp, pc_spawn_constant) > 0)
					self->spawn_active = true;
				else
					self->fire = true;
				
			}
		}
		
	}
	
	void action_lib_pc_spawn_amount(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_amount, idVar(global::temp_edit, pc_spawn_amount), idVar(global::temp_edit, pc_spawn_amount) * add + val, true);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(pc_spawn_amount) = sVar(pc_spawn_amount) * add + val;
			temp_particles_restart(self);
		}
		
	}
	
	void action_lib_pc_spawn_constant(ScopeAny self, VarType constant)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_constant, idVar(global::temp_edit, pc_spawn_constant), constant, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(pc_spawn_constant) = constant;
			temp_particles_restart(self);
		}
		
	}
	
	void action_lib_pc_spawn_region_box_size(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_box_size, idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit), idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit) * add + val, true);
		idVar(global::temp_edit, pc_spawn_region_box_size)[global::axis_edit] = idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_spawn_region_cube_size(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_cube_size, idVar(global::temp_edit, pc_spawn_region_cube_size), idVar(global::temp_edit, pc_spawn_region_cube_size) * add + val, true);
		idVar(global::temp_edit, pc_spawn_region_cube_size) = idVar(global::temp_edit, pc_spawn_region_cube_size) * add + val;
	}
	
	void action_lib_pc_spawn_region_path(ScopeAny self, IntType path)
	{
		if (sReal(history_undo) > 0)
			path = save_id_find(ObjType(obj_history, global::history_data)->old_value);
		else
			if (sReal(history_redo) > 0)
				path = save_id_find(ObjType(obj_history, global::history_data)->new_value);
			else
				history_set_var(self, ID_action_lib_pc_type_temp, save_id_get(idVar(global::temp_edit, pc_spawn_region_path)), save_id_get(path), false);
		
		
		idVar(global::temp_edit, pc_spawn_region_path) = path;
	}
	
	void action_lib_pc_spawn_region_path_radius(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_path_radius, idVar(global::temp_edit, pc_spawn_region_path_radius), idVar(global::temp_edit, pc_spawn_region_path_radius) * add + val, true);
		idVar(global::temp_edit, pc_spawn_region_path_radius) = idVar(global::temp_edit, pc_spawn_region_path_radius) * add + val;
	}
	
	void action_lib_pc_spawn_region_sphere_radius(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_sphere_radius, idVar(global::temp_edit, pc_spawn_region_sphere_radius), idVar(global::temp_edit, pc_spawn_region_sphere_radius) * add + val, true);
		idVar(global::temp_edit, pc_spawn_region_sphere_radius) = idVar(global::temp_edit, pc_spawn_region_sphere_radius) * add + val;
	}
	
	void action_lib_pc_spawn_region_type(ScopeAny self, VarType type)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_type, idVar(global::temp_edit, pc_spawn_region_type), type, false);
		idVar(global::temp_edit, pc_spawn_region_type) = type;
	}
	
	void action_lib_pc_spawn_region_use(ScopeAny self, VarType use)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_spawn_region_use, idVar(global::temp_edit, pc_spawn_region_use), use, false);
		idVar(global::temp_edit, pc_spawn_region_use) = use;
	}
	
	void action_lib_pc_type_add(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (Object, global::temp_edit, self->id)
				temp_particles_type_remove(self, save_id_find(ObjType(obj_history, global::history_data)->ptype_save_id));
			
		}
		else
		{
			IntType hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_lib_pc_type_add);
			IntType ptype;
			withOne (Object, global::temp_edit, self->id)
				ptype = temp_particles_type_add(self);
			
			withOne (obj_history, hobj, self->id)
				self->ptype_save_id = save_id_get(ptype);
			
			sortlist_add(sInt(ptype_list), ptype);
			global::ptype_edit = ptype;
		}
		
		tab_template_editor_particles_preview_restart(self);
	}
	
	void action_lib_pc_type_alpha(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha, idVar(global::ptype_edit, alpha) * IntType(100), idVar(global::ptype_edit, alpha) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha) = idVar(global::ptype_edit, alpha) * add + val / 100.0;
	}
	
	void action_lib_pc_type_alpha_add(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_add, idVar(global::ptype_edit, alpha_add) * IntType(100), idVar(global::ptype_edit, alpha_add) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha_add) = idVar(global::ptype_edit, alpha_add) * add + val / 100.0;
	}
	
	void action_lib_pc_type_alpha_add_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_add_israndom, idVar(global::ptype_edit, alpha_add_israndom), israndom, true);
		idVar(global::ptype_edit, alpha_add_israndom) = israndom;
	}
	
	void action_lib_pc_type_alpha_add_random_max(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_add_random_max, idVar(global::ptype_edit, alpha_add_random_max) * IntType(100), idVar(global::ptype_edit, alpha_add_random_max) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha_add_random_max) = idVar(global::ptype_edit, alpha_add_random_max) * add + val / 100.0;
	}
	
	void action_lib_pc_type_alpha_add_random_min(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_add_random_min, idVar(global::ptype_edit, alpha_add_random_min) * IntType(100), idVar(global::ptype_edit, alpha_add_random_min) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha_add_random_min) = idVar(global::ptype_edit, alpha_add_random_min) * add + val / 100.0;
	}
	
	void action_lib_pc_type_alpha_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_israndom, idVar(global::ptype_edit, alpha_israndom), israndom, false);
		idVar(global::ptype_edit, alpha_israndom) = israndom;
	}
	
	void action_lib_pc_type_alpha_random_max(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_random_max, idVar(global::ptype_edit, alpha_random_max) * IntType(100), idVar(global::ptype_edit, alpha_random_max) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha_random_max) = idVar(global::ptype_edit, alpha_random_max) * add + val / 100.0;
	}
	
	void action_lib_pc_type_alpha_random_min(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_alpha_random_min, idVar(global::ptype_edit, alpha_random_min) * IntType(100), idVar(global::ptype_edit, alpha_random_min) * add * IntType(100) + val, true);
		idVar(global::ptype_edit, alpha_random_min) = idVar(global::ptype_edit, alpha_random_min) * add + val / 100.0;
	}
	
	void action_lib_pc_type_angle(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle, idVar(global::ptype_edit, angle).Value(global::axis_edit), idVar(global::ptype_edit, angle).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, angle)[global::axis_edit] = idVar(global::ptype_edit, angle).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_angle_extend(ScopeAny self, VarType extend)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_extend, idVar(global::ptype_edit, angle_extend), extend, false);
		idVar(global::ptype_edit, angle_extend) = extend;
	}
	
	void action_lib_pc_type_angle_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_israndom, idVar(global::ptype_edit, angle_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, angle_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_angle_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_random_max, idVar(global::ptype_edit, angle_random_max).Value(global::axis_edit), idVar(global::ptype_edit, angle_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, angle_random_max)[global::axis_edit] = idVar(global::ptype_edit, angle_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_angle_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_random_min, idVar(global::ptype_edit, angle_random_min).Value(global::axis_edit), idVar(global::ptype_edit, angle_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, angle_random_min)[global::axis_edit] = idVar(global::ptype_edit, angle_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_angle_speed(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed, idVar(global::ptype_edit, angle_speed), idVar(global::ptype_edit, angle_speed) * add + val, true);
		idVar(global::ptype_edit, angle_speed) = idVar(global::ptype_edit, angle_speed) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_add(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_add, idVar(global::ptype_edit, angle_speed_add), idVar(global::ptype_edit, angle_speed_add) * add + val, true);
		idVar(global::ptype_edit, angle_speed_add) = idVar(global::ptype_edit, angle_speed_add) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_add_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_add_israndom, idVar(global::ptype_edit, angle_speed_add_israndom), israndom, false);
		idVar(global::ptype_edit, angle_speed_add_israndom) = israndom;
	}
	
	void action_lib_pc_type_angle_speed_add_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_add_random_max, idVar(global::ptype_edit, angle_speed_add_random_max), idVar(global::ptype_edit, angle_speed_add_random_max) * add + val, true);
		idVar(global::ptype_edit, angle_speed_add_random_max) = idVar(global::ptype_edit, angle_speed_add_random_max) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_add_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_add_random_min, idVar(global::ptype_edit, angle_speed_add_random_min), idVar(global::ptype_edit, angle_speed_add_random_min) * add + val, true);
		idVar(global::ptype_edit, angle_speed_add_random_min) = idVar(global::ptype_edit, angle_speed_add_random_min) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_israndom, idVar(global::ptype_edit, angle_speed_israndom), israndom, false);
		idVar(global::ptype_edit, angle_speed_israndom) = israndom;
	}
	
	void action_lib_pc_type_angle_speed_mul(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_mul, idVar(global::ptype_edit, angle_speed_mul), idVar(global::ptype_edit, angle_speed_mul) * add + val, true);
		idVar(global::ptype_edit, angle_speed_mul) = idVar(global::ptype_edit, angle_speed_mul) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_mul_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_mul_israndom, idVar(global::ptype_edit, angle_speed_mul_israndom), israndom, false);
		idVar(global::ptype_edit, angle_speed_mul_israndom) = israndom;
	}
	
	void action_lib_pc_type_angle_speed_mul_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_mul_random_max, idVar(global::ptype_edit, angle_speed_mul_random_max), idVar(global::ptype_edit, angle_speed_mul_random_max) * add + val, true);
		idVar(global::ptype_edit, angle_speed_mul_random_max) = idVar(global::ptype_edit, angle_speed_mul_random_max) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_mul_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_mul_random_min, idVar(global::ptype_edit, angle_speed_mul_random_min), idVar(global::ptype_edit, angle_speed_mul_random_min) * add + val, true);
		idVar(global::ptype_edit, angle_speed_mul_random_min) = idVar(global::ptype_edit, angle_speed_mul_random_min) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_random_max, idVar(global::ptype_edit, angle_speed_random_max), idVar(global::ptype_edit, angle_speed_random_max) * add + val, true);
		idVar(global::ptype_edit, angle_speed_random_max) = idVar(global::ptype_edit, angle_speed_random_max) * add + val;
	}
	
	void action_lib_pc_type_angle_speed_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_angle_speed_random_min, idVar(global::ptype_edit, angle_speed_random_min), idVar(global::ptype_edit, angle_speed_random_min) * add + val, true);
		idVar(global::ptype_edit, angle_speed_random_min) = idVar(global::ptype_edit, angle_speed_random_min) * add + val;
	}
	
	void action_lib_pc_type_bounce(ScopeAny self, VarType bounce)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_bounce, idVar(global::ptype_edit, bounce), bounce, false);
		idVar(global::ptype_edit, bounce) = bounce;
	}
	
	void action_lib_pc_type_bounce_factor(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_bounce_factor, idVar(global::ptype_edit, bounce_factor), idVar(global::ptype_edit, bounce_factor) * add + val, true);
		idVar(global::ptype_edit, bounce_factor) = idVar(global::ptype_edit, bounce_factor) * add + val;
	}
	
	void action_lib_pc_type_bounding_box(ScopeAny self, VarType box)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_bounding_box, idVar(global::ptype_edit, bounding_box), box, false);
		idVar(global::ptype_edit, bounding_box) = box;
	}
	
	void action_lib_pc_type_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color, idVar(global::ptype_edit, color), color, true);
		idVar(global::ptype_edit, color) = color;
	}
	
	void action_lib_pc_type_color_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_israndom, idVar(global::ptype_edit, color_israndom), israndom, false);
		idVar(global::ptype_edit, color_israndom) = israndom;
	}
	
	void action_lib_pc_type_color_mix(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix, idVar(global::ptype_edit, color_mix), color, true);
		idVar(global::ptype_edit, color_mix) = color;
	}
	
	void action_lib_pc_type_color_mix_enabled(ScopeAny self, VarType enabled)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_enabled, idVar(global::ptype_edit, color_mix_enabled), enabled, false);
		idVar(global::ptype_edit, color_mix_enabled) = enabled;
	}
	
	void action_lib_pc_type_color_mix_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_israndom, idVar(global::ptype_edit, color_mix_israndom), israndom, false);
		idVar(global::ptype_edit, color_mix_israndom) = israndom;
	}
	
	void action_lib_pc_type_color_mix_random_end(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_random_end, idVar(global::ptype_edit, color_mix_random_end), color, true);
		idVar(global::ptype_edit, color_mix_random_end) = color;
	}
	
	void action_lib_pc_type_color_mix_random_start(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_random_start, idVar(global::ptype_edit, color_mix_random_start), color, true);
		idVar(global::ptype_edit, color_mix_random_start) = color;
	}
	
	void action_lib_pc_type_color_mix_time(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_time, idVar(global::ptype_edit, color_mix_time), idVar(global::ptype_edit, color_mix_time) * add + val, true);
		idVar(global::ptype_edit, color_mix_time) = idVar(global::ptype_edit, color_mix_time) * add + val;
	}
	
	void action_lib_pc_type_color_mix_time_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_time_israndom, idVar(global::ptype_edit, color_mix_time_israndom), israndom, false);
		idVar(global::ptype_edit, color_mix_time_israndom) = israndom;
	}
	
	void action_lib_pc_type_color_mix_time_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_time_random_max, idVar(global::ptype_edit, color_mix_time_random_max), idVar(global::ptype_edit, color_mix_time_random_max) * add + val, true);
		idVar(global::ptype_edit, color_mix_time_random_max) = idVar(global::ptype_edit, color_mix_time_random_max) * add + val;
	}
	
	void action_lib_pc_type_color_mix_time_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_mix_time_random_min, idVar(global::ptype_edit, color_mix_time_random_min), idVar(global::ptype_edit, color_mix_time_random_min) * add + val, true);
		idVar(global::ptype_edit, color_mix_time_random_min) = idVar(global::ptype_edit, color_mix_time_random_min) * add + val;
	}
	
	void action_lib_pc_type_color_random_end(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_random_end, idVar(global::ptype_edit, color_random_end), color, true);
		idVar(global::ptype_edit, color_random_end) = color;
	}
	
	void action_lib_pc_type_color_random_start(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_color_random_start, idVar(global::ptype_edit, color_random_start), color, true);
		idVar(global::ptype_edit, color_random_start) = color;
	}
	
	void action_lib_pc_type_duplicate(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (Object, global::temp_edit, self->id)
				temp_particles_type_remove(self, save_id_find(ObjType(obj_history, global::history_data)->copy_save_id));
			
		}
		else
		{
			IntType hobj, copy;
			hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_lib_pc_type_duplicate);
			withOne (Object, global::temp_edit, self->id)
				copy = temp_particles_type_duplicate(self, global::ptype_edit);
			
			withOne (obj_history, hobj, self->id)
				self->copy_save_id = save_id_get(copy);
			
			sortlist_add(sInt(ptype_list), copy);
			global::ptype_edit = copy;
		}
		
		tab_template_editor_particles_preview_restart(self);
	}
	
	void action_lib_pc_type_list(ScopeAny self, VarType type)
	{
		global::ptype_edit = type;
		tab_template_editor_particles_preview_restart(self);
	}
	
	void action_lib_pc_type_name(ScopeAny self, VarType name)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_name, idVar(global::ptype_edit, name), name, true);
		idVar(global::ptype_edit, name) = name;
	}
	
	void action_lib_pc_type_orbit(ScopeAny self, VarType orbit)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_orbit, idVar(global::ptype_edit, orbit), orbit, false);
		idVar(global::ptype_edit, orbit) = orbit;
	}
	
	void action_lib_pc_type_remove(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				global::ptype_edit = history_restore_ptype(self->save_ptype, global::temp_edit);
			
			withOne (Object, global::temp_edit, self->id)
				temp_particles_update_spawn_rate(self, global::ptype_edit, idVar(global::ptype_edit, spawn_rate));
			
			tab_template_editor_update_ptype_list(self);
		}
		else
		{
			VarType ptype;
			if (sReal(history_redo) > 0)
				ptype = save_id_find(ObjType(obj_history_save, ObjType(obj_history, global::history_data)->save_ptype)->save_id);
			else
			{
				ptype = global::ptype_edit;
				withOne (obj_history, history_set(self, ID_action_lib_pc_type_remove), self->id)
					self->save_ptype = history_save_ptype(ScopeAny(self), ptype);
				
			}
			
			withOne (Object, global::temp_edit, self->id)
				temp_particles_type_remove(self, ptype);
			
		}
		
		withOne (Object, global::temp_edit, self->id)
			temp_particles_restart(self);
		
	}
	
	void action_lib_pc_type_rot(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot, idVar(global::ptype_edit, rot).Value(global::axis_edit), idVar(global::ptype_edit, rot).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot)[global::axis_edit] = idVar(global::ptype_edit, rot).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_extend(ScopeAny self, VarType extend)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_extend, idVar(global::ptype_edit, rot_extend), extend, false);
		idVar(global::ptype_edit, rot_extend) = extend;
	}
	
	void action_lib_pc_type_rot_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_israndom, idVar(global::ptype_edit, rot_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, rot_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_rot_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_random_max, idVar(global::ptype_edit, rot_random_max).Value(global::axis_edit), idVar(global::ptype_edit, rot_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_random_max)[global::axis_edit] = idVar(global::ptype_edit, rot_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_random_min, idVar(global::ptype_edit, rot_random_min).Value(global::axis_edit), idVar(global::ptype_edit, rot_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_random_min)[global::axis_edit] = idVar(global::ptype_edit, rot_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd, idVar(global::ptype_edit, rot_spd).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd)[global::axis_edit] = idVar(global::ptype_edit, rot_spd).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_add(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_add, idVar(global::ptype_edit, rot_spd_add).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_add).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_add)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_add).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_add_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_add_israndom, idVar(global::ptype_edit, rot_spd_add_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, rot_spd_add_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_rot_spd_add_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_add_random_max, idVar(global::ptype_edit, rot_spd_add_random_max).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_add_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_add_random_max)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_add_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_add_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_add_random_min, idVar(global::ptype_edit, rot_spd_add_random_min).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_add_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_add_random_min)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_add_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_extend(ScopeAny self, VarType extend)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_extend, idVar(global::ptype_edit, rot_spd_extend), extend, false);
		idVar(global::ptype_edit, rot_spd_extend) = extend;
	}
	
	void action_lib_pc_type_rot_spd_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_israndom, idVar(global::ptype_edit, rot_spd_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, rot_spd_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_rot_spd_mul(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_mul, idVar(global::ptype_edit, rot_spd_mul).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_mul).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_mul)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_mul).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_mul_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_mul_israndom, idVar(global::ptype_edit, rot_spd_mul_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, rot_spd_mul_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_rot_spd_mul_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_mul_random_max, idVar(global::ptype_edit, rot_spd_mul_random_max).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_mul_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_mul_random_max)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_mul_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_mul_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_mul_random_min, idVar(global::ptype_edit, rot_spd_mul_random_min).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_mul_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_mul_random_min)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_mul_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_random_max, idVar(global::ptype_edit, rot_spd_random_max).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_random_max)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_rot_spd_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_rot_spd_random_min, idVar(global::ptype_edit, rot_spd_random_min).Value(global::axis_edit), idVar(global::ptype_edit, rot_spd_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, rot_spd_random_min)[global::axis_edit] = idVar(global::ptype_edit, rot_spd_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_scale(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale, idVar(global::ptype_edit, scale), idVar(global::ptype_edit, scale) * add + val, true);
		idVar(global::ptype_edit, scale) = idVar(global::ptype_edit, scale) * add + val;
	}
	
	void action_lib_pc_type_scale_add(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_add, idVar(global::ptype_edit, scale_add), idVar(global::ptype_edit, scale_add) * add + val, true);
		idVar(global::ptype_edit, scale_add) = idVar(global::ptype_edit, scale_add) * add + val;
	}
	
	void action_lib_pc_type_scale_add_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_add_israndom, idVar(global::ptype_edit, scale_add_israndom), israndom, false);
		idVar(global::ptype_edit, scale_add_israndom) = israndom;
	}
	
	void action_lib_pc_type_scale_add_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_add_random_max, idVar(global::ptype_edit, scale_add_random_max), idVar(global::ptype_edit, scale_add_random_max) * add + val, true);
		idVar(global::ptype_edit, scale_add_random_max) = idVar(global::ptype_edit, scale_add_random_max) * add + val;
	}
	
	void action_lib_pc_type_scale_add_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_add_random_min, idVar(global::ptype_edit, scale_add_random_min), idVar(global::ptype_edit, scale_add_random_min) * add + val, true);
		idVar(global::ptype_edit, scale_add_random_min) = idVar(global::ptype_edit, scale_add_random_min) * add + val;
	}
	
	void action_lib_pc_type_scale_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_israndom, idVar(global::ptype_edit, scale_israndom), israndom, false);
		idVar(global::ptype_edit, scale_israndom) = israndom;
	}
	
	void action_lib_pc_type_scale_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_random_max, idVar(global::ptype_edit, scale_random_max), idVar(global::ptype_edit, scale_random_max) * add + val, true);
		idVar(global::ptype_edit, scale_random_max) = idVar(global::ptype_edit, scale_random_max) * add + val;
	}
	
	void action_lib_pc_type_scale_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_scale_random_min, idVar(global::ptype_edit, scale_random_min), idVar(global::ptype_edit, scale_random_min) * add + val, true);
		idVar(global::ptype_edit, scale_random_min) = idVar(global::ptype_edit, scale_random_min) * add + val;
	}
	
	void action_lib_pc_type_spawn_rate(ScopeAny self, RealType val, VarType add)
	{
		RealType addval;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spawn_rate, idVar(global::ptype_edit, spawn_rate) * IntType(100), idVar(global::ptype_edit, spawn_rate) * add * IntType(100) + val, true);
		if (add > 0)
			addval = val / 100.0;
		else
			addval = val / 100.0 - idVar(global::ptype_edit, spawn_rate);
		
		idVar(global::ptype_edit, spawn_rate) += addval;
		withOne (Object, global::temp_edit, self->id)
		{
			temp_particles_update_spawn_rate(self, global::ptype_edit, addval);
			temp_particles_restart(self);
		}
		
	}
	
	void action_lib_pc_type_spawn_region(ScopeAny self, VarType region)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spawn_region, idVar(global::ptype_edit, spawn_region), region, false);
		idVar(global::ptype_edit, spawn_region) = region;
	}
	
	void action_lib_pc_type_spd(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd, idVar(global::ptype_edit, spd).Value(global::axis_edit), idVar(global::ptype_edit, spd).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, spd)[global::axis_edit] = idVar(global::ptype_edit, spd).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_spd_add(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_add, idVar(global::ptype_edit, spd_add).Value(global::axis_edit), idVar(global::ptype_edit, spd_add).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, spd_add)[global::axis_edit] = idVar(global::ptype_edit, spd_add).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_spd_add_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_add_israndom, idVar(global::ptype_edit, spd_add_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, spd_add_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_spd_add_random_max(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_add_random_max, idVar(global::ptype_edit, spd_add_random_max).Value(global::axis_edit), idVar(global::ptype_edit, spd_add_random_max).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, spd_add_random_max)[global::axis_edit] = idVar(global::ptype_edit, spd_add_random_max).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_spd_add_random_min(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_add_random_min, idVar(global::ptype_edit, spd_add_random_min).Value(global::axis_edit), idVar(global::ptype_edit, spd_add_random_min).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, spd_add_random_min)[global::axis_edit] = idVar(global::ptype_edit, spd_add_random_min).Value(global::axis_edit) * add + val;
	}
	
	void action_lib_pc_type_spd_extend(ScopeAny self, VarType extend)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_extend, idVar(global::ptype_edit, spd_extend), extend, false);
		idVar(global::ptype_edit, spd_extend) = extend;
	}
	
	void action_lib_pc_type_spd_israndom(ScopeAny self, VarType israndom)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_israndom, idVar(global::ptype_edit, spd_israndom).Value(global::axis_edit), israndom, false);
		idVar(global::ptype_edit, spd_israndom)[global::axis_edit] = israndom;
	}
	
	void action_lib_pc_type_spd_mul(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_pc_type_spd_mul, idVar(global::ptype_edit, spd_mul).Value(global::axis_edit), idVar(global::ptype_edit, spd_mul).Value(global::axis_edit) * add + val, true);
		idVar(global::ptype_edit, spd_mul)[global::axis_edit] = idVar(global::ptype_edit, spd_mul).Value(global::axis_edit) * add + val;
	}
	
}
