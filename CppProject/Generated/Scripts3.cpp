/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.19 13:27:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType action_bench_block_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_block_tex_normal, fn, ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_bench_create(ScopeAny self, BoolType edit)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType s = IntType(0); s < self->spawn_amount; s++)
				{
					withOne (Object, save_id_find(self->spawn_save_id.Value(s)), self->id)
					{
						if (self->subAssetId == ID_obj_timeline)
							tl_remove_clean(self);
						instance_destroy(self);
					}
					
				}
			}
			
		}
		else
		{
			IntType hobj, tl;
			hobj = null_;
			if (sReal(history_redo) > 0)
			{
				history_restore_bench(self, ObjType(obj_history, global::history_data)->bench_save_obj);
				if (ObjType(obj_history, global::history_data)->open_editor)
				{
					tab_template_editor_update_ptype_list(self);
					tab_show(self, sInt(template_editor));
				}
			}
			else
			{
				hobj = history_set(self, ID_action_bench_create);
				ObjType(obj_history, hobj)->bench_save_obj = history_save_bench(self);
				ObjType(obj_history, hobj)->spawn_amount = IntType(0);
				ObjType(obj_history, hobj)->open_editor = edit;
				if (edit)
					tab_show(self, sInt(template_editor));
			}
			
			if (type_is_timeline(ObjType(obj_bench_settings, sInt(bench_settings))->type))
			{
				tl = new_tl(ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_LIGHT_SOURCE ? ObjType(obj_bench_settings, sInt(bench_settings))->light_type : ObjType(obj_bench_settings, sInt(bench_settings))->type);
				withOne (obj_history, hobj, self->id)
				{
					self->spawn_save_id[self->spawn_amount] = ObjType(obj_timeline, tl)->save_id;
					self->spawn_amount++;
				}
				
				if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_CAMERA)
					ObjType(obj_view, sInt(view_second))->show = true;
			}
			else
			{
				withOne (obj_bench_settings, sInt(bench_settings), self->id)
				{
					IntType temp = temp_duplicate(ScopeAny(self));
					if (ObjType(obj_template, temp)->type != e_temp_type_CUBE && ObjType(obj_template, temp)->type != e_temp_type_CYLINDER && ObjType(obj_template, temp)->type != e_temp_type_CONE)
						ObjType(obj_template, temp)->shape_tex_mapped = false;
					if (ObjType(obj_template, temp)->type == e_temp_type_PARTICLE_SPAWNER)
						ObjType(obj_template, temp)->pc_spawn_region_path = null_;
					withOne (obj_history, hobj, self->id)
					{
						self->spawn_save_id[self->spawn_amount] = ObjType(obj_template, temp)->save_id;
						self->spawn_amount++;
					}
					
					withOne (obj_template, temp, self->id)
					{
						if (self->type != e_temp_type_MODEL && self->model != null_)
						{
							idInt(self->model, count)--;
							self->model = null_;
						}
						if (self->type != e_temp_type_CHARACTER && self->type != e_temp_type_SPECIAL_BLOCK && self->type != e_temp_type_BODYPART && self->type != e_temp_type_MODEL)
						{
							if (self->model_tex != null_)
								idInt(self->model_tex, count)--;
							if (self->model_tex_material != null_)
								idInt(self->model_tex_material, count)--;
							if (self->model_tex_normal != null_)
								idInt(self->model_tex_normal, count)--;
							self->model_tex = null_;
							self->model_tex_material = null_;
							self->model_tex_normal = null_;
							self->model_file = null_;
							self->model_part = null_;
							self->model_state = ArrType();
						}
						if (self->type != e_temp_type_ITEM)
						{
							idInt(self->item_tex, count)--;
							if (self->item_tex_material != null_)
								idInt(self->item_tex_material, count)--;
							if (self->item_tex_normal != null_)
								idInt(self->item_tex_normal, count)--;
							self->item_tex = null_;
							self->item_tex_material = null_;
							self->item_tex_normal = null_;
						}
						if (self->type != e_temp_type_BLOCK && self->type != e_temp_type_SCENERY)
						{
							idInt(self->block_tex, count)--;
							self->block_tex = null_;
							idInt(self->block_tex_material, count)--;
							self->block_tex_material = null_;
							idInt(self->block_tex_normal, count)--;
							self->block_tex_normal = null_;
							self->block_state = ArrType();
						}
						if (self->type != e_temp_type_SCENERY && self->scenery != null_)
						{
							idInt(self->scenery, count)--;
							self->scenery = null_;
						}
						if (!type_is_shape(self->type))
						{
							if (self->shape_tex != null_)
							{
								if (idVar(self->shape_tex, type) != e_tl_type_CAMERA)
									idInt(self->shape_tex, count)--;
								self->shape_tex = null_;
							}
							if (self->shape_tex_material != null_)
							{
								idInt(self->shape_tex_material, count)--;
								self->shape_tex_material = null_;
							}
							if (self->shape_tex_normal != null_)
							{
								idInt(self->shape_tex_normal, count)--;
								self->shape_tex_normal = null_;
							}
						}
						if (self->type != e_temp_type_TEXT)
						{
							idInt(self->text_font, count)--;
							self->text_font = null_;
						}
						tl = temp_animate(ScopeAny(self));
						sortlist_add(global::_app->lib_list, self->id);
					}
					
					global::temp_edit = temp;
				}
				
				withAll (obj_template, self->id)
				{
					if (self->creator != global::_app->bench_settings)
						continue;
					sortlist_add(global::_app->lib_list, self->id);
					self->creator = global::_app->id;
					if (self->model_tex != null_)
						idInt(self->model_tex, count)++;
					if (self->model_tex_material != null_)
						idInt(self->model_tex_material, count)++;
					if (self->model_tex_normal != null_)
						idInt(self->model_tex_normal, count)++;
					if (self->item_tex != null_)
						idInt(self->item_tex, count)++;
					if (self->item_tex_material != null_)
						idInt(self->item_tex_material, count)++;
					if (self->item_tex_normal != null_)
						idInt(self->item_tex_normal, count)++;
					if (self->block_tex != null_)
						idInt(self->block_tex, count)++;
					if (self->block_tex_material != null_)
						idInt(self->block_tex_material, count)++;
					if (self->block_tex_normal != null_)
						idInt(self->block_tex_normal, count)++;
					if (self->scenery > IntType(0))
						idInt(self->scenery, count)++;
					if (self->shape_tex != null_ && idVar(self->shape_tex, type) != e_tl_type_CAMERA)
						idInt(self->shape_tex, count)++;
					if (self->shape_tex_material != null_)
						idInt(self->shape_tex_material, count)++;
					if (self->shape_tex_normal != null_)
						idInt(self->shape_tex_normal, count)++;
					if (self->text_font != null_)
						idInt(self->text_font, count)++;
					withOne (obj_history, hobj, self->id)
					{
						self->spawn_save_id[self->spawn_amount] = ObjType(obj_template, self.otherId)->save_id;
						self->spawn_amount++;
					}
					
				}
				
			}
			
			if (sReal(history_redo) > 0)
			{
				withOne (obj_bench_settings, sInt(bench_settings), self->id)
					temp_particles_type_clear(ScopeAny(self));
				
				withOne (obj_timeline, tl, self->id)
				{
					self->value_default[e_value_POS_X] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_Z);
					self->value_default[e_value_ROT_X] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_X);
					self->value_default[e_value_ROT_Y] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_Y);
					self->value_default[e_value_ROT_Z] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_Z);
					self->value[e_value_POS_X] = self->value_default.Value(e_value_POS_X);
					self->value[e_value_POS_Y] = self->value_default.Value(e_value_POS_Y);
					self->value[e_value_POS_Z] = self->value_default.Value(e_value_POS_Z);
					self->value[e_value_ROT_X] = self->value_default.Value(e_value_ROT_X);
					self->value[e_value_ROT_Y] = self->value_default.Value(e_value_ROT_Y);
					self->value[e_value_ROT_Z] = self->value_default.Value(e_value_ROT_Z);
					tl_set_parent(ScopeAny(self), { ObjType(obj_history, global::history_data)->parent });
				}
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
				{
					self->value_default[e_value_POS_X] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_Z);
					self->value_default[e_value_ROT_X] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_X);
					self->value_default[e_value_ROT_Y] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_Y);
					self->value_default[e_value_ROT_Z] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_Z);
					self->parent = global::_app->id;
				}
				
				if (sVar(setting_place_new) > 0 && !keyboard_check(vk_shift) && ObjType(obj_timeline, tl)->type != e_tl_type_FOLDER && ObjType(obj_timeline, tl)->type != e_tl_type_CAMERA && (ObjType(obj_timeline, tl)->type != e_tl_type_SCENERY || idVar(ObjType(obj_timeline, tl)->temp, scenery) != null_) && (ObjType(obj_timeline, tl)->type != e_tl_type_MODEL || idVar(ObjType(obj_timeline, tl)->temp, model) != null_) && ObjType(obj_timeline, tl)->value_type.Value(e_value_type_TRANSFORM_POS))
					app_start_place(self, tl, true);
				log({ /*"Created"*/ STR(6), DsList(global::tl_type_name_list).Value(ObjType(obj_bench_settings, sInt(bench_settings))->type) });
			}
			
		}
		
		if (!(sReal(history_redo) > 0) && edit)
			tab_template_editor_update_ptype_list(self);
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_PARTICLE_SPAWNER)
		{
			if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
				bench_update_particles_list(self);
			particle_spawner_clear(self);
			preview_reset_view(self);
			sBool(update) = true;
		}
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_bench_item_3d(ScopeAny self, VarType enable)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->item_3d = enable;
			render_generate_item(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	void action_bench_item_bounce(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->item_bounce = enable;
	}
	
	void action_bench_item_face_camera(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->item_face_camera = enable;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	void action_bench_item_slot(ScopeAny self, VarType index)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->item_slot = index;
			render_generate_item(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	void action_bench_item_spin(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->item_spin = enable;
	}
	
	RealType action_bench_item_tex(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_bench_item_tex);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_bench_item_tex, fn, ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->item_tex = res;
			render_generate_item(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	RealType action_bench_item_tex_material(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_bench_item_tex_material);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_bench_item_tex_material, fn, ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->item_tex_material = res;
			render_generate_item(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	RealType action_bench_item_tex_normal(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_bench_item_tex_normal);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_bench_item_tex_normal, fn, ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->item_tex_normal = res;
			render_generate_item(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_bench_light_type(ScopeAny self, VarType type)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_bench_light_type, ObjType(obj_bench_settings, sInt(bench_settings))->light_type, type, true);
		ObjType(obj_bench_settings, sInt(bench_settings))->light_type = type;
	}
	
	RealType action_bench_model(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_model();
					if (!file_exists_lib(fn))
						return IntType(0);
					if (filename_ext(fn) == /*".zip"*/ STR(7))
					{
						fn = unzip_model(fn);
						if (!file_exists_lib(fn))
							return IntType(0);
					}
					res = new_res(self, fn, e_res_type_MODEL);
					if (idBool(res, replaced))
					{
						global::res_edit = res;
						action_res_replace(self, { fn });
					}
					else
						withOne (Object, res, self->id)
							res_load(self);
					
					
				}
				history_set_res(self, ID_action_bench_model, fn, ObjType(obj_bench_settings, sInt(bench_settings))->model, res);
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->model = res;
			temp_update_model(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			withOne (obj_preview, self->preview, self->id)
			{
				preview_reset_view(ScopeAny(self));
				self->update = true;
			}
			
		}
		
		return 0.0;
	}
	
	void action_bench_model_blend_color(ScopeAny self, VarType col)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->model_blend_color = col;
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
		}
		
	}
	
	RealType action_bench_model_name(ScopeAny self, VarType name)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			StringType s;
			if (self->type == e_temp_type_CHARACTER)
				s = string_lower(ObjType(obj_textbox, ObjType(obj_sortlist, self->char_list)->search_tbx)->text);
			else
				if (self->type == e_temp_type_SPECIAL_BLOCK)
					s = string_lower(ObjType(obj_textbox, ObjType(obj_sortlist, self->special_block_list)->search_tbx)->text);
				else
					if (self->type == e_temp_type_BODYPART)
						s = string_lower(ObjType(obj_textbox, ObjType(obj_sortlist, self->bodypart_model_list)->search_tbx)->text);
			
			
			if (self->model_name == name && s == /*""*/ STR(0))
				return IntType(0);
			self->model_name = name;
			self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
			if (s != /*""*/ STR(0) && !string_contains(string_lower(minecraft_asset_get_name(/*"model"*/ STR(8), self->model_name)), s))
			{
				VarType m, state, val;
				m = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(name);
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->model_state)); i += IntType(2))
				{
					VarType state = self->model_state.Value(i);
					IntType statelist = DsMap(ObjType(obj_model, m)->states_map).Value(state);
					for (IntType j = IntType(0); j < idReal(statelist, value_amount); j++)
					{
						val = idVar(statelist, value_name).Value(j);
						if (string_contains(string_lower(minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), val)), s))
						{
							state_vars_set_value(VarType::CreateRef(self->model_state), state, val);
							break;
						}
					}
				}
			}
			temp_update_model(ScopeAny(self));
			if (self->type == e_temp_type_BODYPART)
				temp_update_model_part(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			model_shape_update_color(ScopeAny(self));
			if (self->pattern_type != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), self->id);
			temp_update_armor(self->id);
			withOne (obj_preview, self->preview, self->id)
			{
				preview_reset_view(ScopeAny(self));
				self->update = true;
			}
			
		}
		
		return 0.0;
	}
	
	RealType action_bench_model_part_name(ScopeAny self, VarType name)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			if (self->model_part_name == name)
				return IntType(0);
			self->model_part_name = name;
			temp_update_model_part(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			model_shape_update_color(ScopeAny(self));
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
		}
		
		return 0.0;
	}
	
	RealType action_bench_model_state(ScopeAny self, StringType val)
	{
		VarType state = idVar(sInt(menu_model_state), name);
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			if (state_vars_get_value(self->model_state, state) == val)
				return IntType(0);
			state_vars_set_value(VarType::CreateRef(self->model_state), state, val);
			temp_update_model(ScopeAny(self));
			temp_update_model_part(ScopeAny(self));
			temp_update_model_shape(ScopeAny(self));
			model_shape_update_color(ScopeAny(self));
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
		}
		
		return 0.0;
	}
	
	RealType action_bench_model_tex(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_MODEL && ObjType(obj_bench_settings, sInt(bench_settings))->model != null_ && idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model, model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_file != null_)
							idVar(res, player_skin) = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
					case e_option_DOWNLOAD_SKIN:
					{
						popup_downloadskin_show(self, ID_action_bench_model_tex);
						return IntType(0);
					}
					
					case e_option_DOWNLOAD_SKIN_DONE:
					{
						directory_create_lib(skins_directory_get());
						fn = skins_directory_get() + ObjType(obj_popup, sInt(popup_downloadskin))->username + /*".png"*/ STR(10);
						file_copy_lib(download_image_file, fn);
						res = new_res(self, fn, e_res_type_DOWNLOADED_SKIN);
						idVar(res, player_skin) = true;
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_bench_model_tex, fn, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, res);
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->model_tex = res;
			temp_update_model_shape(ScopeAny(self));
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
			if (self->pattern_type != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), self->id);
			temp_update_armor(self->id);
		}
		
		return 0.0;
	}
	
	RealType action_bench_model_tex_material(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_MODEL && ObjType(obj_bench_settings, sInt(bench_settings))->model != null_ && idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model, model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_file != null_)
							idVar(res, player_skin) = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_bench_model_tex_material, fn, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, res);
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->model_tex_material = res;
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
		}
		
		return 0.0;
	}
	
	RealType action_bench_model_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_MODEL && ObjType(obj_bench_settings, sInt(bench_settings))->model != null_ && idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model, model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_file != null_)
							idVar(res, player_skin) = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_bench_model_tex_normal, fn, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, res);
			}
		
		
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->model_tex_normal = res;
			withOne (obj_preview, self->preview, self->id)
				self->update = true;
			
		}
		
		return 0.0;
	}
	
	RealType action_bench_particles(ScopeAny self, StringType fn)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->particle_preset = fn;
		if (fn == /*""*/ STR(0))
			return IntType(0);
		global::temp_creator = sInt(bench_settings);
		bench_clear();
		particles_load(self, fn, sInt(bench_settings));
		global::temp_creator = global::_app->id;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->fire = true;
		return 0.0;
	}
	
	RealType action_bench_scenery(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				StringType fn = /*""*/ STR(0);
				if (res == e_option_IMPORT_WORLD)
				{
					world_import_begin(self, false);
					return IntType(0);
				}
				else
					if (res == e_option_BROWSE)
					{
						fn = file_dialog_open_scenery();
						if (!file_exists_lib(fn))
							return IntType(0);
						res = new_res(self, fn, e_res_type_SCENERY);
						if (idBool(res, replaced))
						{
							global::res_edit = res;
							action_res_replace(self, { fn });
						}
						else
							withOne (Object, res, self->id)
								res_load(self);
						
						
					}
				
				history_set_res(self, ID_action_bench_scenery, fn, ObjType(obj_bench_settings, sInt(bench_settings))->scenery, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->scenery = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_bench_shape_face_camera(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->shape_face_camera = enable;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	RealType action_bench_shape_tex(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				StringType fn = /*""*/ STR(0);
				if (res == e_option_BROWSE)
				{
					StringType fn = file_dialog_open_image();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_shape_tex, fn, ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_bench_shape_tex_map(ScopeAny self, VarType enable)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			self->shape_tex_mapped = enable;
			temp_update_shape(ScopeAny(self));
		}
		
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	RealType action_bench_shape_tex_material(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				StringType fn = /*""*/ STR(0);
				if (res == e_option_BROWSE)
				{
					StringType fn = file_dialog_open_image();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_shape_tex_material, fn, ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	RealType action_bench_shape_tex_normal(ScopeAny self, IntType res)
	{
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				StringType fn = /*""*/ STR(0);
				if (res == e_option_BROWSE)
				{
					StringType fn = file_dialog_open_image();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_shape_tex_normal, fn, ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
}
