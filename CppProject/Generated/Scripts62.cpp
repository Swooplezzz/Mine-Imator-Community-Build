/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void tab_settings_controls(ScopeAny self)
	{
		tab_control(self, IntType(20));
		draw_label(self, { text_get({ /*"settingscontrolskeybinds"*/ STR(3521) }) + /*":"*/ STR(788), sVar(dx), sVar(dy) + IntType(10), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"file"*/ STR(121), DsMap(global::collapse_map).Value(/*"file"*/ STR(121)), null_, true, /*"settingscontrolsfile"*/ STR(3522));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"file"*/ STR(121)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_PROJECT_NEW, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_OPEN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_SAVE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_SAVE_AS, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_IMPORT_ASSET, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"edit"*/ STR(122), DsMap(global::collapse_map).Value(/*"edit"*/ STR(122)), null_, true, /*"settingscontrolsedit"*/ STR(3523));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"edit"*/ STR(122)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_UNDO, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_REDO, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_DELETE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_DUPLICATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_SELECT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_HIDE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_SHOW_HIDDEN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CREATE_FOLDER, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_CREATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_COPY, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_CUT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_PASTE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_DELETE, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"tools"*/ STR(123), DsMap(global::collapse_map).Value(/*"tools"*/ STR(123)), null_, true, /*"settingscontrolstools"*/ STR(3524));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"tools"*/ STR(123)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_TOOL_SELECT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_MOVE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_ROTATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_SCALE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_BEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_TRANSFORM, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_SNAP, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"viewport"*/ STR(124), DsMap(global::collapse_map).Value(/*"viewport"*/ STR(124)), null_, true, /*"settingscontrolsviewport"*/ STR(3525));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"viewport"*/ STR(124)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_RENDER_MODE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PARTICLES_SPAWN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PARTICLES_CLEAR, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_SECONDARY_VIEW, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"timeline"*/ STR(125), DsMap(global::collapse_map).Value(/*"timeline"*/ STR(125)), null_, true, /*"settingscontrolstimeline"*/ STR(3526));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"timeline"*/ STR(125)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_PLAY, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PLAY_BEGINNING, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_MARKER_LEFT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_MARKER_RIGHT, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"camera"*/ STR(126), DsMap(global::collapse_map).Value(/*"camera"*/ STR(126)), null_, true, /*"settingscontrolscamera"*/ STR(3527));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"camera"*/ STR(126)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_CAM_FORWARD, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_BACK, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_LEFT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_RIGHT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ASCEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_DESCEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_FORWARD, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_BACK, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_RESET, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_RESET, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_FAST, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_SLOW, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_VIEW_TIMELINE, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsmovespeed"*/ STR(3528), sVar(dx), sVar(dy), dragger_width, sReal(setting_move_speed), 0.01, IntType(0), no_limit, IntType(1), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_move_speed, ID_action_setting_move_speed);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingslooksensitivity"*/ STR(3529), sVar(dx), sVar(dy), dragger_width, sReal(setting_look_sensitivity), 0.01, IntType(0), no_limit, IntType(1), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_look_sensitivity, ID_action_setting_look_sensitivity);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsfastmodifier"*/ STR(3530), sVar(dx), sVar(dy), dragger_width, sReal(setting_fast_modifier), 0.01, IntType(0), no_limit, IntType(3), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_fast_modifier, ID_action_setting_fast_modifier);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsslowmodifier"*/ STR(3531), sVar(dx), sVar(dy), dragger_width, sReal(setting_slow_modifier), 0.01, IntType(0), no_limit, 0.25, IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_slow_modifier, ID_action_setting_slow_modifier);
		tab_next(self);
		tab_control_button_label(self);
		draw_button_label(self, /*"settingscontrolsrestoredefaults"*/ STR(3532), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy), null_, icons_RESET, e_button_PRIMARY, ID_action_restore_controls, fa_middle);
		tab_next(self);
	}
	
	void tab_settings_interface(ScopeAny self)
	{
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingsappearance"*/ STR(3533) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"settingsthemelight"*/ STR(3534), null_, global::theme_light, sInt(setting_theme) == global::theme_light, ID_action_setting_theme });
		togglebutton_add(self, { /*"settingsthemedark"*/ STR(3535), null_, global::theme_dark, sInt(setting_theme) == global::theme_dark, ID_action_setting_theme });
		togglebutton_add(self, { /*"settingsthemedarker"*/ STR(3536), null_, global::theme_darker, sInt(setting_theme) == global::theme_darker, ID_action_setting_theme });
		draw_togglebutton(self, /*"settingstheme"*/ STR(3537), sVar(dx), sVar(dy), true, true);
		tab_next(self);
		VarType accentboxx, accentboxy;
		RealType accentboxw, accentboxh;
		accentboxx = sVar(dx);
		accentboxy = sVar(dy) + IntType(22);
		accentboxw = (sVar(dw) - (IntType(7) * IntType(4))) / 5.0;
		accentboxh = (global::_app->panel_compact > 0) ? IntType(24) : IntType(48);
		tab_control(self, (accentboxh * IntType(2)) + IntType(7) + IntType(22));
		draw_label(self, { text_get({ /*"settingsaccentcolor"*/ STR(3538) }), sVar(dx), accentboxy - IntType(7), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		for (IntType i = IntType(0); i < IntType(10); i++)
		{
			if (draw_button_accent(self, accentboxx, accentboxy, accentboxw, accentboxh, i) && i == IntType(9))
			{
				colorpicker_show(self, /*"settingsaccentcolor"*/ STR(3538), sVar(setting_accent_custom), sVar(setting_accent_custom), ID_action_setting_accent_custom, accentboxx, accentboxy, accentboxw, accentboxh);
				sVar(update_interface_timeout) = current_time() + IntType(10000);
				sBool(update_interface_wait) = true;
			}
			accentboxx += accentboxw + IntType(7);
			if (i == IntType(4))
			{
				accentboxx = sVar(dx);
				accentboxy += IntType(7) + accentboxh;
			}
		}
		tab_next(self);
		sVar(dy) += IntType(5);
		tab_control_menu(self);
		draw_button_menu(self, { /*"settingslanguage"*/ STR(1507), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sStr(setting_language_filename), text_get({ /*"filelanguage"*/ STR(1268) }), null_, false, null_, null_, text_get({ /*"filelocale"*/ STR(1269) }), null_, null_ });
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"settingslanguagefolder"*/ STR(3539), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_FOLDER, null_, false, /*"tooltiplanguagefolder"*/ STR(3540) }))
			open_url(languages_directory);
		draw_button_icon(self, { /*"settingslanguageadd"*/ STR(3541), sVar(dx) + IntType(24) + IntType(4), sVar(dy), IntType(24), IntType(24), false, icons_PLUS, ID_language_add, false, /*"tooltiplanguageadd"*/ STR(3542) });
		tab_next(self);
		if (interface_scale_default_get() > IntType(1))
		{
			tab_control_switch(self);
			draw_switch(self, /*"settingsinterfacescaleauto"*/ STR(3543), sVar(dx), sVar(dy), sVar(setting_interface_scale_auto), ID_action_setting_interface_scale_auto, /*"settingsinterfacescaleautotip"*/ STR(3544));
			tab_next(self);
			if (!(sVar(setting_interface_scale_auto) > 0))
			{
				tab_control_meter(self);
				draw_button_menu(self, { /*"settingsinterfacescale"*/ STR(1515), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(setting_interface_scale), string(sVar(setting_interface_scale) * IntType(100)) + /*"%"*/ STR(220), ID_action_setting_interface_scale });
				tab_next(self);
			}
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingscompact"*/ STR(3545), sVar(dx), sVar(dy), sVar(setting_interface_compact), ID_action_setting_interface_compact);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingscompacttimeline"*/ STR(3546), sVar(dx), sVar(dy), sReal(setting_timeline_compact), ID_action_setting_timeline_compact);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsreducedmotion"*/ STR(3547), sVar(dx), sVar(dy), sVar(setting_reduced_motion), ID_action_setting_reduced_motion);
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingstimeline"*/ STR(3548) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineautoscroll"*/ STR(3549), sVar(dx), sVar(dy), sVar(setting_timeline_autoscroll), ID_action_setting_timeline_autoscroll);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineselectjump"*/ STR(3550), sVar(dx), sVar(dy), sVar(setting_timeline_select_jump), ID_action_setting_timeline_select_jump);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineframesnap"*/ STR(3551), sVar(dx), sVar(dy), sVar(setting_timeline_frame_snap), ID_action_setting_timeline_frame_snap, /*"settingstimelineframesnaptip"*/ STR(3552));
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingstools"*/ STR(3553) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingszisup"*/ STR(3554), sVar(dx), sVar(dy), sReal(setting_z_is_up), ID_action_setting_z_is_up);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsseparatetoolmodes"*/ STR(3555), sVar(dx), sVar(dy), sVar(setting_separate_tool_modes), ID_action_setting_separate_tool_modes, /*"settingsseparatetoolmodestip"*/ STR(3556));
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingsviewport"*/ STR(3557) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingsgizmosfacecamera"*/ STR(3558), sVar(dx), sVar(dy), sVar(setting_gizmos_face_camera), ID_action_setting_gizmos_face_camera);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsfadegizmos"*/ STR(3559), sVar(dx), sVar(dy), sVar(setting_fade_gizmos), ID_action_setting_fade_gizmos);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingscameralockmouse"*/ STR(3560), sVar(dx), sVar(dy), sVar(setting_camera_lock_mouse), ID_action_setting_camera_lock_mouse);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsplacenew"*/ STR(3561), sVar(dx), sVar(dy), sVar(setting_place_new), ID_action_setting_place_new);
		tab_next(self);
	}
	
	void tab_settings_program(ScopeAny self)
	{
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"settingsmodesimple"*/ STR(3562), null_, false, !(sReal(setting_advanced_mode) > 0), ID_action_setting_program_mode });
		togglebutton_add(self, { /*"settingsmodeadvanced"*/ STR(3563), null_, true, sReal(setting_advanced_mode), ID_action_setting_program_mode });
		draw_togglebutton(self, /*"settingsmode"*/ STR(3564), sVar(dx), sVar(dy), true, true);
		tab_next(self);
		draw_tooltip_label(self, (sReal(setting_advanced_mode) > 0) ? /*"settingsmodeadvancedtip"*/ STR(3565) : /*"settingsmodesimpletip"*/ STR(3566), icons_INFO, e_toast_INFO);
		tab_control_menu(self);
		draw_button_menu(self, { /*"settingsminecraftversion"*/ STR(1445), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sStr(setting_minecraft_assets_version), sStr(setting_minecraft_assets_version), ID_action_setting_minecraft_assets_version, false, null_, null_, /*""*/ STR(0), c_white, c_white });
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"backup"*/ STR(120), DsMap(global::collapse_map).Value(/*"backup"*/ STR(120)), ID_action_setting_backup, sVar(setting_backup), /*"settingsbackup"*/ STR(3567));
		tab_next(self);
		if (sVar(setting_backup) > 0 && DsMap(global::collapse_map).Value(/*"backup"*/ STR(120)) > 0)
		{
			tab_collapse_start(self);
			ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_time)->suffix = text_get({ /*"settingsbackuptimeminutes"*/ STR(3568) });
			tab_control_dragger(self);
			draw_dragger(self, /*"settingsbackuptime"*/ STR(3569), sVar(dx), sVar(dy), dragger_width, sReal(setting_backup_time), 0.1, IntType(1), IntType(120), IntType(3), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_time, ID_action_setting_backup_time);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"settingsbackupamount"*/ STR(3570), sVar(dx), sVar(dy), dragger_width, sReal(setting_backup_amount), 0.1, IntType(1), IntType(20), IntType(5), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_amount, ID_action_setting_backup_amount);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"watermark"*/ STR(33), DsMap(global::collapse_map).Value(/*"watermark"*/ STR(33)), ID_action_setting_watermark_custom, sVar(setting_watermark_custom), /*"settingswatermark"*/ STR(3571));
		tab_next(self);
		if (sVar(setting_watermark_custom) > 0 && DsMap(global::collapse_map).Value(/*"watermark"*/ STR(33)) > 0)
		{
			tab_collapse_start(self);
			VarType directory = /*"../"*/ STR(2097) + directory_name(sStr(setting_watermark_fn)) + filename_name(sStr(setting_watermark_fn));
			if (sStr(setting_watermark_fn) == /*""*/ STR(0))
				directory = text_get({ /*"settingswatermarknone"*/ STR(3572) });
			tab_control(self, IntType(40));
			draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(56), IntType(40), text_get({ /*"settingswatermarkimagelocation"*/ STR(3573) }), directory, true);
			if (draw_button_icon(self, { /*"settingswatermarkimport"*/ STR(3574), sVar(dx) + sVar(dw) - (IntType(24) + IntType(4) + IntType(24)), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_ASSET_IMPORT, null_, false, /*"tooltipimportwatermarkimage"*/ STR(3575) }))
				action_setting_watermark_import(self);
			if (draw_button_icon(self, { /*"settingswatermarkreset"*/ STR(3576), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_RESET, null_, false, /*"tooltipresetwatermarkimage"*/ STR(3577) }))
				action_setting_watermark_reset(self);
			tab_next(self);
			sVar(dy) += label_height + IntType(6);
			draw_label(self, { text_get({ /*"settingswatermarkalignment"*/ STR(3578) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			VarType dwold, dxold;
			dwold = sVar(dw);
			dxold = sVar(dx);
			sVar(dw) = floor((RealType)sVar(dw) / 2.0 - IntType(4));
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"settingswatermarkleft"*/ STR(1462), icons_ALIGN_LEFT, /*"left"*/ STR(203), sVar(setting_watermark_halign) == /*"left"*/ STR(203), ID_action_setting_watermark_halign });
			togglebutton_add(self, { /*"settingswatermarkcenter"*/ STR(1464), icons_ALIGN_CENTER, /*"center"*/ STR(1463), sVar(setting_watermark_halign) == /*"center"*/ STR(1463), ID_action_setting_watermark_halign });
			togglebutton_add(self, { /*"settingswatermarkright"*/ STR(1465), icons_ALIGN_RIGHT, /*"right"*/ STR(204), sVar(setting_watermark_halign) == /*"right"*/ STR(204), ID_action_setting_watermark_halign });
			draw_togglebutton(self, /*"settingswatermarkhalign"*/ STR(3579), sVar(dx), sVar(dy), false);
			sVar(dx) += (sVar(dw) + IntType(8));
			togglebutton_add(self, { /*"settingswatermarktop"*/ STR(1467), icons_ALIGN_TOP, /*"top"*/ STR(202), sVar(setting_watermark_valign) == /*"top"*/ STR(202), ID_action_setting_watermark_valign });
			togglebutton_add(self, { /*"settingswatermarkcenter"*/ STR(1464), icons_ALIGN_MIDDLE, /*"center"*/ STR(1463), sVar(setting_watermark_valign) == /*"center"*/ STR(1463), ID_action_setting_watermark_valign });
			togglebutton_add(self, { /*"settingswatermarkbottom"*/ STR(1468), icons_ALIGN_BOTTOM, /*"bottom"*/ STR(201), sVar(setting_watermark_valign) == /*"bottom"*/ STR(201), ID_action_setting_watermark_valign });
			draw_togglebutton(self, /*"settingswatermarkvalign"*/ STR(3580), sVar(dx), sVar(dy), false);
			tab_next(self);
			sVar(dx) = dxold;
			sVar(dw) = dwold;
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkpadding"*/ STR(3581), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_padding) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_padding, ID_action_setting_watermark_padding);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkscale"*/ STR(3582), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_scale) * IntType(100)), IntType(0), IntType(100), IntType(33), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_scale, ID_action_setting_watermark_scale);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkopacity"*/ STR(3583), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_opacity) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_opacity, ID_action_setting_watermark_opacity);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingsspawncameras"*/ STR(3584), sVar(dx), sVar(dy), sVar(setting_spawn_cameras), ID_action_setting_spawn_cameras);
		tab_next(self);
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"settingsunlimitedvalues"*/ STR(3585), sVar(dx), sVar(dy), sReal(setting_unlimited_values), ID_action_setting_unlimited_values);
			tab_next(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingssceneryremoveedges"*/ STR(3586), sVar(dx), sVar(dy), sVar(setting_scenery_remove_edges), ID_action_setting_scenery_remove_edges);
		tab_next(self);
	}
	
	RealType tab_set_collumns(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		sVar(tab_collumns) = argument[IntType(0)];
		if (!(sVar(tab_collumns) > 0))
		{
			sVar(dw) = sVar(tab_collumns_width);
			if (sReal(tab_collumns_index) != IntType(0))
				tab_next(self);
			sVar(dx) = sVar(tab_collumns_start_x);
			return IntType(0);
		}
		else
			sVar(tab_collumns_start_x) = sVar(dx);
		
		if (argument_count > IntType(1))
			sVar(tab_collumns_count) = argument[IntType(1)];
		else
			sVar(tab_collumns_count) = IntType(2);
		
		sReal(tab_collumns_index) = IntType(0);
		sVar(tab_collumns_width) = sVar(dw);
		return 0.0;
	}
	
	RealType tab_show(ScopeAny self, IntType tab)
	{
		IntType panel;
		panel = idInt(tab, panel);
		if (idReal(tab, show) > 0)
			return IntType(0);
		panel_tab_list_add(panel, ObjType(obj_panel, panel)->tab_list_amount, tab);
		idReal(tab, show) = true;
		return 0.0;
	}
	
	RealType tab_template_editor(ScopeAny self)
	{
		if (!instance_exists(global::temp_edit))
		{
			tab_close(self, sVar(tab));
			return IntType(0);
		}
		if (idVar(global::temp_edit, type) != e_temp_type_PARTICLE_SPAWNER)
			sVar(dh) -= 28.0;
		switch ((IntType)idVar(global::temp_edit, type))
		{
			case e_temp_type_CHARACTER:
			case e_temp_type_SPECIAL_BLOCK:
			case e_temp_type_BODYPART:
			{
				VarType labeltext;
				IntType list, capwid;
				if (idVar(global::temp_edit, type) == e_temp_type_CHARACTER)
				{
					labeltext = text_get({ /*"templateeditormodel"*/ STR(3587) });
					list = idInt(sVar(tab), char_list);
					capwid = IntType(0);
				}
				else
					if (idVar(global::temp_edit, type) == e_temp_type_SPECIAL_BLOCK)
					{
						labeltext = text_get({ /*"templateeditorblock"*/ STR(3588) });
						list = idInt(sVar(tab), special_block_list);
						capwid = IntType(0);
					}
					else
						if (idVar(global::temp_edit, type) == e_temp_type_BODYPART)
						{
							labeltext = text_get({ /*"templateeditormodel"*/ STR(3587) });
							list = idInt(sVar(tab), bodypart_model_list);
							capwid = text_caption_width(self, { /*"templateeditorbodypart"*/ STR(1358) });
						}
				
				
				IntType statelen, menus;
				RealType statesh, checkboxes;
				statelen = array_length(VarType::CreateRef(idVar(global::temp_edit, model_state)));
				statesh = ((idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? IntType(32) : IntType(0));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						menus++;
					else
						checkboxes++;
					
				}
				statesh += (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sortlist_draw(self, list, sVar(dx), sVar(dy), sVar(dw), sVar(dh) - statesh, idVar(global::temp_edit, model_name), false);
				sVar(menu_filter) = ObjType(obj_textbox, ObjType(obj_sortlist, list)->search_tbx)->text;
				sVar(menu_filter_normal) = sortlist_column_get(list, idVar(global::temp_edit, model_name), IntType(0));
				statelen = array_length(VarType::CreateRef(idVar(global::temp_edit, model_state)));
				statesh = ((idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? IntType(32) : IntType(0));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						menus++;
					else
						checkboxes++;
					
				}
				statesh += (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				VarType model = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(idVar(global::temp_edit, model_name));
				draw_set_font(sInt(font_label));
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					capwid = max({ capwid, string_width(minecraft_asset_get_name(/*"modelstate"*/ STR(775), state)) + IntType(8) });
				}
				VarType dyy = (sVar(dy) + sVar(dh) - statesh) + IntType(8);
				sVar(dy) = dyy;
				tab_set_collumns(self, { true, IntType(2) });
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						continue;
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					sVar(menu_model_current) = model;
					sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
					tab_control(self, sReal(ui_small_height));
					if (draw_checkbox(self, /*"modelstate"*/ STR(775) + state, sVar(dx), sVar(dy), idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(776), null_))
					{
						sInt(menu_model_state) = sInt(menu_model_state_current);
						IntType script = (idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? ID_action_lib_bodypart_model_state : ID_action_lib_model_state;
						if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(776))
							script_execute(self, { script, /*"false"*/ STR(777) });
						else
							script_execute(self, { script, /*"true"*/ STR(776) });
						
					}
					tab_next(self);
				}
				tab_set_collumns(self, { false });
				dyy = sVar(dy);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(776) || idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"false"*/ STR(777))
						continue;
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					sVar(menu_model_current) = model;
					sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
					draw_button_menu(self, { state, e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idVar(global::temp_edit, model_state).Value(i + IntType(1)), minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), idVar(global::temp_edit, model_state).Value(i + IntType(1))), (idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? ID_action_lib_bodypart_model_state : ID_action_lib_model_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
					dyy += IntType(32);
				}
				sVar(menu_model_current) = null_;
				sVar(menu_filter) = /*""*/ STR(0);
				sVar(menu_filter_normal) = /*""*/ STR(0);
				if (idVar(global::temp_edit, type) == e_temp_type_BODYPART)
					draw_button_menu(self, { /*"templateeditorbodypart"*/ STR(1358), e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idVar(global::temp_edit, model_part_name), minecraft_asset_get_name(/*"modelpart"*/ STR(778), idVar(global::temp_edit, model_part_name)), ID_action_lib_model_part_name, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, list)->scroll);
				break;
			}
			
			case e_temp_type_BLOCK:
			{
				IntType statelen, menus;
				RealType statesh, checkboxes;
				statelen = array_length(VarType::CreateRef(idArr(global::temp_edit, block_state)));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						menus++;
					else
						checkboxes++;
					
				}
				statesh = (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sortlist_draw(self, idInt(sVar(tab), block_list), sVar(dx), sVar(dy), sVar(dw), sVar(dh) - statesh, idVar(global::temp_edit, block_name), false);
				sVar(menu_filter) = ObjType(obj_textbox, ObjType(obj_sortlist, idInt(sVar(tab), block_list))->search_tbx)->text;
				sVar(menu_filter_normal) = sortlist_column_get(idInt(sVar(tab), block_list), idVar(global::temp_edit, block_name), IntType(0));
				IntType block;
				block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(idVar(global::temp_edit, block_name));
				statelen = array_length(VarType::CreateRef(idArr(global::temp_edit, block_state)));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						menus++;
					else
						checkboxes++;
					
				}
				statesh = (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sVar(capwid) = IntType(0);
				draw_set_font(sInt(font_label));
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(capwid) = max({ sVar(capwid), string_width(minecraft_asset_get_name(/*"blockstate"*/ STR(796), state)) + IntType(8) });
				}
				VarType dyy = (sVar(dy) + sVar(dh) - statesh) + IntType(8);
				sVar(dy) = dyy;
				tab_set_collumns(self, { true, IntType(2) });
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(776) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(777))
						continue;
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(menu_block_current) = block;
					sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
					tab_control(self, sReal(ui_small_height));
					if (draw_checkbox(self, /*"blockstate"*/ STR(796) + state, sVar(dx), sVar(dy), idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(776), null_))
					{
						sInt(menu_block_state) = sInt(menu_block_state_current);
						if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(776))
							script_execute(self, { ID_action_lib_block_state, /*"false"*/ STR(777) });
						else
							script_execute(self, { ID_action_lib_block_state, /*"true"*/ STR(776) });
						
					}
					tab_next(self);
				}
				tab_set_collumns(self, { false });
				dyy = sVar(dy);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(776) || idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"false"*/ STR(777))
						continue;
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(menu_block_current) = block;
					sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
					draw_button_menu(self, { state, e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idArr(global::temp_edit, block_state).Value(i + IntType(1)), minecraft_asset_get_name(/*"blockstatevalue"*/ STR(5), idArr(global::temp_edit, block_state).Value(i + IntType(1))), ID_action_lib_block_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), sVar(capwid) });
					dyy += IntType(32);
				}
				sVar(menu_block_current) = null_;
				sVar(menu_filter) = /*""*/ STR(0);
				sVar(menu_filter_normal) = /*""*/ STR(0);
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, idInt(sVar(tab), block_list))->scroll);
				break;
			}
			
			case e_temp_type_ITEM:
			{
				VarType res = idVar(global::temp_edit, item_tex);
				if (!res_is_ready(res))
					res = global::mc_res;
				if (idInt(res, item_sheet_texture) == null_)
				{
					tab_close(self, sVar(tab));
					return IntType(0);
				}
				RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
				draw_texture_picker(self, idVar(global::temp_edit, item_slot), idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sVar(dh), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), idInt(sVar(tab), item_scroll), ID_action_lib_item_slot);
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(idInt(sVar(tab), item_scroll));
				break;
			}
			
			case e_temp_type_PARTICLE_SPAWNER:
			{
				tab_template_editor_particles(self);
				return IntType(0);
			}
			default:
				tab_close(self, sVar(tab));
				break;
		}
		
		return 0.0;
	}
	
	RealType tab_template_editor_particles(ScopeAny self)
	{
		IntType capwid;
		VarType setx, text, textx;
		RealType wid, dividew;
		StringType suffix;
		IntType sn, ud;
		sn = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
		ud = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
		suffix = /*""*/ STR(0);
		dividew = sVar(content_width) - floor((IntType)ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->needed * IntType(12));
		setx = sVar(dx) + sVar(dw) - IntType(24);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"particleeditorexport"*/ STR(3589), setx, sVar(dy), IntType(24), IntType(24), false, icons_ASSET_EXPORT, null_, false, /*"tooltipparticlesexport"*/ STR(3590) }))
			particles_save(self);
		setx -= 28.0;
		if (draw_button_icon(self, { /*"particleeditorimport"*/ STR(3591), setx, sVar(dy), IntType(24), IntType(24), false, icons_ASSET_IMPORT, null_, false, /*"tooltipparticlesimport"*/ STR(3592) }))
			action_lib_pc_open(self);
		setx -= 4.0;
		draw_divide_vertical(setx, sVar(dy), IntType(24));
		setx -= 28.0;
		tip_set_keybind(self, e_keybind_PARTICLES_CLEAR);
		if (draw_button_icon(self, { /*"particleeditorclear"*/ STR(3593), setx, sVar(dy), IntType(24), IntType(24), false, icons_DELETE, null_, false, /*"tooltipparticlesclear"*/ STR(3594) }))
			action_lib_pc_clear();
		setx -= 28.0;
		if (!(idVar(global::temp_edit, pc_spawn_constant) > 0))
		{
			tip_set_keybind(self, e_keybind_PARTICLES_SPAWN);
			if (draw_button_icon(self, { /*"particleeditorspawn"*/ STR(3595), setx, sVar(dy), IntType(24), IntType(24), false, icons_PARTICLES, null_, false, /*"tooltipparticlesspawn"*/ STR(2139) }))
				action_lib_pc_spawn();
			setx -= 28.0;
		}
		draw_label_value(self, sVar(dx), sVar(dy), setx - sVar(dx), IntType(24), text_get({ /*"particleeditorcount"*/ STR(3596) }), string(instance_number(ID_obj_particle)));
		tab_next(self);
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditorspawncaption"*/ STR(3597) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"particleeditorspawnconstant"*/ STR(3598), null_, IntType(1), idVar(global::temp_edit, pc_spawn_constant), ID_action_lib_pc_spawn_constant });
		togglebutton_add(self, { /*"particleeditorspawnburst"*/ STR(3599), null_, IntType(0), !(idVar(global::temp_edit, pc_spawn_constant) > 0), ID_action_lib_pc_spawn_constant });
		draw_togglebutton(self, /*"particleeditorspawntype"*/ STR(3600), sVar(dx), sVar(dy));
		tab_next(self);
		if (idVar(global::temp_edit, pc_spawn_constant) > 0)
			draw_tooltip_label(self, /*"particleeditorspawnconstanttip"*/ STR(3601), icons_PARTICLES, e_toast_INFO);
		else
			draw_tooltip_label(self, /*"particleeditorspawnbursttip"*/ STR(3602), icons_PARTICLES, e_toast_INFO);
		
		draw_set_font(sInt(font_label));
		tab_control_dragger(self);
		draw_dragger(self, /*"particleeditorspawnamount"*/ STR(3603), sVar(dx), sVar(dy), IntType(64), idVar(global::temp_edit, pc_spawn_amount), (idVar(global::temp_edit, pc_spawn_constant) > 0) ? 2.0 : (1.0 / 5.0), IntType(1), no_limit, IntType(100), IntType(1), idInt(sVar(tab), tbx_spawn_amount), ID_action_lib_pc_spawn_amount, string_width(text_get({ /*"particleeditorspawnamount"*/ STR(3603) })) + IntType(8));
		draw_set_font(sInt(font_label));
		textx = sVar(dx) + IntType(64) + IntType(16) + string_width(text_get({ /*"particleeditorspawnamount"*/ STR(3603) }));
		text = string_limit(((idVar(global::temp_edit, pc_spawn_constant) > 0) ? text_get({ /*"particleeditorperminute"*/ STR(3604) }) : text_get({ /*"particleeditorperburst"*/ STR(3605) })), (sVar(dw) - (textx - sVar(dx))) - IntType(8));
		draw_label(self, { text, textx, sVar(dy) + (sReal(ui_small_height) / 2.0), fa_left, fa_middle, global::c_text_main, global::a_text_main, sInt(font_value) });
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"particleeditorspawnregion"*/ STR(3606), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_spawn_region_use), ID_action_lib_pc_spawn_region_use);
		tab_next(self);
		if (idVar(global::temp_edit, pc_spawn_region_use) > 0)
		{
			IntType icon;
			VarType name;
			switch (StringType(idVar(global::temp_edit, pc_spawn_region_type)).id)
			{
				case 554: // sphere
				{
					icon = icons_BOUNDARY_CIRCLE;
					break;
				}
				case 3: // cube
				{
					icon = icons_BOUNDARY_CUBE;
					break;
				}
				case 1367: // box
				{
					icon = icons_BOUNDARY_BOX;
					break;
				}
				case 560: // path
				{
					icon = icons_PATH;
					break;
				}
			}
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"particleeditorspawnregiontype"*/ STR(1364), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::temp_edit, pc_spawn_region_type), text_get({ /*"particleeditorspawnregiontype"*/ STR(1364) + idVar(global::temp_edit, pc_spawn_region_type) }), ID_action_lib_pc_spawn_region_type, false, null_, icon });
			tab_next(self);
			switch (StringType(idVar(global::temp_edit, pc_spawn_region_type)).id)
			{
				case 554: // sphere
				{
					tab_control_dragger(self);
					draw_dragger(self, /*"particleeditorspawnregionsphereradius"*/ STR(3607), sVar(dx), sVar(dy), IntType(64), idVar(global::temp_edit, pc_spawn_region_sphere_radius), (RealType)idVar(global::temp_edit, pc_spawn_region_sphere_radius) / 100.0, IntType(0), no_limit, IntType(100), IntType(0), idInt(sVar(tab), tbx_spawn_region_sphere_radius), ID_action_lib_pc_spawn_region_sphere_radius);
					tab_next(self);
					break;
				}
				
				case 3: // cube
				{
					tab_control_dragger(self);
					draw_dragger(self, /*"particleeditorspawnregioncubesize"*/ STR(3608), sVar(dx), sVar(dy), IntType(64), idVar(global::temp_edit, pc_spawn_region_cube_size), (RealType)idVar(global::temp_edit, pc_spawn_region_cube_size) / 100.0, IntType(0), no_limit, IntType(100), IntType(0), idInt(sVar(tab), tbx_spawn_region_cube_size), ID_action_lib_pc_spawn_region_cube_size);
					tab_next(self);
					break;
				}
				
				case 1367: // box
				{
					global::axis_edit = X_;
					textfield_group_add(self, { /*"particleeditorspawnregionboxxsize"*/ STR(3609), idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit), IntType(200), ID_action_lib_pc_spawn_region_box_size, global::axis_edit, idInt(sVar(tab), tbx_spawn_region_box_xsize), null_, idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit) / 100.0 });
					global::axis_edit = sn;
					textfield_group_add(self, { /*"particleeditorspawnregionboxysize"*/ STR(3610), idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit), IntType(200), ID_action_lib_pc_spawn_region_box_size, global::axis_edit, idInt(sVar(tab), tbx_spawn_region_box_ysize), null_, idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit) / 100.0 });
					global::axis_edit = ud;
					textfield_group_add(self, { /*"particleeditorspawnregionboxzsize"*/ STR(3611), idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit), IntType(200), ID_action_lib_pc_spawn_region_box_size, global::axis_edit, idInt(sVar(tab), tbx_spawn_region_box_zsize), null_, idVar(global::temp_edit, pc_spawn_region_box_size).Value(global::axis_edit) / 100.0 });
					tab_control_textfield_group(self);
					draw_textfield_group(self, /*"particleeditorspawnregionboxsize"*/ STR(3612), sVar(dx), sVar(dy), sVar(dw), null_, IntType(0), no_limit, IntType(0), true, true, IntType(1));
					tab_next(self);
					break;
				}
				
				case 560: // path
				{
					VarType name;
					if (idVar(global::temp_edit, pc_spawn_region_path) > 0)
						name = idVar(idVar(global::temp_edit, pc_spawn_region_path), display_name);
					else
						name = text_get({ /*"listnone"*/ STR(787) });
					
					tab_control_menu(self);
					draw_button_menu(self, { /*"particleeditorspawnregionpath"*/ STR(1370), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::temp_edit, pc_spawn_region_path), name, ID_action_lib_pc_spawn_region_path });
					tab_next(self);
					tab_control_dragger(self);
					draw_dragger(self, /*"particleeditorspawnregionpathradius"*/ STR(3613), sVar(dx), sVar(dy), IntType(64), idVar(global::temp_edit, pc_spawn_region_path_radius), (RealType)idVar(global::temp_edit, pc_spawn_region_path_radius) / 100.0, IntType(0), no_limit, IntType(100), IntType(0), idInt(sVar(tab), tbx_spawn_region_path_radius), ID_action_lib_pc_spawn_region_path_radius);
					tab_next(self);
					break;
				}
				
			}
			
			draw_divide(sVar(dx), sVar(dy), sVar(dw));
			sVar(dy) += IntType(8);
		}
		tab_control_menu(self);
		draw_button_menu(self, { /*"particleeditorboundingbox"*/ STR(1371), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::temp_edit, pc_bounding_box_type), text_get({ /*"particleeditorboundingboxtype"*/ STR(3614) + idVar(global::temp_edit, pc_bounding_box_type) }), ID_action_lib_pc_bounding_box_type });
		tab_next(self);
		if (idVar(global::temp_edit, pc_bounding_box_type) == /*"ground"*/ STR(143))
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"particleeditorboundingboxground"*/ STR(3615) + ((sReal(setting_z_is_up) > 0) ? /*"z"*/ STR(851) : /*"y"*/ STR(833)), sVar(dx), sVar(dy), IntType(64), idVar(global::temp_edit, pc_bounding_box_ground_z), 0.1, -no_limit, no_limit, IntType(0), IntType(0), idInt(sVar(tab), tbx_bounding_box_ground_z), ID_action_lib_pc_bounding_box_ground_z);
			tab_next(self);
		}
		else
			if (idVar(global::temp_edit, pc_bounding_box_type) == /*"custom"*/ STR(628))
			{
				global::axis_edit = X_;
				textfield_group_add(self, { /*"particleeditorboundingboxfromx"*/ STR(3616), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), -IntType(100), ID_action_lib_pc_bounding_box_custom_start, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_xstart), null_, IntType(1), -no_limit, idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit) });
				global::axis_edit = sn;
				textfield_group_add(self, { /*"particleeditorboundingboxfromy"*/ STR(3617), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), -IntType(100), ID_action_lib_pc_bounding_box_custom_start, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_ystart), null_, IntType(1), -no_limit, idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit) });
				global::axis_edit = ud;
				textfield_group_add(self, { /*"particleeditorboundingboxfromz"*/ STR(3618), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), -IntType(100), ID_action_lib_pc_bounding_box_custom_start, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_zstart), null_, IntType(1), -no_limit, idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit) });
				tab_control_textfield_group(self);
				draw_textfield_group(self, /*"particleeditorboundingboxcustomfrom"*/ STR(3619), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), no_limit, IntType(0), true, true, IntType(1));
				tab_next(self);
				global::axis_edit = X_;
				textfield_group_add(self, { /*"particleeditorboundingboxtox"*/ STR(3620), idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit), IntType(100), ID_action_lib_pc_bounding_box_custom_end, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_xend), null_, IntType(1), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), no_limit });
				global::axis_edit = sn;
				textfield_group_add(self, { /*"particleeditorboundingboxtoy"*/ STR(3621), idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit), IntType(100), ID_action_lib_pc_bounding_box_custom_end, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_yend), null_, IntType(1), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), no_limit });
				global::axis_edit = ud;
				textfield_group_add(self, { /*"particleeditorboundingboxtoz"*/ STR(3622), idVar(global::temp_edit, pc_bounding_box_custom_end).Value(global::axis_edit), IntType(100), ID_action_lib_pc_bounding_box_custom_end, global::axis_edit, idInt(sVar(tab), tbx_bounding_box_custom_zend), null_, IntType(1), idVar(global::temp_edit, pc_bounding_box_custom_start).Value(global::axis_edit), no_limit });
				tab_control_textfield_group(self);
				draw_textfield_group(self, /*"particleeditorboundingboxcustomto"*/ STR(3623), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), no_limit, IntType(0), true, true, IntType(1));
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"particleeditorboundingboxrelative"*/ STR(3624), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_bounding_box_relative), ID_action_lib_pc_bounding_box_relative);
				tab_next(self);
			}
		
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditordestruction"*/ STR(3625) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditordestroy"*/ STR(3626) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"particleeditordestroyanimationfinish"*/ STR(3627), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_destroy_at_animation_finish), ID_action_lib_pc_destroy_at_animation_finish);
		tab_next(self, false);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"particleeditordestroyboundingboxtoggle"*/ STR(3628), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_destroy_at_bounding_box), ID_action_lib_pc_destroy_at_bounding_box);
		tab_next(self, false);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"particleeditordestroyamount"*/ STR(3629), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_destroy_at_amount), ID_action_lib_pc_destroy_at_amount);
		wid = text_max_width({ /*"particleeditordestroyamount"*/ STR(3629) }) + IntType(8) + IntType(26);
		if (wid + dragger_width + IntType(8) > sVar(dw))
		{
			tab_next(self, false);
			tab_control_dragger(self);
			wid = IntType(0);
		}
		draw_dragger(self, /*"particleeditordestroyamountval"*/ STR(3630), sVar(dx) + wid, sVar(dy), IntType(64), idVar(global::temp_edit, pc_destroy_at_amount_val), 1.0 / 4.0, IntType(0), no_limit, IntType(200), IntType(1), idInt(sVar(tab), tbx_destroy_at_amount_val), ID_action_lib_pc_destroy_at_amount_val, wid, false);
		tab_next(self, wid == IntType(0));
		tab_control_checkbox(self);
		draw_checkbox(self, /*"particleeditordestroytime"*/ STR(3631), sVar(dx), sVar(dy), idVar(global::temp_edit, pc_destroy_at_time), ID_action_lib_pc_destroy_at_time);
		tab_next(self, !(idVar(global::temp_edit, pc_destroy_at_time) > 0));
		if (idVar(global::temp_edit, pc_destroy_at_time) > 0)
		{
			tab_template_editor_particles_value(self, /*"particleeditordestroylifespan"*/ STR(3632), idVar(global::temp_edit, pc_destroy_at_time_seconds), idVar(global::temp_edit, pc_destroy_at_time_israndom), idVar(global::temp_edit, pc_destroy_at_time_random_min), idVar(global::temp_edit, pc_destroy_at_time_random_max), 1.0 / 20.0, IntType(0), no_limit, ArrType::From({ IntType(5), IntType(5), IntType(10) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_destroy_at_time_seconds), idInt(sVar(tab), tbx_destroy_at_time_random) }), ArrType::From({ ID_action_lib_pc_destroy_at_time_seconds, ID_action_lib_pc_destroy_at_time_israndom, ID_action_lib_pc_destroy_at_time_random_min, ID_action_lib_pc_destroy_at_time_random_max }), null_, false, suffix);
		}
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditoremitters"*/ STR(3633) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control_sortlist(self, IntType(6));
		sortlist_draw(self, idInt(sVar(tab), type_list), sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), global::ptype_edit, false);
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"particleeditortypeadd"*/ STR(3634), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_ASSET_ADD, null_, false, /*"tooltipparticlesadd"*/ STR(3635) }))
			action_lib_pc_type_add(self);
		if (draw_button_icon(self, { /*"particleeditortypeduplicate"*/ STR(3636), sVar(dx) + IntType(28), sVar(dy), IntType(24), IntType(24), false, icons_DUPLICATE, null_, global::ptype_edit == null_, /*"tooltipparticlesduplicate"*/ STR(3637) }))
			action_lib_pc_type_duplicate(self);
		if (draw_button_icon(self, { /*"particleeditortypedelete"*/ STR(3638), sVar(dx) + (IntType(28) * IntType(2)), sVar(dy), IntType(24), IntType(24), false, icons_DELETE, null_, global::ptype_edit == null_, /*"tooltipparticlesdelete"*/ STR(3639) }))
			action_lib_pc_type_remove(self);
		tab_next(self);
		if (global::ptype_edit == null_)
			return IntType(0);
		capwid = text_caption_width(self, { /*"particleeditortypename"*/ STR(232), /*"particleeditortypespawnrate"*/ STR(3640), /*"particleeditortypetemp"*/ STR(1377), /*"particleeditortypespritetex"*/ STR(1380), /*"particleeditortypespriteteximage"*/ STR(3641), /*"particleeditortypespritetemplatepack"*/ STR(1381), /*"particleeditortypespritetemplate"*/ STR(1382), /*"particleeditortypetext"*/ STR(3642) });
		ObjType(obj_textbox, idInt(sVar(tab), tbx_type_name))->text = idVar(global::ptype_edit, name);
		tab_control_dragger(self);
		draw_textfield(self, /*"particleeditortypename"*/ STR(232), sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sVar(tab), tbx_type_name), ID_action_lib_pc_type_name, /*""*/ STR(0), /*"left"*/ STR(203));
		tab_next(self);
		if (ds_list_size(idInt(global::temp_edit, pc_type_list)) > IntType(1))
		{
			tab_control_meter(self);
			draw_meter(self, /*"particleeditortypespawnrate"*/ STR(3640), sVar(dx), sVar(dy), sVar(dw), idVar(global::ptype_edit, spawn_rate) * IntType(100), IntType(0), IntType(100), 100.0 / ds_list_size(idInt(global::temp_edit, pc_type_list)), IntType(1), idInt(sVar(tab), tbx_type_spawn_rate), ID_action_lib_pc_type_spawn_rate);
			tab_next(self);
		}
		tab_control_menu(self);
		text = text_get({ /*"particleeditortypespritesheet"*/ STR(1379) });
		if (idVar(global::ptype_edit, temp) == particle_template)
			text = text_get({ /*"particleeditortypetemplate"*/ STR(1378) });
		if (idVar(global::ptype_edit, temp) > 0)
			text = idVar(idVar(global::ptype_edit, temp), display_name);
		draw_button_menu(self, { /*"particleeditortypetemp"*/ STR(1377), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::ptype_edit, temp), text, ID_action_lib_pc_type_temp });
		tab_next(self);
		if (idVar(global::ptype_edit, temp) < IntType(0))
		{
			if (idVar(global::ptype_edit, temp) == particle_sheet)
			{
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"particleeditortypespritetex"*/ STR(1380), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::ptype_edit, sprite_tex), idVar(idVar(global::ptype_edit, sprite_tex), display_name), ID_action_lib_pc_type_sprite_tex, false, idArr(idVar(global::ptype_edit, sprite_tex), particles_texture).Value(idVar(global::ptype_edit, sprite_tex_image)) });
				tab_next(self);
				if (idVar(idVar(global::ptype_edit, sprite_tex), type) == e_res_type_PACK)
				{
					tab_control_togglebutton(self);
					togglebutton_add(self, { /*"particleeditortypespriteteximage1"*/ STR(3643), null_, IntType(0), idVar(global::ptype_edit, sprite_tex_image) == IntType(0), ID_action_lib_pc_type_sprite_tex_image });
					togglebutton_add(self, { /*"particleeditortypespriteteximage2"*/ STR(3644), null_, IntType(1), idVar(global::ptype_edit, sprite_tex_image) == IntType(1), ID_action_lib_pc_type_sprite_tex_image });
					draw_togglebutton(self, /*"particleeditortypespriteteximage"*/ STR(3641), sVar(dx), sVar(dy));
					tab_next(self);
				}
				tab_template_editor_particles_framebox(self);
				ObjType(obj_textbox, idInt(sVar(tab), tbx_type_sprite_frame_width))->suffix = text_get({ /*"particleeditorpixels"*/ STR(3645) });
				ObjType(obj_textbox, idInt(sVar(tab), tbx_type_sprite_frame_height))->suffix = text_get({ /*"particleeditorpixels"*/ STR(3645) });
				tab_control_textfield_group(self);
				textfield_group_add(self, { /*"particleeditortypespriteframewidth"*/ STR(3646), idVar(global::ptype_edit, sprite_frame_width), IntType(8), ID_action_lib_pc_type_sprite_frame_width, global::axis_edit, idInt(sVar(tab), tbx_type_sprite_frame_width) });
				textfield_group_add(self, { /*"particleeditortypespriteframeheight"*/ STR(3647), idVar(global::ptype_edit, sprite_frame_height), IntType(8), ID_action_lib_pc_type_sprite_frame_height, global::axis_edit, idInt(sVar(tab), tbx_type_sprite_frame_height) });
				draw_textfield_group(self, /*"particleeditortypespriteframesize"*/ STR(3648), sVar(dx), sVar(dy), sVar(dw), 1.0 / 10.0, IntType(1), no_limit, IntType(1), true, true, IntType(1));
				tab_next(self);
				tab_control_textfield_group(self);
				textfield_group_add(self, { /*"particleeditortypespriteframestart"*/ STR(3649), idVar(global::ptype_edit, sprite_frame_start), IntType(7), ID_action_lib_pc_type_sprite_frame_start, global::axis_edit, idInt(sVar(tab), tbx_type_sprite_frame_start), null_, 1.0 / 10.0, IntType(0), no_limit, /*"particleeditorfrom"*/ STR(3650) });
				textfield_group_add(self, { /*"particleeditortypespriteframeend"*/ STR(3651), idVar(global::ptype_edit, sprite_frame_end), IntType(0), ID_action_lib_pc_type_sprite_frame_end, global::axis_edit, idInt(sVar(tab), tbx_type_sprite_frame_end), null_, 1.0 / 10.0, IntType(0), no_limit, /*"particleeditorto"*/ STR(3652) });
				draw_textfield_group(self, /*"particleeditortypespriteframeframes"*/ STR(3653), sVar(dx), sVar(dy), sVar(dw), null_, null_, null_, IntType(1), true, IntType(1));
				tab_next(self);
			}
			else
			{
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"particleeditortypespritetemplatepack"*/ STR(1381), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::ptype_edit, sprite_template_tex), idVar(idVar(global::ptype_edit, sprite_template_tex), display_name), ID_action_lib_pc_type_sprite_template_tex, false, idInt(idVar(global::ptype_edit, sprite_template_tex), block_preview_texture) });
				tab_next(self);
				tab_control_menu(self);
				draw_button_menu(self, { /*"particleeditortypespritetemplate"*/ STR(1382), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::ptype_edit, sprite_template), text_get({ /*"particleeditortypespritetemplate"*/ STR(1382) + idVar(global::ptype_edit, sprite_template) }), ID_action_lib_pc_type_sprite_template, false });
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"particleeditortypespritetemplatestillframe"*/ STR(3654), sVar(dx), sVar(dy), idVar(global::ptype_edit, sprite_template_still_frame), ID_action_lib_pc_type_sprite_template_still_frame);
				tab_next(self);
				if (idVar(global::ptype_edit, sprite_template_still_frame) > 0)
				{
					tab_control_switch(self);
					draw_switch(self, /*"particleeditortypespritetemplaterandomframe"*/ STR(3655), sVar(dx), sVar(dy), idVar(global::ptype_edit, sprite_template_random_frame), ID_action_lib_pc_type_sprite_template_random_frame);
					tab_next(self);
				}
				else
				{
					tab_control_switch(self);
					draw_switch(self, /*"particleeditortypespritetemplatereverse"*/ STR(3656), sVar(dx), sVar(dy), idVar(global::ptype_edit, sprite_template_reverse), ID_action_lib_pc_type_sprite_template_reverse);
					tab_next(self);
				}
				
			}
			
			if (!(idVar(global::ptype_edit, sprite_template_still_frame) > 0 && idVar(global::ptype_edit, temp) == particle_template))
			{
				tab_template_editor_particles_value(self, /*"particleeditortypespriteanimationspeed"*/ STR(3657), idVar(global::ptype_edit, sprite_animation_speed), idVar(global::ptype_edit, sprite_animation_speed_israndom), idVar(global::ptype_edit, sprite_animation_speed_random_min), idVar(global::ptype_edit, sprite_animation_speed_random_max), 1.0 / 25.0, IntType(0), no_limit, ArrType::From({ IntType(5), IntType(5), IntType(10) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_sprite_animation_speed), idInt(sVar(tab), tbx_type_sprite_animation_speed_random) }), ArrType::From({ ID_action_lib_pc_type_sprite_animation_speed, ID_action_lib_pc_type_sprite_animation_speed_israndom, ID_action_lib_pc_type_sprite_animation_speed_random_min, ID_action_lib_pc_type_sprite_animation_speed_random_max }), null_, true, text_get({ /*"particleeditorfps"*/ STR(3658) }));
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"particleeditortypespriteanimationonendstop"*/ STR(3659), null_, IntType(0), idVar(global::ptype_edit, sprite_animation_onend) == IntType(0), ID_action_lib_pc_type_sprite_animation_onend });
				togglebutton_add(self, { /*"particleeditortypespriteanimationonendloop"*/ STR(3660), null_, IntType(1), idVar(global::ptype_edit, sprite_animation_onend) == IntType(1), ID_action_lib_pc_type_sprite_animation_onend });
				togglebutton_add(self, { /*"particleeditortypespriteanimationonendreverse"*/ STR(3661), null_, IntType(2), idVar(global::ptype_edit, sprite_animation_onend) == IntType(2), ID_action_lib_pc_type_sprite_animation_onend });
				draw_togglebutton(self, /*"particleeditortypespriteanimationonend"*/ STR(3662), sVar(dx), sVar(dy));
				tab_next(self);
			}
			tab_template_editor_particles_preview(self);
		}
		else
			if (idVar(idVar(global::ptype_edit, temp), type) == e_temp_type_TEXT)
			{
				tab_control(self, IntType(108));
				ObjType(obj_textbox, idInt(sVar(tab), tbx_type_text))->text = idVar(global::ptype_edit, text);
				draw_textfield(self, /*"particleeditortypetext"*/ STR(3642), sVar(dx), sVar(dy), sVar(dw), IntType(88), idInt(sVar(tab), tbx_type_text), ID_action_lib_pc_type_text, /*""*/ STR(0), /*"top"*/ STR(202));
				tab_next(self);
			}
		
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditortypetrajectory"*/ STR(3663) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control_switch(self);
		if (draw_button_collapse(self, /*"particleeditortypeangle"*/ STR(3664), !idBool(global::ptype_edit, angle_collapse), null_, true, /*"particleeditortypeangle"*/ STR(3664)))
			idBool(global::ptype_edit, angle_collapse) = !idBool(global::ptype_edit, angle_collapse);
		tab_next(self);
		if (!idBool(global::ptype_edit, angle_collapse))
		{
			tab_collapse_start(self);
			capwid = ((idVar(global::ptype_edit, angle_extend) > 0) ? text_caption_width(self, { /*"particleeditortypeanglex"*/ STR(3665), /*"particleeditortypeangley"*/ STR(3666), /*"particleeditortypeanglez"*/ STR(3667), /*"particleeditortypeanglespeed"*/ STR(3668), /*"particleeditortypeanglespeedadd"*/ STR(3669), /*"particleeditortypeanglespeedmul"*/ STR(3670) }) : text_caption_width(self, { /*"particleeditortypeanglexyz"*/ STR(3671), /*"particleeditortypeanglespeed"*/ STR(3668), /*"particleeditortypeanglespeedadd"*/ STR(3669), /*"particleeditortypeanglespeedmul"*/ STR(3670) }));
			tab_control_switch(self);
			draw_switch(self, /*"particleeditortypeangleextend"*/ STR(3672), sVar(dx), sVar(dy), idVar(global::ptype_edit, angle_extend), ID_action_lib_pc_type_angle_extend);
			tab_next(self);
			global::axis_edit = X_;
			tab_template_editor_particles_value(self, /*"particleeditortypeangle"*/ STR(3664) + ((idVar(global::ptype_edit, angle_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)), idVar(global::ptype_edit, angle).Value(X_), idVar(global::ptype_edit, angle_israndom).Value(X_), idVar(global::ptype_edit, angle_random_min).Value(X_), idVar(global::ptype_edit, angle_random_max).Value(X_), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xangle), idInt(sVar(tab), tbx_type_xangle_random) }), ArrType::From({ ID_action_lib_pc_type_angle, ID_action_lib_pc_type_angle_israndom, ID_action_lib_pc_type_angle_random_min, ID_action_lib_pc_type_angle_random_max }), capwid);
			if (idVar(global::ptype_edit, angle_extend) > 0)
			{
				global::axis_edit = sn;
				tab_template_editor_particles_value(self, /*"particleeditortypeangley"*/ STR(3666), idVar(global::ptype_edit, angle).Value(sn), idVar(global::ptype_edit, angle_israndom).Value(sn), idVar(global::ptype_edit, angle_random_min).Value(sn), idVar(global::ptype_edit, angle_random_max).Value(sn), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yangle), idInt(sVar(tab), tbx_type_yangle_random) }), ArrType::From({ ID_action_lib_pc_type_angle, ID_action_lib_pc_type_angle_israndom, ID_action_lib_pc_type_angle_random_min, ID_action_lib_pc_type_angle_random_max }), capwid);
				global::axis_edit = ud;
				tab_template_editor_particles_value(self, /*"particleeditortypeanglez"*/ STR(3667), idVar(global::ptype_edit, angle).Value(ud), idVar(global::ptype_edit, angle_israndom).Value(ud), idVar(global::ptype_edit, angle_random_min).Value(ud), idVar(global::ptype_edit, angle_random_max).Value(ud), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zangle), idInt(sVar(tab), tbx_type_zangle_random) }), ArrType::From({ ID_action_lib_pc_type_angle, ID_action_lib_pc_type_angle_israndom, ID_action_lib_pc_type_angle_random_min, ID_action_lib_pc_type_angle_random_max }), capwid);
			}
			tab_template_editor_particles_value(self, /*"particleeditortypeanglespeed"*/ STR(3668), idVar(global::ptype_edit, angle_speed), idVar(global::ptype_edit, angle_speed_israndom), idVar(global::ptype_edit, angle_speed_random_min), idVar(global::ptype_edit, angle_speed_random_max), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(20), IntType(0), IntType(20) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_angle_speed), idInt(sVar(tab), tbx_type_angle_speed_random) }), ArrType::From({ ID_action_lib_pc_type_angle_speed, ID_action_lib_pc_type_angle_speed_israndom, ID_action_lib_pc_type_angle_speed_random_min, ID_action_lib_pc_type_angle_speed_random_max }), capwid, true, suffix);
			tab_template_editor_particles_value(self, /*"particleeditortypeanglespeedadd"*/ STR(3669), idVar(global::ptype_edit, angle_speed_add), idVar(global::ptype_edit, angle_speed_add_israndom), idVar(global::ptype_edit, angle_speed_add_random_min), idVar(global::ptype_edit, angle_speed_add_random_max), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(1), IntType(1) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_angle_speed_add), idInt(sVar(tab), tbx_type_angle_speed_add_random) }), ArrType::From({ ID_action_lib_pc_type_angle_speed_add, ID_action_lib_pc_type_angle_speed_add_israndom, ID_action_lib_pc_type_angle_speed_add_random_min, ID_action_lib_pc_type_angle_speed_add_random_max }), capwid, true, suffix);
			tab_template_editor_particles_value(self, /*"particleeditortypeanglespeedmul"*/ STR(3670), idVar(global::ptype_edit, angle_speed_mul), idVar(global::ptype_edit, angle_speed_mul_israndom), idVar(global::ptype_edit, angle_speed_mul_random_min), idVar(global::ptype_edit, angle_speed_mul_random_max), 1.0 / 4.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_angle_speed_mul), idInt(sVar(tab), tbx_type_angle_speed_mul_random) }), ArrType::From({ ID_action_lib_pc_type_angle_speed_mul, ID_action_lib_pc_type_angle_speed_mul_israndom, ID_action_lib_pc_type_angle_speed_mul_random_min, ID_action_lib_pc_type_angle_speed_mul_random_max }), capwid, true, suffix);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		if (draw_button_collapse(self, /*"particleeditortypespeed"*/ STR(3674), !idBool(global::ptype_edit, spd_collapse), null_, true, /*"particleeditortypespeed"*/ STR(3674)))
			idBool(global::ptype_edit, spd_collapse) = !idBool(global::ptype_edit, spd_collapse);
		tab_next(self);
		if (!idBool(global::ptype_edit, spd_collapse))
		{
			tab_collapse_start(self);
			capwid = ((idVar(global::ptype_edit, spd_extend) > 0) ? text_caption_width(self, { /*"particleeditortypespeedx"*/ STR(3675), /*"particleeditortypespeedy"*/ STR(3676), /*"particleeditortypespeedz"*/ STR(3677), /*"particleeditortypespeedxadd"*/ STR(3678), /*"particleeditortypespeedyadd"*/ STR(3679), /*"particleeditortypespeedzadd"*/ STR(3680), /*"particleeditortypespeedxmul"*/ STR(3681), /*"particleeditortypespeedymul"*/ STR(3682), /*"particleeditortypespeedzmul"*/ STR(3683) }) : text_caption_width(self, { /*"particleeditortypespeedxyz"*/ STR(3684), /*"particleeditortypespeedxyzadd"*/ STR(3685), /*"particleeditortypespeedxyzmul"*/ STR(3686) }));
			tab_control_switch(self);
			draw_switch(self, /*"particleeditortypespeedextend"*/ STR(3687), sVar(dx), sVar(dy), idVar(global::ptype_edit, spd_extend), ID_action_lib_pc_type_spd_extend);
			tab_next(self);
			global::axis_edit = X_;
			tab_template_editor_particles_value(self, /*"particleeditortypespeed"*/ STR(3674) + ((idVar(global::ptype_edit, spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)), idVar(global::ptype_edit, spd).Value(X_), idVar(global::ptype_edit, spd_israndom).Value(X_), idVar(global::ptype_edit, spd_random_min).Value(X_), idVar(global::ptype_edit, spd_random_max).Value(X_), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(20), IntType(20) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xspd), idInt(sVar(tab), tbx_type_xspd_random) }), ArrType::From({ ID_action_lib_pc_type_spd, ID_action_lib_pc_type_spd_israndom, ID_action_lib_pc_type_spd_random_min, ID_action_lib_pc_type_spd_random_max }), capwid, true, suffix);
			if (idVar(global::ptype_edit, spd_extend) > 0)
			{
				global::axis_edit = sn;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedy"*/ STR(3676), idVar(global::ptype_edit, spd).Value(sn), idVar(global::ptype_edit, spd_israndom).Value(sn), idVar(global::ptype_edit, spd_random_min).Value(sn), idVar(global::ptype_edit, spd_random_max).Value(sn), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(20), IntType(20) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yspd), idInt(sVar(tab), tbx_type_yspd_random) }), ArrType::From({ ID_action_lib_pc_type_spd, ID_action_lib_pc_type_spd_israndom, ID_action_lib_pc_type_spd_random_min, ID_action_lib_pc_type_spd_random_max }), capwid, true, suffix);
				global::axis_edit = ud;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedz"*/ STR(3677), idVar(global::ptype_edit, spd).Value(ud), idVar(global::ptype_edit, spd_israndom).Value(ud), idVar(global::ptype_edit, spd_random_min).Value(ud), idVar(global::ptype_edit, spd_random_max).Value(ud), 1.0 / 4.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(20), IntType(20) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zspd), idInt(sVar(tab), tbx_type_zspd_random) }), ArrType::From({ ID_action_lib_pc_type_spd, ID_action_lib_pc_type_spd_israndom, ID_action_lib_pc_type_spd_random_min, ID_action_lib_pc_type_spd_random_max }), capwid, true, suffix);
			}
			global::axis_edit = X_;
			tab_template_editor_particles_value(self, /*"particleeditortypespeed"*/ STR(3674) + ((idVar(global::ptype_edit, spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)) + /*"add"*/ STR(630), idVar(global::ptype_edit, spd_add).Value(X_), idVar(global::ptype_edit, spd_add_israndom).Value(X_), idVar(global::ptype_edit, spd_add_random_min).Value(X_), idVar(global::ptype_edit, spd_add_random_max).Value(X_), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(1), IntType(1) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xspd_add), idInt(sVar(tab), tbx_type_xspd_add_random) }), ArrType::From({ ID_action_lib_pc_type_spd_add, ID_action_lib_pc_type_spd_add_israndom, ID_action_lib_pc_type_spd_add_random_min, ID_action_lib_pc_type_spd_add_random_max }), capwid, true, suffix);
			if (idVar(global::ptype_edit, spd_extend) > 0)
			{
				global::axis_edit = sn;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedyadd"*/ STR(3679), idVar(global::ptype_edit, spd_add).Value(sn), idVar(global::ptype_edit, spd_add_israndom).Value(sn), idVar(global::ptype_edit, spd_add_random_min).Value(sn), idVar(global::ptype_edit, spd_add_random_max).Value(sn), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(1), IntType(1) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yspd_add), idInt(sVar(tab), tbx_type_yspd_add_random) }), ArrType::From({ ID_action_lib_pc_type_spd_add, ID_action_lib_pc_type_spd_add_israndom, ID_action_lib_pc_type_spd_add_random_min, ID_action_lib_pc_type_spd_add_random_max }), capwid, true, suffix);
				global::axis_edit = ud;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedzadd"*/ STR(3680), idVar(global::ptype_edit, spd_add).Value(ud), idVar(global::ptype_edit, spd_add_israndom).Value(ud), idVar(global::ptype_edit, spd_add_random_min).Value(ud), idVar(global::ptype_edit, spd_add_random_max).Value(ud), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(1), IntType(1) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zspd_add), idInt(sVar(tab), tbx_type_zspd_add_random) }), ArrType::From({ ID_action_lib_pc_type_spd_add, ID_action_lib_pc_type_spd_add_israndom, ID_action_lib_pc_type_spd_add_random_min, ID_action_lib_pc_type_spd_add_random_max }), capwid, true, suffix);
			}
			global::axis_edit = X_;
			tab_template_editor_particles_value(self, /*"particleeditortypespeed"*/ STR(3674) + ((idVar(global::ptype_edit, spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)) + /*"mul"*/ STR(3688), idVar(global::ptype_edit, spd_mul).Value(X_), idVar(global::ptype_edit, spd_mul_israndom).Value(X_), idVar(global::ptype_edit, spd_mul_random_min).Value(X_), idVar(global::ptype_edit, spd_mul_random_max).Value(X_), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xspd_mul), idInt(sVar(tab), tbx_type_xspd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_spd_mul, ID_action_lib_pc_type_spd_mul_israndom, ID_action_lib_pc_type_spd_mul_random_min, ID_action_lib_pc_type_spd_mul_random_max }), capwid, true, suffix);
			if (idVar(global::ptype_edit, spd_extend) > 0)
			{
				global::axis_edit = sn;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedymul"*/ STR(3682), idVar(global::ptype_edit, spd_mul).Value(sn), idVar(global::ptype_edit, spd_mul_israndom).Value(sn), idVar(global::ptype_edit, spd_mul_random_min).Value(sn), idVar(global::ptype_edit, spd_mul_random_max).Value(sn), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yspd_mul), idInt(sVar(tab), tbx_type_yspd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_spd_mul, ID_action_lib_pc_type_spd_mul_israndom, ID_action_lib_pc_type_spd_mul_random_min, ID_action_lib_pc_type_spd_mul_random_max }), capwid, true, suffix);
				global::axis_edit = ud;
				tab_template_editor_particles_value(self, /*"particleeditortypespeedzmul"*/ STR(3683), idVar(global::ptype_edit, spd_mul).Value(ud), idVar(global::ptype_edit, spd_mul_israndom).Value(ud), idVar(global::ptype_edit, spd_mul_random_min).Value(ud), idVar(global::ptype_edit, spd_mul_random_max).Value(ud), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zspd_mul), idInt(sVar(tab), tbx_type_zspd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_spd_mul, ID_action_lib_pc_type_spd_mul_israndom, ID_action_lib_pc_type_spd_mul_random_min, ID_action_lib_pc_type_spd_mul_random_max }), capwid, true, suffix);
			}
			tab_collapse_end(self, false);
		}
		if (idVar(global::ptype_edit, temp) > 0 || (idVar(global::ptype_edit, temp) == particle_sheet || idVar(global::ptype_edit, temp) == particle_template))
		{
			draw_divide(sVar(content_x), sVar(dy), dividew);
			sVar(dy) += IntType(12);
			tab_control(self, IntType(16));
			draw_label(self, { text_get({ /*"particleeditortyperotation"*/ STR(3689) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
			tab_next(self);
			if (idVar(global::ptype_edit, temp) > 0)
			{
				tab_control_switch(self);
				if (draw_button_collapse(self, /*"particleeditortyperotationinitial"*/ STR(3690), !idBool(global::ptype_edit, rot_collapse), null_, true, /*"particleeditortyperotationinitial"*/ STR(3690)))
					idBool(global::ptype_edit, rot_collapse) = !idBool(global::ptype_edit, rot_collapse);
				tab_next(self);
				if (!idBool(global::ptype_edit, rot_collapse))
				{
					tab_collapse_start(self);
					capwid = ((idVar(global::ptype_edit, rot_extend) > 0) ? text_caption_width(self, { /*"particleeditortyperotationx"*/ STR(3691), /*"particleeditortyperotationy"*/ STR(3692), /*"particleeditortyperotationz"*/ STR(3693) }) : text_caption_width(self, { /*"particleeditortyperotationxyz"*/ STR(3694) }));
					tab_control_switch(self);
					draw_switch(self, /*"particleeditortyperotationextend"*/ STR(3695), sVar(dx), sVar(dy), idVar(global::ptype_edit, rot_extend), ID_action_lib_pc_type_rot_extend);
					tab_next(self);
					global::axis_edit = X_;
					tab_template_editor_particles_value(self, /*"particleeditortyperotation"*/ STR(3689) + ((idVar(global::ptype_edit, rot_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)), idVar(global::ptype_edit, rot).Value(X_), idVar(global::ptype_edit, rot_israndom).Value(X_), idVar(global::ptype_edit, rot_random_min).Value(X_), idVar(global::ptype_edit, rot_random_max).Value(X_), 1.0 / 5.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xrot), idInt(sVar(tab), tbx_type_xrot_random) }), ArrType::From({ ID_action_lib_pc_type_rot, ID_action_lib_pc_type_rot_israndom, ID_action_lib_pc_type_rot_random_min, ID_action_lib_pc_type_rot_random_max }), capwid);
					if (idVar(global::ptype_edit, rot_extend) > 0)
					{
						global::axis_edit = sn;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationy"*/ STR(3692), idVar(global::ptype_edit, rot).Value(sn), idVar(global::ptype_edit, rot_israndom).Value(sn), idVar(global::ptype_edit, rot_random_min).Value(sn), idVar(global::ptype_edit, rot_random_max).Value(sn), 1.0 / 5.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yrot), idInt(sVar(tab), tbx_type_yrot_random) }), ArrType::From({ ID_action_lib_pc_type_rot, ID_action_lib_pc_type_rot_israndom, ID_action_lib_pc_type_rot_random_min, ID_action_lib_pc_type_rot_random_max }), capwid);
						global::axis_edit = ud;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationz"*/ STR(3693), idVar(global::ptype_edit, rot).Value(ud), idVar(global::ptype_edit, rot_israndom).Value(ud), idVar(global::ptype_edit, rot_random_min).Value(ud), idVar(global::ptype_edit, rot_random_max).Value(ud), 1.0 / 5.0, -no_limit, no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zrot), idInt(sVar(tab), tbx_type_zrot_random) }), ArrType::From({ ID_action_lib_pc_type_rot, ID_action_lib_pc_type_rot_israndom, ID_action_lib_pc_type_rot_random_min, ID_action_lib_pc_type_rot_random_max }), capwid);
					}
					tab_collapse_end(self);
				}
				tab_control_switch(self);
				if (draw_button_collapse(self, /*"particleeditortyperotationspeed"*/ STR(3696), !idBool(global::ptype_edit, rot_spd_collapse), null_, true, /*"particleeditortyperotationspeed"*/ STR(3696)))
					idBool(global::ptype_edit, rot_spd_collapse) = !idBool(global::ptype_edit, rot_spd_collapse);
				tab_next(self);
				if (!idBool(global::ptype_edit, rot_spd_collapse))
				{
					tab_collapse_start(self);
					capwid = ((idVar(global::ptype_edit, rot_spd_extend) > 0) ? text_caption_width(self, { /*"particleeditortyperotationspeedx"*/ STR(3697), /*"particleeditortyperotationspeedy"*/ STR(3698), /*"particleeditortyperotationspeedz"*/ STR(3699), /*"particleeditortyperotationspeedxadd"*/ STR(3700), /*"particleeditortyperotationspeedyadd"*/ STR(3701), /*"particleeditortyperotationspeedzadd"*/ STR(3702), /*"particleeditortyperotationspeedxmul"*/ STR(3703), /*"particleeditortyperotationspeedymul"*/ STR(3704), /*"particleeditortyperotationspeedzmul"*/ STR(3705) }) : text_caption_width(self, { /*"particleeditortyperotationspeedxyz"*/ STR(3706), /*"particleeditortyperotationspeedxyzadd"*/ STR(3707), /*"particleeditortyperotationspeedxyzmul"*/ STR(3708) }));
					tab_control_switch(self);
					draw_switch(self, /*"particleeditortyperotationspeedextend"*/ STR(3709), sVar(dx), sVar(dy), idVar(global::ptype_edit, rot_spd_extend), ID_action_lib_pc_type_rot_spd_extend);
					tab_next(self);
					global::axis_edit = X_;
					tab_template_editor_particles_value(self, /*"particleeditortyperotationspeed"*/ STR(3696) + ((idVar(global::ptype_edit, rot_spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)), idVar(global::ptype_edit, rot_spd).Value(X_), idVar(global::ptype_edit, rot_spd_israndom).Value(X_), idVar(global::ptype_edit, rot_spd_random_min).Value(X_), idVar(global::ptype_edit, rot_spd_random_max).Value(X_), 1.0 / 2.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(180), IntType(180) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xrot_spd), idInt(sVar(tab), tbx_type_xrot_spd_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd, ID_action_lib_pc_type_rot_spd_israndom, ID_action_lib_pc_type_rot_spd_random_min, ID_action_lib_pc_type_rot_spd_random_max }), capwid, true, suffix);
					if (idVar(global::ptype_edit, rot_spd_extend) > 0)
					{
						global::axis_edit = sn;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedy"*/ STR(3698), idVar(global::ptype_edit, rot_spd).Value(sn), idVar(global::ptype_edit, rot_spd_israndom).Value(sn), idVar(global::ptype_edit, rot_spd_random_min).Value(sn), idVar(global::ptype_edit, rot_spd_random_max).Value(sn), 1.0 / 2.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(180), IntType(180) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yrot_spd), idInt(sVar(tab), tbx_type_yrot_spd_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd, ID_action_lib_pc_type_rot_spd_israndom, ID_action_lib_pc_type_rot_spd_random_min, ID_action_lib_pc_type_rot_spd_random_max }), capwid, true, suffix);
						global::axis_edit = ud;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedz"*/ STR(3699), idVar(global::ptype_edit, rot_spd).Value(ud), idVar(global::ptype_edit, rot_spd_israndom).Value(ud), idVar(global::ptype_edit, rot_spd_random_min).Value(ud), idVar(global::ptype_edit, rot_spd_random_max).Value(ud), 1.0 / 2.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(180), IntType(180) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zrot_spd), idInt(sVar(tab), tbx_type_zrot_spd_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd, ID_action_lib_pc_type_rot_spd_israndom, ID_action_lib_pc_type_rot_spd_random_min, ID_action_lib_pc_type_rot_spd_random_max }), capwid, true, suffix);
					}
					global::axis_edit = X_;
					tab_template_editor_particles_value(self, /*"particleeditortyperotationspeed"*/ STR(3696) + ((idVar(global::ptype_edit, rot_spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)) + /*"add"*/ STR(630), idVar(global::ptype_edit, rot_spd_add).Value(X_), idVar(global::ptype_edit, rot_spd_add_israndom).Value(X_), idVar(global::ptype_edit, rot_spd_add_random_min).Value(X_), idVar(global::ptype_edit, rot_spd_add_random_max).Value(X_), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(10), IntType(10) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xrot_spd_add), idInt(sVar(tab), tbx_type_xrot_spd_add_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_add, ID_action_lib_pc_type_rot_spd_add_israndom, ID_action_lib_pc_type_rot_spd_add_random_min, ID_action_lib_pc_type_rot_spd_add_random_max }), capwid, true, suffix);
					if (idVar(global::ptype_edit, rot_spd_extend) > 0)
					{
						global::axis_edit = sn;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedyadd"*/ STR(3701), idVar(global::ptype_edit, rot_spd_add).Value(sn), idVar(global::ptype_edit, rot_spd_add_israndom).Value(sn), idVar(global::ptype_edit, rot_spd_add_random_min).Value(sn), idVar(global::ptype_edit, rot_spd_add_random_max).Value(sn), 1.0 / 20.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(10), IntType(10) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yrot_spd_add), idInt(sVar(tab), tbx_type_yrot_spd_add_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_add, ID_action_lib_pc_type_rot_spd_add_israndom, ID_action_lib_pc_type_rot_spd_add_random_min, ID_action_lib_pc_type_rot_spd_add_random_max }), capwid, true, suffix);
						global::axis_edit = ud;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedzadd"*/ STR(3702), idVar(global::ptype_edit, rot_spd_add).Value(ud), idVar(global::ptype_edit, rot_spd_add_israndom).Value(ud), idVar(global::ptype_edit, rot_spd_add_random_min).Value(ud), idVar(global::ptype_edit, rot_spd_add_random_max).Value(ud), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(10), IntType(10) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zrot_spd_add), idInt(sVar(tab), tbx_type_zrot_spd_add_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_add, ID_action_lib_pc_type_rot_spd_add_israndom, ID_action_lib_pc_type_rot_spd_add_random_min, ID_action_lib_pc_type_rot_spd_add_random_max }), capwid, true, suffix);
					}
					global::axis_edit = X_;
					tab_template_editor_particles_value(self, /*"particleeditortyperotationspeed"*/ STR(3696) + ((idVar(global::ptype_edit, rot_spd_extend) > 0) ? /*"x"*/ STR(850) : /*"xyz"*/ STR(3673)) + /*"mul"*/ STR(3688), idVar(global::ptype_edit, rot_spd_mul).Value(X_), idVar(global::ptype_edit, rot_spd_mul_israndom).Value(X_), idVar(global::ptype_edit, rot_spd_mul_random_min).Value(X_), idVar(global::ptype_edit, rot_spd_mul_random_max).Value(X_), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_xrot_spd_mul), idInt(sVar(tab), tbx_type_xrot_spd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_mul, ID_action_lib_pc_type_rot_spd_mul_israndom, ID_action_lib_pc_type_rot_spd_mul_random_min, ID_action_lib_pc_type_rot_spd_mul_random_max }), capwid, true, suffix);
					if (idVar(global::ptype_edit, rot_spd_extend) > 0)
					{
						global::axis_edit = sn;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedymul"*/ STR(3704), idVar(global::ptype_edit, rot_spd_mul).Value(sn), idVar(global::ptype_edit, rot_spd_mul_israndom).Value(sn), idVar(global::ptype_edit, rot_spd_mul_random_min).Value(sn), idVar(global::ptype_edit, rot_spd_mul_random_max).Value(sn), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_yrot_spd_mul), idInt(sVar(tab), tbx_type_yrot_spd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_mul, ID_action_lib_pc_type_rot_spd_mul_israndom, ID_action_lib_pc_type_rot_spd_mul_random_min, ID_action_lib_pc_type_rot_spd_mul_random_max }), capwid, true, suffix);
						global::axis_edit = ud;
						tab_template_editor_particles_value(self, /*"particleeditortyperotationspeedzmul"*/ STR(3705), idVar(global::ptype_edit, rot_spd_mul).Value(ud), idVar(global::ptype_edit, rot_spd_mul_israndom).Value(ud), idVar(global::ptype_edit, rot_spd_mul_random_min).Value(ud), idVar(global::ptype_edit, rot_spd_mul_random_max).Value(ud), 1.0 / 200.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.75, 0.9 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_zrot_spd_mul), idInt(sVar(tab), tbx_type_zrot_spd_mul_random) }), ArrType::From({ ID_action_lib_pc_type_rot_spd_mul, ID_action_lib_pc_type_rot_spd_mul_israndom, ID_action_lib_pc_type_rot_spd_mul_random_min, ID_action_lib_pc_type_rot_spd_mul_random_max }), capwid, true, suffix);
					}
					tab_collapse_end(self);
				}
			}
			if (idVar(global::ptype_edit, temp) == particle_sheet || idVar(global::ptype_edit, temp) == particle_template)
			{
				capwid = text_caption_width(self, { /*"particleeditortypespriteangle"*/ STR(3710), /*"particleeditortypespriteangleadd"*/ STR(3711) });
				tab_template_editor_particles_value(self, /*"particleeditortypespriteangle"*/ STR(3710), idVar(global::ptype_edit, sprite_angle), idVar(global::ptype_edit, sprite_angle_israndom), idVar(global::ptype_edit, sprite_angle_random_min), idVar(global::ptype_edit, sprite_angle_random_max), 1.0 / 5.0, IntType(0), no_limit, ArrType::From({ IntType(0), IntType(0), IntType(360) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_sprite_angle), idInt(sVar(tab), tbx_type_sprite_angle_random) }), ArrType::From({ ID_action_lib_pc_type_sprite_angle, ID_action_lib_pc_type_sprite_angle_israndom, ID_action_lib_pc_type_sprite_angle_random_min, ID_action_lib_pc_type_sprite_angle_random_max }), capwid);
				tab_template_editor_particles_value(self, /*"particleeditortypespriteangleadd"*/ STR(3711), idVar(global::ptype_edit, sprite_angle_add), idVar(global::ptype_edit, sprite_angle_add_israndom), idVar(global::ptype_edit, sprite_angle_add_random_min), idVar(global::ptype_edit, sprite_angle_add_random_max), 1.0 / 10.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(90), IntType(90) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_sprite_angle_add), idInt(sVar(tab), tbx_type_sprite_angle_add_random) }), ArrType::From({ ID_action_lib_pc_type_sprite_angle_add, ID_action_lib_pc_type_sprite_angle_add_israndom, ID_action_lib_pc_type_sprite_angle_add_random_min, ID_action_lib_pc_type_sprite_angle_add_random_max }), capwid, true, suffix);
			}
		}
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditortypescale"*/ STR(3712) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		capwid = text_caption_width(self, { /*"particleeditortypeinitialscale"*/ STR(3713), /*"particleeditortypescaleadd"*/ STR(3714) });
		tab_template_editor_particles_value(self, /*"particleeditortypeinitialscale"*/ STR(3713), idVar(global::ptype_edit, scale), idVar(global::ptype_edit, scale_israndom), idVar(global::ptype_edit, scale_random_min), idVar(global::ptype_edit, scale_random_max), 1.0 / 100.0, IntType(0), no_limit, ArrType::From({ IntType(1), 0.5, IntType(2) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_scale), idInt(sVar(tab), tbx_type_scale_random) }), ArrType::From({ ID_action_lib_pc_type_scale, ID_action_lib_pc_type_scale_israndom, ID_action_lib_pc_type_scale_random_min, ID_action_lib_pc_type_scale_random_max }), capwid);
		tab_template_editor_particles_value(self, /*"particleeditortypescaleadd"*/ STR(3714), idVar(global::ptype_edit, scale_add), idVar(global::ptype_edit, scale_add_israndom), idVar(global::ptype_edit, scale_add_random_min), idVar(global::ptype_edit, scale_add_random_max), 1.0 / 100.0, -no_limit, no_limit, ArrType::From({ IntType(0), -0.2, -0.1 }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_scale_add), idInt(sVar(tab), tbx_type_scale_add_random) }), ArrType::From({ ID_action_lib_pc_type_scale_add, ID_action_lib_pc_type_scale_add_israndom, ID_action_lib_pc_type_scale_add_random_min, ID_action_lib_pc_type_scale_add_random_max }), capwid, true, suffix);
		sVar(dy) += IntType(10);
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditortypeappearance"*/ STR(3715) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control_meter(self);
		draw_button_icon(self, { /*"particleeditorrandomalpha"*/ STR(3716), sVar(dx) + sVar(dw) - sReal(ui_small_height), sVar(dy), sReal(ui_small_height), sReal(ui_small_height), idVar(global::ptype_edit, alpha_israndom), icons_RANDOMIZE, ID_action_lib_pc_type_alpha_israndom, false, /*"tooltipparticlesrandom"*/ STR(3717) });
		if (idVar(global::ptype_edit, alpha_israndom) > 0)
			draw_meter_range(self, /*"particleeditortypeopacity"*/ STR(3718), sVar(dx), sVar(dy), sVar(dw) - IntType(36), IntType(0), IntType(100), IntType(1), round(idVar(global::ptype_edit, alpha_random_min) * IntType(100)), round(idVar(global::ptype_edit, alpha_random_max) * IntType(100)), IntType(0), IntType(100), idInt(sVar(tab), tbx_type_alpha), idInt(sVar(tab), tbx_type_alpha_random), ID_action_lib_pc_type_alpha_random_min, ID_action_lib_pc_type_alpha_random_max);
		else
			draw_meter(self, /*"particleeditortypeopacity"*/ STR(3718), sVar(dx), sVar(dy), sVar(dw) - IntType(36), round(idVar(global::ptype_edit, alpha) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), idInt(sVar(tab), tbx_type_alpha), ID_action_lib_pc_type_alpha);
		
		tab_next(self);
		tab_template_editor_particles_value(self, /*"particleeditortypeopacityadd"*/ STR(3719), idVar(global::ptype_edit, alpha_add) * IntType(100), idVar(global::ptype_edit, alpha_add_israndom), idVar(global::ptype_edit, alpha_add_random_min) * IntType(100), idVar(global::ptype_edit, alpha_add_random_max) * IntType(100), 1.0 / 2.0, -no_limit, no_limit, ArrType::From({ IntType(0), -IntType(10), -IntType(5) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_alpha_add), idInt(sVar(tab), tbx_type_alpha_add_random) }), ArrType::From({ ID_action_lib_pc_type_alpha_add, ID_action_lib_pc_type_alpha_add_israndom, ID_action_lib_pc_type_alpha_add_random_min, ID_action_lib_pc_type_alpha_add_random_max }), null_, true, suffix);
		VarType name;
		RealType colwid;
		wid = (sVar(dw) - IntType(36));
		colwid = floor((wid - IntType(8)) / 2.0);
		tab_control_switch(self);
		draw_switch(self, /*"particleeditortypecolormixenabled"*/ STR(3720), sVar(dx), sVar(dy), idVar(global::ptype_edit, color_mix_enabled), ID_action_lib_pc_type_color_mix_enabled);
		tab_next(self);
		if (idVar(global::ptype_edit, color_mix_enabled) > 0)
		{
			tab_control(self, IntType(20));
			draw_label(self, { text_get({ /*"particleeditortypecolorstart"*/ STR(3721) }), sVar(dx), sVar(dy) + IntType(10), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			tab_next(self);
		}
		tab_control_color(self);
		draw_button_icon(self, { /*"particleeditorrandomcolor"*/ STR(3722), sVar(dx) + sVar(dw) - sReal(ui_small_height), sVar(dy) + (sReal(tab_control_h) / 2.0) - IntType(12), sReal(ui_small_height), sReal(ui_small_height), idVar(global::ptype_edit, color_israndom), icons_RANDOMIZE, ID_action_lib_pc_type_color_israndom, false, /*"tooltipparticlesrandom"*/ STR(3717) });
		if (idVar(global::ptype_edit, color_israndom) > 0)
		{
			name = (idVar(global::ptype_edit, color_mix_enabled) > 0) ? /*"particleeditortypecolorstartcolor1"*/ STR(3723) : /*"particleeditortypecolorcolor1"*/ STR(3724);
			draw_button_color(self, name, sVar(dx), sVar(dy), colwid, idVar(global::ptype_edit, color_random_start), c_gray, false, ID_action_lib_pc_type_color_random_start);
			name = (idVar(global::ptype_edit, color_mix_enabled) > 0) ? /*"particleeditortypecolorstartcolor2"*/ STR(3725) : /*"particleeditortypecolorcolor2"*/ STR(3726);
			draw_button_color(self, name, sVar(dx) + colwid + IntType(8), sVar(dy), colwid, idVar(global::ptype_edit, color_random_end), c_white, false, ID_action_lib_pc_type_color_random_end);
		}
		else
		{
			name = (idVar(global::ptype_edit, color_mix_enabled) > 0) ? /*"particleeditortypecolorstartcolor"*/ STR(3727) : /*"particleeditortypecolorcolor"*/ STR(3728);
			draw_button_color(self, name, sVar(dx), sVar(dy), wid, idVar(global::ptype_edit, color), c_white, false, ID_action_lib_pc_type_color);
		}
		
		tab_next(self);
		if (idVar(global::ptype_edit, color_mix_enabled) > 0)
		{
			tab_control(self, IntType(20));
			draw_label(self, { text_get({ /*"particleeditortypecolorend"*/ STR(3729) }), sVar(dx), sVar(dy) + IntType(10), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			tab_next(self);
			tab_control_color(self);
			draw_button_icon(self, { /*"particleeditorrandommixcolor"*/ STR(3730), sVar(dx) + sVar(dw) - sReal(ui_small_height), sVar(dy) + (sReal(tab_control_h) / 2.0) - IntType(12), sReal(ui_small_height), sReal(ui_small_height), idVar(global::ptype_edit, color_mix_israndom), icons_RANDOMIZE, ID_action_lib_pc_type_color_mix_israndom, false, /*"tooltipparticlesrandom"*/ STR(3717) });
			if (idVar(global::ptype_edit, color_mix_israndom) > 0)
			{
				draw_button_color(self, /*"particleeditortypecolorendcolor1"*/ STR(3731), sVar(dx), sVar(dy), colwid, idVar(global::ptype_edit, color_mix_random_start), c_gray, false, ID_action_lib_pc_type_color_mix_random_start);
				draw_button_color(self, /*"particleeditortypecolorendcolor2"*/ STR(3732), sVar(dx) + colwid + IntType(8), sVar(dy), colwid, idVar(global::ptype_edit, color_mix_random_end), c_white, false, ID_action_lib_pc_type_color_mix_random_end);
			}
			else
				draw_button_color(self, /*"particleeditortypecolorendcolor"*/ STR(3733), sVar(dx), sVar(dy), wid, idVar(global::ptype_edit, color_mix), c_black, false, ID_action_lib_pc_type_color_mix);
			
			tab_next(self);
			tab_template_editor_particles_value(self, /*"particleeditortypecolormixtime"*/ STR(3734), idVar(global::ptype_edit, color_mix_time), idVar(global::ptype_edit, color_mix_time_israndom), idVar(global::ptype_edit, color_mix_time_random_min), idVar(global::ptype_edit, color_mix_time_random_max), 1.0 / 20.0, IntType(0), no_limit, ArrType::From({ IntType(3), IntType(1), IntType(5) }), IntType(0), ArrType::From({ idInt(sVar(tab), tbx_type_color_mix_time), idInt(sVar(tab), tbx_type_color_mix_time_random) }), ArrType::From({ ID_action_lib_pc_type_color_mix_time, ID_action_lib_pc_type_color_mix_time_israndom, ID_action_lib_pc_type_color_mix_time_random_min, ID_action_lib_pc_type_color_mix_time_random_max }), null_, true, suffix);
		}
		draw_divide(sVar(content_x), sVar(dy), dividew);
		sVar(dy) += IntType(12);
		tab_control(self, IntType(16));
		draw_label(self, { text_get({ /*"particleeditortypesimulation"*/ STR(3735) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"particleeditortypespawnregion"*/ STR(3736), sVar(dx), sVar(dy), idVar(global::ptype_edit, spawn_region), ID_action_lib_pc_type_spawn_region);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"particleeditortypeorbit"*/ STR(3737), sVar(dx), sVar(dy), idVar(global::ptype_edit, orbit), ID_action_lib_pc_type_orbit);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"particleeditortypeboundingbox"*/ STR(3738), sVar(dx), sVar(dy), idVar(global::ptype_edit, bounding_box), ID_action_lib_pc_type_bounding_box);
		tab_next(self);
		if (idVar(global::ptype_edit, bounding_box) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"particleeditortypebounce"*/ STR(3739), sVar(dx), sVar(dy) + IntType(1), idVar(global::ptype_edit, bounce), ID_action_lib_pc_type_bounce);
			tab_next(self);
			if (idVar(global::ptype_edit, bounce) > 0)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"particleeditortypebouncefactor"*/ STR(3740), sVar(dx), sVar(dy), IntType(64), idVar(global::ptype_edit, bounce_factor), 1.0 / 100.0, IntType(0), no_limit, 0.5, IntType(0), idInt(sVar(tab), tbx_type_bounce_factor), ID_action_lib_pc_type_bounce_factor);
				tab_next(self);
			}
		}
		return 0.0;
	}
	
}
