/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType project_load_particles(ScopeAny self, VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		temp_particles_init(self);
		sVar(pc_spawn_constant) = value_get_real(DsMap(map).Value(/*"spawn_constant"*/ STR(2239)), sVar(pc_spawn_constant));
		sVar(pc_spawn_amount) = value_get_real(DsMap(map).Value(/*"spawn_amount"*/ STR(2240)), sVar(pc_spawn_amount));
		sVar(pc_spawn_region_use) = value_get_real(DsMap(map).Value(/*"spawn_region_use"*/ STR(2241)), sVar(pc_spawn_region_use));
		sVar(pc_spawn_region_type) = value_get_string(DsMap(map).Value(/*"spawn_region_type"*/ STR(2242)), sVar(pc_spawn_region_type));
		sVar(pc_spawn_region_path) = value_get_save_id({ DsMap(map).Value(/*"spawn_region_path"*/ STR(2243)), sVar(pc_spawn_region_path) });
		sVar(pc_spawn_region_sphere_radius) = value_get_real(DsMap(map).Value(/*"spawn_region_sphere_radius"*/ STR(2244)), sVar(pc_spawn_region_sphere_radius));
		sVar(pc_spawn_region_cube_size) = value_get_real(DsMap(map).Value(/*"spawn_region_cube_size"*/ STR(2245)), sVar(pc_spawn_region_cube_size));
		sVar(pc_spawn_region_box_size) = value_get_point3D(DsMap(map).Value(/*"spawn_region_box_size"*/ STR(2246)), sVar(pc_spawn_region_box_size));
		sVar(pc_spawn_region_path_radius) = value_get_real(DsMap(map).Value(/*"spawn_region_path_radius"*/ STR(2247)), sVar(pc_spawn_region_path_radius));
		sVar(pc_bounding_box_type) = value_get_string(DsMap(map).Value(/*"bounding_box_type"*/ STR(2248)), sVar(pc_bounding_box_type));
		sVar(pc_bounding_box_ground_z) = value_get_real(DsMap(map).Value(/*"bounding_box_ground_z"*/ STR(2249)), sVar(pc_bounding_box_ground_z));
		sVar(pc_bounding_box_custom_start) = value_get_point3D(DsMap(map).Value(/*"bounding_box_custom_start"*/ STR(2250)), sVar(pc_bounding_box_custom_start));
		sVar(pc_bounding_box_custom_end) = value_get_point3D(DsMap(map).Value(/*"bounding_box_custom_end"*/ STR(2251)), sVar(pc_bounding_box_custom_end));
		sVar(pc_bounding_box_relative) = value_get_real(DsMap(map).Value(/*"bounding_box_relative"*/ STR(2252)), sVar(pc_bounding_box_relative));
		sVar(pc_destroy_at_animation_finish) = value_get_real(DsMap(map).Value(/*"destroy_at_animation_finish"*/ STR(2253)), sVar(pc_destroy_at_animation_finish));
		sVar(pc_destroy_at_amount) = value_get_real(DsMap(map).Value(/*"destroy_at_amount"*/ STR(2254)), sVar(pc_destroy_at_amount));
		sVar(pc_destroy_at_amount_val) = value_get_real(DsMap(map).Value(/*"destroy_at_amount_val"*/ STR(2255)), sVar(pc_destroy_at_amount_val));
		sVar(pc_destroy_at_time) = value_get_real(DsMap(map).Value(/*"destroy_at_time"*/ STR(2256)), sVar(pc_destroy_at_time));
		sVar(pc_destroy_at_time_seconds) = value_get_real(DsMap(map).Value(/*"destroy_at_time_seconds"*/ STR(2257)), sVar(pc_destroy_at_time_seconds));
		sVar(pc_destroy_at_time_israndom) = value_get_real(DsMap(map).Value(/*"destroy_at_time_israndom"*/ STR(2258)), sVar(pc_destroy_at_time_israndom));
		sVar(pc_destroy_at_time_random_min) = value_get_real(DsMap(map).Value(/*"destroy_at_time_random_min"*/ STR(2259)), sVar(pc_destroy_at_time_random_min));
		sVar(pc_destroy_at_time_random_max) = value_get_real(DsMap(map).Value(/*"destroy_at_time_random_max"*/ STR(2260)), sVar(pc_destroy_at_time_random_max));
		sVar(pc_destroy_at_bounding_box) = value_get_real(DsMap(map).Value(/*"destroy_at_bounding_box"*/ STR(2261)), sVar(pc_destroy_at_bounding_box));
		VarType ptypeslist = DsMap(map).Value(/*"types"*/ STR(2262));
		for (IntType i = IntType(0); i < ds_list_size((IntType)(ptypeslist)); i++)
		{
			VarType ptypemap = DsList(ptypeslist).Value(i);
			withOne (obj_particle_type, (new obj_particle_type)->id, self->id)
			{
				self->loaded = true;
				self->load_id = value_get_string(DsMap(ptypemap).Value(/*"id"*/ STR(86)), self->save_id);
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->creator = self.otherId;
				self->name = value_get_string(DsMap(ptypemap).Value(/*"name"*/ STR(819)), self->name);
				if (self.otherId == global::_app->bench_settings && text_exists(/*"particletype"*/ STR(2263) + self->name))
					self->name = text_get({ /*"particletype"*/ STR(2263) + self->name });
				if (global::load_format < e_project_FORMAT_123_PRE_2)
				{
					self->temp = value_get_save_id({ DsMap(ptypemap).Value(/*"temp"*/ STR(2264)), particle_sheet });
				}
				else
				{
					VarType temptype = value_get_string(DsMap(ptypemap).Value(/*"temp_type"*/ STR(2265)), /*"sheet"*/ STR(2266));
					if (temptype == /*"sheet"*/ STR(2266))
						self->temp = particle_sheet;
					else
						if (temptype == /*"template"*/ STR(2267))
							self->temp = particle_template;
						else
							self->temp = value_get_save_id({ DsMap(ptypemap).Value(/*"temp"*/ STR(2264)), particle_sheet });
					
					
				}
				
				self->text = value_get_string(DsMap(ptypemap).Value(/*"text"*/ STR(104)), self->text);
				self->spawn_rate = value_get_real(DsMap(ptypemap).Value(/*"spawn_rate"*/ STR(2268)), self->spawn_rate);
				self->sprite_tex = value_get_save_id({ DsMap(ptypemap).Value(/*"sprite_tex"*/ STR(2269)), self->sprite_tex });
				self->sprite_tex_image = value_get_real(DsMap(ptypemap).Value(/*"sprite_tex_image"*/ STR(2270)), self->sprite_tex_image);
				self->sprite_template_tex = value_get_save_id({ DsMap(ptypemap).Value(/*"sprite_template_tex"*/ STR(2271)), self->sprite_template_tex });
				self->sprite_template = value_get_string(DsMap(ptypemap).Value(/*"sprite_template"*/ STR(2272)), self->sprite_template);
				self->sprite_template_still_frame = value_get_real(DsMap(ptypemap).Value(/*"sprite_template_still_frame"*/ STR(2273)), self->sprite_template_still_frame);
				self->sprite_template_random_frame = value_get_real(DsMap(ptypemap).Value(/*"sprite_template_random_frame"*/ STR(2274)), self->sprite_template_random_frame);
				self->sprite_template_reverse = value_get_real(DsMap(ptypemap).Value(/*"sprite_template_reverse"*/ STR(2275)), self->sprite_template_reverse);
				self->sprite_frame_width = value_get_real(DsMap(ptypemap).Value(/*"sprite_frame_width"*/ STR(2276)), self->sprite_frame_width);
				self->sprite_frame_height = value_get_real(DsMap(ptypemap).Value(/*"sprite_frame_height"*/ STR(2277)), self->sprite_frame_height);
				self->sprite_frame_start = value_get_real(DsMap(ptypemap).Value(/*"sprite_frame_start"*/ STR(2278)), self->sprite_frame_start);
				self->sprite_frame_end = value_get_real(DsMap(ptypemap).Value(/*"sprite_frame_end"*/ STR(2279)), self->sprite_frame_end);
				self->sprite_animation_speed = value_get_real(DsMap(ptypemap).Value(/*"sprite_animation_speed"*/ STR(2280)), self->sprite_animation_speed);
				self->sprite_animation_speed_israndom = value_get_real(DsMap(ptypemap).Value(/*"sprite_animation_speed_israndom"*/ STR(2281)), self->sprite_animation_speed_israndom);
				self->sprite_animation_speed_random_min = value_get_real(DsMap(ptypemap).Value(/*"sprite_animation_speed_random_min"*/ STR(2282)), self->sprite_animation_speed_random_min);
				self->sprite_animation_speed_random_max = value_get_real(DsMap(ptypemap).Value(/*"sprite_animation_speed_random_max"*/ STR(2283)), self->sprite_animation_speed_random_max);
				self->sprite_animation_onend = value_get_real(DsMap(ptypemap).Value(/*"sprite_animation_onend"*/ STR(2284)), self->sprite_animation_onend);
				self->angle_extend = value_get_real(DsMap(ptypemap).Value(/*"angle_extend"*/ STR(2285)), self->angle_extend);
				self->angle = value_get_point3D(DsMap(ptypemap).Value(/*"angle"*/ STR(848)), self->angle);
				self->angle_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"angle_israndom"*/ STR(2286)), self->angle_israndom);
				self->angle_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"angle_random_min"*/ STR(2287)), self->angle_random_min);
				self->angle_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"angle_random_max"*/ STR(2288)), self->angle_random_max);
				self->angle_speed = value_get_real(DsMap(ptypemap).Value(/*"angle_speed"*/ STR(2289)), self->angle_speed);
				self->angle_speed_israndom = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_israndom"*/ STR(2290)), self->angle_speed_israndom);
				self->angle_speed_random_min = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_random_min"*/ STR(2291)), self->angle_speed_random_min);
				self->angle_speed_random_max = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_random_max"*/ STR(2292)), self->angle_speed_random_max);
				self->angle_speed_add = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_add"*/ STR(2293)), self->angle_speed_add);
				self->angle_speed_add_israndom = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_add_israndom"*/ STR(2294)), self->angle_speed_add_israndom);
				self->angle_speed_add_random_min = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_add_random_min"*/ STR(2295)), self->angle_speed_add_random_min);
				self->angle_speed_add_random_max = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_add_random_max"*/ STR(2296)), self->angle_speed_add_random_max);
				self->angle_speed_mul = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_mul"*/ STR(2297)), self->angle_speed_mul);
				self->angle_speed_mul_israndom = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_mul_israndom"*/ STR(2298)), self->angle_speed_mul_israndom);
				self->angle_speed_mul_random_min = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_mul_random_min"*/ STR(2299)), self->angle_speed_mul_random_min);
				self->angle_speed_mul_random_max = value_get_real(DsMap(ptypemap).Value(/*"angle_speed_mul_random_max"*/ STR(2300)), self->angle_speed_mul_random_max);
				if (global::load_format < e_project_FORMAT_123_PRE_2)
				{
					self->angle_speed = IntType(0);
					self->angle_speed_israndom = false;
				}
				self->spd_extend = value_get_real(DsMap(ptypemap).Value(/*"spd_extend"*/ STR(2301)), self->spd_extend);
				self->spd = value_get_point3D(DsMap(ptypemap).Value(/*"spd"*/ STR(2302)), self->spd);
				self->spd_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"spd_israndom"*/ STR(2303)), self->spd_israndom);
				self->spd_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"spd_random_min"*/ STR(2304)), self->spd_random_min);
				self->spd_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"spd_random_max"*/ STR(2305)), self->spd_random_max);
				self->spd_add = value_get_point3D(DsMap(ptypemap).Value(/*"spd_add"*/ STR(2306)), self->spd_add);
				self->spd_add_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"spd_add_israndom"*/ STR(2307)), self->spd_add_israndom);
				self->spd_add_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"spd_add_random_min"*/ STR(2308)), self->spd_add_random_min);
				self->spd_add_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"spd_add_random_max"*/ STR(2309)), self->spd_add_random_max);
				self->spd_mul = value_get_point3D(DsMap(ptypemap).Value(/*"spd_mul"*/ STR(2310)), self->spd_mul);
				self->spd_mul_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"spd_mul_israndom"*/ STR(2311)), self->spd_mul_israndom);
				self->spd_mul_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"spd_mul_random_min"*/ STR(2312)), self->spd_mul_random_min);
				self->spd_mul_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"spd_mul_random_max"*/ STR(2313)), self->spd_mul_random_max);
				self->rot_extend = value_get_real(DsMap(ptypemap).Value(/*"rot_extend"*/ STR(2314)), self->rot_extend);
				self->rot = value_get_point3D(DsMap(ptypemap).Value(/*"rot"*/ STR(2315)), self->rot);
				self->rot_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"rot_israndom"*/ STR(2316)), self->rot_israndom);
				self->rot_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"rot_random_min"*/ STR(2317)), self->rot_random_min);
				self->rot_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"rot_random_max"*/ STR(2318)), self->rot_random_max);
				self->rot_spd_extend = value_get_real(DsMap(ptypemap).Value(/*"rot_spd_extend"*/ STR(2319)), self->rot_spd_extend);
				self->rot_spd = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd"*/ STR(2320)), self->rot_spd);
				self->rot_spd_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_israndom"*/ STR(2321)), self->rot_spd_israndom);
				self->rot_spd_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_random_min"*/ STR(2322)), self->rot_spd_random_min);
				self->rot_spd_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_random_max"*/ STR(2323)), self->rot_spd_random_max);
				self->rot_spd_add = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_add"*/ STR(2324)), self->rot_spd_add);
				self->rot_spd_add_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_add_israndom"*/ STR(2325)), self->rot_spd_add_israndom);
				self->rot_spd_add_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_add_random_min"*/ STR(2326)), self->rot_spd_add_random_min);
				self->rot_spd_add_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_add_random_max"*/ STR(2327)), self->rot_spd_add_random_max);
				self->rot_spd_mul = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_mul"*/ STR(2328)), self->rot_spd_mul);
				self->rot_spd_mul_israndom = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_mul_israndom"*/ STR(2329)), self->rot_spd_mul_israndom);
				self->rot_spd_mul_random_min = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_mul_random_min"*/ STR(2330)), self->rot_spd_mul_random_min);
				self->rot_spd_mul_random_max = value_get_point3D(DsMap(ptypemap).Value(/*"rot_spd_mul_random_max"*/ STR(2331)), self->rot_spd_mul_random_max);
				self->sprite_angle = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle"*/ STR(2332)), self->sprite_angle);
				self->sprite_angle_israndom = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_israndom"*/ STR(2333)), self->sprite_angle_israndom);
				self->sprite_angle_random_min = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_random_min"*/ STR(2334)), self->sprite_angle_random_min);
				self->sprite_angle_random_max = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_random_max"*/ STR(2335)), self->sprite_angle_random_max);
				self->sprite_angle_add = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_add"*/ STR(2336)), self->sprite_angle_add);
				self->sprite_angle_add_israndom = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_add_israndom"*/ STR(2337)), self->sprite_angle_add_israndom);
				self->sprite_angle_add_random_min = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_add_random_min"*/ STR(2338)), self->sprite_angle_add_random_min);
				self->sprite_angle_add_random_max = value_get_real(DsMap(ptypemap).Value(/*"sprite_angle_add_random_max"*/ STR(2339)), self->sprite_angle_add_random_max);
				self->scale = value_get_real(DsMap(ptypemap).Value(/*"scale"*/ STR(889)), self->scale);
				self->scale_israndom = value_get_real(DsMap(ptypemap).Value(/*"scale_israndom"*/ STR(2340)), self->scale_israndom);
				self->scale_random_min = value_get_real(DsMap(ptypemap).Value(/*"scale_random_min"*/ STR(2341)), self->scale_random_min);
				self->scale_random_max = value_get_real(DsMap(ptypemap).Value(/*"scale_random_max"*/ STR(2342)), self->scale_random_max);
				self->scale_add = value_get_real(DsMap(ptypemap).Value(/*"scale_add"*/ STR(2343)), self->scale_add);
				self->scale_add_israndom = value_get_real(DsMap(ptypemap).Value(/*"scale_add_israndom"*/ STR(2344)), self->scale_add_israndom);
				self->scale_add_random_min = value_get_real(DsMap(ptypemap).Value(/*"scale_add_random_min"*/ STR(2345)), self->scale_add_random_min);
				self->scale_add_random_max = value_get_real(DsMap(ptypemap).Value(/*"scale_add_random_max"*/ STR(2346)), self->scale_add_random_max);
				self->alpha = value_get_real(DsMap(ptypemap).Value(/*"alpha"*/ STR(2347)), self->alpha);
				self->alpha_israndom = value_get_real(DsMap(ptypemap).Value(/*"alpha_israndom"*/ STR(2348)), self->alpha_israndom);
				self->alpha_random_min = value_get_real(DsMap(ptypemap).Value(/*"alpha_random_min"*/ STR(2349)), self->alpha_random_min);
				self->alpha_random_max = value_get_real(DsMap(ptypemap).Value(/*"alpha_random_max"*/ STR(2350)), self->alpha_random_max);
				self->alpha_add = value_get_real(DsMap(ptypemap).Value(/*"alpha_add"*/ STR(2351)), self->alpha_add);
				self->alpha_add_israndom = value_get_real(DsMap(ptypemap).Value(/*"alpha_add_israndom"*/ STR(2352)), self->alpha_add_israndom);
				self->alpha_add_random_min = value_get_real(DsMap(ptypemap).Value(/*"alpha_add_random_min"*/ STR(2353)), self->alpha_add_random_min);
				self->alpha_add_random_max = value_get_real(DsMap(ptypemap).Value(/*"alpha_add_random_max"*/ STR(2354)), self->alpha_add_random_max);
				self->color = value_get_color(DsMap(ptypemap).Value(/*"color"*/ STR(920)), self->color);
				self->color_israndom = value_get_real(DsMap(ptypemap).Value(/*"color_israndom"*/ STR(2355)), self->color_israndom);
				self->color_random_start = value_get_color(DsMap(ptypemap).Value(/*"color_random_start"*/ STR(2356)), self->color_random_start);
				self->color_random_end = value_get_color(DsMap(ptypemap).Value(/*"color_random_end"*/ STR(2357)), self->color_random_end);
				self->color_mix_enabled = value_get_real(DsMap(ptypemap).Value(/*"color_mix_enabled"*/ STR(2358)), self->color_mix_enabled);
				self->color_mix = value_get_color(DsMap(ptypemap).Value(/*"color_mix"*/ STR(1867)), self->color_mix);
				self->color_mix_israndom = value_get_real(DsMap(ptypemap).Value(/*"color_mix_israndom"*/ STR(2359)), self->color_mix_israndom);
				self->color_mix_random_start = value_get_color(DsMap(ptypemap).Value(/*"color_mix_random_start"*/ STR(2360)), self->color_mix_random_start);
				self->color_mix_random_end = value_get_color(DsMap(ptypemap).Value(/*"color_mix_random_end"*/ STR(2361)), self->color_mix_random_end);
				self->color_mix_time = value_get_real(DsMap(ptypemap).Value(/*"color_mix_time"*/ STR(2362)), self->color_mix_time);
				self->color_mix_time_israndom = value_get_real(DsMap(ptypemap).Value(/*"color_mix_time_israndom"*/ STR(2363)), self->color_mix_time_israndom);
				self->color_mix_time_random_min = value_get_real(DsMap(ptypemap).Value(/*"color_mix_time_random_min"*/ STR(2364)), self->color_mix_time_random_min);
				self->color_mix_time_random_max = value_get_real(DsMap(ptypemap).Value(/*"color_mix_time_random_max"*/ STR(2365)), self->color_mix_time_random_max);
				self->spawn_region = value_get_real(DsMap(ptypemap).Value(/*"spawn_region"*/ STR(2366)), self->spawn_region);
				self->bounding_box = value_get_real(DsMap(ptypemap).Value(/*"bounding_box"*/ STR(2367)), self->bounding_box);
				self->bounce = value_get_real(DsMap(ptypemap).Value(/*"bounce"*/ STR(2368)), self->bounce);
				self->bounce_factor = value_get_real(DsMap(ptypemap).Value(/*"bounce_factor"*/ STR(2369)), self->bounce_factor);
				self->orbit = value_get_real(DsMap(ptypemap).Value(/*"orbit"*/ STR(2370)), self->orbit);
				ds_list_add({ idInt(self.otherId, pc_type_list), self->id });
			}
			
		}
		return 0.0;
	}
	
	RealType project_load_project(ScopeAny self, VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		sVar(project_name) = value_get_string(DsMap(map).Value(/*"name"*/ STR(819)), sVar(project_name));
		sVar(project_author) = value_get_string(DsMap(map).Value(/*"author"*/ STR(2371)), sVar(project_author));
		sVar(project_description) = value_get_string(DsMap(map).Value(/*"description"*/ STR(1852)), sVar(project_description));
		sVar(project_video_width) = value_get_real(DsMap(map).Value(/*"video_width"*/ STR(2372)), sVar(project_video_width));
		sVar(project_video_height) = value_get_real(DsMap(map).Value(/*"video_height"*/ STR(2373)), sVar(project_video_height));
		sVar(project_video_template) = find_videotemplate(sVar(project_video_width), sVar(project_video_height));
		sVar(project_video_keep_aspect_ratio) = value_get_real(DsMap(map).Value(/*"video_keep_aspect_ratio"*/ STR(2374)), sVar(project_video_keep_aspect_ratio));
		sVar(project_render_settings) = value_get_string(DsMap(map).Value(/*"render_settings"*/ STR(2375)), sVar(project_render_settings));
		sVar(project_tempo) = value_get_real(DsMap(map).Value(/*"tempo"*/ STR(41)), sVar(project_tempo));
		sVar(project_grid_rows) = value_get_real(DsMap(map).Value(/*"grid_rows"*/ STR(2376)), sVar(project_grid_rows));
		sVar(project_grid_columns) = value_get_real(DsMap(map).Value(/*"grid_columns"*/ STR(2377)), sVar(project_grid_columns));
		ObjType(obj_view, sInt(view_main))->camera = value_get_save_id({ DsMap(map).Value(/*"view_main_camera"*/ STR(2378)), -IntType(4) });
		ObjType(obj_view, sInt(view_second))->camera = value_get_save_id({ DsMap(map).Value(/*"view_second_camera"*/ STR(2379)), -IntType(5) });
		if (sVar(project_render_settings) != /*""*/ STR(0) && !file_exists_lib(render_directory + sVar(project_render_settings) + /*".mirender"*/ STR(17)))
			sVar(project_render_settings) = /*""*/ STR(0);
		VarType tlmap = DsMap(map).Value(/*"timeline"*/ STR(125));
		if (ds_map_valid(tlmap))
		{
			sVar(timeline_repeat) = value_get_real(DsMap(tlmap).Value(/*"repeat"*/ STR(2380)), sVar(timeline_repeat));
			sVar(timeline_seamless_repeat) = value_get_real(DsMap(tlmap).Value(/*"seamless_repeat"*/ STR(2381)), sVar(timeline_seamless_repeat));
			if (global::load_format < e_project_FORMAT_200_PRE_5)
				sVar(timeline_intervals_show) = value_get_real(DsMap(tlmap).Value(/*"show_seconds"*/ STR(2382)), sVar(timeline_intervals_show));
			else
				sVar(timeline_intervals_show) = value_get_real(DsMap(tlmap).Value(/*"intervals_show"*/ STR(2383)), sVar(timeline_intervals_show));
			
			sVar(timeline_interval_size) = value_get_real(DsMap(tlmap).Value(/*"interval_size"*/ STR(2384)), sVar(timeline_interval_size));
			sVar(timeline_interval_offset) = value_get_real(DsMap(tlmap).Value(/*"interval_offset"*/ STR(2385)), sVar(timeline_interval_offset));
			sVar(timeline_marker) = value_get_real(DsMap(tlmap).Value(/*"marker"*/ STR(2386)), sVar(timeline_marker));
			idVar(sVar(timeline), list_width) = value_get_real(DsMap(tlmap).Value(/*"list_width"*/ STR(2387)), idVar(sVar(timeline), list_width));
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = value_get_real(DsMap(tlmap).Value(/*"hor_scroll"*/ STR(2388)), ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
			sVar(timeline_zoom) = value_get_real(DsMap(tlmap).Value(/*"zoom"*/ STR(2389)), sVar(timeline_zoom));
			sVar(timeline_zoom_goal) = sVar(timeline_zoom);
			sVar(timeline_region_start) = value_get_real(DsMap(tlmap).Value(/*"region_start"*/ STR(2390)), sVar(timeline_region_start));
			sVar(timeline_region_end) = value_get_real(DsMap(tlmap).Value(/*"region_end"*/ STR(2391)), sVar(timeline_region_end));
			sVar(timeline_hide_color_tag) = value_get_array(DsMap(tlmap).Value(/*"hide_color_tag"*/ STR(2392)), sVar(timeline_hide_color_tag));
		}
		VarType cammap = DsMap(map).Value(/*"work_camera"*/ STR(2393));
		if (ds_map_valid(cammap))
		{
			sVar(cam_work_focus) = value_get_point3D(DsMap(cammap).Value(/*"focus"*/ STR(2394)), sVar(cam_work_focus));
			sVar(cam_work_angle_xy) = value_get_real(DsMap(cammap).Value(/*"angle_xy"*/ STR(2395)), sVar(cam_work_angle_xy));
			sVar(cam_work_angle_z) = value_get_real(DsMap(cammap).Value(/*"angle_z"*/ STR(2396)), sVar(cam_work_angle_z));
			sVar(cam_work_roll) = value_get_real(DsMap(cammap).Value(/*"roll"*/ STR(2397)), sVar(cam_work_roll));
			sVar(cam_work_zoom) = value_get_real(DsMap(cammap).Value(/*"zoom"*/ STR(2389)), sVar(cam_work_zoom));
			sVar(cam_work_zoom_goal) = sVar(cam_work_zoom);
			sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
			sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			camera_work_set_from(self);
		}
		return 0.0;
	}
	
	RealType project_load_render(ScopeAny self, VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		sVar(project_render_samples) = value_get_real(DsMap(map).Value(/*"render_samples"*/ STR(2398)), sVar(project_render_samples));
		sVar(project_render_distance) = value_get_real(DsMap(map).Value(/*"render_distance"*/ STR(2399)), sVar(project_render_distance));
		sVar(project_render_ssao) = value_get_real(DsMap(map).Value(/*"render_ssao"*/ STR(2400)), sVar(project_render_ssao));
		sVar(project_render_ssao_radius) = value_get_real(DsMap(map).Value(/*"render_ssao_radius"*/ STR(2401)), sVar(project_render_ssao_radius));
		sVar(project_render_ssao_power) = value_get_real(DsMap(map).Value(/*"render_ssao_power"*/ STR(2402)), sVar(project_render_ssao_power));
		sVar(project_render_ssao_color) = value_get_color(DsMap(map).Value(/*"render_ssao_color"*/ STR(2403)), sVar(project_render_ssao_color));
		sVar(project_render_shadows) = value_get_real(DsMap(map).Value(/*"render_shadows"*/ STR(2404)), sVar(project_render_shadows));
		sVar(project_render_shadows_sun_buffer_size) = value_get_real(DsMap(map).Value(/*"render_shadows_sun_buffer_size"*/ STR(2405)), sVar(project_render_shadows_sun_buffer_size));
		sVar(project_render_shadows_spot_buffer_size) = value_get_real(DsMap(map).Value(/*"render_shadows_spot_buffer_size"*/ STR(2406)), sVar(project_render_shadows_spot_buffer_size));
		sVar(project_render_shadows_point_buffer_size) = value_get_real(DsMap(map).Value(/*"render_shadows_point_buffer_size"*/ STR(2407)), sVar(project_render_shadows_point_buffer_size));
		sVar(project_render_shadows_transparent) = value_get_real(DsMap(map).Value(/*"render_shadows_transparent"*/ STR(2408)), sVar(project_render_shadows_transparent));
		sVar(project_render_subsurface_samples) = value_get_real(DsMap(map).Value(/*"render_subsurface_samples"*/ STR(2409)), sVar(project_render_subsurface_samples));
		sVar(project_render_subsurface_highlight) = value_get_real(DsMap(map).Value(/*"render_subsurface_highlight"*/ STR(2410)), sVar(project_render_subsurface_highlight));
		sVar(project_render_subsurface_highlight_strength) = value_get_real(DsMap(map).Value(/*"render_subsurface_highlight_strength"*/ STR(2411)), sVar(project_render_subsurface_highlight_strength));
		sVar(project_render_indirect) = value_get_real(DsMap(map).Value(/*"render_indirect"*/ STR(2412)), sVar(project_render_indirect));
		sVar(project_render_indirect_blur_radius) = value_get_real(DsMap(map).Value(/*"render_indirect_blur_radius"*/ STR(2413)), sVar(project_render_indirect_blur_radius));
		sVar(project_render_indirect_precision) = value_get_real(DsMap(map).Value(/*"render_indirect_precision"*/ STR(2414)), sVar(project_render_indirect_precision));
		sVar(project_render_indirect_strength) = value_get_real(DsMap(map).Value(/*"render_indirect_strength"*/ STR(2415)), sVar(project_render_indirect_strength));
		sVar(project_render_reflections) = value_get_real(DsMap(map).Value(/*"render_reflections"*/ STR(2416)), sVar(project_render_reflections));
		sVar(project_render_reflections_precision) = value_get_real(DsMap(map).Value(/*"render_reflections_precision"*/ STR(2417)), sVar(project_render_reflections_precision));
		sVar(project_render_reflections_thickness) = value_get_real(DsMap(map).Value(/*"render_reflections_thickness"*/ STR(2418)), sVar(project_render_reflections_thickness));
		sVar(project_render_reflections_fade_amount) = value_get_real(DsMap(map).Value(/*"render_reflections_fade_amount"*/ STR(2419)), sVar(project_render_reflections_fade_amount));
		sVar(project_render_glow) = value_get_real(DsMap(map).Value(/*"render_glow"*/ STR(2420)), sVar(project_render_glow));
		sVar(project_render_glow_radius) = value_get_real(DsMap(map).Value(/*"render_glow_radius"*/ STR(2421)), sVar(project_render_glow_radius));
		sVar(project_render_glow_intensity) = value_get_real(DsMap(map).Value(/*"render_glow_intensity"*/ STR(2422)), sVar(project_render_glow_intensity));
		sVar(project_render_glow_falloff) = value_get_real(DsMap(map).Value(/*"render_glow_falloff"*/ STR(2423)), sVar(project_render_glow_falloff));
		sVar(project_render_glow_falloff_radius) = value_get_real(DsMap(map).Value(/*"render_glow_falloff_radius"*/ STR(2424)), sVar(project_render_glow_falloff_radius));
		sVar(project_render_glow_falloff_intensity) = value_get_real(DsMap(map).Value(/*"render_glow_falloff_intensity"*/ STR(2425)), sVar(project_render_glow_falloff_intensity));
		sVar(project_render_aa) = value_get_real(DsMap(map).Value(/*"render_aa"*/ STR(2426)), sVar(project_render_aa));
		sVar(project_render_aa_power) = value_get_real(DsMap(map).Value(/*"render_aa_power"*/ STR(2427)), sVar(project_render_aa_power));
		sVar(project_bend_style) = value_get_string(DsMap(map).Value(/*"bend_style"*/ STR(2428)), sVar(project_bend_style));
		sVar(project_render_opaque_leaves) = value_get_real(DsMap(map).Value(/*"opaque_leaves"*/ STR(2429)), sVar(project_render_opaque_leaves));
		sVar(project_render_liquid_animation) = value_get_real(DsMap(map).Value(/*"liquid_animation"*/ STR(2430)), sVar(project_render_liquid_animation));
		sVar(project_render_water_reflections) = value_get_real(DsMap(map).Value(/*"water_reflections"*/ STR(2431)), sVar(project_render_water_reflections));
		sVar(project_render_block_emissive) = value_get_real(DsMap(map).Value(/*"block_emissive"*/ STR(2432)), sVar(project_render_block_emissive));
		sVar(project_render_block_subsurface) = value_get_real(DsMap(map).Value(/*"block_subsurface"*/ STR(2433)), sVar(project_render_block_subsurface));
		sVar(project_render_glint_speed) = value_get_real(DsMap(map).Value(/*"glint_speed"*/ STR(2434)), sVar(project_render_glint_speed));
		sVar(project_render_glint_strength) = value_get_real(DsMap(map).Value(/*"glint_strength"*/ STR(2435)), sVar(project_render_glint_strength));
		sVar(project_render_open_image_denoise) = value_get_real(DsMap(map).Value(/*"open_image_denoise"*/ STR(2436)), sVar(project_render_open_image_denoise));
		sVar(project_render_open_image_denoise) = value_get_real(DsMap(map).Value(/*"open_image_denoise_usediffuse"*/ STR(2437)), sReal(project_render_open_image_denoise_usediffuse));
		sVar(project_render_open_image_denoise) = value_get_real(DsMap(map).Value(/*"open_image_denoise_usenormals"*/ STR(2438)), sReal(project_render_open_image_denoise_usenormals));
		sVar(project_render_texture_filtering) = value_get_real(DsMap(map).Value(/*"texture_filtering"*/ STR(2439)), sVar(project_render_texture_filtering));
		sVar(project_render_transparent_block_texture_filtering) = value_get_real(DsMap(map).Value(/*"transparent_block_texture_filtering"*/ STR(2440)), sVar(project_render_transparent_block_texture_filtering));
		sVar(project_render_texture_filtering_level) = value_get_real(DsMap(map).Value(/*"texture_filtering_level"*/ STR(2441)), sVar(project_render_texture_filtering_level));
		sVar(project_render_alpha_mode) = value_get_real(DsMap(map).Value(/*"render_alpha_mode"*/ STR(2442)), sVar(project_render_alpha_mode));
		sVar(project_render_tonemapper) = value_get_real(DsMap(map).Value(/*"tonemapper"*/ STR(2443)), sVar(project_render_tonemapper));
		sVar(project_render_exposure) = value_get_real(DsMap(map).Value(/*"exposure"*/ STR(2444)), sVar(project_render_exposure));
		sVar(project_render_gamma) = value_get_real(DsMap(map).Value(/*"gamma"*/ STR(2445)), sVar(project_render_gamma));
		sVar(project_render_material_maps) = value_get_real(DsMap(map).Value(/*"material_maps"*/ STR(2446)), sVar(project_render_material_maps));
		return 0.0;
	}
	
	RealType project_load_resource(VarType argument0)
	{
		VarType map = argument0;
		if (!ds_map_valid(map))
			return IntType(0);
		withOne (obj_resource, (new obj_resource)->id, noone)
		{
			self->loaded = true;
			self->load_id = value_get_string(DsMap(map).Value(/*"id"*/ STR(86)), self->save_id);
			DsMap(global::save_id_map)[self->load_id] = self->load_id;
			VarType typestr = value_get_string(DsMap(map).Value(/*"type"*/ STR(805)));
			if (global::load_format < e_project_FORMAT_200_PRE_5)
			{
				if (typestr == /*"schematic"*/ STR(2232))
					typestr = /*"scenery"*/ STR(548);
			}
			self->type = ds_list_find_index(global::res_type_name_list, typestr);
			self->filename = value_get_string(DsMap(map).Value(/*"filename"*/ STR(1274)), self->filename);
			if (self->type == e_res_type_SKIN || self->type == e_res_type_DOWNLOADED_SKIN)
				self->player_skin = value_get_real(DsMap(map).Value(/*"player_skin"*/ STR(1855)), self->player_skin);
			if (self->type == e_res_type_ITEM_SHEET)
				self->item_sheet_size = value_get_point2D(DsMap(map).Value(/*"item_sheet_size"*/ STR(2447)), self->item_sheet_size);
			if (self->type == e_res_type_SCENERY || self->type == e_res_type_FROM_WORLD)
			{
				self->scenery_tl_add = value_get_real(DsMap(map).Value(/*"scenery_tl_add"*/ STR(2448)), true);
				self->scenery_download_skins = value_get_real(DsMap(map).Value(/*"scenery_download_skins"*/ STR(2449)), false);
			}
			if (self->type == e_res_type_SCENERY)
			{
				self->scenery_palette = value_get_real(DsMap(map).Value(/*"scenery_palette"*/ STR(2450)), self->scenery_palette);
				self->scenery_integrity = value_get_real(DsMap(map).Value(/*"scenery_integrity"*/ STR(2451)), self->scenery_integrity);
				self->scenery_integrity_invert = value_get_real(DsMap(map).Value(/*"scenery_integrity_invert"*/ STR(2452)), self->scenery_integrity_invert);
				self->scenery_randomize = value_get_real(DsMap(map).Value(/*"randomize"*/ STR(2453)), self->scenery_randomize);
			}
			if (self->type == e_res_type_FROM_WORLD)
			{
				self->world_regions_dir = value_get_string(DsMap(map).Value(/*"world_regions_dir"*/ STR(2454)));
				self->world_box_start = value_get_point3D(DsMap(map).Value(/*"world_box_start"*/ STR(2455)));
				self->world_box_end = value_get_point3D(DsMap(map).Value(/*"world_box_end"*/ STR(2456)));
				self->world_filter_mode = value_get_real(DsMap(map).Value(/*"world_filter_mode"*/ STR(2457)));
				self->world_filter_array = ArrType();
				VarType filterlist = DsMap(map).Value(/*"world_filter_array"*/ STR(2458));
				if (ds_list_valid(filterlist))
					for (IntType i = IntType(0); i < ds_list_size((IntType)(filterlist)); i++)
						array_add(VarType::CreateRef(self->world_filter_array), DsList(filterlist).Value(i));
			}
			self->material_format = value_get_real(DsMap(map).Value(/*"material_format"*/ STR(2459)), self->material_format);
			sortlist_add(global::_app->res_list, self->id);
		}
		
		return 0.0;
	}
	
	void project_load_set_part_root(ScopeAny self, VarType part_root)
	{
		for (IntType i = IntType(0); i < ds_list_size(sInt(tree_list)); i++)
		{
			VarType tl = DsList(sInt(tree_list)).Value(i);
			idVar(tl, part_root) = part_root;
			withOne (Object, tl, self->id)
				project_load_set_part_root(self, part_root);
			
		}
	}
	
	IntType project_load_start(VarType fn)
	{
		IntType map = json_load({ fn });
		if (!ds_map_valid(map))
		{
			log({ /*"Could not parse JSON file"*/ STR(2460), fn });
			error(/*"errorfilecorrupted"*/ STR(2234));
			return null_;
		}
		if (!is_real(DsMap(map).Value(/*"format"*/ STR(92))))
		{
			log({ /*"Missing parameter \"format\""*/ STR(2461) });
			error(/*"errorfilecorrupted"*/ STR(2234));
			ds_map_destroy(map);
			return null_;
		}
		global::load_format = DsMap(map).Value(/*"format"*/ STR(92));
		if (global::load_format > project_format)
		{
			log({ /*"Too new project, format"*/ STR(2462), global::load_format });
			error(/*"erroropenprojectnewer"*/ STR(2463));
			ds_map_destroy(map);
			return null_;
		}
		else
			if (global::load_format < e_project_FORMAT_110_PRE_1)
			{
				log({ /*"Invalid format"*/ STR(2233), global::load_format });
				error(/*"errorfilecorrupted"*/ STR(2234));
				ds_map_destroy(map);
				return null_;
			}
		
		log({ /*"load_format"*/ STR(1271), global::load_format });
		return map;
	}
	
	RealType project_load_startup()
	{
		global::_app->project_startup_fn = /*""*/ STR(0);
		for (IntType i = IntType(0); i < parameter_count(); i++)
		{
			StringType p, ext;
			p = parameter_string(i);
			ext = filename_ext(p);
			for (IntType j = IntType(0); j <= IntType(9); j++)
				ext = string_replace(ext, string(j), /*""*/ STR(0));
			if (ext == /*".miproject"*/ STR(720))
			{
				global::_app->project_startup_fn = p;
				return IntType(0);
			}
		}
		return 0.0;
	}
	
	RealType project_load_template(VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		withOne (obj_template, (new obj_template)->id, noone)
		{
			self->loaded = true;
			self->load_id = value_get_string(DsMap(map).Value(/*"id"*/ STR(86)), self->save_id);
			DsMap(global::save_id_map)[self->load_id] = self->load_id;
			self->type = ds_list_find_index(global::temp_type_name_list, value_get_string(DsMap(map).Value(/*"type"*/ STR(805))));
			self->name = value_get_string(DsMap(map).Value(/*"name"*/ STR(819)), self->name);
			if (self->type == e_temp_type_CHARACTER || self->type == e_temp_type_SPECIAL_BLOCK || self->type == e_temp_type_BODYPART)
			{
				if (global::load_format == e_project_FORMAT_110_PRE_1)
					self->model_tex = value_get_save_id({ DsMap(map).Value(/*"skin"*/ STR(566)), self->model_tex });
				else
					self->model_tex = value_get_save_id({ DsMap(map).Value(/*"model_tex"*/ STR(2464)), self->model_tex });
				
				if (global::load_format >= e_project_FORMAT_200_PRE_5)
				{
					self->model_tex_material = value_get_save_id({ DsMap(map).Value(/*"model_tex_material"*/ STR(2465)), self->model_tex_material });
					self->model_tex_normal = value_get_save_id({ DsMap(map).Value(/*"model_tex_normal"*/ STR(2466)), self->model_tex_normal });
				}
				else
				{
					self->model_tex_material = /*"default"*/ STR(102);
					self->model_tex_normal = /*"default"*/ STR(102);
				}
				
				self->model_use_blend_color = value_get_real(DsMap(map).Value(/*"model_use_blend_color"*/ STR(2467)), self->model_use_blend_color);
				self->model_blend_color = value_get_color(DsMap(map).Value(/*"model_blend_color"*/ STR(2468)), self->model_blend_color);
				VarType modelmap = DsMap(map).Value(/*"model"*/ STR(8));
				if (ds_map_valid(modelmap))
				{
					self->model_name = value_get_string(DsMap(modelmap).Value(/*"name"*/ STR(819)), self->model_name);
					self->model_state = value_get_state_vars(DsMap(modelmap).Value(/*"state"*/ STR(1026)));
					if (DsMap(global::legacy_model_names_map).Value(self->model_name) != VarType())
						self->model_name = DsMap(global::legacy_model_names_map).Value(self->model_name);
					if (DsMap(global::legacy_model_states_map).Value(self->model_name) != VarType())
					{
						VarType legacymodelmap, statename;
						legacymodelmap = DsMap(global::legacy_model_states_map).Value(self->model_name);
						for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->model_state)); i += IntType(2))
						{
							statename = self->model_state.Value(i);
							if (DsMap(legacymodelmap).Value(statename) != VarType())
								self->model_state[i] = DsMap(legacymodelmap).Value(statename);
						}
					}
					self->model_version = value_get_real(DsMap(modelmap).Value(/*"model_version"*/ STR(2469)), IntType(0));
					project_load_template_update_model(self);
					if (self->type == e_temp_type_BODYPART)
						self->model_part_name = value_get_string(DsMap(modelmap).Value(/*"part_name"*/ STR(45)), self->model_part_name);
					StringType valname = (global::load_format < e_project_FORMAT_200_PRE_5 ? /*"banner_base_color"*/ STR(2470) : /*"pattern_base_color"*/ STR(2471));
					if (!is_undefined(DsMap(map).Value(valname)))
					{
						VarType base_color, pattern_list, color_list;
						if (global::load_format < e_project_FORMAT_200_PRE_5)
						{
							base_color = value_get_string(DsMap(map).Value(/*"banner_base_color"*/ STR(2470)), /*"white"*/ STR(2472));
							pattern_list = DsMap(map).Value(/*"banner_pattern_list"*/ STR(2473));
							color_list = DsMap(map).Value(/*"banner_color_list"*/ STR(2474));
						}
						else
						{
							base_color = value_get_string(DsMap(map).Value(/*"pattern_base_color"*/ STR(2471)), /*"white"*/ STR(2472));
							pattern_list = DsMap(map).Value(/*"pattern_pattern_list"*/ STR(2475));
							color_list = DsMap(map).Value(/*"pattern_color_list"*/ STR(2476));
						}
						
						self->pattern_base_color = DsMap(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map).Value(base_color);
						if (ds_list_valid(pattern_list))
						{
							for (IntType p = IntType(0); p < ds_list_size((IntType)(pattern_list)); p++)
								array_add(VarType::CreateRef(self->pattern_pattern_list), DsList(pattern_list).Value(p));
						}
						if (ds_list_valid(color_list))
						{
							for (IntType c = IntType(0); c < ds_list_size((IntType)(color_list)); c++)
								array_add(VarType::CreateRef(self->pattern_color_list), DsMap(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map).Value(DsList(color_list).Value(c)));
						}
					}
					if (self->model_name == /*"armor"*/ STR(781))
					{
						if (DsMap(map).Value(/*"armor"*/ STR(781)) != VarType())
						{
							VarType armor = DsMap(map).Value(/*"armor"*/ STR(781));
							self->armor_array[IntType(1)] = value_get_color(DsMap(armor).Value(/*"helmet_dye"*/ STR(2477)), self->armor_array.Value(IntType(1)));
							self->armor_array[IntType(2)] = value_get_string(DsMap(armor).Value(/*"helmet_trim_pattern"*/ STR(2478)), self->armor_array.Value(IntType(2)));
							self->armor_array[IntType(3)] = value_get_string(DsMap(armor).Value(/*"helmet_trim_material"*/ STR(2479)), self->armor_array.Value(IntType(3)));
							self->armor_array[IntType(5)] = value_get_color(DsMap(armor).Value(/*"chestplate_dye"*/ STR(2480)), self->armor_array.Value(IntType(5)));
							self->armor_array[IntType(6)] = value_get_string(DsMap(armor).Value(/*"chestplate_trim_pattern"*/ STR(2481)), self->armor_array.Value(IntType(6)));
							self->armor_array[IntType(7)] = value_get_string(DsMap(armor).Value(/*"chestplate_trim_material"*/ STR(2482)), self->armor_array.Value(IntType(7)));
							self->armor_array[IntType(9)] = value_get_color(DsMap(armor).Value(/*"leggings_dye"*/ STR(2483)), self->armor_array.Value(IntType(9)));
							self->armor_array[IntType(10)] = value_get_string(DsMap(armor).Value(/*"leggings_trim_pattern"*/ STR(2484)), self->armor_array.Value(IntType(10)));
							self->armor_array[IntType(11)] = value_get_string(DsMap(armor).Value(/*"leggings_trim_material"*/ STR(2485)), self->armor_array.Value(IntType(11)));
							self->armor_array[IntType(13)] = value_get_color(DsMap(armor).Value(/*"boots_dye"*/ STR(2486)), self->armor_array.Value(IntType(13)));
							self->armor_array[IntType(14)] = value_get_string(DsMap(armor).Value(/*"boots_trim_pattern"*/ STR(2487)), self->armor_array.Value(IntType(14)));
							self->armor_array[IntType(15)] = value_get_string(DsMap(armor).Value(/*"boots_trim_material"*/ STR(2488)), self->armor_array.Value(IntType(15)));
						}
					}
				}
			}
			else
				if (self->type == e_temp_type_ITEM)
				{
					VarType itemmap = DsMap(map).Value(/*"item"*/ STR(549));
					if (ds_map_valid(itemmap))
					{
						self->item_tex = value_get_save_id({ DsMap(itemmap).Value(/*"tex"*/ STR(2489)), self->item_tex });
						self->item_tex_material = value_get_save_id({ DsMap(itemmap).Value(/*"tex_material"*/ STR(2490)), self->item_tex_material });
						self->item_tex_normal = value_get_save_id({ DsMap(itemmap).Value(/*"tex_normal"*/ STR(2491)), self->item_tex_normal });
						VarType itemname = DsMap(itemmap).Value(/*"name"*/ STR(819));
						if (is_string(itemname))
						{
							if (global::load_format < e_project_FORMAT_120_PRE_1)
							{
								itemname = string_replace(itemname, /*"items/"*/ STR(2492), /*"item/"*/ STR(2493));
								VarType newname = ds_map_find_key(global::legacy_item_texture_name_map, itemname);
								if (!is_undefined(newname))
									itemname = newname;
							}
							self->item_slot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list), itemname);
							if (self->item_slot < IntType(0))
								self->item_slot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list), default_item);
						}
						else
							self->item_slot = value_get_real(DsMap(itemmap).Value(/*"slot"*/ STR(2494)), self->item_slot);
						
						self->item_3d = value_get_real(DsMap(itemmap).Value(/*"3d"*/ STR(1904)), self->item_3d);
						self->item_face_camera = value_get_real(DsMap(itemmap).Value(/*"face_camera"*/ STR(1899)), self->item_face_camera);
						self->item_bounce = value_get_real(DsMap(itemmap).Value(/*"bounce"*/ STR(2368)), self->item_bounce);
						self->item_spin = value_get_real(DsMap(itemmap).Value(/*"spin"*/ STR(2495)), self->item_spin);
					}
				}
				else
					if (self->type == e_temp_type_BLOCK)
					{
						VarType blockmap = DsMap(map).Value(/*"block"*/ STR(4));
						if (ds_map_valid(blockmap))
						{
							if (global::load_format < e_project_FORMAT_120_PRE_1)
							{
								VarType bid = value_get_real(DsMap(blockmap).Value(/*"legacy_id"*/ STR(2496)), IntType(2));
								VarType bdata = value_get_real(DsMap(blockmap).Value(/*"legacy_data"*/ STR(2497)), IntType(0));
								if (global::legacy_block_set.Value(bid))
								{
									VarType block = global::legacy_block_obj[bid][bdata];
									if (block != null_)
									{
										self->block_name = ObjType(obj_block, block)->name;
										self->block_state = block_get_state_id_state_vars(block, global::legacy_block_state_id[bid][bdata]);
									}
								}
							}
							else
							{
								self->block_name = value_get_string(DsMap(blockmap).Value(/*"name"*/ STR(819)), self->block_name);
								if (DsMap(global::legacy_block_names_map).Value(self->block_name) != VarType())
									self->block_name = DsMap(global::legacy_block_names_map).Value(self->block_name);
								self->block_state = value_get_state_vars(DsMap(blockmap).Value(/*"state"*/ STR(1026)));
							}
							
							self->block_tex = value_get_save_id({ DsMap(blockmap).Value(/*"tex"*/ STR(2489)), self->block_tex });
							if (global::load_format >= e_project_FORMAT_200_PRE_5)
							{
								self->block_tex_material = value_get_save_id({ DsMap(blockmap).Value(/*"tex_material"*/ STR(2490)), self->block_tex_material });
								self->block_tex_normal = value_get_save_id({ DsMap(blockmap).Value(/*"tex_normal"*/ STR(2491)), self->block_tex_normal });
							}
							else
							{
								self->block_tex_material = /*"default"*/ STR(102);
								self->block_tex_normal = /*"default"*/ STR(102);
							}
							
							self->block_randomize = value_get_real(DsMap(blockmap).Value(/*"randomize"*/ STR(2453)), self->block_randomize);
							self->block_repeat_enable = value_get_real(DsMap(blockmap).Value(/*"repeat_enable"*/ STR(2498)), self->block_repeat_enable);
							self->block_repeat = value_get_point3D(DsMap(blockmap).Value(/*"repeat"*/ STR(2380)), self->block_repeat);
						}
					}
					else
						if (self->type == e_temp_type_SCENERY)
						{
							self->scenery = value_get_save_id({ DsMap(map).Value(/*"scenery"*/ STR(548)), self->scenery });
							VarType blockmap = DsMap(map).Value(/*"block"*/ STR(4));
							if (ds_map_valid(blockmap))
							{
								self->block_tex = value_get_save_id({ DsMap(blockmap).Value(/*"tex"*/ STR(2489)), self->block_tex });
								if (global::load_format >= e_project_FORMAT_200_PRE_5)
								{
									self->block_tex_material = value_get_save_id({ DsMap(blockmap).Value(/*"tex_material"*/ STR(2490)), self->block_tex_material });
									self->block_tex_normal = value_get_save_id({ DsMap(blockmap).Value(/*"tex_normal"*/ STR(2491)), self->block_tex_normal });
									if (self->block_tex_material == null_)
										self->block_tex_material = /*"default"*/ STR(102);
									if (self->block_tex_normal == null_)
										self->block_tex_normal = /*"default"*/ STR(102);
								}
								else
								{
									self->block_tex_material = /*"default"*/ STR(102);
									self->block_tex_normal = /*"default"*/ STR(102);
								}
								
								self->block_repeat_enable = value_get_real(DsMap(blockmap).Value(/*"repeat_enable"*/ STR(2498)), self->block_repeat_enable);
								self->block_repeat = value_get_point3D(DsMap(blockmap).Value(/*"repeat"*/ STR(2380)), self->block_repeat);
							}
						}
						else
							if (self->type == e_temp_type_MODEL)
							{
								self->model = value_get_save_id({ DsMap(map).Value(/*"model"*/ STR(8)), self->model });
								self->model_tex = value_get_save_id({ DsMap(map).Value(/*"model_tex"*/ STR(2464)), self->model_tex });
								if (global::load_format >= e_project_FORMAT_200_PRE_5)
								{
									self->model_tex_material = value_get_save_id({ DsMap(map).Value(/*"model_tex_material"*/ STR(2465)), self->model_tex_material });
									self->model_tex_normal = value_get_save_id({ DsMap(map).Value(/*"model_tex_normal"*/ STR(2466)), self->model_tex_normal });
								}
								else
								{
									self->model_tex_material = /*"default"*/ STR(102);
									self->model_tex_normal = /*"default"*/ STR(102);
								}
								
							}
					
				
			
			
			if (type_is_shape(self->type))
			{
				VarType shapemap = DsMap(map).Value(/*"shape"*/ STR(562));
				if (ds_map_valid(shapemap))
				{
					self->shape_tex = value_get_save_id({ DsMap(shapemap).Value(/*"tex"*/ STR(2489)), self->shape_tex });
					self->shape_tex_material = value_get_save_id({ DsMap(shapemap).Value(/*"tex_material"*/ STR(2490)), self->shape_tex_material });
					self->shape_tex_normal = value_get_save_id({ DsMap(shapemap).Value(/*"tex_normal"*/ STR(2491)), self->shape_tex_normal });
					self->shape_tex_mapped = value_get_real(DsMap(shapemap).Value(/*"tex_mapped"*/ STR(2499)), self->shape_tex_mapped);
					self->shape_tex_hoffset = value_get_real(DsMap(shapemap).Value(/*"tex_hoffset"*/ STR(2500)), self->shape_tex_hoffset);
					self->shape_tex_voffset = value_get_real(DsMap(shapemap).Value(/*"tex_voffset"*/ STR(2501)), self->shape_tex_voffset);
					self->shape_tex_hrepeat = value_get_real(DsMap(shapemap).Value(/*"tex_hrepeat"*/ STR(2502)), self->shape_tex_hrepeat);
					self->shape_tex_vrepeat = value_get_real(DsMap(shapemap).Value(/*"tex_vrepeat"*/ STR(2503)), self->shape_tex_vrepeat);
					self->shape_tex_hmirror = value_get_real(DsMap(shapemap).Value(/*"tex_hmirror"*/ STR(2504)), self->shape_tex_hmirror);
					self->shape_tex_vmirror = value_get_real(DsMap(shapemap).Value(/*"tex_vmirror"*/ STR(2505)), self->shape_tex_vmirror);
					self->shape_closed = value_get_real(DsMap(shapemap).Value(/*"closed"*/ STR(2506)), self->shape_closed);
					self->shape_invert = value_get_real(DsMap(shapemap).Value(/*"invert"*/ STR(1888)), self->shape_invert);
					self->shape_detail = value_get_real(DsMap(shapemap).Value(/*"detail"*/ STR(2507)), self->shape_detail);
					self->shape_face_camera = value_get_real(DsMap(shapemap).Value(/*"face_camera"*/ STR(1899)), self->shape_face_camera);
					if (self->type != e_temp_type_CUBE && self->type != e_temp_type_CYLINDER && self->type != e_temp_type_CONE)
						self->shape_tex_mapped = false;
				}
			}
			else
				if (self->type == e_temp_type_TEXT)
				{
					VarType textmap = DsMap(map).Value(/*"text"*/ STR(104));
					if (ds_map_valid(textmap))
					{
						self->text_font = value_get_save_id({ DsMap(textmap).Value(/*"font"*/ STR(573)), self->text_font });
						self->text_3d = value_get_real(DsMap(textmap).Value(/*"3d"*/ STR(1904)), self->text_3d);
						self->text_face_camera = value_get_real(DsMap(textmap).Value(/*"face_camera"*/ STR(1899)), self->text_face_camera);
					}
				}
				else
					if (self->type == e_temp_type_PARTICLE_SPAWNER)
						project_load_particles(ScopeAny(self), DsMap(map).Value(/*"particles"*/ STR(551)));
			
			
			if (global::temp_creator == global::_app->id)
				sortlist_add(global::_app->lib_list, self->id);
		}
		
		return 0.0;
	}
	
	void project_load_template_update_model(Scope<obj_template> self)
	{
		if (!is_undefined(DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name))) && ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->version > self->model_version)
		{
			self->load_update_tree = true;
			if (array_length(VarType::CreateRef(self->model_state)) != array_length(VarType::CreateRef(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map)[sVar(model_name)])->default_state)))
			{
				ArrType statesprev = array_copy_1d(self->model_state);
				self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
				state_vars_add(VarType::CreateRef(self->model_state), statesprev);
			}
			if (DsMap(global::legacy_model_state_values_map).Value(self->model_name) != VarType())
			{
				VarType legacymodelmap, statename;
				legacymodelmap = DsMap(global::legacy_model_state_values_map).Value(self->model_name);
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->model_state)); i += IntType(2))
				{
					statename = self->model_state.Value(i);
					if (DsMap(legacymodelmap).Value(statename) != VarType())
					{
						VarType statemap, statevalue;
						statemap = DsMap(legacymodelmap).Value(statename);
						statevalue = self->model_state.Value(i + IntType(1));
						if (ds_map_valid(DsMap(statemap).Value(statevalue)))
						{
							VarType valmap = DsMap(statemap).Value(statevalue);
							for (IntType j = IntType(0); j < array_length(VarType::CreateRef(self->model_state)); j += IntType(2))
							{
								VarType state = self->model_state.Value(j);
								if (DsMap(valmap).Value(state) != VarType())
									self->model_state[j + IntType(1)] = DsMap(valmap).Value(state);
							}
						}
						else
						{
							if (DsMap(statemap).Value(statevalue) != VarType())
								self->model_state[i + IntType(1)] = DsMap(statemap).Value(statevalue);
						}
						
					}
				}
			}
		}
	}
	
	RealType project_load_timeline(VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		withOne (obj_timeline, (new obj_timeline)->id, noone)
		{
			self->loaded = true;
			self->load_id = value_get_string(DsMap(map).Value(/*"id"*/ STR(86)), self->save_id);
			DsMap(global::save_id_map)[self->load_id] = self->load_id;
			self->type = ds_list_find_index(global::tl_type_name_list, value_get_string(DsMap(map).Value(/*"type"*/ STR(805))));
			self->name = value_get_string(DsMap(map).Value(/*"name"*/ STR(819)), self->name);
			self->temp = value_get_save_id({ DsMap(map).Value(/*"temp"*/ STR(2264)), self->temp });
			self->color_tag = value_get_real(DsMap(map).Value(/*"color_tag"*/ STR(2508)), self->color_tag);
			self->hide = value_get_real(DsMap(map).Value(/*"hide"*/ STR(750)), self->hide);
			self->lock = value_get_real(DsMap(map).Value(/*"lock"*/ STR(2509)), self->lock);
			self->ghost = value_get_real(DsMap(map).Value(/*"ghost"*/ STR(2510)), self->ghost);
			self->depth = value_get_real(DsMap(map).Value(/*"depth"*/ STR(639)), self->depth);
			if (self->type == e_temp_type_BODYPART)
				self->model_part_name = value_get_string(DsMap(map).Value(/*"model_part_name"*/ STR(2511)), self->model_part_name);
			if (self->type == e_temp_type_TEXT)
				self->text = value_get_string(DsMap(map).Value(/*"text"*/ STR(104)), self->text);
			self->part_of = value_get_save_id({ DsMap(map).Value(/*"part_of"*/ STR(2512)), self->part_of });
			if (self->part_of != null_)
			{
				if (self->type == e_temp_type_SPECIAL_BLOCK)
				{
					VarType modelmap = DsMap(map).Value(/*"model"*/ STR(8));
					if (ds_map_valid(modelmap))
					{
						self->model_name = value_get_string(DsMap(modelmap).Value(/*"name"*/ STR(819)), /*""*/ STR(0));
						self->model_state = value_get_state_vars(DsMap(modelmap).Value(/*"state"*/ STR(1026)));
					}
					self->part_root = value_get_save_id({ DsMap(map).Value(/*"part_root"*/ STR(2513)), self->part_root });
					self->pattern_type = value_get_string(DsMap(map).Value(/*"pattern_type"*/ STR(891)), self->pattern_type);
					if (global::load_format < e_project_FORMAT_200_PRE_5)
					{
						VarType isbanner = value_get_real(DsMap(map).Value(/*"is_banner"*/ STR(2514)), false);
						if (isbanner > 0)
							self->pattern_type = /*"banner"*/ STR(816);
					}
					if (self->pattern_type != /*""*/ STR(0))
					{
						VarType base_color, pattern_list, color_list;
						if (global::load_format < e_project_FORMAT_200_PRE_5)
						{
							base_color = value_get_string(DsMap(map).Value(/*"banner_base_color"*/ STR(2470)), /*"white"*/ STR(2472));
							pattern_list = DsMap(map).Value(/*"banner_pattern_list"*/ STR(2473));
							color_list = DsMap(map).Value(/*"banner_color_list"*/ STR(2474));
						}
						else
						{
							base_color = value_get_string(DsMap(map).Value(/*"pattern_base_color"*/ STR(2471)), /*"white"*/ STR(2472));
							pattern_list = DsMap(map).Value(/*"pattern_pattern_list"*/ STR(2475));
							color_list = DsMap(map).Value(/*"pattern_color_list"*/ STR(2476));
						}
						
						self->pattern_base_color = DsMap(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map).Value(base_color);
						if (ds_list_valid(pattern_list))
						{
							self->pattern_pattern_list = ArrType();
							for (IntType p = IntType(0); p < ds_list_size((IntType)(pattern_list)); p++)
								array_add(VarType::CreateRef(self->pattern_pattern_list), DsList(pattern_list).Value(p));
						}
						if (ds_list_valid(color_list))
						{
							self->pattern_color_list = ArrType();
							for (IntType c = IntType(0); c < ds_list_size((IntType)(color_list)); c++)
								array_add(VarType::CreateRef(self->pattern_color_list), DsMap(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map).Value(DsList(color_list).Value(c)));
						}
					}
				}
				else
					if (self->type == e_temp_type_BLOCK)
					{
						VarType blockmap = DsMap(map).Value(/*"block"*/ STR(4));
						if (ds_map_valid(blockmap))
						{
							if (global::load_format < e_project_FORMAT_120_PRE_1)
							{
								VarType bid = value_get_real(DsMap(blockmap).Value(/*"legacy_id"*/ STR(2496)), IntType(2));
								VarType bdata = value_get_real(DsMap(blockmap).Value(/*"legacy_data"*/ STR(2497)), IntType(0));
								if (global::legacy_block_set.Value(bid))
								{
									VarType block = global::legacy_block_obj[bid][bdata];
									if (block != null_)
									{
										self->block_name = ObjType(obj_block, block)->name;
										self->block_state = block_get_state_id_state_vars(block, global::legacy_block_state_id[bid][bdata]);
									}
								}
							}
							else
							{
								self->block_name = value_get_string(DsMap(blockmap).Value(/*"name"*/ STR(819)), /*""*/ STR(0));
								self->block_state = value_get_state_vars(DsMap(blockmap).Value(/*"state"*/ STR(1026)));
							}
							
						}
					}
				
			}
			VarType partslist = DsMap(map).Value(/*"parts"*/ STR(1849));
			if (ds_list_valid(partslist))
			{
				self->part_list = ds_list_create();
				for (IntType p = IntType(0); p < ds_list_size((IntType)(partslist)); p++)
					ds_list_add({ self->part_list, DsList(partslist).Value(p) });
			}
			project_load_values(DsMap(map).Value(/*"default_values"*/ STR(2515)), VarType::CreateRef(self->value_default));
			VarType kfmap = DsMap(map).Value(/*"keyframes"*/ STR(42));
			if (ds_map_valid(kfmap))
			{
				VarType key = ds_map_find_first((IntType)(kfmap));
				self->keyframe_array = IntType(0);
				while (!is_undefined(key))
				{
					withOne (obj_keyframe, (new obj_keyframe)->id, self->id)
					{
						self->position = string_get_real(key);
						self->loaded = true;
						self->timeline = self.otherId;
						self->selected = false;
						self->sound_play_index = null_;
						for (IntType v = IntType(0); v < e_value_amount; v++)
							self->value[v] = ObjType(obj_timeline, self.otherId)->value_default.Value(v);
						project_load_values(DsMap(kfmap).Value(key), VarType::CreateRef(self->value));
						project_load_values_update(self);
						ObjType(obj_timeline, self.otherId)->keyframe_array[self->position] = self->id;
					}
					
					key = ds_map_find_next((IntType)(kfmap), key);
				}
				
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->keyframe_array)); i++)
					if (self->keyframe_array.Value(i) > IntType(0))
						ds_list_add({ self->keyframe_list, self->keyframe_array.Value(i) });
			}
			self->parent = value_get_save_id({ DsMap(map).Value(/*"parent"*/ STR(841)), self->parent });
			self->parent_tree_index = value_get_real(DsMap(map).Value(/*"parent_tree_index"*/ STR(2516)), null_);
			self->lock_bend = value_get_real(DsMap(map).Value(/*"lock_bend"*/ STR(1870)), self->lock_bend);
			self->tree_extend = value_get_real(DsMap(map).Value(/*"tree_extend"*/ STR(2517)), self->tree_extend);
			VarType inheritmap = DsMap(map).Value(/*"inherit"*/ STR(2518));
			if (ds_map_valid(inheritmap))
			{
				self->inherit_position = value_get_real(DsMap(inheritmap).Value(/*"position"*/ STR(44)), self->inherit_position);
				self->inherit_rotation = value_get_real(DsMap(inheritmap).Value(/*"rotation"*/ STR(846)), self->inherit_rotation);
				self->inherit_rot_point = value_get_real(DsMap(inheritmap).Value(/*"rot_point"*/ STR(2519)), self->inherit_rot_point);
				self->inherit_scale = value_get_real(DsMap(inheritmap).Value(/*"scale"*/ STR(889)), self->inherit_scale);
				self->inherit_alpha = value_get_real(DsMap(inheritmap).Value(/*"alpha"*/ STR(2347)), self->inherit_alpha);
				self->inherit_color = value_get_real(DsMap(inheritmap).Value(/*"color"*/ STR(920)), self->inherit_color);
				self->inherit_visibility = value_get_real(DsMap(inheritmap).Value(/*"visibility"*/ STR(2520)), self->inherit_visibility);
				self->inherit_bend = value_get_real(DsMap(inheritmap).Value(/*"bend"*/ STR(1872)), self->inherit_bend);
				self->inherit_texture = value_get_real(DsMap(inheritmap).Value(/*"texture"*/ STR(572)), self->inherit_texture);
				self->inherit_surface = value_get_real(DsMap(inheritmap).Value(/*"surface"*/ STR(555)), self->inherit_surface);
				self->inherit_subsurface = value_get_real(DsMap(inheritmap).Value(/*"subsurface"*/ STR(130)), self->inherit_subsurface);
				self->inherit_glow_color = value_get_real(DsMap(inheritmap).Value(/*"glow_color"*/ STR(2521)), self->inherit_glow_color);
				self->inherit_select = value_get_real(DsMap(inheritmap).Value(/*"select"*/ STR(2522)), self->inherit_select);
				self->inherit_pose = value_get_real(DsMap(inheritmap).Value(/*"pose"*/ STR(2523)), self->inherit_pose);
			}
			self->scale_resize = value_get_real(DsMap(map).Value(/*"scale_resize"*/ STR(2524)), self->scale_resize);
			self->rot_point_custom = value_get_real(DsMap(map).Value(/*"rot_point_custom"*/ STR(2525)), self->rot_point_custom);
			self->rot_point = value_get_point3D(DsMap(map).Value(/*"rot_point"*/ STR(2519)), self->rot_point);
			self->backfaces = value_get_real(DsMap(map).Value(/*"backfaces"*/ STR(1871)), self->backfaces);
			self->texture_blur = value_get_real(DsMap(map).Value(/*"texture_blur"*/ STR(2526)), self->texture_blur);
			self->texture_filtering = value_get_real(DsMap(map).Value(/*"texture_filtering"*/ STR(2439)), self->texture_filtering);
			self->shadows = value_get_real(DsMap(map).Value(/*"shadows"*/ STR(129)), self->shadows);
			self->ssao = value_get_real(DsMap(map).Value(/*"ssao"*/ STR(128)), self->ssao);
			self->glow = value_get_real(DsMap(map).Value(/*"glow"*/ STR(133)), self->glow);
			self->glow_texture = value_get_real(DsMap(map).Value(/*"glow_texture"*/ STR(2527)), self->glow_texture);
			self->only_render_glow = value_get_real(DsMap(map).Value(/*"only_render_glow"*/ STR(2528)), self->only_render_glow);
			self->glint_mode = value_get_real(DsMap(map).Value(/*"glint_mode"*/ STR(2529)), self->glint_mode);
			self->glint_scale = value_get_real(DsMap(map).Value(/*"glint_scale"*/ STR(2530)), self->glint_scale);
			self->glint_speed = value_get_real(DsMap(map).Value(/*"glint_speed"*/ STR(2434)), self->glint_speed);
			self->glint_strength = value_get_real(DsMap(map).Value(/*"glint_strength"*/ STR(2435)), self->glint_strength);
			idInt(self->glint_tex, count)--;
			self->glint_tex = value_get_save_id({ DsMap(map).Value(/*"glint_tex"*/ STR(2531)), ObjType(obj_resource, global::mc_res)->save_id });
			self->fog = value_get_real(DsMap(map).Value(/*"fog"*/ STR(144)), self->fog);
			if (self->type == e_temp_type_SCENERY || self->type == e_temp_type_BLOCK || self->type == e_temp_type_PARTICLE_SPAWNER || self->type == e_temp_type_TEXT || type_is_shape(self->type))
			{
				self->wind = value_get_real(DsMap(map).Value(/*"wind"*/ STR(145)), self->wind);
				self->wind_terrain = value_get_real(DsMap(map).Value(/*"wind_terrain"*/ STR(2532)), self->wind_terrain);
			}
			self->hq_hiding = value_get_real(DsMap(map).Value(/*"hq_hiding"*/ STR(2533)), self->hq_hiding);
			self->lq_hiding = value_get_real(DsMap(map).Value(/*"lq_hiding"*/ STR(2534)), self->lq_hiding);
			self->blend_mode = value_get_string(DsMap(map).Value(/*"blend_mode"*/ STR(2535)), self->blend_mode);
			if (global::load_format < e_project_FORMAT_200_PRE_5)
				self->alpha_mode = e_alpha_mode_BLEND;
			else
				self->alpha_mode = value_get_real(DsMap(map).Value(/*"alpha_mode"*/ STR(2536)), self->alpha_mode);
			
			VarType pathmap = DsMap(map).Value(/*"path"*/ STR(560));
			if (ds_map_valid(pathmap))
			{
				self->path_smooth = value_get_real(DsMap(pathmap).Value(/*"smooth"*/ STR(2537)), self->path_smooth);
				self->path_closed = value_get_real(DsMap(pathmap).Value(/*"closed"*/ STR(2506)), self->path_closed);
				self->path_detail = value_get_real(DsMap(pathmap).Value(/*"detail"*/ STR(2507)), self->path_detail);
				self->path_shape_generate = value_get_real(DsMap(pathmap).Value(/*"shape_generate"*/ STR(2538)), self->path_shape_generate);
				self->path_shape_radius = value_get_real(DsMap(pathmap).Value(/*"shape_radius"*/ STR(2539)), self->path_shape_radius);
				self->path_shape_tex_length = value_get_real(DsMap(pathmap).Value(/*"shape_tex_length"*/ STR(2540)), self->path_shape_tex_length);
				self->path_shape_invert = value_get_real(DsMap(pathmap).Value(/*"shape_invert"*/ STR(2541)), self->path_shape_invert);
				self->path_shape_tube = value_get_real(DsMap(pathmap).Value(/*"shape_tube"*/ STR(2542)), self->path_shape_tube);
				self->path_shape_detail = value_get_real(DsMap(pathmap).Value(/*"shape_detail"*/ STR(2543)), self->path_shape_detail);
				self->path_shape_smooth_segments = value_get_real(DsMap(pathmap).Value(/*"shape_smooth_segments"*/ STR(2544)), self->path_shape_smooth_segments);
				self->path_shape_smooth_ring = value_get_real(DsMap(pathmap).Value(/*"shape_smooth_ring"*/ STR(2545)), self->path_shape_smooth_ring);
			}
		}
		
		return 0.0;
	}
	
	void project_load_update(ScopeAny self)
	{
		if (sVar(project_render_settings) != /*""*/ STR(0))
		{
			if (file_exists(render_directory + sVar(project_render_settings) + /*".mirender"*/ STR(17)))
				action_load_render_settings(self, render_directory + sVar(project_render_settings) + /*".mirender"*/ STR(17));
			else
			{
				sVar(project_render_settings) = render_default;
				action_load_render_settings(self, render_default_file);
			}
			
		}
		withAll (obj_resource, self->id)
			if (self->loaded)
				res_load(ScopeAny(self));
		
		withOne (obj_resource, global::mc_res, self->id)
			res_update_colors(ScopeAny(self));
		
		if (ds_priority_size(global::load_queue) > IntType(0))
			load_start(self, ds_priority_find_max(global::load_queue), ID_res_load_start);
		else
			if (sInt(popup) != null_)
				popup_close(self);
		
		tl_update_list(self);
		if (sBool(background_loaded))
		{
			background_sky_update_clouds(self);
			background_ground_update_texture(self);
			background_ground_update_texture_material(self);
			background_ground_update_texture_normal(self);
		}
		withAll (obj_timeline, self->id)
			if (self->loaded && self->part_of != null_)
				tl_update_scenery_part(ScopeAny(self));
		
		withAll (obj_template, self->id)
		{
			if (!self->loaded)
				continue;
			temp_update(ScopeAny(self));
			if (self->type == e_temp_type_CHARACTER || self->type == e_temp_type_SPECIAL_BLOCK || self->type == e_temp_type_MODEL || self->type == e_temp_type_BODYPART)
			{
				if (global::load_format >= e_project_FORMAT_110_PRE_1 && !self->load_update_tree)
					temp_update_model_timeline_parts(ScopeAny(self));
				else
					temp_update_model_timeline_tree(ScopeAny(self));
				
			}
			if (self->pattern_type != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), self->id);
			temp_update_armor(self->id);
		}
		
		withAll (obj_timeline, self->id)
		{
			if (!self->loaded)
				continue;
			if (global::load_format < e_project_FORMAT_113 && self->model_part != null_ && idInt(self->model_part, bend_part) != null_)
			{
				IntType legacyaxis;
				for (legacyaxis = X_; legacyaxis <= Z_; legacyaxis++)
					if (idVec(self->model_part, bend_axis).Real(legacyaxis))
						break;
				for (IntType i = IntType(0); i < ds_list_size(self->keyframe_list); i++)
				{
					withOne (obj_keyframe, DsList(self->keyframe_list).Value(i), self->id)
					{
						self->value[e_value_BEND_ANGLE_X + legacyaxis] = self->value.Value(e_value_BEND_ANGLE_LEGACY);
						self->value[e_value_BEND_ANGLE_LEGACY] = IntType(0);
					}
					
				}
			}
			if (self->type == e_tl_type_ITEM)
			{
				for (IntType i = IntType(0); i < ds_list_size(self->keyframe_list); i++)
				{
					withOne (obj_keyframe, DsList(self->keyframe_list).Value(i), self->id)
					{
						if (self->value.Value(e_value_ITEM_NAME) != /*""*/ STR(0))
							self->value[e_value_ITEM_SLOT] = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list), self->value.Value(e_value_ITEM_NAME));
						if (self->value.Value(e_value_ITEM_SLOT) < IntType(0))
							self->value[e_value_ITEM_SLOT] = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list), default_item);
					}
					
				}
			}
			tl_update(ScopeAny(self));
			tl_update_values(ScopeAny(self));
			if (self->type == e_tl_type_SCENERY && idVar(self->temp, scenery) != null_ && global::load_format < e_project_FORMAT_110_PRE_1)
			{
				if (idBool(idVar(self->temp, scenery), ready))
					tl_animate_scenery(self);
				else
					self->scenery_animate = true;
				
			}
			if (self->pattern_type != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), self->id);
		}
		
		withAll (obj_timeline, self->id)
		{
			if (self->type == e_tl_type_PATH)
				tl_update_path(self);
		}
		
		withAll (obj_particle_type, self->id)
			if (self->loaded)
				ptype_update_sprite_vbuffers(ScopeAny(self));
		
		tl_update_length();
		global::_app->update_matrix = true;
		tl_update_matrix(self);
	}
	
}
