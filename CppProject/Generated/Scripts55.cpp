/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.16 18:02:40 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	BoolType res_load_pack_version(ScopeAny self)
	{
		StringType fn = global::load_assets_dir + /*"pack.mcmeta"*/ STR(2664);
		if (file_exists_lib(fn))
		{
			IntType map = json_load({ fn });
			if (!ds_map_valid(map))
			{
				log({ /*"Error loading pack.mcmeta"*/ STR(2665) });
				sVar(pack_format) = e_minecraft_pack_LATEST;
				return false;
			}
			if (ds_map_valid(DsMap(map).Value(/*"pack"*/ STR(565))))
			{
				VarType packmap = DsMap(map).Value(/*"pack"*/ STR(565));
				sVar(pack_format) = value_get_real(DsMap(packmap).Value(/*"pack_format"*/ STR(2666)));
			}
		}
		else
			sVar(pack_format) = e_minecraft_pack_LATEST;
		
		return false;
	}
	
	IntType res_load_player_skin(VarType fn)
	{
		VarType tex;
		RealType tw, th, size, scale;
		IntType surf, newtex;
		BoolType needconvert;
		needconvert = true;
		if (is_string(fn))
			tex = texture_create(fn);
		else
			tex = fn;
		
		tw = texture_width(tex);
		th = texture_height(tex);
		size = max({ tw, th });
		scale = size / 64.0;
		surf = surface_create((IntType)(size), (IntType)(size));
		surface_set_target(surf);
	{
		draw_clear_alpha(c_black, 0.0);
		draw_texture({ tex, IntType(0), IntType(0) });
	}
		surface_reset_target();
		global::buffer_current = buffer_create((IntType)(size * size * IntType(4)), buffer_fixed, IntType(4));
		buffer_get_surface(global::buffer_current, surf, IntType(0));
		if (tw == th)
		{
			for (IntType xx = IntType(0); xx < size; xx++)
			{
				for (RealType yy = size - IntType(1); yy >= size / 2.0; yy--)
				{
					if (buffer_read_alpha(xx, yy, size) > IntType(0))
					{
						needconvert = false;
						break;
					}
				}
				if (!needconvert)
					break;
			}
		}
		buffer_delete(global::buffer_current);
		if (needconvert)
		{
			draw_texture_start();
			render_set_culling(false);
			surface_set_target(surf);
		{
			draw_texture_part({ tex, IntType(28) * scale, IntType(52) * scale, IntType(0) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(24) * scale, IntType(52) * scale, IntType(4) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(20) * scale, IntType(52) * scale, IntType(8) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(32) * scale, IntType(52) * scale, IntType(12) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(24) * scale, IntType(48) * scale, IntType(4) * scale, IntType(16) * scale, IntType(4) * scale, IntType(4) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(28) * scale, IntType(48) * scale, IntType(8) * scale, IntType(16) * scale, IntType(4) * scale, IntType(4) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(44) * scale, IntType(52) * scale, IntType(40) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(40) * scale, IntType(52) * scale, IntType(44) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(36) * scale, IntType(52) * scale, IntType(48) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(48) * scale, IntType(52) * scale, IntType(52) * scale, IntType(20) * scale, IntType(4) * scale, IntType(12) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(40) * scale, IntType(48) * scale, IntType(44) * scale, IntType(16) * scale, IntType(4) * scale, IntType(4) * scale, -IntType(1), IntType(1) });
			draw_texture_part({ tex, IntType(44) * scale, IntType(48) * scale, IntType(48) * scale, IntType(16) * scale, IntType(4) * scale, IntType(4) * scale, -IntType(1), IntType(1) });
		}
			surface_reset_target();
			draw_texture_done();
			render_set_culling(true);
		}
		newtex = texture_surface(surf);
		surface_free(surf);
		texture_free(tex);
		return newtex;
	}
	
	RealType res_load_scenery(ScopeAny self)
	{
		StringType fname;
		BoolType openerr;
		IntType rootmap;
		fname = global::load_folder + /*"/"*/ STR(20) + sVar(filename);
		openerr = false;
		rootmap = null_;
		RealType maxblocks = IntType(20000) * thread_get_number();
		switch (StringType(sStr(load_stage)).id)
		{
			case 925: // open
			{
				debug({ /*"res_load_scenery"*/ STR(2667), /*"open"*/ STR(925) });
				if (sVar(type) == e_res_type_FROM_WORLD)
				{
					if (!res_load_scenery_world(self))
					{
						error(/*"errorloadworld"*/ STR(2668));
						withOne (app, global::_app->id, self->id)
							load_next(ScopeAny(self));
						
						sBool(ready) = true;
						break;
					}
				}
				else
				{
					if (!file_exists_lib(fname))
					{
						withOne (app, global::_app->id, self->id)
							load_next(ScopeAny(self));
						
						return IntType(0);
					}
					StringType ext = filename_ext(fname);
					if (ext == /*".schematic"*/ STR(727) || ext == /*".nbt"*/ STR(728))
					{
						log({ /*"Loading "*/ STR(2606) + ext, fname });
						debug_timer_start();
						file_delete_lib(temp_file);
						gzunzip(fname, temp_file);
						if (!file_exists_lib(temp_file))
						{
							log({ /*"GZunzip error"*/ STR(1951), /*"gzunzip"*/ STR(1320) });
							break;
						}
						global::buffer_current = buffer_load(temp_file);
						openerr = true;
						rootmap = nbt_read_tag_compound();
						if (rootmap == null_)
							break;
						debug_timer_stop(/*"res_load_scenery, Parse NBT"*/ STR(2669));
						if (dev_mode_debug_schematics)
							nbt_debug_tag_compound(/*"root"*/ STR(2224), rootmap);
						if (ext == /*".schematic"*/ STR(727))
						{
							withOne (obj_builder, global::mc_builder, self->id)
							{
								openerr = !builder_read_schematic(self, DsMap(rootmap).Value(/*"Schematic"*/ STR(2670)));
								if (openerr)
									break;
								builder_read_schematic_blocks(self);
								builder_read_schematic_tile_entities(self);
							}
							
						}
						else
						{
							openerr = !builder_read_schematic_nbt(self, DsMap(rootmap).Value(/*""*/ STR(0)));
							if (openerr)
								break;
						}
						
						if (openerr)
							break;
					}
					else
					{
						log({ /*"Loading .blocks"*/ STR(2671), fname });
						global::buffer_current = buffer_load_lib(fname);
						withOne (obj_builder, global::mc_builder, self->id)
							builder_read_blocks_file(self);
						
					}
					
					buffer_delete(global::buffer_current);
				}
				
				debug_timer_start();
				openerr = false;
				sStr(load_stage) = /*"download"*/ STR(109);
				if (sInt(scenery_tl_list) == null_)
					sInt(scenery_tl_list) = ds_list_create();
				else
				{
					for (IntType i = IntType(0); i < ds_list_size(sInt(scenery_tl_list)); i++)
						withOne (Object, DsList(sInt(scenery_tl_list)).Value(i), self->id)
							instance_destroy(self);
					
					ds_list_clear(sInt(scenery_tl_list));
				}
				
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadsceneryblocks"*/ STR(2672) });
					if (ObjType(obj_builder, global::mc_builder)->file_map != /*""*/ STR(0))
						ObjType(obj_popup, global::_app->popup_loading)->caption = text_get({ /*"loadscenerycaptionpieceof"*/ STR(2673), ObjType(obj_builder, global::mc_builder)->file_map });
					else
						ObjType(obj_popup, global::_app->popup_loading)->caption = text_get({ /*"loadscenerycaption"*/ STR(2674), idVar(self.otherId, filename) });
					
					ObjType(obj_popup, global::_app->popup_loading)->progress = 2.0 / 10.0;
				}
				
				if (sVar(scenery_tl_add) == null_)
				{
					if (ObjType(obj_builder, global::mc_builder)->sch_timeline_amount > IntType(500))
						sVar(scenery_tl_add) = false;
					else
						if (ObjType(obj_builder, global::mc_builder)->sch_timeline_amount > IntType(20))
							sVar(scenery_tl_add) = question(text_get({ /*"loadsceneryaddtimelines"*/ STR(2675), ObjType(obj_builder, global::mc_builder)->sch_timeline_amount }));
						else
							sVar(scenery_tl_add) = true;
					
					
				}
				ObjType(obj_builder, global::mc_builder)->block_skull_texture_count = ds_map_size(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map);
				ObjType(obj_builder, global::mc_builder)->block_skull_finish_count = IntType(0);
				ObjType(obj_builder, global::mc_builder)->block_skull_fail_count = IntType(0);
				ObjType(obj_builder, global::mc_builder)->build_pos_x = IntType(0);
				ObjType(obj_builder, global::mc_builder)->build_pos_y = IntType(0);
				ObjType(obj_builder, global::mc_builder)->build_pos_z = IntType(0);
				ObjType(obj_builder, global::mc_builder)->build_pos = IntType(0);
				ObjType(obj_builder, global::mc_builder)->block_tl_add = sVar(scenery_tl_add);
				ObjType(obj_builder, global::mc_builder)->block_tl_list = sInt(scenery_tl_list);
				ObjType(obj_builder, global::mc_builder)->build_randomize = sVar(scenery_randomize);
				break;
			}
			
			case 109: // download
			{
				res_load_skulls(self);
				break;
			}
			
			case 1024: // blocks
			{
				withOne (obj_builder, global::mc_builder, self->id)
				{
					self->builder_scenery = true;
					IntType blockstartpos = self->build_pos;
					IntType blockendpos = self->build_pos + maxblocks;
					if (blockendpos > self->build_size_total)
						blockendpos = self->build_size_total;
					builder_spawn_threads(self, thread_get_number());
					#pragma OPENMP_FOR
					for (IntType p = blockstartpos; p < blockendpos; p++)
					{
						withOne (obj_builder_thread, DsList(self->thread_list).Value(thread_get_id()), self->id)
						{
							builder_thread_set_pos(self, p);
							builder_set_model(ScopeAny(self));
						}
						
					}
					builder_combine_threads(self);
					self->build_pos = blockendpos;
					self->builder_scenery = false;
				}
				
				withOne (app, global::_app->id, self->id)
					ObjType(obj_popup, global::_app->popup_loading)->progress = 2.0 / 10.0 + (2.0 / 10.0) * ((RealType)ObjType(obj_builder, global::mc_builder)->build_pos / ObjType(obj_builder, global::mc_builder)->build_size_total);
				
				if (ObjType(obj_builder, global::mc_builder)->build_pos == ObjType(obj_builder, global::mc_builder)->build_size_total)
				{
					debug_timer_stop(/*"res_load_scenery, Set models"*/ STR(2676));
					debug_timer_start();
					block_vbuffer_start(self);
					sStr(load_stage) = /*"model"*/ STR(8);
					ObjType(obj_builder, global::mc_builder)->build_pos_z = IntType(0);
					ObjType(obj_builder, global::mc_builder)->build_pos = IntType(0);
					withOne (app, global::_app->id, self->id)
						ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadscenerymodel"*/ STR(2677) });
					
				}
				break;
			}
			
			case 8: // model
			{
				withOne (obj_builder, global::mc_builder, self->id)
				{
					self->builder_scenery = true;
					self->build_multithreaded = true;
					IntType blockstartpos = self->build_pos;
					IntType blockendpos = self->build_pos + maxblocks;
					if (blockendpos > self->build_size_total)
						blockendpos = self->build_size_total;
					builder_spawn_threads(self, thread_get_number());
					#pragma OPENMP_FOR
					for (IntType p = blockstartpos; p < blockendpos; p++)
					{
						withOne (obj_builder_thread, DsList(self->thread_list).Value(thread_get_id()), self->id)
						{
							builder_thread_set_pos(self, p);
							builder_generate(ScopeAny(self));
						}
						
					}
					builder_combine_threads(self);
					self->build_pos = blockendpos;
					self->builder_scenery = false;
				}
				
				withOne (app, global::_app->id, self->id)
					ObjType(obj_popup, global::_app->popup_loading)->progress = 4.0 / 10.0 + (6.0 / 10.0) * ((RealType)ObjType(obj_builder, global::mc_builder)->build_pos / ObjType(obj_builder, global::mc_builder)->build_size_total);
				
				if (ObjType(obj_builder, global::mc_builder)->build_pos == ObjType(obj_builder, global::mc_builder)->build_size_total)
				{
					withOne (obj_builder, global::mc_builder, self->id)
					{
						if (!self->block_multithreaded_skip)
							break;
						self->build_multithreaded = false;
						builder_spawn_threads(self, IntType(1));
						withOne (obj_builder_thread, DsList(self->thread_list).Value(IntType(0)), self->id)
						{
							for (IntType p = IntType(0); p < self->build_size_total; p++)
							{
								builder_thread_set_pos(self, p);
								builder_generate(ScopeAny(self));
							}
						}
						
						builder_combine_threads(self);
					}
					
					debug_timer_stop(/*"res_load_scenery, Generate models"*/ STR(2678));
					block_vbuffer_done(self);
					withOne (obj_builder, global::mc_builder, self->id)
					{
						builder_done(self);
						self->block_tl_list = null_;
						self->build_randomize = false;
					}
					
					sVec(scenery_size) = vec3(ObjType(obj_builder, global::mc_builder)->build_size_y, ObjType(obj_builder, global::mc_builder)->build_size_x, ObjType(obj_builder, global::mc_builder)->build_size_z);
					sBool(ready) = true;
					if (ObjType(obj_builder, global::mc_builder)->file_map != /*""*/ STR(0))
						sVar(display_name) = text_get({ /*"loadscenerypieceof"*/ STR(2679), ObjType(obj_builder, global::mc_builder)->file_map });
					res_save_block_cache(self, global::_app->project_folder + /*"/"*/ STR(20) + sVar(filename) + /*".meshcache"*/ STR(2608));
					withAll (obj_template, self->id)
					{
						if (self->scenery == self.otherId)
						{
							temp_update_display_name(ScopeAny(self));
							temp_update_rot_point(ScopeAny(self));
						}
					}
					
					withAll (obj_timeline, self->id)
						if (self->type == e_temp_type_SCENERY && idVar(self->temp, scenery) == self.otherId && self->scenery_animate)
							tl_animate_scenery(self);
					
					withOne (app, global::_app->id, self->id)
					{
						tl_update_list(ScopeAny(self));
						tl_update_matrix(ScopeAny(self));
						load_next(ScopeAny(self));
					}
					
				}
				break;
			}
			
		}
		
		if (rootmap != null_)
			ds_map_destroy(rootmap);
		if (openerr)
		{
			error(/*"errorloadschematic"*/ STR(2680));
			buffer_delete(global::buffer_current);
			withOne (app, global::_app->id, self->id)
				load_next(ScopeAny(self));
			
		}
		return 0.0;
	}
	
	RealType res_load_skulls(ScopeAny self)
	{
		if (ds_map_size(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map) == IntType(0) || !(ObjType(obj_builder, global::mc_builder)->block_tl_add > 0))
		{
			withOne (app, global::_app->id, self->id)
			{
				ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadsceneryblocks"*/ STR(2672) });
				ObjType(obj_popup, global::_app->popup_loading)->progress = 2.0 / 10.0;
			}
			
			sStr(load_stage) = /*"blocks"*/ STR(1024);
			if (ObjType(obj_builder, global::mc_builder)->block_skull_fail_count == IntType(0))
				sVar(scenery_download_skins) = false;
			return IntType(0);
		}
		ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadscenerydownload"*/ STR(2681), ObjType(obj_builder, global::mc_builder)->block_skull_finish_count, ObjType(obj_builder, global::mc_builder)->block_skull_texture_count, ObjType(obj_builder, global::mc_builder)->block_skull_fail_count });
		withOne (obj_builder, global::mc_builder, self->id)
		{
			BoolType nexttex = false;
			if (!self->block_skull_download_wait)
			{
				self->block_skull_texture_name = ds_map_find_first(self->block_skull_texture_map).Str();
				BoolType exists = false;
				withAll (obj_resource, self->id)
				{
					if (self->type == e_res_type_DOWNLOADED_SKIN && self->filename == (skins_directory_get() + ObjType(obj_builder, global::mc_builder)->block_skull_texture_name + /*".png"*/ STR(10)))
					{
						DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_res_map)[ObjType(obj_builder, global::mc_builder)->block_skull_texture_name] = self->id;
						exists = true;
						nexttex = true;
						break;
					}
				}
				
				if (exists == false && idVar(self.otherId, scenery_download_skins) > 0)
				{
					global::_app->http_downloadskin = http_get_file(ds_map_find_value(self->block_skull_texture_map, self->block_skull_texture_name), download_image_file);
					self->block_skull_download_time = current_time();
					self->block_skull_download_wait = true;
				}
			}
			if (self->block_skull_texture != null_ || self->block_skull_texture_fail == true || (current_time() - self->block_skull_download_time > IntType(3000)))
			{
				if (self->block_skull_texture != null_)
				{
					IntType res = null_;
					withAll (obj_resource, self->id)
					{
						if (filename_name(ObjType(obj_builder, global::mc_builder)->block_skull_texture_name) == filename_change_ext(self->filename, /*""*/ STR(0)))
						{
							res = self->id;
							break;
						}
					}
					
					if (res == null_)
					{
						withOne (app, global::_app->id, self->id)
						{
							directory_create_lib(skins_directory_get());
							StringType fn = skins_directory_get() + ObjType(obj_builder, global::mc_builder)->block_skull_texture_name + /*".png"*/ STR(10);
							file_copy_lib(download_image_file, fn);
							res = new_res(ScopeAny(self), fn, e_res_type_DOWNLOADED_SKIN);
							ObjType(obj_resource, res)->player_skin = true;
							withOne (obj_resource, res, global::_app->id)
								res_load(ScopeAny(self));
							
						}
						
					}
					DsMap(self->block_skull_res_map)[self->block_skull_texture_name] = res;
				}
				else
				{
					DsMap(self->block_skull_res_map)[self->block_skull_texture_name] = null_;
					log({ /*"Failed to download texture"*/ STR(2682), self->block_skull_texture_name });
					self->block_skull_fail_count++;
				}
				
				self->block_skull_finish_count++;
				nexttex = true;
			}
			if (nexttex)
			{
				ds_map_delete(self->block_skull_texture_map, ds_map_find_first(self->block_skull_texture_map));
				self->block_skull_texture = null_;
				self->block_skull_texture_fail = false;
				self->block_skull_download_wait = false;
			}
		}
		
		return 0.0;
	}
	
	void res_load_start(ScopeAny self)
	{
		switch ((IntType)sVar(type))
		{
			case e_res_type_SCENERY:
			case e_res_type_FROM_WORLD:
			{
				sStr(load_stage) = /*"open"*/ STR(925);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadsceneryopen"*/ STR(2683) });
					ObjType(obj_popup, global::_app->popup_loading)->load_script = ID_res_load_scenery;
				}
				
				break;
			}
			
			case e_res_type_SOUND:
			{
				sStr(load_stage) = /*"open"*/ STR(925);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadaudioread"*/ STR(2684) });
					ObjType(obj_popup, global::_app->popup_loading)->caption = idVar(self.otherId, filename);
					ObjType(obj_popup, global::_app->popup_loading)->load_script = ID_res_load_audio;
				}
				
				break;
			}
			
			case e_res_type_PACK:
			case e_res_type_PACK_UNZIPPED:
			{
				sStr(load_stage) = /*"unzip"*/ STR(1319);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadpackunzip"*/ STR(2685) });
					ObjType(obj_popup, global::_app->popup_loading)->caption = idVar(self.otherId, filename);
					ObjType(obj_popup, global::_app->popup_loading)->load_script = ID_res_load_pack;
				}
				
				break;
			}
			
		}
		
	}
	
	void res_save(ScopeAny self)
	{
		if (sVar(type) != e_res_type_FROM_WORLD)
			file_copy_lib(global::load_folder + /*"/"*/ STR(20) + sVar(filename), global::save_folder + /*"/"*/ STR(20) + sVar(filename));
		if (sVar(type) == e_res_type_MODEL)
		{
			VarType name, key;
			name = filename_new_ext(sVar(filename), /*""*/ STR(0));
			if (sInt(model_texture_map) != null_)
			{
				key = ds_map_find_first(sInt(model_texture_map));
				while (!is_undefined(key))
				{
					VarType fn = key;
					if (sInt(model_format) == e_model_format_BLOCK)
						fn = name + /*"/"*/ STR(20) + key + /*".png"*/ STR(10);
					directory_create_lib(global::save_folder + /*"/"*/ STR(20) + filename_dir(fn));
					texture_export(DsMap(sInt(model_texture_map)).Value(key), global::save_folder + /*"/"*/ STR(20) + fn);
					key = ds_map_find_next(sInt(model_texture_map), key);
				}
				
			}
			if (sInt(model_texture_material_map) != null_)
			{
				key = ds_map_find_first(sInt(model_texture_material_map));
				while (!is_undefined(key))
				{
					VarType fn = key;
					if (sInt(model_format) == e_model_format_BLOCK)
						fn = name + /*"/"*/ STR(20) + key + /*".png"*/ STR(10);
					directory_create_lib(global::save_folder + /*"/"*/ STR(20) + filename_dir(fn));
					texture_export(DsMap(sInt(model_texture_material_map)).Value(key), global::save_folder + /*"/"*/ STR(20) + fn);
					key = ds_map_find_next(sInt(model_texture_material_map), key);
				}
				
			}
			if (sInt(model_tex_normal_map) != null_)
			{
				key = ds_map_find_first(sInt(model_tex_normal_map));
				while (!is_undefined(key))
				{
					VarType fn = key;
					if (sInt(model_format) == e_model_format_BLOCK)
						fn = name + /*"/"*/ STR(20) + key + /*".png"*/ STR(10);
					directory_create_lib(global::save_folder + /*"/"*/ STR(20) + filename_dir(fn));
					texture_export(DsMap(sInt(model_tex_normal_map)).Value(key), global::save_folder + /*"/"*/ STR(20) + fn);
					key = ds_map_find_next(sInt(model_tex_normal_map), key);
				}
				
			}
		}
	}
	
	void res_update_block_preview(Scope<obj_resource> self)
	{
		if (self->block_preview_texture > 0)
			texture_free(self->block_preview_texture);
		IntType surf;
		RealType size;
		size = texture_width(self->block_sheet_texture) / block_sheet_width;
		surf = surface_create(IntType(32), IntType(32));
		surface_set_target(surf);
	{
		draw_clear_alpha(c_black, 0.0);
		draw_texture_slot(self->block_sheet_texture, ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), /*"block/stone"*/ STR(2686)), IntType(0), IntType(0), size, size, block_sheet_width, block_sheet_height);
		draw_texture_slot(self->block_sheet_texture, ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), /*"block/grass_side"*/ STR(2687)), IntType(16), IntType(0), size, size, block_sheet_width, block_sheet_height);
		draw_texture_slot(self->block_sheet_texture, ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), /*"block/tnt_side"*/ STR(2688)), IntType(0), IntType(16), size, size, block_sheet_width, block_sheet_height);
		draw_texture_slot(self->block_sheet_texture, ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), /*"block/sapling_oak"*/ STR(2689)), IntType(16), IntType(16), size, size, block_sheet_width, block_sheet_height);
	}
		surface_reset_target();
		self->block_preview_texture = texture_surface(surf);
		surface_free(surf);
	}
	
	RealType res_update_colors(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (sInt(colormap_grass_texture) == null_)
			return IntType(0);
		IntType biome;
		VarType foliagecolor;
		if (argument_count > IntType(0))
			biome = find_biome(argument[IntType(0)]);
		else
			biome = find_biome(global::_app->background_biome);
		
		if (ObjType(obj_biome, biome)->name == /*"custom"*/ STR(629))
		{
			sVar(color_grass) = global::_app->background_grass_color;
			sVar(color_foliage) = global::_app->background_foliage_color;
			sVar(color_water) = global::_app->background_water_color;
			sVar(color_leaves_oak) = global::_app->background_leaves_oak_color;
			sVar(color_leaves_spruce) = global::_app->background_leaves_spruce_color;
			sVar(color_leaves_birch) = global::_app->background_leaves_birch_color;
			sVar(color_leaves_jungle) = global::_app->background_leaves_jungle_color;
			sVar(color_leaves_acacia) = global::_app->background_leaves_acacia_color;
			sVar(color_leaves_dark_oak) = global::_app->background_leaves_dark_oak_color;
			sVar(color_leaves_mangrove) = global::_app->background_leaves_mangrove_color;
		}
		else
		{
			if (ObjType(obj_biome, biome)->hardcoded)
			{
				sVar(color_grass) = ObjType(obj_biome, biome)->color_grass;
				foliagecolor = ObjType(obj_biome, biome)->color_foliage;
			}
			else
			{
				sVar(color_grass) = texture_getpixel(sInt(colormap_grass_texture), ObjType(obj_biome, biome)->txy.Value(IntType(0)), ObjType(obj_biome, biome)->txy.Value(IntType(1)));
				foliagecolor = texture_getpixel(sInt(colormap_foliage_texture), ObjType(obj_biome, biome)->txy.Value(IntType(0)), ObjType(obj_biome, biome)->txy.Value(IntType(1)));
			}
			
			sVar(color_water) = ObjType(obj_biome, biome)->color_water;
			sVar(color_leaves_oak) = foliagecolor;
			sVar(color_leaves_jungle) = foliagecolor;
			sVar(color_leaves_acacia) = foliagecolor;
			sVar(color_leaves_dark_oak) = foliagecolor;
			sVar(color_leaves_mangrove) = foliagecolor;
			sVar(color_foliage) = foliagecolor;
			sVar(color_leaves_spruce) = hex_to_color(/*"62A857"*/ STR(2690));
			sVar(color_leaves_birch) = sVar(color_leaves_spruce);
		}
		
		return 0.0;
	}
	
	void res_update_display_name(Scope<obj_resource> self)
	{
		if (self->type != e_res_type_FROM_WORLD)
			self->display_name = filename_new_ext(self->filename, /*""*/ STR(0));
		else
			self->display_name = self->filename;
		
		if (self->type == e_res_type_DOWNLOADED_SKIN)
			self->display_name = text_get({ /*"downloadskinname"*/ STR(2691), self->display_name });
		if (self->type == e_res_type_MODEL && self->model_file != null_)
			self->display_name = idVar(self->model_file, name);
	}
	
	RealType res_update_model_shape(Scope<obj_resource> self)
	{
		if (self->model_shape_alpha_map != null_)
			ds_map_clear(self->model_shape_alpha_map);
		if (self->model_shape_vbuffer_map != null_ && ds_map_size(self->model_shape_vbuffer_map) > IntType(0))
		{
			VarType key = ds_map_find_first(self->model_shape_vbuffer_map);
			while (!is_undefined(key))
			{
				if (instance_exists(key) && idVar(key, vbuffer_default) != DsMap(self->model_shape_vbuffer_map).Value(key))
					vbuffer_destroy(DsMap(self->model_shape_vbuffer_map).Value(key));
				key = ds_map_find_next(self->model_shape_vbuffer_map, key);
			}
			
			ds_map_clear(self->model_shape_vbuffer_map);
		}
		if (self->model_file == null_)
			return IntType(0);
		if (idBool(self->model_file, has_3d_plane))
		{
			if (self->model_shape_alpha_map == null_)
				self->model_shape_alpha_map = ds_map_create();
		}
		if (self->model_shape_vbuffer_map == null_)
			self->model_shape_vbuffer_map = ds_map_create();
		IntType res = self->id;
		if (idInt(res, model_texture_map) == null_)
			res = global::mc_res;
		for (IntType p = IntType(0); p < ds_list_size(idInt(self->model_file, file_part_list)); p++)
		{
			IntType part = DsList(idInt(self->model_file, file_part_list)).Value(p);
			model_part_fill_shape_alpha_map(part, self->model_shape_alpha_map, res, self->model_texture_name_map, self->model_shape_texture_name_map);
			model_part_fill_shape_vbuffer_map(part, self->model_shape_vbuffer_map, self->model_shape_alpha_map, ObjType(obj_model_part, part)->bend_inherit_angle);
		}
		return 0.0;
	}
	
	VarType rotation_get_time(VarType rotation)
	{
		RealType totalminutes, day, hours, minutes;
		StringType str;
		totalminutes = ((RealType)rotation / 360.0) * (IntType(60) * IntType(24));
		hours = (floor(totalminutes / 60.0));
		minutes = floor(totalminutes - (hours * IntType(60)));
		hours += IntType(12);
		day = floor(hours / 24.0);
		hours = mod_fix(hours, IntType(24));
		str = (day != IntType(0) ? string(day) + /*":"*/ STR(789) : /*""*/ STR(0));
		str += ((day != IntType(0) && hours < IntType(10)) ? /*"0"*/ STR(1093) : /*""*/ STR(0)) + string(hours) + /*":"*/ STR(789);
		str += ((minutes < IntType(10) ? /*"0"*/ STR(1093) : /*""*/ STR(0)) + string(minutes));
		return str;
	}
	
	StringType save_id_create()
	{
		random_set_seed(global::save_id_seed);
		StringType saveid;
		do
		{
			saveid = /*""*/ STR(0);
			for (IntType _it = 0, _it_max = IntType(16); _it < _it_max; _it++)
				saveid += chr(choose({ irandom_range((IntType)'0', (IntType)'9'), irandom_range((IntType)'A', (IntType)'Z') }));
		}
		while (!(save_id_find(saveid) == null_));
		global::save_id_seed++;
		return saveid;
	}
	
	VarType save_id_find(VarType saveid)
	{
		if (saveid == particle_sheet || saveid == particle_template)
			return saveid;
		if (!is_string(saveid) || saveid == /*""*/ STR(0))
			return null_;
		withOne (app, global::_app->id, noone)
			if (global::_app->save_id == saveid)
				return global::_app->id;
		
		withAll (obj_template, noone)
			if (self->save_id == saveid)
				return self->id;
		
		withAll (obj_timeline, noone)
			if (self->save_id == saveid)
				return self->id;
		
		withAll (obj_resource, noone)
			if (self->save_id == saveid)
				return self->id;
		
		withAll (obj_particle_type, noone)
			if (self->save_id == saveid)
				return self->id;
		
		withAll (obj_marker, noone)
			if (self->save_id == saveid)
				return self->id;
		
		return null_;
	}
	
	VarType save_id_get(VarType obj)
	{
		if (is_string(obj))
		{
			if (obj == /*""*/ STR(0))
				return /*""*/ STR(0);
			if (obj == ObjType(obj_resource, global::mc_res)->save_id)
				return obj;
		}
		else
		{
			if (is_real(obj) && obj < IntType(0))
				return obj;
			if (instance_exists(obj))
				return idVar(obj, save_id);
		}
		
		return /*""*/ STR(0);
	}
	
	RealType scrollbar_draw(ScopeAny self, IntType sb, IntType dir, VarType xx, VarType yy, VarType size, VarType maxsize)
	{
		RealType margin, width, areasize, nearsize;
		RealType barsize, barpos;
		BoolType mouseinarea, mouseinbar, pressed;
		VarType mousenear;
		width = IntType(6);
		margin = IntType(3);
		areasize = (width + (margin * IntType(2)));
		nearsize = IntType(0);
		if (size >= maxsize || maxsize == IntType(0))
		{
			idBool(sb, needed) = false;
			idVar(sb, value) = IntType(0);
			idVar(sb, value_goal) = IntType(0);
		}
		else
			idBool(sb, needed) = true;
		
		idBool(sb, atend) = (idBool(sb, needed) && idVar(sb, value) >= maxsize - size);
		if (!idBool(sb, needed) || size < IntType(5))
			return IntType(0);
		if (dir == e_scroll_HORIZONTAL)
			ObjType(value_animation, idInt(sb, mousenear))->value = (app_mouse_box(self, xx, yy - nearsize, size, areasize + nearsize) && sBool(content_mouseon)) || (sVar(window_focus) == string(sb) && sVar(window_busy) == /*"scrollbar"*/ STR(2692));
		else
			ObjType(value_animation, idInt(sb, mousenear))->value = (app_mouse_box(self, xx - nearsize, yy, areasize + nearsize, size) && sBool(content_mouseon)) || (sVar(window_focus) == string(sb) && sVar(window_busy) == /*"scrollbar"*/ STR(2692));
		
		VarType xfar, yfar, xnear, ynear;
		xfar = xx + margin;
		yfar = yy + margin;
		if (dir == e_scroll_HORIZONTAL)
		{
			xnear = xfar;
			ynear = yy;
		}
		else
		{
			xnear = xx;
			ynear = yfar;
		}
		
		width += ((margin * IntType(2)) * ObjType(value_animation, idInt(sb, mousenear))->value_ani_ease);
		xx = lerp(xfar, xnear, ObjType(value_animation, idInt(sb, mousenear))->value_ani_ease);
		yy = lerp(yfar, ynear, ObjType(value_animation, idInt(sb, mousenear))->value_ani_ease);
		size -= (margin * IntType(2));
		maxsize -= (margin * IntType(2));
		barsize = clamp(IntType(16), floor(((RealType)size / maxsize) * size), size);
		barpos = min({ size - barsize, floor(idVar(sb, value) * ((RealType)size / maxsize)) });
		if (dir == e_scroll_HORIZONTAL)
		{
			mouseinarea = (app_mouse_box(self, xx - margin, yy - margin, size + (margin * IntType(2)), areasize) && sBool(content_mouseon));
			mouseinbar = (app_mouse_box(self, xx + barpos, yy, barsize, width) && sBool(content_mouseon));
		}
		else
		{
			mouseinarea = (app_mouse_box(self, xx - margin, yy - margin, areasize, size + (margin * IntType(2))) && sBool(content_mouseon));
			mouseinbar = (app_mouse_box(self, xx, yy + barpos, width, barsize) && sBool(content_mouseon));
		}
		
		idBool(sb, mouseon) = mouseinarea;
		if (mouseinarea)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!sBool(mouse_left_pressed) && sBool(mouse_left) && !mouseinbar && ((dir > 0) ? (gmlGlobal::mouse_x < (xx + barpos) || gmlGlobal::mouse_x > (xx + barpos + barsize)) : (gmlGlobal::mouse_y < (yy + barpos) || gmlGlobal::mouse_y > (yy + barpos + barsize))))
			{
				idInt(sb, press)--;
				if (idInt(sb, press) < IntType(1))
				{
					if (dir > 0)
						idVar(sb, value_goal) += (RealType)((gmlGlobal::mouse_x < xx + barpos) ? -size : size) / 4.0;
					else
						idVar(sb, value_goal) += (RealType)((gmlGlobal::mouse_y < yy + barpos) ? -size : size) / 4.0;
					
					idVar(sb, value_goal) = snap(idVar(sb, value_goal), idReal(sb, snap_value));
					idVar(sb, value) = snap(idVar(sb, value), idReal(sb, snap_value));
				}
				if (idInt(sb, press) < IntType(0))
					idInt(sb, press) = IntType(10);
				else
					if (idInt(sb, press) == IntType(0))
						idInt(sb, press) = IntType(2);
				
			}
			else
				if (sBool(mouse_left) && mouseinbar)
				{
					sVar(window_focus) = string(sb);
					sVar(window_busy) = /*"scrollbar"*/ STR(2692);
				}
			
		}
		if (!sBool(mouse_left))
			idInt(sb, press) = IntType(0);
		if (sVar(window_busy) == /*""*/ STR(0) && sBool(content_mouseon) && !keyboard_check(vk_control))
		{
			if (sStr(window_scroll_focus_prev) == string(sb))
			{
				if (idReal(sb, snap_value) == IntType(0))
					idVar(sb, value_goal) += sReal(mouse_wheel) * IntType(120);
				else
					idVar(sb, value_goal) += (sReal(mouse_wheel) * idReal(sb, snap_value)) * IntType(4);
				
			}
		}
		if (sVar(window_focus) == string(sb) || (sVar(window_focus) == /*""*/ STR(0) && sBool(content_mouseon)))
		{
			if (sVar(window_busy) == /*"scrollbar"*/ STR(2692))
			{
				sInt(mouse_cursor) = cr_handpoint;
				if (!sBool(mouse_left))
				{
					sVar(window_busy) = /*""*/ STR(0);
					idVar(sb, value) = snap(idVar(sb, value), idReal(sb, snap_value));
					idVar(sb, value_goal) = snap(idVar(sb, value_goal), idReal(sb, snap_value));
					app_mouse_clear(self);
				}
				else
				{
					if (dir == e_scroll_HORIZONTAL)
					{
						idVar(sb, value) += sReal(mouse_dx) * ((RealType)maxsize / size);
						idVar(sb, value_goal) = idVar(sb, value);
					}
					else
					{
						idVar(sb, value) += sReal(mouse_dy) * ((RealType)maxsize / size);
						idVar(sb, value_goal) = idVar(sb, value);
					}
					
				}
				
			}
		}
		idVar(sb, value) = round(clamp(idVar(sb, value), IntType(0), maxsize - size));
		if (!idBool(sb, zoomable) || (sb == idInt(sVar(timeline), hor_scroll) && sVar(timeline_zoom) == sVar(timeline_zoom_goal)))
			idVar(sb, value_goal) = round(clamp(idVar(sb, value_goal), IntType(0), maxsize - size));
		idVar(sb, value_goal) = max({ idVar(sb, value_goal), IntType(0) });
		if (sVar(window_focus) == string(sb) && sVar(window_busy) == /*"scrollbar"*/ STR(2692))
			idVar(sb, value_goal) = idVar(sb, value);
		barpos = min({ size - barsize, floor(idVar(sb, value) * ((RealType)size / maxsize)) });
		pressed = (sVar(window_busy) == /*"scrollbar"*/ STR(2692) && sVar(window_focus) == string(sb));
		if (dir == e_scroll_HORIZONTAL)
		{
			draw_box(xx, yy, size, width, false, global::c_overlay, global::a_overlay);
			draw_box(xx + barpos, yy, barsize, width, false, global::c_accent, IntType(1));
		}
		else
		{
			draw_box(xx, yy, width, size, false, global::c_overlay, global::a_overlay);
			draw_box(xx, yy + barpos, width, barsize, false, global::c_accent, IntType(1));
		}
		
		return 0.0;
	}
	
	void scrollbar_event_create(Scope<obj_scrollbar> self)
	{
		self->snap_value = IntType(0);
		self->value = IntType(0);
		self->value_goal = IntType(0);
		self->press = IntType(0);
		self->needed = false;
		self->atend = false;
		self->value_ease = true;
		self->mouseon = false;
		self->zoomable = false;
		self->mousenear = (new value_animation())->id;
	}
	
	RealType settings_load(ScopeAny self)
	{
		StringType fn = settings_file;
		if (!file_exists_lib(fn))
			return IntType(0);
		if (filename_ext(fn) == /*".midata"*/ STR(100))
		{
			log({ /*"Loading settings"*/ STR(2693), fn });
			IntType map = json_load({ fn });
			if (!ds_map_valid(map))
				return IntType(0);
			if (!is_real(DsMap(map).Value(/*"format"*/ STR(92))))
				return IntType(0);
			global::load_format = DsMap(map).Value(/*"format"*/ STR(92));
			if (global::load_format > settings_format)
				return IntType(0);
			log({ /*"load_format"*/ STR(1273), global::load_format });
			VarType assetsmap = DsMap(map).Value(/*"assets"*/ STR(717));
			if (ds_map_valid(assetsmap))
			{
				sStr(setting_minecraft_assets_version) = value_get_string(DsMap(assetsmap).Value(/*"version"*/ STR(91))).Str();
				VarType newmap = DsMap(assetsmap).Value(/*"new"*/ STR(2694));
				if (ds_map_valid(newmap))
				{
					sVar(setting_minecraft_assets_new_version) = value_get_string(DsMap(newmap).Value(/*"version"*/ STR(91)));
					sVar(setting_minecraft_assets_new_format) = value_get_real(DsMap(newmap).Value(/*"format"*/ STR(92)));
					sVar(setting_minecraft_assets_new_changes) = value_get_string(DsMap(newmap).Value(/*"changes"*/ STR(93)));
					sStr(setting_minecraft_assets_new_image) = value_get_string(DsMap(newmap).Value(/*"image"*/ STR(94))).Str();
				}
			}
			VarType toastslist = DsMap(map).Value(/*"closed_toasts"*/ STR(2695));
			if (ds_list_valid(toastslist))
				ds_list_copy(sInt(closed_toast_list), (IntType)(toastslist));
			VarType programmap = DsMap(map).Value(/*"program"*/ STR(2696));
			if (ds_map_valid(programmap))
			{
				sReal(setting_advanced_mode) = value_get_real(DsMap(programmap).Value(/*"advanced_mode"*/ STR(2697)), sReal(setting_advanced_mode));
				gmlGlobal::room_speed = value_get_real(DsMap(programmap).Value(/*"fps"*/ STR(2698)), gmlGlobal::room_speed);
				if (!dev_mode)
					sStr(setting_project_folder) = value_get_string(DsMap(programmap).Value(/*"project_folder"*/ STR(2699)), sStr(setting_project_folder)).Str();
				if (!directory_exists_lib(sStr(setting_project_folder)))
					sStr(setting_project_folder) = projects_directory;
				sVar(setting_backup) = value_get_real(DsMap(programmap).Value(/*"backup"*/ STR(120)), sVar(setting_backup));
				sReal(setting_backup_time) = value_get_real(DsMap(programmap).Value(/*"backup_time"*/ STR(2700)), sReal(setting_backup_time));
				sReal(setting_backup_amount) = value_get_real(DsMap(programmap).Value(/*"backup_amount"*/ STR(2701)), sReal(setting_backup_amount));
				sVar(setting_spawn_cameras) = value_get_real(DsMap(programmap).Value(/*"spawn_cameras"*/ STR(2702)), sVar(setting_spawn_cameras));
				sReal(setting_unlimited_values) = value_get_real(DsMap(programmap).Value(/*"unlimited_values"*/ STR(2703)), sReal(setting_unlimited_values));
				sVar(setting_watermark_custom) = value_get_real(DsMap(programmap).Value(/*"watermark_custom"*/ STR(2704)), sVar(setting_watermark_custom));
				sStr(setting_watermark_fn) = value_get_string(DsMap(programmap).Value(/*"watermark_fn"*/ STR(2705)), sStr(setting_watermark_fn)).Str();
				sVar(setting_watermark_halign) = value_get_string(DsMap(programmap).Value(/*"watermark_halign"*/ STR(2706)), sVar(setting_watermark_halign));
				sVar(setting_watermark_valign) = value_get_string(DsMap(programmap).Value(/*"watermark_valign"*/ STR(2707)), sVar(setting_watermark_valign));
				sReal(setting_watermark_padding) = value_get_real(DsMap(programmap).Value(/*"watermark_padding"*/ STR(2708)), sReal(setting_watermark_padding));
				sReal(setting_watermark_scale) = value_get_real(DsMap(programmap).Value(/*"watermark_scale"*/ STR(2709)), sReal(setting_watermark_scale));
				sReal(setting_watermark_opacity) = value_get_real(DsMap(programmap).Value(/*"watermark_opacity"*/ STR(2710)), sReal(setting_watermark_opacity));
				if (sStr(setting_watermark_fn) != /*""*/ STR(0))
					sInt(setting_watermark_image) = texture_create(sStr(setting_watermark_fn));
			}
			VarType interfacemap = DsMap(map).Value(/*"interface"*/ STR(2711));
			if (ds_map_valid(interfacemap))
			{
				sStr(setting_language_filename) = value_get_string(DsMap(interfacemap).Value(/*"language_filename"*/ STR(2712)), sStr(setting_language_filename)).Str();
				if (!file_exists_lib(sStr(setting_language_filename)))
					sStr(setting_language_filename) = language_file;
				if (sStr(setting_language_filename) != language_file)
					language_load(sStr(setting_language_filename), global::language_map);
				VarType themename = ObjType(obj_theme, global::theme_light)->name;
				themename = value_get_string(DsMap(interfacemap).Value(/*"theme"*/ STR(2713)), themename);
				withAll (obj_theme, self->id)
				{
					if (themename == self->name)
					{
						global::_app->setting_theme = self->id;
						break;
					}
				}
				
				sInt(setting_accent) = value_get_real(DsMap(interfacemap).Value(/*"accent"*/ STR(2714)), sInt(setting_accent));
				sVar(setting_accent_custom) = value_get_color(DsMap(interfacemap).Value(/*"accent_custom"*/ STR(2715)), sVar(setting_accent_custom));
				sVar(setting_timeline_autoscroll) = value_get_real(DsMap(interfacemap).Value(/*"timeline_autoscroll"*/ STR(2716)), sVar(setting_timeline_autoscroll));
				sBool(setting_timeline_show_markers) = value_get_real(DsMap(interfacemap).Value(/*"timeline_show_markers"*/ STR(2717)), sBool(setting_timeline_show_markers));
				sVar(setting_interface_compact) = value_get_real(DsMap(interfacemap).Value(/*"interface_compact"*/ STR(2718)), sVar(setting_interface_compact));
				sReal(setting_timeline_compact) = value_get_real(DsMap(interfacemap).Value(/*"timeline_compact"*/ STR(2719)), sReal(setting_timeline_compact));
				sVar(setting_reduced_motion) = value_get_real(DsMap(interfacemap).Value(/*"reduced_motion"*/ STR(2720)), sVar(setting_reduced_motion));
				sVar(setting_timeline_select_jump) = value_get_real(DsMap(interfacemap).Value(/*"timeline_select_jump"*/ STR(2721)), sVar(setting_timeline_select_jump));
				sVar(setting_timeline_hide_ghosts) = value_get_real(DsMap(interfacemap).Value(/*"timeline_hide_ghosts"*/ STR(2722)), sVar(setting_timeline_hide_ghosts));
				sVar(setting_timeline_frame_snap) = value_get_real(DsMap(interfacemap).Value(/*"timeline_frame_snap"*/ STR(2723)), sVar(setting_timeline_frame_snap));
				sReal(setting_z_is_up) = value_get_real(DsMap(interfacemap).Value(/*"z_is_up"*/ STR(2724)), sReal(setting_z_is_up));
				sBool(setting_show_shortcuts_bar) = value_get_real(DsMap(interfacemap).Value(/*"show_shortcuts_bar"*/ STR(2725)), sBool(setting_show_shortcuts_bar));
				sVar(setting_gizmos_face_camera) = value_get_real(DsMap(interfacemap).Value(/*"gizmos_face_camera"*/ STR(2726)), sVar(setting_gizmos_face_camera));
				sVar(setting_fade_gizmos) = value_get_real(DsMap(interfacemap).Value(/*"fade_gizmos"*/ STR(2727)), sVar(setting_fade_gizmos));
				sVar(setting_camera_lock_mouse) = value_get_real(DsMap(interfacemap).Value(/*"camera_lock_mouse"*/ STR(2728)), sVar(setting_camera_lock_mouse));
				window_mouse_set_permission(sVar(setting_camera_lock_mouse));
				sVar(setting_place_new) = value_get_real(DsMap(interfacemap).Value(/*"place_new"*/ STR(2729)), sVar(setting_place_new));
				sVar(setting_interface_scale_auto) = value_get_real(DsMap(interfacemap).Value(/*"scale_auto"*/ STR(2730)), sVar(setting_interface_scale_auto));
				if (sVar(setting_interface_scale_auto) > 0)
					sVar(setting_interface_scale) = interface_scale_default_get();
				else
					sVar(setting_interface_scale) = value_get_real(DsMap(interfacemap).Value(/*"scale"*/ STR(890)), sVar(setting_interface_scale));
				
				interface_scale_set(sVar(setting_interface_scale));
				sVar(setting_separate_tool_modes) = value_get_real(DsMap(interfacemap).Value(/*"separate_tool_modes"*/ STR(2731)), sVar(setting_separate_tool_modes));
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_select) = true;
				}
				sVar(setting_panel_left_bottom_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_left_bottom_size"*/ STR(2732)), sVar(setting_panel_left_bottom_size));
				sVar(setting_panel_right_bottom_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_right_bottom_size"*/ STR(2733)), sVar(setting_panel_right_bottom_size));
				sVar(setting_panel_bottom_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_bottom_size"*/ STR(2734)), sVar(setting_panel_bottom_size));
				sVar(setting_panel_top_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_top_size"*/ STR(2735)), sVar(setting_panel_top_size));
				sVar(setting_panel_left_top_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_left_top_size"*/ STR(2736)), sVar(setting_panel_left_top_size));
				sVar(setting_panel_right_top_size) = value_get_real(DsMap(interfacemap).Value(/*"panel_right_top_size"*/ STR(2737)), sVar(setting_panel_right_top_size));
				sVar(setting_properties_location) = value_get_string(DsMap(interfacemap).Value(/*"properties_location"*/ STR(2738)), sVar(setting_properties_location));
				sVar(setting_ground_editor_location) = value_get_string(DsMap(interfacemap).Value(/*"ground_editor_location"*/ STR(2739)), sVar(setting_ground_editor_location));
				sVar(setting_template_editor_location) = value_get_string(DsMap(interfacemap).Value(/*"template_editor_location"*/ STR(2740)), sVar(setting_template_editor_location));
				sVar(setting_timeline_editor_location) = value_get_string(DsMap(interfacemap).Value(/*"timeline_editor_location"*/ STR(2741)), sVar(setting_timeline_editor_location));
				sVar(setting_frame_editor_location) = value_get_string(DsMap(interfacemap).Value(/*"frame_editor_location"*/ STR(2742)), sVar(setting_frame_editor_location));
				sVar(setting_settings_location) = value_get_string(DsMap(interfacemap).Value(/*"settings_location"*/ STR(2743)), sVar(setting_settings_location));
				if (ds_map_valid(DsMap(interfacemap).Value(/*"timeline_window"*/ STR(2744))))
					window_state_restore(e_window_TIMELINE, DsMap(interfacemap).Value(/*"timeline_window"*/ STR(2744)));
				sVar(setting_view_split) = value_get_real(DsMap(interfacemap).Value(/*"view_split"*/ STR(2745)), sVar(setting_view_split));
				sVar(setting_view_main_overlays) = value_get_real(DsMap(interfacemap).Value(/*"view_main_overlays"*/ STR(2746)), sVar(setting_view_main_overlays));
				sVar(setting_view_main_aspect_ratio) = value_get_real(DsMap(interfacemap).Value(/*"view_main_aspect_ratio"*/ STR(2747)), sVar(setting_view_main_aspect_ratio));
				sVar(setting_view_main_grid) = value_get_real(DsMap(interfacemap).Value(/*"view_main_grid"*/ STR(2748)), sVar(setting_view_main_grid));
				sVar(setting_view_main_gizmos) = value_get_real(DsMap(interfacemap).Value(/*"view_main_gizmos"*/ STR(2749)), sVar(setting_view_main_gizmos));
				sVar(setting_view_main_fog) = value_get_real(DsMap(interfacemap).Value(/*"view_main_fog"*/ STR(2750)), sVar(setting_view_main_fog));
				sVar(setting_view_main_effects) = value_get_real(DsMap(interfacemap).Value(/*"view_main_effects"*/ STR(2751)), sVar(setting_view_main_effects));
				sVar(setting_view_main_particles) = value_get_real(DsMap(interfacemap).Value(/*"view_main_particles"*/ STR(2752)), sVar(setting_view_main_particles));
				sVar(setting_view_main_location) = value_get_string(DsMap(interfacemap).Value(/*"view_main_location"*/ STR(2753)), sVar(setting_view_main_location));
				sVar(setting_view_second_show) = value_get_real(DsMap(interfacemap).Value(/*"view_second_show"*/ STR(2754)), sVar(setting_view_second_show));
				sVar(setting_view_second_overlays) = value_get_real(DsMap(interfacemap).Value(/*"view_second_overlays"*/ STR(2755)), sVar(setting_view_second_overlays));
				sVar(setting_view_second_aspect_ratio) = value_get_real(DsMap(interfacemap).Value(/*"view_second_aspect_ratio"*/ STR(2756)), sVar(setting_view_second_aspect_ratio));
				sVar(setting_view_second_grid) = value_get_real(DsMap(interfacemap).Value(/*"view_second_grid"*/ STR(2757)), sVar(setting_view_second_grid));
				sVar(setting_view_second_gizmos) = value_get_real(DsMap(interfacemap).Value(/*"view_second_gizmos"*/ STR(2758)), sVar(setting_view_second_gizmos));
				sVar(setting_view_second_fog) = value_get_real(DsMap(interfacemap).Value(/*"view_second_fog"*/ STR(2759)), sVar(setting_view_second_fog));
				sVar(setting_view_second_effects) = value_get_real(DsMap(interfacemap).Value(/*"view_second_effects"*/ STR(2760)), sVar(setting_view_second_effects));
				sVar(setting_view_second_particles) = value_get_real(DsMap(interfacemap).Value(/*"view_second_particles"*/ STR(2761)), sVar(setting_view_second_particles));
				sVar(setting_view_second_location) = value_get_string(DsMap(interfacemap).Value(/*"view_second_location"*/ STR(2762)), sVar(setting_view_second_location));
				sVar(setting_view_second_width) = value_get_real(DsMap(interfacemap).Value(/*"view_second_width"*/ STR(2763)), sVar(setting_view_second_width));
				sVar(setting_view_second_height) = value_get_real(DsMap(interfacemap).Value(/*"view_second_height"*/ STR(2764)), sVar(setting_view_second_height));
				if (ds_map_valid(DsMap(interfacemap).Value(/*"view_second_window"*/ STR(2765))))
					window_state_restore(e_window_VIEW_SECOND, DsMap(interfacemap).Value(/*"view_second_window"*/ STR(2765)));
				sReal(setting_snap) = value_get_real(DsMap(interfacemap).Value(/*"snap"*/ STR(305)), sReal(setting_snap));
				sVar(setting_snap_absolute) = value_get_real(DsMap(interfacemap).Value(/*"snap_absolute"*/ STR(2766)), sVar(setting_snap_absolute));
				sReal(setting_snap_size_position) = value_get_real(DsMap(interfacemap).Value(/*"snap_size_position"*/ STR(2767)), sReal(setting_snap_size_position));
				sReal(setting_snap_size_rotation) = value_get_real(DsMap(interfacemap).Value(/*"snap_size_rotation"*/ STR(2768)), sReal(setting_snap_size_rotation));
				sReal(setting_snap_size_scale) = value_get_real(DsMap(interfacemap).Value(/*"snap_size_scale"*/ STR(2769)), sReal(setting_snap_size_scale));
				sVar(setting_select_locked_parent) = value_get_real(DsMap(interfacemap).Value(/*"setting_select_locked_parent"*/ STR(2770)), sVar(setting_select_locked_parent));
				sVar(setting_modelbench_popup_hidden) = value_get_real(DsMap(interfacemap).Value(/*"modelbench_popup_hidden"*/ STR(2771)), sVar(setting_modelbench_popup_hidden));
			}
			VarType controlsmap = DsMap(map).Value(/*"controls"*/ STR(2772));
			if (ds_map_valid(controlsmap))
			{
				IntType obj;
				for (IntType i = IntType(0); i < e_keybind_amount; i++)
				{
					obj = global::keybinds.Value(i);
					ObjType(obj_keybind, obj)->keybind = value_get_array(DsMap(controlsmap).Value(ObjType(obj_keybind, obj)->name), ObjType(obj_keybind, obj)->keybind);
				}
				sReal(setting_move_speed) = value_get_real(DsMap(controlsmap).Value(/*"move_speed"*/ STR(2773)), sReal(setting_move_speed));
				sReal(setting_look_sensitivity) = value_get_real(DsMap(controlsmap).Value(/*"look_sensitivity"*/ STR(2774)), sReal(setting_look_sensitivity));
				sReal(setting_fast_modifier) = value_get_real(DsMap(controlsmap).Value(/*"fast_modifier"*/ STR(2775)), sReal(setting_fast_modifier));
				sReal(setting_slow_modifier) = value_get_real(DsMap(controlsmap).Value(/*"slow_modifier"*/ STR(2776)), sReal(setting_slow_modifier));
				keybinds_update_match();
			}
			VarType exportmap = DsMap(map).Value(/*"export"*/ STR(2777));
			if (ds_map_valid(exportmap))
			{
				sVar(setting_export_movie_format) = value_get_string(DsMap(map).Value(/*"exportmovie_format"*/ STR(2778)), sVar(setting_export_movie_format));
				sVar(setting_export_movie_frame_rate) = value_get_real(DsMap(map).Value(/*"exportmovie_frame_rate"*/ STR(2779)), sVar(setting_export_movie_frame_rate));
				sVar(setting_export_movie_framespersecond) = value_get_real(DsMap(map).Value(/*"exportmovie_framespersecond"*/ STR(2780)), sVar(setting_export_movie_framespersecond));
				sVar(setting_export_movie_bit_rate) = value_get_real(DsMap(map).Value(/*"exportmovie_bit_rate"*/ STR(2781)), sVar(setting_export_movie_bit_rate));
				sVar(setting_export_movie_include_audio) = value_get_real(DsMap(map).Value(/*"exportmovie_include_audio"*/ STR(2782)), sVar(setting_export_movie_include_audio));
				sVar(setting_export_movie_remove_background) = value_get_real(DsMap(map).Value(/*"exportmovie_remove_background"*/ STR(2783)), sVar(setting_export_movie_remove_background));
				sVar(setting_export_movie_include_hidden) = value_get_real(DsMap(map).Value(/*"exportmovie_remove_background"*/ STR(2783)), sVar(setting_export_movie_include_hidden));
				sVar(setting_export_movie_high_quality) = value_get_real(DsMap(map).Value(/*"exportmovie_high_quality"*/ STR(2784)), sVar(setting_export_movie_high_quality));
				sVar(setting_export_movie_watermark) = value_get_real(DsMap(map).Value(/*"exportmovie_watermark"*/ STR(2785)), sVar(setting_export_movie_watermark));
				sVar(setting_export_image_remove_background) = value_get_real(DsMap(map).Value(/*"exportimage_remove_background"*/ STR(2786)), sVar(setting_export_image_remove_background));
				sVar(setting_export_image_include_hidden) = value_get_real(DsMap(map).Value(/*"exportimage_include_hidden"*/ STR(2787)), sVar(setting_export_image_include_hidden));
				sVar(setting_export_image_high_quality) = value_get_real(DsMap(map).Value(/*"exportimage_high_quality"*/ STR(2788)), sVar(setting_export_image_high_quality));
				sVar(setting_export_image_watermark) = value_get_real(DsMap(map).Value(/*"exportimage_watermark"*/ STR(2789)), sVar(setting_export_image_watermark));
			}
			VarType collapsemap = DsMap(map).Value(/*"collapse"*/ STR(1099));
			if (ds_map_valid(collapsemap))
			{
				VarType key = ds_map_find_first(global::collapse_map);
				while (!is_undefined(key))
				{
					DsMap(global::collapse_map)[key] = value_get_real(DsMap(collapsemap).Value(key), DsMap(global::collapse_map).Value(key));
					key = ds_map_find_next(global::collapse_map, key);
				}
				
			}
			if (ds_map_valid(DsMap(map).Value(/*"main_window"*/ STR(2790))))
			{
				VarType mainwindowmap = DsMap(map).Value(/*"main_window"*/ STR(2790));
				VarType rectlist = DsMap(mainwindowmap).Value(/*"rect"*/ STR(2791));
				sVar(setting_main_window_rect) = ArrType::From({ DsList(rectlist).Value(IntType(0)), DsList(rectlist).Value(IntType(1)), DsList(rectlist).Value(IntType(2)), DsList(rectlist).Value(IntType(3)) });
				sVar(setting_main_window_maximized) = DsMap(mainwindowmap).Value(/*"maximized"*/ STR(2792));
			}
			VarType worldimportmap = DsMap(map).Value(/*"world_import"*/ STR(2793));
			if (ds_map_valid(worldimportmap))
			{
				sVar(setting_world_import_filter_enabled) = value_get_real(DsMap(worldimportmap).Value(/*"filter_enabled"*/ STR(2794)), sVar(setting_world_import_filter_enabled));
				sVar(setting_world_import_filter_mode) = value_get_real(DsMap(worldimportmap).Value(/*"filter_mode"*/ STR(2795)), sVar(setting_world_import_filter_mode));
				ds_list_merge(sInt(setting_world_import_filter_list), DsMap(worldimportmap).Value(/*"filter_list"*/ STR(2796)));
				sVar(setting_world_import_unload_regions) = value_get_real(DsMap(worldimportmap).Value(/*"unload_regions"*/ STR(2797)), sVar(setting_world_import_unload_regions));
			}
		}
		else
		{
			settings_load_legacy(self, fn);
			settings_load_legacy_recent(self, data_directory + /*"recent.file"*/ STR(2798));
		}
		
		return 0.0;
	}
	
}
