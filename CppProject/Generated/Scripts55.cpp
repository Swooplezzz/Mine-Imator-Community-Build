/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.28 14:16:58 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void shader_material_uniforms(Scope<obj_shader> self)
	{
		new_shader_uniform(self, /*"uDefaultEmissive"*/ STR(2805));
		new_shader_uniform(self, /*"uDefaultSubsurface"*/ STR(2806));
		new_shader_sampler(self, /*"uTextureMaterial"*/ STR(2807));
		new_shader_sampler(self, /*"uTextureNormal"*/ STR(2808));
		new_shader_uniform(self, /*"uMaterialFormat"*/ STR(2477));
		new_shader_uniform(self, /*"uRoughness"*/ STR(2481));
		new_shader_uniform(self, /*"uMetallic"*/ STR(2480));
		new_shader_uniform(self, /*"uEmissive"*/ STR(2482));
		new_shader_uniform(self, /*"uSSS"*/ STR(2490));
		new_shader_uniform(self, /*"uSSSRadius"*/ STR(2491));
		new_shader_uniform(self, /*"uSSSColor"*/ STR(2492));
		new_shader_uniform(self, /*"uSSSHighlight"*/ STR(2809));
		new_shader_uniform(self, /*"uSSSHighlightStrength"*/ STR(2810));
		new_shader_uniform(self, /*"uIsWater"*/ STR(2483));
	}
	
	void shader_noise_set(ScopeAny self)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2750)), surface_get_texture((IntType)(global::render_grain_noise)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2750)), true);
		gpu_set_tex_filter_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2750)), true);
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2702), global::render_width, global::render_height);
		render_set_uniform(/*"uStrength"*/ STR(2811), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_STRENGTH));
		render_set_uniform(/*"uSaturation"*/ STR(2715), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_SATURATION));
		render_set_uniform(/*"uSize"*/ STR(2812), vec2_mul(vec2(max({ ceil((RealType)global::render_width / 8.0), ceil((RealType)global::render_height / 8.0) })), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_SIZE)));
	}
	
	void shader_reset_uniforms()
	{
		global::shader_uniform_color_ext = null_;
		global::shader_uniform_rgb_add = null_;
		global::shader_uniform_rgb_sub = null_;
		global::shader_uniform_hsb_add = null_;
		global::shader_uniform_hsb_sub = null_;
		global::shader_uniform_hsb_mul = null_;
		global::shader_uniform_mix_color = null_;
		global::shader_uniform_mix_percent = null_;
		global::shader_uniform_emissive = null_;
		global::shader_uniform_metallic = null_;
		global::shader_uniform_roughness = null_;
		global::shader_uniform_wind = null_;
		global::shader_uniform_wind_terrain = null_;
		global::shader_uniform_fog = null_;
		global::shader_uniform_sss = null_;
		global::shader_uniform_sss_red = null_;
		global::shader_uniform_sss_green = null_;
		global::shader_uniform_sss_blue = null_;
		global::shader_uniform_sss_color = null_;
		global::shader_uniform_wind_strength = null_;
		global::shader_uniform_glow = null_;
		global::shader_uniform_glow_texture = null_;
		global::shader_uniform_glow_color = null_;
	}
	
	void shader_set_uniform_color(VarType index, VarType color, VarType alpha)
	{
		shader_submit_vec4(index, (RealType)color_get_red((IntType)(color)) / 255.0, (RealType)color_get_green((IntType)(color)) / 255.0, (RealType)color_get_blue((IntType)(color)) / 255.0, alpha);
	}
	
	BoolType shader_startup()
	{
		global::shader_clip_x = IntType(0);
		global::shader_clip_y = IntType(0);
		global::shader_clip_width = IntType(0);
		global::shader_clip_height = IntType(0);
		global::shader_clip_active = false;
		global::shader_mask = false;
		log({ /*"Shader init"*/ STR(2813) });
		log({ /*"shaders_are_supported"*/ STR(2814), yesno(shaders_are_supported()) });
		BoolType err = false;
		if (!shaders_are_supported())
			err = true;
		global::shader_check_uniform = false;
		if (!err)
		{
			global::shader_map = ds_map_create();
			new_shader(/*"shader_alpha_fix"*/ STR(2815));
			new_shader(/*"shader_alpha_test"*/ STR(2816));
			new_shader(/*"shader_blend"*/ STR(2817));
			new_shader(/*"shader_border"*/ STR(2818));
			new_shader(/*"shader_color_camera"*/ STR(2819));
			new_shader(/*"shader_color_fog"*/ STR(2820));
			new_shader(/*"shader_color_fog_lights"*/ STR(2821));
			new_shader(/*"shader_depth"*/ STR(2822));
			new_shader(/*"shader_depth_ortho"*/ STR(2823));
			new_shader(/*"shader_depth_point"*/ STR(2824));
			new_shader(/*"shader_draw_texture"*/ STR(2825));
			new_shader(/*"shader_replace"*/ STR(2826));
			new_shader(/*"shader_replace_alpha"*/ STR(2827));
			new_shader(/*"shader_high_dof"*/ STR(2828));
			new_shader(/*"shader_high_dof_coc"*/ STR(2829));
			new_shader(/*"shader_high_dof_coc_blur"*/ STR(2830));
			new_shader(/*"shader_high_fog"*/ STR(2831));
			new_shader(/*"shader_high_fog_apply"*/ STR(2832));
			new_shader(/*"shader_high_light_point"*/ STR(2833));
			new_shader(/*"shader_high_light_point_shadowless"*/ STR(2834));
			new_shader(/*"shader_high_light_spot"*/ STR(2835));
			new_shader(/*"shader_high_light_sun"*/ STR(2836));
			new_shader(/*"shader_high_ssao"*/ STR(2837));
			new_shader(/*"shader_color_glow"*/ STR(2838));
			new_shader(/*"shader_high_bloom_threshold"*/ STR(2839));
			new_shader(/*"shader_add"*/ STR(2840));
			new_shader(/*"shader_blur"*/ STR(2841));
			new_shader(/*"shader_color_correction"*/ STR(2842));
			new_shader(/*"shader_vignette"*/ STR(2843));
			new_shader(/*"shader_noise"*/ STR(2844));
			new_shader(/*"shader_ca"*/ STR(2845));
			new_shader(/*"shader_distort"*/ STR(2846));
			new_shader(/*"shader_high_lighting_apply"*/ STR(2847));
			new_shader(/*"shader_high_samples_add"*/ STR(2848));
			new_shader(/*"shader_high_samples_unpack"*/ STR(2849));
			new_shader(/*"shader_high_depth_normal"*/ STR(2850));
			new_shader(/*"shader_high_material"*/ STR(2851));
			new_shader(/*"shader_high_subsurface"*/ STR(2852));
			new_shader(/*"shader_high_subsurface_scatter"*/ STR(2853));
			new_shader(/*"shader_high_raytrace"*/ STR(2854));
			new_shader(/*"shader_high_raytrace_resolve"*/ STR(2855));
			new_shader(/*"shader_high_indirect_blur"*/ STR(2856));
			new_shader(/*"shader_tonemap"*/ STR(2857));
			new_shader(/*"shader_clip"*/ STR(2858));
			global::shader_texture_surface = false;
			global::shader_texture_filter_linear = false;
			global::shader_texture_filter_mipmap = false;
			withAll (obj_shader, noone)
			{
				log({ self->name + /*" compiled"*/ STR(2859), yesno(shader_is_compiled(self->shader)) });
				if (!shader_is_compiled(self->shader))
				{
					err = true;
					break;
				}
			}
			
		}
		if (err)
		{
			log({ /*"Shader compilation failed"*/ STR(2860) });
			log({ /*"Try updating your graphics drivers"*/ STR(2861), link_article_drivers });
			if (show_question(/*"Some shaders failed to compile.\nCheck that your graphics drivers are up-to-date and restart Mine-imator.\n\nOpen support article about updating graphics drivers?"*/ STR(2862)))
				open_url(drivers_url_get());
			game_end();
			return false;
		}
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_border), noone)
		{
			new_shader_uniform(self, /*"uTexSize"*/ STR(2707));
			new_shader_uniform(self, /*"uColor"*/ STR(2708));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_camera), noone)
		{
			new_shader_uniform(self, /*"uBrightness"*/ STR(2714));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2055));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2056));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2057));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2058));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2059));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2060));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_fog), noone)
		{
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2054));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2055));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2056));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2057));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2058));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2059));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2060));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_fog_lights), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsGround"*/ STR(2485));
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2054));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2055));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2056));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2057));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2058));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2059));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2060));
			new_shader_uniform(self, /*"uLightAmount"*/ STR(2719));
			new_shader_uniform(self, /*"uSunDirection"*/ STR(2718));
			new_shader_uniform(self, /*"uLightData"*/ STR(2720));
			new_shader_uniform(self, /*"uAmbientColor"*/ STR(2721));
			new_shader_uniform(self, /*"uFallbackColor"*/ STR(2722));
			new_shader_uniform(self, /*"uTonemapper"*/ STR(2723));
			new_shader_uniform(self, /*"uExposure"*/ STR(2724));
			new_shader_uniform(self, /*"uGamma"*/ STR(2725));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_depth), noone)
		{
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_depth_point), noone)
		{
			new_shader_uniform(self, /*"uEye"*/ STR(2726));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_draw_texture), noone)
			new_shader_uniform(self, /*"uMask"*/ STR(2756));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_replace), noone)
			new_shader_uniform(self, /*"uReplaceColor"*/ STR(2484));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_replace_alpha), noone)
			new_shader_uniform(self, /*"uReplaceColor"*/ STR(2484));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof), noone)
		{
			new_shader_sampler(self, /*"uBlurBuffer"*/ STR(2739));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uBlurSize"*/ STR(2740));
			new_shader_uniform(self, /*"uBias"*/ STR(2741));
			new_shader_uniform(self, /*"uThreshold"*/ STR(2732));
			new_shader_uniform(self, /*"uGain"*/ STR(2742));
			new_shader_uniform(self, /*"uFringe"*/ STR(2743));
			new_shader_uniform(self, /*"uFringeAngle"*/ STR(2744));
			new_shader_uniform(self, /*"uFringeStrength"*/ STR(2745));
			new_shader_uniform(self, /*"uSampleAmount"*/ STR(2746));
			new_shader_uniform(self, /*"uSamples"*/ STR(2704));
			new_shader_uniform(self, /*"uWeightSamples"*/ STR(2747));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof_coc), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_uniform(self, /*"uDepth"*/ STR(2736));
			new_shader_uniform(self, /*"uRange"*/ STR(2737));
			new_shader_uniform(self, /*"uFadeSize"*/ STR(2738));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof_coc_blur), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uPixelCheck"*/ STR(2734));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_fog), noone)
		{
			new_shader_uniform(self, /*"uCameraPos"*/ STR(2863));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_fog_apply), noone)
		{
			new_shader_sampler(self, /*"uFogBuffer"*/ STR(2748));
			new_shader_uniform(self, /*"uFogColor"*/ STR(1903));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_point), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
			new_shader_uniform(self, /*"uLightPosition"*/ STR(2761));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2762));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2763));
			new_shader_uniform(self, /*"uLightNear"*/ STR(2764));
			new_shader_uniform(self, /*"uLightFar"*/ STR(2765));
			new_shader_uniform(self, /*"uLightFadeSize"*/ STR(2766));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_uniform(self, /*"uDepthBufferSize"*/ STR(2769));
			new_shader_uniform(self, /*"uShadowPosition"*/ STR(2767));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2489));
			new_shader_uniform(self, /*"uLightSize"*/ STR(2768));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_point_shadowless), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
			new_shader_uniform(self, /*"uLightAmount"*/ STR(2719));
			new_shader_uniform(self, /*"uLightData"*/ STR(2720));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2489));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_spot), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
			new_shader_uniform(self, /*"uLightMatrix"*/ STR(2770));
			new_shader_uniform(self, /*"uShadowMatrix"*/ STR(2771));
			new_shader_uniform(self, /*"uLightPosition"*/ STR(2761));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2762));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2763));
			new_shader_uniform(self, /*"uLightNear"*/ STR(2764));
			new_shader_uniform(self, /*"uLightFar"*/ STR(2765));
			new_shader_uniform(self, /*"uLightFadeSize"*/ STR(2766));
			new_shader_uniform(self, /*"uLightSpotSharpness"*/ STR(2772));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2489));
			new_shader_uniform(self, /*"uLightSize"*/ STR(2768));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_sun), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
			new_shader_uniform(self, /*"uLightDirection"*/ STR(2776));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2762));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2763));
			new_shader_uniform(self, /*"uSunNear"*/ STR(2774));
			new_shader_uniform(self, /*"uSunFar"*/ STR(2775));
			new_shader_sampler(self, /*"uDepthBuffer0"*/ STR(2777));
			new_shader_sampler(self, /*"uDepthBuffer1"*/ STR(2778));
			new_shader_sampler(self, /*"uDepthBuffer2"*/ STR(2779));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2489));
			new_shader_uniform(self, /*"uLightMatBiasMVP"*/ STR(2773));
			new_shader_uniform(self, /*"uCascadeEndClipSpace"*/ STR(2780));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_ssao), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2749));
			new_shader_sampler(self, /*"uEmissiveBuffer"*/ STR(2800));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2750));
			new_shader_sampler(self, /*"uMaskBuffer"*/ STR(2801));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2733));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2788));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2789));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2751));
			new_shader_uniform(self, /*"uKernel"*/ STR(2703));
			new_shader_uniform(self, /*"uRadius"*/ STR(2705));
			new_shader_uniform(self, /*"uPower"*/ STR(2701));
			new_shader_uniform(self, /*"uColor"*/ STR(2708));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_glow), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2054));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2055));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2056));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2057));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2058));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2059));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2060));
			new_shader_uniform(self, /*"uGlow"*/ STR(2493));
			new_shader_uniform(self, /*"uGlowTexture"*/ STR(2487));
			new_shader_uniform(self, /*"uGlowColor"*/ STR(2486));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_bloom_threshold), noone)
		{
			new_shader_uniform(self, /*"uThreshold"*/ STR(2732));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_add), noone)
		{
			new_shader_sampler(self, /*"uAddTexture"*/ STR(2699));
			new_shader_uniform(self, /*"uAmount"*/ STR(2700));
			new_shader_uniform(self, /*"uPower"*/ STR(2701));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_blur), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uRadius"*/ STR(2705));
			new_shader_uniform(self, /*"uDirection"*/ STR(2706));
			new_shader_uniform(self, /*"uKernel"*/ STR(2703));
			new_shader_uniform(self, /*"uSamples"*/ STR(2704));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_correction), noone)
		{
			new_shader_uniform(self, /*"uContrast"*/ STR(2713));
			new_shader_uniform(self, /*"uBrightness"*/ STR(2714));
			new_shader_uniform(self, /*"uSaturation"*/ STR(2715));
			new_shader_uniform(self, /*"uVibrance"*/ STR(2716));
			new_shader_uniform(self, /*"uColorBurn"*/ STR(2717));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_vignette), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uRadius"*/ STR(2705));
			new_shader_uniform(self, /*"uSoftness"*/ STR(2864));
			new_shader_uniform(self, /*"uStrength"*/ STR(2811));
			new_shader_uniform(self, /*"uColor"*/ STR(2708));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_noise), noone)
		{
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2750));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2751));
			new_shader_uniform(self, /*"uStrength"*/ STR(2811));
			new_shader_uniform(self, /*"uSaturation"*/ STR(2715));
			new_shader_uniform(self, /*"uSize"*/ STR(2812));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_ca), noone)
		{
			new_shader_uniform(self, /*"uBlurAmount"*/ STR(2709));
			new_shader_uniform(self, /*"uColorOffset"*/ STR(2710));
			new_shader_uniform(self, /*"uDistortChannels"*/ STR(2711));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_distort), noone)
		{
			new_shader_uniform(self, /*"uDistortAmount"*/ STR(2729));
			new_shader_uniform(self, /*"uRepeatImage"*/ STR(2730));
			new_shader_uniform(self, /*"uZoomAmount"*/ STR(2731));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_lighting_apply), noone)
		{
			new_shader_sampler(self, /*"uShadows"*/ STR(2753));
			new_shader_sampler(self, /*"uSpecular"*/ STR(2755));
			new_shader_sampler(self, /*"uMask"*/ STR(2756));
			new_shader_sampler(self, /*"uEmissive"*/ STR(2482));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2757));
			new_shader_uniform(self, /*"uShadowsEnabled"*/ STR(2752));
			new_shader_uniform(self, /*"uSpecularEnabled"*/ STR(2754));
			new_shader_uniform(self, /*"uReflectionsEnabled"*/ STR(2760));
			new_shader_uniform(self, /*"uFallbackColor"*/ STR(2722));
			new_shader_uniform(self, /*"uGamma"*/ STR(2725));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_samples_add), noone)
		{
			new_shader_sampler(self, /*"uSamplesExp"*/ STR(2794));
			new_shader_sampler(self, /*"uSamplesDec"*/ STR(2795));
			new_shader_sampler(self, /*"uSamplesAlpha"*/ STR(2796));
			new_shader_sampler(self, /*"uSample"*/ STR(2797));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_samples_unpack), noone)
		{
			new_shader_sampler(self, /*"uSamplesExp"*/ STR(2794));
			new_shader_sampler(self, /*"uSamplesDec"*/ STR(2795));
			new_shader_sampler(self, /*"uSamplesAlpha"*/ STR(2796));
			new_shader_uniform(self, /*"uSamplesStrength"*/ STR(2798));
			new_shader_uniform(self, /*"uRenderBackground"*/ STR(2799));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_depth_normal), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2733));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_material), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2488));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_subsurface), noone)
		{
			shader_material_uniforms(self);
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_subsurface_scatter), noone)
		{
			new_shader_sampler(self, /*"uSSSBuffer"*/ STR(2802));
			new_shader_sampler(self, /*"uSSSRangeBuffer"*/ STR(2803));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_sampler(self, /*"uDirect"*/ STR(2804));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2750));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2788));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2789));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uSamples"*/ STR(2704));
			new_shader_uniform(self, /*"uKernel"*/ STR(2703));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2751));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_raytrace), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2749));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2750));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2757));
			new_shader_sampler(self, /*"uDiffuseBuffer"*/ STR(2782));
			new_shader_sampler(self, /*"uDataBuffer"*/ STR(2787));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2733));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2751));
			new_shader_uniform(self, /*"uNear"*/ STR(2727));
			new_shader_uniform(self, /*"uFar"*/ STR(2728));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2788));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2789));
			new_shader_uniform(self, /*"uViewMatrixInv"*/ STR(2790));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uPrecision"*/ STR(2784));
			new_shader_uniform(self, /*"uThickness"*/ STR(2785));
			new_shader_uniform(self, /*"uRayType"*/ STR(2783));
			new_shader_uniform(self, /*"uRayDirection"*/ STR(2865));
			new_shader_uniform(self, /*"uRayDistance"*/ STR(2786));
			new_shader_uniform(self, /*"uFadeAmount"*/ STR(2792));
			new_shader_uniform(self, /*"uGamma"*/ STR(2725));
			new_shader_uniform(self, /*"uSkyColor"*/ STR(2791));
			new_shader_uniform(self, /*"uFogColor"*/ STR(1903));
			new_shader_uniform(self, /*"uIndirectStength"*/ STR(2793));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_indirect_blur), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2749));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2750));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2733));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2751));
			new_shader_uniform(self, /*"uSamples"*/ STR(2704));
			new_shader_uniform(self, /*"uBlurSize"*/ STR(2740));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_raytrace_resolve), noone)
		{
			new_shader_sampler(self, /*"uDataBuffer"*/ STR(2787));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2735));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2749));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2757));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2733));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_tonemap), noone)
		{
			new_shader_sampler(self, /*"uMask"*/ STR(2756));
			new_shader_uniform(self, /*"uTonemapper"*/ STR(2723));
			new_shader_uniform(self, /*"uExposure"*/ STR(2724));
			new_shader_uniform(self, /*"uGamma"*/ STR(2725));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_clip), noone)
		{
			new_shader_uniform(self, /*"uBox"*/ STR(2712));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2702));
		}
		
		return true;
	}
	
	void shader_tonemap_set(ScopeAny self, VarType mask)
	{
		render_set_uniform_int(/*"uTonemapper"*/ STR(2723), global::render_tonemapper);
		render_set_uniform(/*"uExposure"*/ STR(2724), global::render_exposure);
		render_set_uniform(/*"uGamma"*/ STR(2725), global::render_gamma);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMask"*/ STR(2756)), surface_get_texture((IntType)(mask)));
	}
	
	void shader_use(ScopeAny self)
	{
		shader_set(sInt(shader));
		global::shader_blend_color = c_white;
		global::shader_blend_alpha = IntType(1);
		render_set_uniform_color(/*"uBlendColor"*/ STR(1893), c_white, IntType(1));
		render_set_uniform(/*"uMetallic"*/ STR(2480), IntType(0));
		render_set_uniform(/*"uRoughness"*/ STR(2481), IntType(1));
		render_set_uniform(/*"uTAAMatrix"*/ STR(1908), global::taa_matrix);
		render_set_uniform(/*"uSampleIndex"*/ STR(1909), global::render_sample_current);
		render_set_uniform_int(/*"uAlphaHash"*/ STR(1910), global::render_alpha_hash);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uTime"*/ STR(1894))) && DsMap(sInt(uniform_map)).Value(/*"uTime"*/ STR(1894)) > -IntType(1))
		{
			render_set_uniform(/*"uTime"*/ STR(1894), global::_app->background_time);
			render_set_uniform(/*"uWindEnable"*/ STR(1895), IntType(0));
			render_set_uniform(/*"uWindTerrain"*/ STR(1896), IntType(1));
			render_set_uniform(/*"uWindSpeed"*/ STR(1897), global::_app->background_wind * global::_app->background_wind_speed);
			render_set_uniform(/*"uWindStrength"*/ STR(1898), global::_app->background_wind_strength * (IntType)global::_app->setting_wind_enable);
			render_set_uniform_vec2(/*"uWindDirection"*/ STR(1899), sin(degtorad(global::_app->background_wind_direction)), cos(degtorad(global::_app->background_wind_direction)));
			render_set_uniform(/*"uWindDirectionalSpeed"*/ STR(1900), global::_app->background_wind * global::_app->background_wind_directional_speed * .1 * global::_app->background_time);
			render_set_uniform(/*"uWindDirectionalStrength"*/ STR(1901), global::_app->background_wind * global::_app->background_wind_directional_strength * (IntType)global::_app->setting_wind_enable);
		}
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uFogShow"*/ STR(1902))) && DsMap(sInt(uniform_map)).Value(/*"uFogShow"*/ STR(1902)) > -IntType(1))
		{
			BoolType fog = (global::_app->background_fog_show > 0 && global::render_mode != e_render_mode_COLOR);
			render_set_uniform_int(/*"uFogShow"*/ STR(1902), bool_to_float(fog));
			render_set_uniform_color(/*"uFogColor"*/ STR(1903), global::_app->background_fog_object_color_final, IntType(1));
			render_set_uniform(/*"uFogDistance"*/ STR(1904), global::_app->background_fog_distance);
			render_set_uniform(/*"uFogSize"*/ STR(1905), global::_app->background_fog_size);
			render_set_uniform(/*"uFogHeight"*/ STR(1906), global::_app->background_fog_height);
		}
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uCameraPosition"*/ STR(1907))) && DsMap(sInt(uniform_map)).Value(/*"uCameraPosition"*/ STR(1907)) > -IntType(1))
			render_set_uniform_vec3(/*"uCameraPosition"*/ STR(1907), global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_from.Real(Z_));
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uDefaultEmissive"*/ STR(2805))) && DsMap(sInt(uniform_map)).Value(/*"uDefaultEmissive"*/ STR(2805)) > -IntType(1))
			render_set_uniform(/*"uDefaultEmissive"*/ STR(2805), global::_app->project_render_block_emissive);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uDefaultSubsurface"*/ STR(2806))) && DsMap(sInt(uniform_map)).Value(/*"uDefaultSubsurface"*/ STR(2806)) > -IntType(1))
			render_set_uniform(/*"uDefaultSubsurface"*/ STR(2806), global::_app->project_render_block_subsurface);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uSSSHighlight"*/ STR(2809))) && DsMap(sInt(uniform_map)).Value(/*"uSSSHighlight"*/ STR(2809)) > -IntType(1))
			render_set_uniform(/*"uSSSHighlight"*/ STR(2809), IntType(1) - global::_app->project_render_subsurface_highlight);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uSSSHighlightStrength"*/ STR(2810))) && DsMap(sInt(uniform_map)).Value(/*"uSSSHighlightStrength"*/ STR(2810)) > -IntType(1))
			render_set_uniform(/*"uSSSHighlightStrength"*/ STR(2810), global::_app->project_render_subsurface_highlight_strength);
		render_set_uniform(/*"uMask"*/ STR(2756), bool_to_float(global::shader_mask));
		if (sVar(script) > -IntType(1))
			script_execute(self, { sVar(script) });
	}
	
	void shader_vignette_set()
	{
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2702), global::render_width, global::render_height);
		render_set_uniform(/*"uRadius"*/ STR(2705), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_RADIUS));
		render_set_uniform(/*"uSoftness"*/ STR(2864), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_SOFTNESS));
		render_set_uniform(/*"uStrength"*/ STR(2811), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_STRENGTH));
		render_set_uniform_color(/*"uColor"*/ STR(2708), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_COLOR), IntType(1));
	}
	
	void shortcut_bar_add(VarType keybind, IntType mouse, StringType text)
	{
		ds_list_add({ global::_app->shortcut_bar_list, ArrType::From({ keybind, mouse, text_get({ /*"shortcut"*/ STR(2866) + text }) }) });
	}
	
	RealType shortcut_bar_draw(ScopeAny self)
	{
		if (!sBool(setting_show_shortcuts_bar))
			return IntType(0);
		sVar(content_x) = IntType(0);
		sVar(content_y) = sReal(window_height) - IntType(28);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = IntType(28);
		sVar(dx) = sVar(content_x) + IntType(12);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = IntType(28);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_divide(sVar(content_x), sVar(content_y), sVar(content_width));
		draw_gradient(sVar(content_x), sVar(content_y) - shadow_size, sVar(content_width), shadow_size, c_black, IntType(0), IntType(0), shadow_alpha, shadow_alpha);
		shortcut_bar_update();
		for (IntType i = IntType(0); i < ds_list_size(sInt(shortcut_bar_list)); i++)
			shortcut_draw(self, DsList(sInt(shortcut_bar_list)).Value(i));
		return 0.0;
	}
	
	void shortcut_bar_update()
	{
		if (global::_app->shortcut_bar_state != global::_app->shortcut_bar_state_prev)
		{
			ds_list_clear(global::_app->shortcut_bar_list);
			if (global::_app->shortcut_bar_state == /*"viewport"*/ STR(118) || global::_app->shortcut_bar_state == /*"viewportcam"*/ STR(2867))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"select"*/ STR(2422));
				if (global::_app->shortcut_bar_state == /*"viewport"*/ STR(118))
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_VIEW_TIMELINE))->keybind, null_, /*"viewtimeline"*/ STR(2868));
				shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"orbit"*/ STR(2290));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"pan"*/ STR(2869));
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"zoom"*/ STR(2309));
				shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"walk"*/ STR(2870));
			}
			if (global::_app->shortcut_bar_state == /*"cameramove"*/ STR(2871) || global::_app->shortcut_bar_state == /*"tlcameramove"*/ STR(2872))
			{
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->keybind, null_, /*"forward"*/ STR(1823));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->keybind, null_, /*"left"*/ STR(191));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->keybind, null_, /*"back"*/ STR(1816));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->keybind, null_, /*"right"*/ STR(192));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->keybind, null_, /*"ascend"*/ STR(2873));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->keybind, null_, /*"descend"*/ STR(2874));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->keybind, null_, /*"faster"*/ STR(2875));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->keybind, null_, /*"slower"*/ STR(2876));
				if (global::_app->shortcut_bar_state == /*"tlcameramove"*/ STR(2872))
				{
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_FORWARD))->keybind, null_, /*"rollforward"*/ STR(2877));
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_BACK))->keybind, null_, /*"rollback"*/ STR(2878));
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_RESET))->keybind, null_, /*"rollreset"*/ STR(2879));
				}
				else
					if (global::_app->window_state != /*"world_import"*/ STR(2682))
						shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->keybind, null_, /*"reset"*/ STR(2880));
				
			}
			if (string_contains(global::_app->shortcut_bar_state, /*"timeline"*/ STR(119)))
			{
				if (global::_app->shortcut_bar_state == /*"timelinekeyframes"*/ STR(2881))
				{
					shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"tlkeyframeselect"*/ STR(2882));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_CLICK_LEFT, /*"tlkeyframeselectadd"*/ STR(2883));
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tlkeyframeselectgroup"*/ STR(2884));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"tlkeyframeselectgroupadd"*/ STR(2885));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_DRAG_LEFT, /*"tlkeyframedeselectgroup"*/ STR(2886));
				}
				if (global::_app->shortcut_bar_state == /*"timelinenames"*/ STR(2887))
				{
					shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"tltimelineselect"*/ STR(2888));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_CLICK_LEFT, /*"tltimelineselectadd"*/ STR(2889));
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tltimelineselectgroup"*/ STR(2890));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"tltimelineselectgroupadd"*/ STR(2891));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_DRAG_LEFT, /*"tltimelinedeselectgroup"*/ STR(2892));
				}
				if (global::_app->shortcut_bar_state == /*"timelinebar"*/ STR(2893))
				{
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tlsettime"*/ STR(2894));
					shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"tlsetregion"*/ STR(2895));
				}
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"scrollvertical"*/ STR(2896));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_SCROLL, /*"scrollhorizontal"*/ STR(2897));
				shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_SCROLL, /*"zoom"*/ STR(2309));
			}
			if (global::_app->shortcut_bar_state == /*"worldimport"*/ STR(2898))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"worldcreateselection"*/ STR(2899));
				shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"orbit"*/ STR(2290));
				shortcut_bar_add(ArrType::From({ null_, false, false, true }), null_, /*"worldignoreselection"*/ STR(2900));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"pan"*/ STR(2869));
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"zoom"*/ STR(2309));
				shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"walk"*/ STR(2870));
			}
			if (global::_app->shortcut_bar_state == /*"worldimportselection"*/ STR(2901))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"worldfinishselection"*/ STR(2902));
				shortcut_bar_add(null_, e_mouse_CLICK_RIGHT, /*"worldclearselection"*/ STR(2903));
			}
		}
		global::_app->shortcut_bar_state_prev = global::_app->shortcut_bar_state;
		global::_app->shortcut_bar_state = /*""*/ STR(0);
	}
	
	void shortcut_draw(ScopeAny self, ArrType shortcut)
	{
		IntType mouse;
		VarType yy;
		RealType padding, imgpadding;
		yy = sVar(dy) + ((RealType)sVar(dh) / 2.0);
		padding = IntType(10);
		imgpadding = IntType(4);
		draw_set_font(sInt(font_label));
		if (shortcut.Value(IntType(0)) != null_)
		{
			ArrType keyboardarray = string_split(text_control_name(shortcut.Value(IntType(0))), /*" + "*/ STR(2904));
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(keyboardarray)); i++)
			{
				StringType str = string_replace(keyboardarray.Value(i), /*"+ "*/ STR(2905), /*""*/ STR(0));
				IntType stringsize = string_width(str);
				draw_box(sVar(dx), yy - IntType(8), stringsize + IntType(12), IntType(16), false, global::c_text_tertiary, global::a_text_tertiary);
				draw_box(sVar(dx) + IntType(2), yy - IntType(6), stringsize + IntType(8), IntType(12), false, global::c_level_top, IntType(1));
				draw_label(self, { str, sVar(dx) + IntType(6), yy, fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary });
				sVar(dx) += (stringsize + IntType(12)) + (i < (array_length(VarType::CreateRef(keyboardarray)) - IntType(1)) ? imgpadding : IntType(0));
			}
			sVar(dx) += (shortcut.Value(IntType(1)) == null_ ? padding : imgpadding);
		}
		if (shortcut.Value(IntType(1)) != null_)
		{
			switch ((IntType)shortcut.Value(IntType(1)))
			{
				case e_mouse_CLICK_LEFT:
				{
					mouse = icons_CLICK_LEFT;
					break;
				}
				case e_mouse_CLICK_MIDDLE:
				{
					mouse = icons_CLICK_MIDDLE;
					break;
				}
				case e_mouse_CLICK_RIGHT:
				{
					mouse = icons_CLICK_RIGHT;
					break;
				}
				case e_mouse_DRAG_LEFT:
				{
					mouse = icons_DRAG_LEFT;
					break;
				}
				case e_mouse_DRAG_MIDDLE:
				{
					mouse = icons_DRAG_MIDDLE;
					break;
				}
				case e_mouse_DRAG_RIGHT:
				{
					mouse = icons_DRAG_RIGHT;
					break;
				}
				case e_mouse_SCROLL:
				{
					mouse = icons_SCROLL;
					break;
				}
				default:
					mouse = icons_HELP;
			}
			
			draw_image({ ID_spr_icons, mouse, sVar(dx) + IntType(10), yy, IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
			sVar(dx) += IntType(20) + padding;
		}
		draw_set_font(sInt(font_value));
		draw_label(self, { shortcut.Value(IntType(2)), sVar(dx), yy, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		sVar(dx) += string_width(shortcut.Value(IntType(2))) + IntType(36);
	}
	
	VarType simplex_lib(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count > IntType(3))
			return lib_math_simplex4d(argument[IntType(0)], argument[IntType(1)], argument[IntType(2)], argument[IntType(3)]);
		if (argument_count > IntType(2))
			return lib_math_simplex3d(argument[IntType(0)], argument[IntType(1)], argument[IntType(2)]);
		if (argument_count > IntType(1))
			return lib_math_simplex2d(argument[IntType(0)], argument[IntType(1)]);
		return lib_math_simplex1d(argument[IntType(0)]);
	}
	
	RealType smoothstep(RealType xx)
	{
		return (xx * xx * (IntType(3) - IntType(2) * xx));
	}
	
	VarType snap(VarType val, RealType xx)
	{
		if (xx == IntType(0))
			return val;
		return round((RealType)val / xx) * xx;
	}
	
	void sortlist_add(IntType sortlist, VarType value, IntType index)
	{
		if (index >= IntType(0))
		{
			ds_list_insert(idInt(sortlist, list), index, value);
			ds_list_insert(idInt(sortlist, display_list), index, value);
		}
		else
		{
			ds_list_add({ idInt(sortlist, list), value });
			ds_list_add({ idInt(sortlist, display_list), value });
		}
		
	}
	
	void sortlist_clear(IntType slist)
	{
		ObjType(obj_sortlist, slist)->select = null_;
		ds_list_clear(ObjType(obj_sortlist, slist)->list);
		ds_list_clear(ObjType(obj_sortlist, slist)->display_list);
		ObjType(obj_sortlist, slist)->search = false;
		ObjType(obj_sortlist, slist)->column_sort = null_;
	}
	
	void sortlist_column_add(IntType slist, StringType name, RealType xx)
	{
		idArr(slist, column_name)[idInt(slist, columns)] = name;
		idArr(slist, column_x)[idInt(slist, columns)] = xx;
		idArr(slist, column_w)[idInt(slist, columns)] = IntType(0);
		idInt(slist, columns)++;
	}
	
	VarType sortlist_column_get(VarType slist, VarType value, IntType col)
	{
		switch (StringType(idArr(slist, column_name).Value(col)).id)
		{
			case 209: // libname
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, display_name)) + /*" ["*/ STR(1776) + string(idVar(value, save_id)) + /*"]"*/ STR(1216);
				return string_remove_newline(idVar(value, display_name));
			}
			case 210: // libtype
			{
				return text_get({ /*"type"*/ STR(790) + DsList(global::temp_type_name_list).Value(idVar(value, type)) });
			}
			case 211: // libinstances
			{
				return idInt(value, count);
			}
			case 182: // charname
			case 184: // spblockname
			case 185: // bodypartmodelname
			{
				return minecraft_asset_get_name(/*"model"*/ STR(532), ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(value))->name);
			}
			case 183: // blockname
			{
				return minecraft_asset_get_name(/*"block"*/ STR(525), ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(value))->name);
			}
			case 2906: // blockfilter
			{
				return minecraft_asset_get_name(/*"block"*/ STR(525), ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(value))->name);
			}
			case 219: // particleeditortypename
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, name)) + /*" ["*/ STR(1776) + string(idVar(value, save_id)) + /*"]"*/ STR(1216);
				return string_remove_newline(idVar(value, name));
			}
			case 220: // particleeditortypekind
			{
				if (idVar(value, temp) == particle_sheet)
					return text_get({ /*"particleeditortypespritesheet"*/ STR(1342) });
				else
					if (idVar(value, temp) == particle_template)
						return text_get({ /*"particleeditortypetemplate"*/ STR(1341) });
					else
						return string_remove_newline(idVar(idVar(value, temp), display_name));
				
				
			}
			case 221: // particleeditortyperate
			{
				return string(floor(idVar(value, spawn_rate) * IntType(100))) + /*"%"*/ STR(207);
			}
			case 216: // resname
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, display_name)) + /*" ["*/ STR(1776) + string(idVar(value, save_id)) + /*"]"*/ STR(1216);
				return string_remove_newline(idVar(value, display_name));
			}
			case 2907: // resfilename
			{
				return string_remove_newline(idVar(value, filename));
			}
			case 217: // restype
			{
				return text_get({ /*"type"*/ STR(790) + DsList(global::res_type_name_list).Value(idVar(value, type)) });
			}
			case 218: // rescount
			{
				return idInt(value, count);
			}
			case 186: // particlepresetname
			{
				VarType fn = filename_new_ext(filename_name(value), /*""*/ STR(0));
				return text_exists(/*"particle"*/ STR(2908) + fn) ? text_get({ /*"particle"*/ STR(2908) + fn }) : fn;
			}
			
		}
		
		return VarType();
	}
	
	RealType sortlist_draw(ScopeAny self, IntType slist, VarType xx, VarType yy, VarType w, RealType h, VarType select, BoolType filter, VarType name)
	{
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + h < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ idInt(slist, search_tbx), sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		BoolType colmouseon;
		VarType searchx, searchw, dy;
		RealType itemh, colsh;
		searchx = xx;
		searchw = w;
		itemh = sReal(ui_small_height);
		colsh = sReal(ui_small_height);
		if (filter && name == /*""*/ STR(0))
		{
			if (draw_button_icon(self, { /*"listfilter"*/ STR(2909) + string(slist), xx, yy, IntType(24), IntType(24), !ds_list_empty(idInt(slist, filter_list)), icons_FILTER, null_, false, /*"tooltipfilterlist"*/ STR(2910) }))
			{
				menu_settings_set(self, xx, yy, /*"listfilter"*/ STR(2909) + string(slist), IntType(24));
				sInt(settings_menu_script) = ID_sortlist_filters_draw;
				sVar(settings_menu_sortlist) = slist;
				sVar(settings_menu_h_max) = IntType(256);
			}
			if ((sStr(settings_menu_name) == /*"listfilter"*/ STR(2909) + string(slist)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(736))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
			searchx += IntType(32);
			searchw -= 32.0;
		}
		if (name != /*""*/ STR(0))
		{
			draw_set_font(sInt(font_label));
			draw_label(self, { string_limit(name, w - IntType(144)), xx, yy + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			searchx += (w - IntType(144));
			searchw -= (w - IntType(144));
		}
		if (draw_textfield(self, /*"listsearch"*/ STR(2911) + string(slist), searchx, yy, searchw, IntType(24), idInt(slist, search_tbx), null_, text_get({ /*"listsearch"*/ STR(2911) }), /*"none"*/ STR(893)))
		{
			idBool(slist, search) = (ObjType(obj_textbox, idInt(slist, search_tbx))->text != /*""*/ STR(0));
			sortlist_update(self, slist);
		}
		h -= 32.0;
		yy += IntType(32);
		if (h < colsh)
			return IntType(0);
		colmouseon = app_mouse_box(self, xx, yy, w, colsh) && sBool(content_mouseon);
		if (sVar(window_busy) == /*"sortlist_resize"*/ STR(2912) && sInt(sortlist_resize) == slist)
		{
			idArr(slist, column_x)[sInt(sortlist_resize_column)] = sReal(sortlist_resize_column_x) + (gmlGlobal::mouse_x - sInt(mouse_click_x)) / w;
			idArr(slist, column_x)[sInt(sortlist_resize_column)] = clamp(IntType(0), idArr(slist, column_x).Value(sInt(sortlist_resize_column)), 0.9);
			if (sInt(sortlist_resize_column) > IntType(0))
				idArr(slist, column_x)[sInt(sortlist_resize_column)] = max({ idArr(slist, column_x).Value(sInt(sortlist_resize_column)), idArr(slist, column_x).Value(sInt(sortlist_resize_column) - IntType(1)) + 0.1 });
			if (sInt(sortlist_resize_column) < idInt(slist, columns) - IntType(1))
				idArr(slist, column_x)[sInt(sortlist_resize_column)] = min({ idArr(slist, column_x).Value(sInt(sortlist_resize_column)), idArr(slist, column_x).Value(sInt(sortlist_resize_column) + IntType(1)) - 0.1 });
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		for (IntType c = IntType(0); c < idInt(slist, columns); c++)
		{
			RealType dx;
			IntType icon;
			dx = floor(idArr(slist, column_x).Value(c) * w);
			if (c == idInt(slist, columns) - IntType(1))
				idArr(slist, column_w)[c] = ceil(w - dx);
			else
				idArr(slist, column_w)[c] = ceil(idArr(slist, column_x).Value(c + IntType(1)) * w) - dx;
			
			if (c > IntType(0) && app_mouse_box(self, xx + dx - IntType(5), yy, IntType(10), colsh) && sBool(content_mouseon))
			{
				sInt(mouse_cursor) = cr_size_we;
				if (sBool(mouse_left_pressed))
				{
					sInt(sortlist_resize) = slist;
					sInt(sortlist_resize_column) = c;
					sReal(sortlist_resize_column_x) = idArr(slist, column_x).Value(c);
					sVar(window_busy) = /*"sortlist_resize"*/ STR(2912);
				}
			}
			icon = null_;
			if (idInt(slist, column_sort) == c)
				icon = ((idReal(slist, sort_asc) > 0) ? icons_SORT_UP : icons_SORT_DOWN);
			if (sortlist_draw_button(self, /*"column"*/ STR(2913) + idArr(slist, column_name).Value(c), xx + dx, yy + IntType(4), idArr(slist, column_w).Value(c), colsh, idInt(slist, column_sort) == c, icon, (c == IntType(0)), (c == idInt(slist, columns) - IntType(1)), colmouseon))
			{
				if (idInt(slist, column_sort) == c)
				{
					if (idReal(slist, sort_asc) > 0)
					{
						idInt(slist, column_sort) = null_;
						idReal(slist, sort_asc) = false;
					}
					else
						idReal(slist, sort_asc) = true;
					
				}
				else
					idInt(slist, column_sort) = c;
				
				sortlist_update(self, slist);
			}
		}
		dy = (yy + colsh) + IntType(10);
		draw_divide(xx + IntType(1), dy - IntType(3), w - IntType(2));
		if (sVar(window_focus) == string(idInt(slist, scroll)))
		{
			draw_outline(xx, yy, w, h, IntType(1), global::c_accent, IntType(1), true);
			sStr(window_scroll_focus) = string(idInt(slist, scroll));
			if (!app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && sBool(mouse_left) && sVar(window_busy) != /*"scrollbar"*/ STR(2581))
				sVar(window_focus) = /*""*/ STR(0);
		}
		else
			draw_outline(xx, yy, w, h, IntType(1), global::c_border, global::a_border, true);
		
		draw_set_font(sInt(font_value));
		for (RealType i = round((RealType)ObjType(obj_scrollbar, idInt(slist, scroll))->value / itemh); i < ds_list_size(idInt(slist, display_list)); i++)
		{
			if (dy + itemh > yy + h)
				break;
			VarType value;
			RealType dw, selected;
			BoolType mouseon;
			value = DsList(idInt(slist, display_list)).Value(i);
			dw = w - IntType(12) * (IntType)ObjType(obj_scrollbar, idInt(slist, scroll))->needed;
			selected = (select == value);
			mouseon = (app_mouse_box(self, xx, dy, dw, itemh) && sBool(content_mouseon));
			if (selected > 0 || mouseon && sBool(mouse_left))
			{
				draw_box(xx, dy, dw, itemh, false, global::c_accent_overlay, global::a_accent_overlay);
				if (mouseon && sBool(mouse_left))
					draw_box_hover({ xx, dy, dw, itemh, IntType(1) });
			}
			else
				if (mouseon)
					draw_box(xx, dy, dw, itemh, false, global::c_overlay, global::a_overlay);
			
			for (IntType c = IntType(0); c < idInt(slist, columns); c++)
			{
				VarType dx, text;
				RealType wid, islast;
				dx = xx + floor(idArr(slist, column_x).Value(c) * w) + IntType(8);
				wid = idArr(slist, column_w).Value(c) - IntType(8);
				if (c == idInt(slist, columns) - IntType(1) && ObjType(obj_scrollbar, idInt(slist, scroll))->needed)
					wid -= 12.0;
				islast = (c == idInt(slist, columns) - IntType(1)) && (c != IntType(0));
				text = string_limit(string(sortlist_column_get(slist, value, c)), wid);
				draw_label(self, { text, dx + ((wid - IntType(8)) * islast), dy + itemh / 2.0, (islast > 0) ? fa_right : fa_left, fa_middle, (selected > 0) ? global::c_accent : global::c_text_main, (selected > 0) ? 1.0 : global::a_text_main });
			}
			if (mouseon)
			{
				sInt(mouse_cursor) = cr_handpoint;
				if (sBool(mouse_left_released))
				{
					if (idBool(slist, can_deselect) && selected > 0)
						script_execute(self, { idVar(slist, script), null_ });
					else
						script_execute(self, { idVar(slist, script), value });
					
					app_mouse_clear(self);
					if (ObjType(obj_scrollbar, idInt(slist, scroll))->needed)
						sVar(window_focus) = string(idInt(slist, scroll));
				}
			}
			dy += itemh;
		}
		ObjType(obj_scrollbar, idInt(slist, scroll))->snap_value = itemh;
		scrollbar_draw(self, idInt(slist, scroll), e_scroll_VERTICAL, xx + w - IntType(12), yy + (colsh + IntType(10)), floor((h - (colsh + IntType(10))) / itemh) * itemh, ds_list_size(idInt(slist, display_list)) * itemh);
		return 0.0;
	}
	
}
