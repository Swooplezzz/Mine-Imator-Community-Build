/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.11.15 18:00:31 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_tl_scale_resize(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						sVar(scale_resize) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(update_matrix) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							sVar(scale_resize) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(update_matrix) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_scale_resize, false);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->scale_resize, enable);
					
					self->scale_resize = enable;
					self->update_matrix = true;
				}
				
			}
		
		
		tl_update_matrix(self);
	}
	
	void action_tl_search(ScopeAny self, VarType search)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_tl_search, sStr(timeline_search), search, true);
		sStr(timeline_search) = search.Str();
		tl_update_list(self);
	}
	
	void action_tl_select(ScopeAny self, VarType tl)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				history_restore_tl_select(self);
				for (IntType t = IntType(0); t < self->extend_amount; t++)
					withOne (Object, save_id_find(self->extend_save_id.Value(t)), self->id)
						sVar(tree_extend) = ObjType(obj_history, self.otherId)->extend_value.Value(t);
				
			}
			
		}
		else
		{
			BoolType shift;
			VarType par;
			IntType hobj;
			hobj = noone;
			if (sReal(history_redo) > 0)
			{
				tl = save_id_find(ObjType(obj_history, global::history_data)->tl_save_id);
				shift = ObjType(obj_history, global::history_data)->shift;
			}
			else
			{
				shift = keyboard_check(vk_shift);
				hobj = history_set(self, ID_action_tl_select);
				withOne (obj_history, hobj, self->id)
				{
					ObjType(obj_history, self->id)->tl_save_id = save_id_get(tl);
					ObjType(obj_history, self->id)->shift = shift;
					history_save_tl_select(ScopeAny(self));
					self->extend_amount = IntType(0);
				}
				
			}
			
			par = idVar(tl, parent);
			while (par != global::_app->id)
			{
				withOne (obj_history, hobj, self->id)
				{
					self->extend_save_id[self->extend_amount] = idVar(par, save_id);
					self->extend_value[self->extend_amount] = idVar(par, tree_extend);
					self->extend_amount++;
				}
				
				idVar(par, tree_extend) = true;
				par = idVar(par, parent);
			}
			
			if (!shift)
			{
				tl_deselect_all();
			}
			withOne (Object, tl, self->id)
			{
				tl_update_recursive_select(self);
				tl_select(self);
			}
			
		}
		
		app_update_tl_edit(self);
		tl_update_list(self);
	}
	
	void action_tl_select_all(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
		{
			if (!(sReal(history_redo) > 0))
				withOne (obj_history, history_set(self, ID_action_tl_select_all), self->id)
					history_save_tl_select(ScopeAny(self));
			
			for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
			{
				withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
				{
					tl_update_recursive_select(self);
					tl_select(self);
				}
				
			}
		}
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_area(ScopeAny self, RealType stl, RealType etl)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				IntType hobj;
				BoolType ctrl;
				hobj = history_set(self, ID_action_tl_select_area);
				ctrl = keyboard_check(vk_control);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				for (RealType t = stl; t <= etl; t++)
				{
					withOne (Object, DsList(sInt(tree_visible_list)).Value(t), self->id)
					{
						if (!ctrl)
						{
							tl_update_recursive_select(self);
							tl_select(self);
						}
						else
							tl_deselect(self);
						
					}
					
				}
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes(ScopeAny self, VarType tl)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
		{
			BoolType shift;
			if (sReal(history_redo) > 0)
			{
				shift = ObjType(obj_history, global::history_data)->shift;
				if (!shift)
					tl_deselect_all();
				for (IntType t = IntType(0); t < ObjType(obj_history, global::history_data)->tl_amount; t++)
				{
					tl = save_id_find(ObjType(obj_history, global::history_data)->tl_save_id.Value(t));
					withOne (Object, tl, self->id)
						tl_select(self);
					
					for (IntType k = IntType(0); k < ds_list_size(idInt(tl, keyframe_list)); k++)
						tl_keyframe_select(DsList(idInt(tl, keyframe_list)).Value(k));
				}
			}
			else
			{
				IntType hobj = history_set(self, ID_action_tl_select_keyframes);
				shift = keyboard_check(vk_shift);
				withOne (obj_history, hobj, self->id)
				{
					self->tl_amount = IntType(0);
					ObjType(obj_history, self->id)->shift = shift;
					history_save_tl_select(ScopeAny(self));
				}
				
				if (idReal(tl, selected) > 0)
				{
					withAll (obj_timeline, self->id)
					{
						if (!(self->selected > 0))
						{
							if (!shift)
								tl_deselect(ScopeAny(self));
							continue;
						}
						withOne (obj_history, hobj, self->id)
						{
							self->tl_save_id[self->tl_amount] = save_id_get(self.otherId);
							self->tl_amount++;
						}
						
						for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
							tl_keyframe_select(DsList(self->keyframe_list).Value(k));
					}
					
				}
				else
				{
					if (!shift)
						tl_deselect_all();
					ObjType(obj_history, hobj)->tl_save_id[IntType(0)] = save_id_get(tl);
					ObjType(obj_history, hobj)->tl_amount++;
					for (IntType k = IntType(0); k < ds_list_size(idInt(tl, keyframe_list)); k++)
						tl_keyframe_select(DsList(idInt(tl, keyframe_list)).Value(k));
				}
				
			}
			
		}
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes_after_marker(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				BoolType shift = keyboard_check(vk_shift);
				IntType hobj;
				hobj = history_set(self, ID_action_tl_select_keyframes_after_marker);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				if (!shift)
					tl_deselect_all();
				withAll (obj_keyframe, self->id)
				{
					if (idVar(self->timeline, lock) > 0)
						continue;
					if (self->position >= global::_app->timeline_marker)
						tl_keyframe_select(self->id);
				}
				
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes_before_marker(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				BoolType shift = keyboard_check(vk_shift);
				IntType hobj;
				hobj = history_set(self, ID_action_tl_select_keyframes_before_marker);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				if (!shift)
					tl_deselect_all();
				withAll (obj_keyframe, self->id)
				{
					if (idVar(self->timeline, lock) > 0)
						continue;
					if (self->position < global::_app->timeline_marker)
						tl_keyframe_select(self->id);
				}
				
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes_first(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				BoolType shift = keyboard_check(vk_shift);
				IntType hobj;
				hobj = history_set(self, ID_action_tl_select_keyframes_first);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				if (!shift)
					tl_deselect_all();
				withAll (obj_timeline, self->id)
				{
					if (self->lock > 0 || ds_list_size(self->keyframe_list) == IntType(0))
						continue;
					tl_keyframe_select(DsList(self->keyframe_list).Value(IntType(0)));
				}
				
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes_last(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				BoolType shift = keyboard_check(vk_shift);
				IntType hobj;
				hobj = history_set(self, ID_action_tl_select_keyframes_last);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				if (!shift)
					tl_deselect_all();
				withAll (obj_timeline, self->id)
				{
					if (self->lock > 0 || ds_list_size(self->keyframe_list) == IntType(0))
						continue;
					tl_keyframe_select(DsList(self->keyframe_list).Value(ds_list_size(self->keyframe_list) - IntType(1)));
				}
				
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	void action_tl_select_keyframes_region(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					history_restore_tl_select_new(self);
				
			}
			else
			{
				BoolType shift = keyboard_check(vk_shift);
				IntType hobj;
				hobj = history_set(self, ID_action_tl_select_keyframes_region);
				withOne (obj_history, hobj, self->id)
					history_save_tl_select(ScopeAny(self));
				
				if (!shift)
					tl_deselect_all();
				withAll (obj_keyframe, self->id)
				{
					if (idVar(self->timeline, lock) > 0)
						continue;
					if (self->position >= global::_app->timeline_region_start && self->position <= global::_app->timeline_region_end)
						tl_keyframe_select(self->id);
				}
				
				withOne (obj_history, hobj, self->id)
					history_save_tl_select_new(ScopeAny(self));
				
			}
		
		
		app_update_tl_edit(self);
	}
	
	RealType action_tl_select_single(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_restore_tl_select(self);
			
			app_update_tl_edit(self);
		}
		else
		{
			VarType tl = null_;
			if (sReal(history_redo) > 0)
				tl = save_id_find(ObjType(obj_history, global::history_data)->tl_save_id);
			else
			{
				if (argument_count > IntType(1) && argument[IntType(1)] != null_)
				{
					withAll (obj_timeline, self->id)
					{
						if (self->type == argument[IntType(1)])
						{
							tl = self->id;
							break;
						}
					}
					
				}
				else
					tl = argument[IntType(0)];
				
				if (!(tl > 0))
					return IntType(0);
				if (global::tl_edit_amount == IntType(1) && global::tl_edit == tl)
					return IntType(1);
				withOne (obj_history, history_set(self, ID_action_tl_select_single), self->id)
				{
					self->tl_save_id = save_id_get(tl);
					history_save_tl_select(ScopeAny(self));
				}
				
			}
			
			withOne (Object, tl, self->id)
				tl_select_single(self);
			
			app_update_tl_edit_select(self);
			return IntType(1);
		}
		
		return 0.0;
	}
	
	void action_tl_shadows(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(shadows) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(shadows) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_shadows, false);
				withAll (obj_timeline, self->id)
					if (self->selected > 0)
						action_tl_shadows_tree(self->id, enable, hobj);
				
			}
		
		
	}
	
	void action_tl_shadows_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, shadows), nval);
		
		idVar(tl, shadows) = nval;
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_shadows_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_ssao(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(ssao) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(ssao) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_ssao, false);
				withAll (obj_timeline, self->id)
					if (self->selected > 0)
						action_tl_ssao_tree(self->id, enable, hobj);
				
			}
		
		
	}
	
	void action_tl_ssao_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, ssao), nval);
		
		idVar(tl, ssao) = nval;
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_ssao_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_text(ScopeAny self, VarType text)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						idVar(self->id, text) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							idVar(self->id, text) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_text, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->text, text);
					
					ObjType(obj_timeline, self->id)->text = text;
				}
				
			}
		
		
	}
	
	void action_tl_texture_blur(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(texture_blur) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(texture_blur) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_texture_blur, false);
				withAll (obj_timeline, self->id)
					if (self->selected > 0)
						action_tl_texture_blur_tree(self->id, enable, hobj);
				
			}
		
		
	}
	
	void action_tl_texture_blur_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, texture_blur), nval);
		
		idVar(tl, texture_blur) = nval;
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_texture_blur_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_texture_filtering(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(texture_filtering) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(texture_filtering) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_texture_filtering, false);
				withAll (obj_timeline, self->id)
					if (self->selected > 0)
						action_tl_texture_filtering_tree(self->id, enable, hobj);
				
			}
		
		
	}
	
	void action_tl_texture_filtering_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, texture_filtering), nval);
		
		idVar(tl, texture_filtering) = nval;
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_texture_filtering_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_wind(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(wind) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(wind) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_wind, false);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->wind, enable);
					
					self->wind = enable;
				}
				
			}
		
		
	}
	
	void action_tl_wind_terrain(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						sVar(wind_terrain) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
			
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
							sVar(wind_terrain) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
				
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_wind_terrain, false);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->wind_terrain, enable);
					
					self->wind_terrain = enable;
				}
				
			}
		
		
	}
	
	void action_toolbar_exportimage_high_quality(ScopeAny self)
	{
		ObjType(obj_popup, sInt(popup_exportimage))->high_quality = !(ObjType(obj_popup, sInt(popup_exportimage))->high_quality > 0);
	}
	
	void action_toolbar_exportimage_include_hidden(ScopeAny self)
	{
		ObjType(obj_popup, sInt(popup_exportimage))->include_hidden = !ObjType(obj_popup, sInt(popup_exportimage))->include_hidden;
	}
	
	void action_toolbar_exportimage_remove_background(ScopeAny self)
	{
		ObjType(obj_popup, sInt(popup_exportimage))->remove_background = !ObjType(obj_popup, sInt(popup_exportimage))->remove_background;
	}
	
	RealType action_toolbar_exportimage_save(ScopeAny self)
	{
		StringType fn;
		fn = file_dialog_save_image(sVar(project_name));
		if (fn == /*""*/ STR(0))
			return IntType(0);
		sStr(export_filename) = fn;
		log({ /*"Export image"*/ STR(54), sStr(export_filename) });
		global::render_hidden = ObjType(obj_popup, sInt(popup_exportimage))->include_hidden;
		global::render_background = !ObjType(obj_popup, sInt(popup_exportimage))->remove_background;
		global::render_watermark = ObjType(obj_popup, sInt(popup_exportimage))->watermark;
		log({ /*"Hidden"*/ STR(55), yesno(global::render_hidden) });
		log({ /*"Render background"*/ STR(56), yesno(global::render_background) });
		log({ /*"Watermark"*/ STR(57), yesno(global::render_watermark) });
		log({ /*"High Quality"*/ STR(58), yesno(ObjType(obj_popup, sInt(popup_exportimage))->high_quality) });
		log({ /*"Size"*/ STR(59), sVar(project_video_width), sVar(project_video_height) });
		sStr(window_state) = /*"export_image"*/ STR(60);
		sReal(exportmovie_frame) = IntType(0);
		sReal(export_sample) = IntType(0);
		sVar(exportmovie_start) = current_time();
		global::render_samples = -IntType(1);
		if (ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		if (ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_second))->quality = e_view_mode_SHADED;
		return 0.0;
	}
	
	void action_toolbar_exportimage_watermark(ScopeAny self)
	{
		if (global::trial_version > 0)
		{
			popup_switch(self, sInt(popup_upgrade));
			ObjType(obj_popup, sInt(popup_upgrade))->page = IntType(0);
		}
		else
			ObjType(obj_popup, sInt(popup_exportimage))->watermark = !ObjType(obj_popup, sInt(popup_exportimage))->watermark;
		
	}
	
	void action_toolbar_exportmovie_bit_rate(ScopeAny self, VarType val, VarType add)
	{
		idReal(sInt(popup), bit_rate) = add * idReal(sInt(popup), bit_rate) + val;
	}
	
	void action_toolbar_exportmovie_format(ScopeAny self, VarType format)
	{
		idStr(sInt(popup), format) = format.Str();
	}
	
	void action_toolbar_exportmovie_framespersecond(ScopeAny self, VarType val, VarType add)
	{
		idReal(sInt(popup), framespersecond) = add * idReal(sInt(popup), framespersecond) + val;
	}
	
	void action_toolbar_exportmovie_frame_rate(ScopeAny self, VarType value)
	{
		idVar(sInt(popup), frame_rate) = value;
		if (idVar(sInt(popup), frame_rate) > IntType(0))
			idReal(sInt(popup), framespersecond) = idVar(sInt(popup), frame_rate);
	}
	
	void action_toolbar_exportmovie_high_quality(ScopeAny self)
	{
		idReal(sInt(popup), high_quality) = !(idReal(sInt(popup), high_quality) > 0);
	}
	
	void action_toolbar_exportmovie_include_audio(ScopeAny self)
	{
		idBool(sInt(popup), include_audio) = !idBool(sInt(popup), include_audio);
	}
	
	void action_toolbar_exportmovie_include_hidden(ScopeAny self)
	{
		idBool(sInt(popup), include_hidden) = !idBool(sInt(popup), include_hidden);
	}
	
	void action_toolbar_exportmovie_remove_background(ScopeAny self)
	{
		idBool(sInt(popup), remove_background) = !idBool(sInt(popup), remove_background);
	}
	
	RealType action_toolbar_exportmovie_save(ScopeAny self)
	{
		StringType fn;
		switch (StringType(ObjType(obj_popup, sInt(popup_exportmovie))->format).id)
		{
			case 61: // mp4
			{
				fn = file_dialog_save_movie_mp4(self, sVar(project_name));
				break;
			}
			case 62: // mov
			{
				fn = file_dialog_save_movie_mov(self, sVar(project_name));
				break;
			}
			case 63: // wmv
			{
				fn = file_dialog_save_movie_wmv(self, sVar(project_name));
				break;
			}
			default:
				fn = file_dialog_save_movie_png(self, sVar(project_name));
				break;
		}
		
		if (fn == /*""*/ STR(0))
			return IntType(0);
		sStr(export_filename) = fn;
		sVar(exportmovie_marker_previous) = sVar(timeline_marker);
		sStr(exportmovie_format) = ObjType(obj_popup, sInt(popup_exportmovie))->format;
		sReal(exportmovie_framespersecond) = ObjType(obj_popup, sInt(popup_exportmovie))->framespersecond;
		sReal(exportmovie_high_quality) = ObjType(obj_popup, sInt(popup_exportmovie))->high_quality;
		sInt(exportmovie_current_sound) = null_;
		if (sVar(timeline_region_start) != null_)
		{
			sVar(exportmovie_marker_start) = sVar(timeline_region_start);
			sVar(exportmovie_marker_end) = sVar(timeline_region_end);
		}
		else
		{
			sVar(exportmovie_marker_start) = IntType(0);
			sVar(exportmovie_marker_end) = sVar(timeline_length);
		}
		
		if (sStr(exportmovie_format) != /*"png"*/ STR(64))
		{
			StringType fmt = ObjType(obj_popup, sInt(popup_exportmovie))->format;
			if (fmt == /*"wmv"*/ STR(63))
				fmt = /*"asf"*/ STR(65);
			log({ /*"Export movie"*/ STR(66), fn });
			log({ /*"Format"*/ STR(67), sStr(exportmovie_format) });
			log({ /*"Bitrate"*/ STR(68), ObjType(obj_popup, sInt(popup_exportmovie))->bit_rate });
			log({ /*"Framerate"*/ STR(69), sReal(exportmovie_framespersecond) });
			log({ /*"Audio"*/ STR(70), yesno(ObjType(obj_popup, sInt(popup_exportmovie))->include_audio) });
			log({ /*"High Quality"*/ STR(58), yesno(sReal(exportmovie_high_quality)) });
			log({ /*"Size"*/ STR(59), sVar(project_video_width), sVar(project_video_height) });
			movie_set(sVar(project_video_width), sVar(project_video_height), ObjType(obj_popup, sInt(popup_exportmovie))->bit_rate, sReal(exportmovie_framespersecond), ObjType(obj_popup, sInt(popup_exportmovie))->include_audio);
			VarType err = movie_start(fn, fmt);
			if (err < IntType(0))
			{
				log({ /*"Error when exporting, error code"*/ STR(71), err });
				error(/*"errorexportmovie"*/ STR(72));
				global::render_hidden = false;
				global::render_watermark = false;
				return IntType(0);
			}
			if (ObjType(obj_popup, sInt(popup_exportmovie))->include_audio)
			{
				withAll (obj_resource, self->id)
				{
					if (self->type == e_res_type_SOUND && self->ready)
					{
						if (!is_cpp())
						{
							if (self->sound_buffer != null_)
								buffer_save(self->sound_buffer, temp_file);
						}
						else
							global::_app->exportmovie_current_sound = self->sound_index;
						
						self->sound_file_id = movie_audio_file_add(temp_file);
						if (self->sound_file_id < IntType(0))
						{
							movie_done();
							log({ /*"Error adding audio file, error code"*/ STR(73), self->sound_file_id });
							error(/*"errorexportmovie"*/ STR(72));
							return IntType(0);
						}
					}
				}
				
				withAll (obj_timeline, self->id)
				{
					if (self->type != e_tl_type_AUDIO || (self->hide > 0 && !global::render_hidden))
						continue;
					for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
					{
						withOne (obj_keyframe, DsList(self->keyframe_list).Value(k), self->id)
						{
							if (self->value.Value(e_value_SOUND_OBJ) != null_ && idBool(self->value.Value(e_value_SOUND_OBJ), ready) && self->value.Value(e_value_SOUND_VOLUME) > IntType(0) && self->value.Value(e_value_SOUND_PITCH) > IntType(0) && tl_keyframe_length(self->id) > IntType(0) && self->position < global::_app->exportmovie_marker_end && self->position + tl_keyframe_length(self->id) >= global::_app->exportmovie_marker_start)
							{
								VarType ret = movie_audio_sound_add(idVar(self->value.Value(e_value_SOUND_OBJ), sound_file_id), max({ IntType(0), self->position - global::_app->exportmovie_marker_start }) / global::_app->project_tempo, self->value.Value(e_value_SOUND_VOLUME), self->value.Value(e_value_SOUND_PITCH), self->value.Value(e_value_SOUND_START) + max({ IntType(0), global::_app->exportmovie_marker_start - self->position }) / global::_app->project_tempo, self->value.Value(e_value_SOUND_END));
								if (ret < IntType(0))
								{
									movie_done();
									log({ /*"Error adding sound, error code"*/ STR(74), ret });
									error(/*"errorexportmovie"*/ STR(72));
									return IntType(0);
								}
							}
						}
						
					}
				}
				
			}
			if (!is_cpp())
				sInt(exportmovie_buffer) = buffer_create((IntType)(sVar(project_video_width) * sVar(project_video_height) * IntType(4)), buffer_fixed, IntType(4));
			global::render_background = true;
		}
		else
		{
			log({ /*"Export image sequence"*/ STR(75), fn });
			log({ /*"Framerate"*/ STR(69), sReal(exportmovie_frame_rate) });
			log({ /*"High Quality"*/ STR(58), yesno(sReal(exportmovie_high_quality)) });
			log({ /*"Size"*/ STR(59), sVar(project_video_width), sVar(project_video_height) });
			global::render_background = !ObjType(obj_popup, sInt(popup_exportmovie))->remove_background;
		}
		
		global::render_hidden = ObjType(obj_popup, sInt(popup_exportmovie))->include_hidden;
		global::render_watermark = ObjType(obj_popup, sInt(popup_exportmovie))->watermark;
		sStr(window_state) = /*"export_movie"*/ STR(53);
		sReal(exportmovie_frame) = IntType(0);
		sReal(export_sample) = IntType(0);
		sVar(exportmovie_start) = current_time();
		global::render_samples = -IntType(1);
		if (ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		if (ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_second))->quality = e_view_mode_SHADED;
		sVar(timeline_marker) = sVar(exportmovie_marker_start);
		action_tl_play_start();
		return 0.0;
	}
	
}
