/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.05.16 16:36:27 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void project_load_values(VarType map, VarType arr)
	{
		VarType key = ds_map_find_first((IntType)(map));
		while (!is_undefined(key))
		{
			IntType index = ds_list_find_index(global::value_name_list, project_load_values_update_name(key));
			if (index >= IntType(0))
			{
				if (tl_value_is_bool(index))
					arr.Arr()[index] = value_get_real(DsMap(map).Value(key), arr.Value(index));
				else
					if (tl_value_is_color(index))
						arr.Arr()[index] = value_get_color(DsMap(map).Value(key), arr.Value(index));
					else
						if (tl_value_is_string(index))
							arr.Arr()[index] = value_get_string(DsMap(map).Value(key), arr.Value(index));
						else
							if (DsMap(map).Value(key) == /*"null"*/ STR(1221))
								arr.Arr()[index] = null_;
							else
								arr.Arr()[index] = DsMap(map).Value(key);
						
					
				
				
			}
			key = ds_map_find_next((IntType)(map), key);
		}
		
	}
	
	void project_load_values_update(Scope<obj_keyframe> self)
	{
		if (global::load_format < e_project_FORMAT_120_PRE_3)
		{
			if (idVar(self->timeline, type) == e_tl_type_BACKGROUND)
			{
				self->value[e_value_BG_IMAGE_SHOW] = global::_app->background_image_show;
				self->value[e_value_BG_SUNLIGHT_STRENGTH] = global::_app->background_sunlight_strength;
				self->value[e_value_BG_SKY_CLOUDS_SHOW] = global::_app->background_sky_clouds_show;
				self->value[e_value_BG_SKY_CLOUDS_HEIGHT] = global::_app->background_sky_clouds_height;
				self->value[e_value_BG_GROUND_SHOW] = global::_app->background_ground_show;
				self->value[e_value_BG_GRASS_COLOR] = global::_app->background_grass_color;
				self->value[e_value_BG_FOLIAGE_COLOR] = global::_app->background_foliage_color;
				self->value[e_value_BG_WATER_COLOR] = global::_app->background_water_color;
				self->value[e_value_BG_FOG_SHOW] = global::_app->background_fog_show;
				self->value[e_value_BG_FOG_SKY] = global::_app->background_fog_sky;
				self->value[e_value_BG_FOG_CUSTOM_COLOR] = global::_app->background_fog_color_custom;
				self->value[e_value_BG_FOG_CUSTOM_OBJECT_COLOR] = global::_app->background_fog_custom_object_color;
				self->value[e_value_BG_WIND] = global::_app->background_wind;
			}
		}
		if (global::load_format < e_project_FORMAT_125)
		{
			if (idVar(self->timeline, type) == e_tl_type_CAMERA)
			{
				self->value[e_value_CAM_BLOOM_RATIO] = max({ IntType(0), self->value.Value(e_value_CAM_BLOOM_RATIO) });
				self->value[e_value_CAM_DOF_BLUR_RATIO] = max({ IntType(0), self->value.Value(e_value_CAM_DOF_BLUR_RATIO) });
			}
			if (idVar(self->timeline, type) == e_tl_type_BACKGROUND)
				self->value[e_value_BG_GROUND_SLOT] = global::_app->background_ground_slot;
		}
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			global::_app->background_leaves_oak_color = global::_app->background_foliage_color;
			global::_app->background_leaves_spruce_color = c_plains_biome_foliage_2;
			global::_app->background_leaves_birch_color = c_plains_biome_foliage_2;
			global::_app->background_leaves_jungle_color = global::_app->background_foliage_color;
			global::_app->background_leaves_acacia_color = global::_app->background_foliage_color;
			global::_app->background_leaves_dark_oak_color = global::_app->background_foliage_color;
			global::_app->background_leaves_mangrove_color = global::_app->background_foliage_color;
			self->value[e_value_BG_LEAVES_OAK_COLOR] = self->value.Value(e_value_BG_FOLIAGE_COLOR);
			self->value[e_value_BG_LEAVES_SPRUCE_COLOR] = global::_app->background_leaves_spruce_color;
			self->value[e_value_BG_LEAVES_BIRCH_COLOR] = global::_app->background_leaves_birch_color;
			self->value[e_value_BG_LEAVES_JUNGLE_COLOR] = self->value.Value(e_value_BG_FOLIAGE_COLOR);
			self->value[e_value_BG_LEAVES_ACACIA_COLOR] = self->value.Value(e_value_BG_FOLIAGE_COLOR);
			self->value[e_value_BG_LEAVES_DARK_OAK_COLOR] = self->value.Value(e_value_BG_FOLIAGE_COLOR);
			self->value[e_value_BG_LEAVES_MANGROVE_COLOR] = self->value.Value(e_value_BG_FOLIAGE_COLOR);
		}
		if (global::load_format < e_project_FORMAT_200_PRE_5)
			if (idVar(self->timeline, type) == e_tl_type_BACKGROUND)
				self->value[e_value_BG_BIOME] = global::_app->background_biome;
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			if (idVar(self->timeline, type) == e_tl_type_BACKGROUND)
				self->value[e_value_BG_SUNLIGHT_STRENGTH] += IntType(1);
			if (idVar(self->timeline, type) == e_tl_type_CAMERA && self->value.Value(e_value_CAM_SHAKE) > 0)
			{
				self->value[e_value_CAM_SHAKE_MODE] = IntType(1);
				self->value[e_value_CAM_SHAKE_SPEED_X] *= 10.0;
				self->value[e_value_CAM_SHAKE_SPEED_Y] *= 10.0;
			}
		}
	}
	
	VarType project_load_values_update_name(VarType name)
	{
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			if (name == /*"BG_SKY_CLOUDS_HEIGHT"*/ STR(443))
				return /*"BG_SKY_CLOUDS_Z"*/ STR(2450);
		}
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			if (name == /*"BRIGHTNESS"*/ STR(2451))
				return /*"EMISSIVE"*/ STR(329);
			if (name == /*"CAM_SHAKE_HORIZONTAL_SPEED"*/ STR(2452))
				return /*"CAM_SHAKE_SPEED_X"*/ STR(373);
			if (name == /*"CAM_SHAKE_VERTICAL_SPEED"*/ STR(2453))
				return /*"CAM_SHAKE_SPEED_Y"*/ STR(374);
			if (name == /*"CAM_SHAKE_HORIZONTAL_STRENGTH"*/ STR(2454))
				return /*"CAM_SHAKE_STRENGTH_X"*/ STR(370);
			if (name == /*"CAM_SHAKE_VERTICAL_STRENGTH"*/ STR(2455))
				return /*"CAM_SHAKE_STRENGTH_Y"*/ STR(371);
		}
		return name;
	}
	
	void project_reset(ScopeAny self)
	{
		log({ /*"Resetting project"*/ STR(2456) });
		project_reset_backup(self);
		history_clear(self);
		global::temp_edit = null_;
		global::res_edit = null_;
		global::tl_edit = null_;
		global::tl_edit_amount = IntType(0);
		render_free();
		global::render_samples = -IntType(1);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		ObjType(obj_preview, sInt(res_preview))->update = true;
		sVar(project_file) = /*""*/ STR(0);
		sStr(project_folder) = /*""*/ STR(0);
		sInt(project_changed) = false;
		sVar(project_name) = /*""*/ STR(0);
		sVar(project_author) = /*""*/ STR(0);
		sVar(project_description) = /*""*/ STR(0);
		sVar(project_video_width) = IntType(1280);
		sVar(project_video_height) = IntType(720);
		sVar(project_video_template) = find_videotemplate(sVar(project_video_width), sVar(project_video_height));
		sVar(project_video_keep_aspect_ratio) = true;
		sVar(project_render_settings) = render_default;
		sVar(project_tempo) = IntType(24);
		sVar(project_grid_rows) = IntType(3);
		sVar(project_grid_columns) = IntType(3);
		ObjType(obj_view, sInt(view_main))->camera = -IntType(4);
		ObjType(obj_view, sInt(view_second))->camera = -IntType(5);
		sReal(app_update_step) = IntType(0);
		sArr(project_path_tl_array) = ArrType::From({});
		sArr(project_use_path_tl_array) = ArrType::From({});
		sVar(project_ik_part_array) = ArrType::From({});
		sVar(project_flw_obj_array) = ArrType::From({});
		ds_list_clear(sInt(project_model_list));
		camera_work_reset(self);
		log({ /*"Destroying instances"*/ STR(2457) });
		withAll (obj_template, self->id)
			instance_destroy(ScopeAny(self));
		
		withAll (obj_timeline, self->id)
			if (!self->delete_ready)
				tl_remove_clean(ScopeAny(self));
		
		withAll (obj_timeline, self->id)
			instance_destroy(ScopeAny(self));
		
		withAll (obj_resource, self->id)
			if (self->id != global::mc_res)
				instance_destroy(ScopeAny(self));
		
		withAll (obj_keyframe, self->id)
			instance_destroy(ScopeAny(self));
		
		withAll (obj_marker, self->id)
			instance_destroy(ScopeAny(self));
		
		withOne (obj_resource, global::mc_res, self->id)
			self->count = IntType(0);
		
		project_reset_render(self);
		project_reset_background(self);
		ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = IntType(0);
		ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value = IntType(0);
		action_tl_play_break(self);
		sVar(timeline_repeat) = false;
		sVar(timeline_marker) = IntType(0);
		sVar(timeline_marker_previous) = IntType(0);
		sVar(timeline_length) = IntType(0);
		sVar(timeline_zoom) = IntType(16);
		sVar(timeline_zoom_goal) = IntType(16);
		sInt(timeline_camera) = null_;
		sInt(copy_kf_amount) = IntType(0);
		sVar(timeline_marker_length) = IntType(0);
		sVar(timeline_intervals_show) = false;
		sVar(timeline_interval_size) = IntType(24);
		sVar(timeline_interval_offset) = IntType(0);
		sVar(timeline_hide_color_tag) = array_create({ IntType(9), false });
		ds_list_clear(sInt(tree_list));
		ds_list_clear(sInt(tree_visible_list));
		ds_list_clear(sInt(project_timeline_list));
		app_update_tl_edit(self);
		for (IntType v = IntType(0); v < e_value_amount; v++)
			sArr(value_default)[v] = tl_value_default(v);
		log({ /*"Project resetted"*/ STR(2458) });
	}
	
	void project_reset_background(ScopeAny self)
	{
		sVar(background_image_show) = false;
		sVar(background_image) = null_;
		sVar(background_image_type) = /*"image"*/ STR(90);
		sVar(background_image_stretch) = true;
		sVar(background_image_box_mapped) = false;
		sVar(background_image_rotation) = IntType(0);
		sVar(background_sky_sun_tex) = global::mc_res;
		idInt(sVar(background_sky_sun_tex), count)++;
		sVar(background_sky_moon_tex) = global::mc_res;
		idInt(sVar(background_sky_moon_tex), count)++;
		sVar(background_sky_moon_phase) = IntType(0);
		sVar(background_sky_time) = -IntType(45);
		sVar(background_sky_rotation) = IntType(0);
		sVar(background_sunlight_strength) = IntType(1);
		sVar(background_sunlight_angle) = .526;
		sVar(background_twilight) = true;
		sVar(background_sky_clouds_show) = true;
		sVar(background_sky_clouds_tex) = global::mc_res;
		idInt(sVar(background_sky_clouds_tex), count)++;
		sVar(background_sky_clouds_mode) = /*"normal"*/ STR(622);
		sVar(background_sky_clouds_speed) = IntType(1);
		sVar(background_sky_clouds_height) = IntType(1024);
		sVar(background_sky_clouds_size) = IntType(1536);
		sVar(background_sky_clouds_thickness) = IntType(64);
		sVar(background_sky_clouds_offset) = IntType(0);
		background_sky_update_clouds(self);
		sVar(background_ground_show) = true;
		sVar(background_ground_tex) = global::mc_res;
		idInt(sVar(background_ground_tex), count)++;
		sVar(background_ground_tex_material) = global::mc_res;
		idInt(sVar(background_ground_tex_material), count)++;
		sVar(background_ground_tex_normal) = global::mc_res;
		idInt(sVar(background_ground_tex_normal), count)++;
		sVar(background_ground_name) = default_ground;
		sVar(background_ground_slot) = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), sVar(background_ground_name));
		sVar(background_ground_slot_prev) = null_;
		sVar(background_ground_slot_normal) = null_;
		sVar(background_ground_slot_material) = null_;
		sVar(background_ground_tex_prev) = null_;
		sVar(background_ground_tex_material_prev) = null_;
		sVar(background_ground_tex_normal_prev) = null_;
		background_ground_update_texture(self);
		background_ground_update_texture_material(self);
		background_ground_update_texture_normal(self);
		sVar(background_biome) = ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name;
		sVar(background_biome_prev) = sVar(background_biome);
		sVar(background_grass_color) = c_plains_biome_grass;
		sVar(background_foliage_color) = c_plains_biome_foliage;
		sVar(background_water_color) = c_plains_biome_water;
		sVar(background_leaves_oak_color) = c_plains_biome_foliage;
		sVar(background_leaves_spruce_color) = c_plains_biome_foliage_2;
		sVar(background_leaves_birch_color) = c_plains_biome_foliage_2;
		sVar(background_leaves_jungle_color) = c_plains_biome_foliage;
		sVar(background_leaves_acacia_color) = c_plains_biome_foliage;
		sVar(background_leaves_dark_oak_color) = c_plains_biome_foliage;
		sVar(background_leaves_mangrove_color) = c_plains_biome_foliage;
		withOne (obj_resource, global::mc_res, self->id)
			res_update_colors(ScopeAny(self));
		
		sVar(background_sky_color) = c_sky;
		sVar(background_sky_clouds_color) = c_clouds;
		sVar(background_sunlight_color) = c_sunlight;
		sVar(background_ambient_color) = c_ambient;
		sVar(background_night_color) = c_night;
		sVar(background_fog_show) = true;
		sVar(background_fog_sky) = true;
		sVar(background_fog_color_custom) = false;
		sVar(background_fog_color) = c_sky;
		sVar(background_fog_custom_object_color) = false;
		sVar(background_fog_object_color) = c_sky;
		sVar(background_fog_distance) = IntType(10000);
		sVar(background_fog_size) = IntType(2000);
		sVar(background_fog_height) = IntType(1250);
		sVar(background_wind) = true;
		sVar(background_wind_speed) = 0.1;
		sVar(background_wind_strength) = 0.5;
		sVar(background_wind_direction) = IntType(45);
		sVar(background_wind_directional_speed) = 0.2;
		sVar(background_wind_directional_strength) = 1.5;
		sVar(background_texture_animation_speed) = 0.25;
		sInt(background_sunlight_color_final) = c_black;
		sInt(background_ambient_color_final) = c_black;
		sVar(background_fog_color_final) = c_black;
		sVar(background_fog_object_color_final) = c_black;
		sReal(background_night_alpha) = IntType(0);
		sReal(background_sunset_alpha) = IntType(0);
		sReal(background_sunrise_alpha) = IntType(0);
		sInt(background_sky_color_final) = c_black;
		sReal(background_clouds_alpha) = IntType(0);
		sInt(background_sky_clouds_final) = c_black;
		sReal(background_time) = IntType(0);
		sReal(background_time_prev) = IntType(0);
	}
	
	void project_reset_backup(ScopeAny self)
	{
		sInt(backup_next) = current_time() + IntType(1000) * IntType(60) * sReal(setting_backup_time);
	}
	
	void project_reset_loaded(ScopeAny self)
	{
		ds_map_clear(global::save_id_map);
		sVar(tree_array) = IntType(0);
		sBool(background_loaded) = false;
		withAll (obj_template, self->id)
			self->loaded = false;
		
		withAll (obj_particle_type, self->id)
			self->loaded = false;
		
		withAll (obj_timeline, self->id)
		{
			self->tree_array = IntType(0);
			self->loaded = false;
		}
		
		withAll (obj_resource, self->id)
			self->loaded = false;
		
		withAll (obj_keyframe, self->id)
			self->loaded = false;
		
		sBool(loaded) = false;
	}
	
	void project_reset_render(ScopeAny self)
	{
		sVar(project_render_samples) = IntType(24);
		sVar(project_render_distance) = IntType(30000);
		sVar(project_render_ssao) = true;
		sVar(project_render_ssao_radius) = IntType(12);
		sVar(project_render_ssao_power) = IntType(1);
		sVar(project_render_ssao_color) = c_black;
		sVar(project_render_shadows) = true;
		sVar(project_render_shadows_sun_buffer_size) = IntType(2048);
		sVar(project_render_shadows_spot_buffer_size) = IntType(512);
		sVar(project_render_shadows_point_buffer_size) = IntType(256);
		sVar(project_render_shadows_transparent) = false;
		sVar(project_render_subsurface_samples) = IntType(7);
		sVar(project_render_subsurface_highlight) = .5;
		sVar(project_render_subsurface_highlight_strength) = IntType(1);
		sVar(project_render_indirect) = true;
		sVar(project_render_indirect_precision) = .3;
		sVar(project_render_indirect_blur_radius) = IntType(1);
		sVar(project_render_indirect_strength) = IntType(1);
		sVar(project_render_reflections) = true;
		sVar(project_render_reflections_precision) = .3;
		sVar(project_render_reflections_thickness) = IntType(1);
		sVar(project_render_reflections_fade_amount) = IntType(1);
		sVar(project_render_glow) = true;
		sVar(project_render_glow_radius) = IntType(1);
		sVar(project_render_glow_intensity) = IntType(1);
		sVar(project_render_glow_falloff) = false;
		sVar(project_render_glow_falloff_radius) = IntType(2);
		sVar(project_render_glow_falloff_intensity) = IntType(1);
		sVar(project_render_aa) = true;
		sVar(project_render_aa_power) = IntType(1);
		sVar(project_render_texture_filtering) = true;
		sVar(project_render_transparent_block_texture_filtering) = false;
		sVar(project_render_texture_filtering_level) = IntType(1);
		sVar(project_render_alpha_mode) = e_alpha_mode_BLEND;
		sVar(project_render_tonemapper) = e_tonemapper_NONE;
		sVar(project_render_exposure) = IntType(1);
		sVar(project_render_gamma) = 2.2;
		sVar(project_render_material_maps) = false;
		sVar(project_bend_style) = /*"blocky"*/ STR(1859);
		sVar(project_render_opaque_leaves) = false;
		sVar(project_render_liquid_animation) = true;
		sVar(project_render_water_reflections) = false;
		sVar(project_render_block_emissive) = IntType(1);
		sVar(project_render_block_subsurface) = IntType(8);
		texture_set_mipmap_level(sVar(project_render_texture_filtering_level));
		render_generate_dof_samples(IntType(0), IntType(0), IntType(0));
		global::render_samples = -IntType(1);
		global::render_samples_clear = true;
		withAll (obj_timeline, self->id)
		{
			self->bend_rot_last = vec3(IntType(0));
			tl_update_model_shape_bend(ScopeAny(self));
		}
		
	}
	
	void project_save(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType fn = (argument_count > IntType(0) ? argument[IntType(0)] : sVar(project_file));
		log({ /*"Saving project"*/ STR(2459), fn });
		global::save_folder = sStr(project_folder);
		global::load_folder = sStr(project_folder);
		log({ /*"save_folder"*/ STR(734), global::save_folder });
		log({ /*"load_folder"*/ STR(735), global::load_folder });
		debug_timer_start();
		project_save_start(fn, true);
		project_save_project(self);
		project_save_render(self);
		project_save_background(self);
		project_save_objects(self);
		project_save_markers(self);
		project_save_done();
		debug_timer_stop(/*"project_save"*/ STR(2460));
		log({ /*"Project saved"*/ STR(2461) });
		if (!string_contains(filename_ext(fn), /*"backup"*/ STR(114)))
		{
			sInt(project_changed) = false;
			sBool(recent_add_wait) = true;
		}
	}
	
	RealType project_save_as(ScopeAny self)
	{
		StringType dirname = sStr(setting_project_folder) + ObjType(obj_popup, sInt(popup_saveas))->folder;
		directory_create_lib(sStr(setting_project_folder));
		directory_create_lib(dirname);
		if (!directory_exists_lib(dirname))
		{
			error(/*"errornewprojectaccess"*/ STR(2079));
			return IntType(0);
		}
		log({ /*"Saving project as new"*/ STR(2462), dirname });
		sVar(project_name) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_saveas))->tbx_name)->text;
		sVar(project_author) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_saveas))->tbx_author)->text;
		sVar(project_description) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_saveas))->tbx_description)->text;
		global::load_folder = sStr(project_folder);
		sStr(project_folder) = dirname;
		sVar(project_file) = sStr(project_folder) + /*"/"*/ STR(16) + filename_get_valid(sVar(project_name)) + /*".miproject"*/ STR(707);
		global::save_folder = sStr(project_folder);
		withAll (obj_resource, self->id)
			if (self->id != global::mc_res)
				res_save(ScopeAny(self));
		
		popup_close(self);
		project_save(self);
		toast_new(self, e_toast_POSITIVE, text_get({ /*"alertprojectcreated"*/ STR(2081) }));
		toast_add_action(self, /*"alertprojectcreatedview"*/ STR(2082), ID_popup_open_url, sStr(project_folder));
		return 0.0;
	}
	
	void project_save_background(ScopeAny self)
	{
		json_save_object_start({ /*"background"*/ STR(212) });
		json_save_var_bool(/*"image_show"*/ STR(2090), sVar(background_image_show));
		json_save_var_save_id(/*"image"*/ STR(90), sVar(background_image));
		json_save_var(/*"image_type"*/ STR(2091), sVar(background_image_type));
		json_save_var_bool(/*"image_stretch"*/ STR(2092), sVar(background_image_stretch));
		json_save_var_bool(/*"image_box_mapped"*/ STR(2093), sVar(background_image_box_mapped));
		json_save_var(/*"image_rotation"*/ STR(2094), sVar(background_image_rotation));
		json_save_var_save_id(/*"sky_sun_tex"*/ STR(2095), sVar(background_sky_sun_tex));
		json_save_var_save_id(/*"sky_moon_tex"*/ STR(2096), sVar(background_sky_moon_tex));
		json_save_var(/*"sky_moon_phase"*/ STR(2097), sVar(background_sky_moon_phase));
		json_save_var(/*"sky_time"*/ STR(2098), sVar(background_sky_time));
		json_save_var(/*"sky_rotation"*/ STR(2099), sVar(background_sky_rotation));
		json_save_var(/*"sunlight_strength"*/ STR(2100), sVar(background_sunlight_strength));
		json_save_var(/*"sunlight_angle"*/ STR(2101), sVar(background_sunlight_angle));
		json_save_var_bool(/*"twilight"*/ STR(2102), sVar(background_twilight));
		json_save_var_bool(/*"sky_clouds_show"*/ STR(2103), sVar(background_sky_clouds_show));
		json_save_var(/*"sky_clouds_mode"*/ STR(2104), sVar(background_sky_clouds_mode));
		json_save_var_save_id(/*"sky_clouds_tex"*/ STR(2110), sVar(background_sky_clouds_tex));
		json_save_var(/*"sky_clouds_speed"*/ STR(2112), sVar(background_sky_clouds_speed));
		json_save_var(/*"sky_clouds_height"*/ STR(2108), sVar(background_sky_clouds_height));
		json_save_var(/*"sky_clouds_size"*/ STR(2111), sVar(background_sky_clouds_size));
		json_save_var(/*"sky_clouds_thickness"*/ STR(2109), sVar(background_sky_clouds_thickness));
		json_save_var(/*"sky_clouds_offset"*/ STR(2113), sVar(background_sky_clouds_offset));
		json_save_var_bool(/*"ground_show"*/ STR(2114), sVar(background_ground_show));
		json_save_var(/*"ground_name"*/ STR(2115), sVar(background_ground_name));
		json_save_var_save_id(/*"ground_tex"*/ STR(2116), sVar(background_ground_tex));
		json_save_var_save_id(/*"ground_tex_material"*/ STR(2117), sVar(background_ground_tex_material));
		json_save_var_save_id(/*"ground_tex_normal"*/ STR(2118), sVar(background_ground_tex_normal));
		json_save_var(/*"biome"*/ STR(1683), sVar(background_biome));
		json_save_var_color(/*"sky_color"*/ STR(2119), sVar(background_sky_color));
		json_save_var_color(/*"sky_clouds_color"*/ STR(2120), sVar(background_sky_clouds_color));
		json_save_var_color(/*"sunlight_color"*/ STR(2121), sVar(background_sunlight_color));
		json_save_var_color(/*"ambient_color"*/ STR(2122), sVar(background_ambient_color));
		json_save_var_color(/*"night_color"*/ STR(2123), sVar(background_night_color));
		json_save_var_color(/*"foliage_color"*/ STR(2126), sVar(background_foliage_color));
		json_save_var_color(/*"grass_color"*/ STR(2125), sVar(background_grass_color));
		json_save_var_color(/*"water_color"*/ STR(2124), sVar(background_water_color));
		json_save_var_color(/*"leaves_oak_color"*/ STR(2127), sVar(background_leaves_oak_color));
		json_save_var_color(/*"leaves_spruce_color"*/ STR(2128), sVar(background_leaves_spruce_color));
		json_save_var_color(/*"leaves_birch_color"*/ STR(2129), sVar(background_leaves_birch_color));
		json_save_var_color(/*"leaves_jungle_color"*/ STR(2130), sVar(background_leaves_jungle_color));
		json_save_var_color(/*"leaves_acacia_color"*/ STR(2131), sVar(background_leaves_acacia_color));
		json_save_var_color(/*"leaves_dark_oak_color"*/ STR(2132), sVar(background_leaves_dark_oak_color));
		json_save_var_color(/*"leaves_mangrove_color"*/ STR(2133), sVar(background_leaves_mangrove_color));
		json_save_var_bool(/*"fog_show"*/ STR(2134), sVar(background_fog_show));
		json_save_var_bool(/*"fog_sky"*/ STR(2135), sVar(background_fog_sky));
		json_save_var_bool(/*"fog_color_custom"*/ STR(2136), sVar(background_fog_color_custom));
		json_save_var_color(/*"fog_color"*/ STR(2137), sVar(background_fog_color));
		json_save_var_bool(/*"fog_object_color_custom"*/ STR(2138), sVar(background_fog_custom_object_color));
		json_save_var_color(/*"fog_object_color"*/ STR(2139), sVar(background_fog_object_color));
		json_save_var(/*"fog_distance"*/ STR(2140), sVar(background_fog_distance));
		json_save_var(/*"fog_size"*/ STR(2141), sVar(background_fog_size));
		json_save_var(/*"fog_height"*/ STR(2142), sVar(background_fog_height));
		json_save_var_bool(/*"wind"*/ STR(137), sVar(background_wind));
		json_save_var(/*"wind_speed"*/ STR(2143), sVar(background_wind_speed));
		json_save_var(/*"wind_strength"*/ STR(2144), sVar(background_wind_strength));
		json_save_var(/*"wind_direction"*/ STR(2145), sVar(background_wind_direction));
		json_save_var(/*"wind_directional_speed"*/ STR(2146), sVar(background_wind_directional_speed));
		json_save_var(/*"wind_directional_strength"*/ STR(2147), sVar(background_wind_directional_strength));
		json_save_var(/*"texture_animation_speed"*/ STR(2148), sVar(background_texture_animation_speed));
		json_save_object_done();
	}
	
	void project_save_done()
	{
		json_save_object_done();
		json_save_done();
	}
	
	RealType project_save_markers(ScopeAny self)
	{
		if (ds_list_size(sInt(timeline_marker_list)) == IntType(0))
			return IntType(0);
		ArrType saved = ArrType::From({});
		VarType m;
		json_save_array_start({ /*"markers"*/ STR(2087) });
		for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
		{
			m = DsList(sInt(timeline_marker_list)).Value(i);
			if (array_contains(saved, idVar(m, save_id)))
				continue;
			else
				array_add(VarType::CreateRef(saved), idVar(m, save_id));
			
			json_save_object_start();
			json_save_var(/*"id"*/ STR(82), idVar(m, save_id));
			json_save_var(/*"position"*/ STR(40), idVar(m, pos));
			json_save_var(/*"name"*/ STR(808), idVar(m, name));
			json_save_var(/*"color"*/ STR(909), idVar(m, color));
			json_save_object_done();
		}
		json_save_array_done();
		return 0.0;
	}
	
	void project_save_objects(ScopeAny self)
	{
		json_save_array_start({ /*"templates"*/ STR(2158) });
		for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(lib_list), list)); i++)
			withOne (Object, DsList(idInt(sInt(lib_list), list)).Value(i), self->id)
				if (sBool(save))
					project_save_template(self);
		
		json_save_array_done();
		json_save_array_start({ /*"timelines"*/ STR(2159) });
		withAll (obj_timeline, self->id)
			if (self->save)
				project_save_timeline(self);
		
		json_save_array_done();
		json_save_array_start({ /*"resources"*/ STR(215) });
		for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), list)); i++)
			withOne (Object, DsList(idInt(sInt(res_list), list)).Value(i), self->id)
				if (self->id != global::mc_res && sBool(save))
					project_save_resource(self);
		
		json_save_array_done();
	}
	
	void project_save_particles(ScopeAny self)
	{
		json_save_object_start({ /*"particles"*/ STR(531) });
		json_save_var_bool(/*"spawn_constant"*/ STR(2167), sVar(pc_spawn_constant));
		json_save_var(/*"spawn_amount"*/ STR(2168), sVar(pc_spawn_amount));
		json_save_var_bool(/*"spawn_region_use"*/ STR(2169), sVar(pc_spawn_region_use));
		json_save_var(/*"spawn_region_type"*/ STR(2170), sVar(pc_spawn_region_type));
		if (sVar(pc_spawn_region_path) != null_)
			json_save_var_save_id(/*"spawn_region_path"*/ STR(2171), sVar(pc_spawn_region_path));
		json_save_var(/*"spawn_region_sphere_radius"*/ STR(2172), sVar(pc_spawn_region_sphere_radius));
		json_save_var(/*"spawn_region_cube_size"*/ STR(2173), sVar(pc_spawn_region_cube_size));
		json_save_var_point3D(/*"spawn_region_box_size"*/ STR(2174), sVar(pc_spawn_region_box_size));
		json_save_var(/*"spawn_region_path_radius"*/ STR(2175), sVar(pc_spawn_region_path_radius));
		json_save_var(/*"bounding_box_type"*/ STR(2176), sVar(pc_bounding_box_type));
		json_save_var(/*"bounding_box_ground_z"*/ STR(2177), sVar(pc_bounding_box_ground_z));
		json_save_var_point3D(/*"bounding_box_custom_start"*/ STR(2178), sVar(pc_bounding_box_custom_start));
		json_save_var_point3D(/*"bounding_box_custom_end"*/ STR(2179), sVar(pc_bounding_box_custom_end));
		json_save_var_bool(/*"bounding_box_relative"*/ STR(2180), sVar(pc_bounding_box_relative));
		json_save_var_bool(/*"destroy_at_animation_finish"*/ STR(2181), sVar(pc_destroy_at_animation_finish));
		json_save_var_bool(/*"destroy_at_amount"*/ STR(2182), sVar(pc_destroy_at_amount));
		json_save_var(/*"destroy_at_amount_val"*/ STR(2183), sVar(pc_destroy_at_amount_val));
		json_save_var_bool(/*"destroy_at_time"*/ STR(2184), sVar(pc_destroy_at_time));
		json_save_var(/*"destroy_at_time_seconds"*/ STR(2185), sVar(pc_destroy_at_time_seconds));
		json_save_var_bool(/*"destroy_at_time_israndom"*/ STR(2186), sVar(pc_destroy_at_time_israndom));
		json_save_var(/*"destroy_at_time_random_min"*/ STR(2187), sVar(pc_destroy_at_time_random_min));
		json_save_var(/*"destroy_at_time_random_max"*/ STR(2188), sVar(pc_destroy_at_time_random_max));
		json_save_var(/*"destroy_at_bounding_box"*/ STR(2189), sVar(pc_destroy_at_bounding_box));
		json_save_array_start({ /*"types"*/ STR(2190) });
		for (IntType t = IntType(0); t < ds_list_size(sInt(pc_type_list)); t++)
		{
			json_save_object_start();
			withOne (obj_particle_type, DsList(sInt(pc_type_list)).Value(t), self->id)
			{
				json_save_var(/*"id"*/ STR(82), self->save_id);
				json_save_var(/*"name"*/ STR(808), json_string_encode(self->name));
				if (self->temp == particle_sheet)
					json_save_var(/*"temp_type"*/ STR(2193), /*"sheet"*/ STR(2194));
				else
					if (self->temp == particle_template)
						json_save_var(/*"temp_type"*/ STR(2193), /*"template"*/ STR(2195));
					else
						json_save_var(/*"temp_type"*/ STR(2193), /*"templateobj"*/ STR(2463));
				
				
				if (self->temp > 0)
					json_save_var_save_id(/*"temp"*/ STR(2192), self->temp);
				json_save_var(/*"text"*/ STR(99), json_string_encode(self->text));
				json_save_var(/*"spawn_rate"*/ STR(2196), self->spawn_rate);
				json_save_var_save_id(/*"sprite_tex"*/ STR(2197), self->sprite_tex);
				json_save_var(/*"sprite_tex_image"*/ STR(2198), self->sprite_tex_image);
				json_save_var_save_id(/*"sprite_template_tex"*/ STR(2199), self->sprite_template_tex);
				json_save_var(/*"sprite_template"*/ STR(2200), self->sprite_template);
				json_save_var_bool(/*"sprite_template_still_frame"*/ STR(2201), self->sprite_template_still_frame);
				json_save_var_bool(/*"sprite_template_random_frame"*/ STR(2202), self->sprite_template_random_frame);
				json_save_var_bool(/*"sprite_template_reverse"*/ STR(2203), self->sprite_template_reverse);
				json_save_var(/*"sprite_frame_width"*/ STR(2204), self->sprite_frame_width);
				json_save_var(/*"sprite_frame_height"*/ STR(2205), self->sprite_frame_height);
				json_save_var(/*"sprite_frame_start"*/ STR(2206), self->sprite_frame_start);
				json_save_var(/*"sprite_frame_end"*/ STR(2207), self->sprite_frame_end);
				json_save_var(/*"sprite_animation_speed"*/ STR(2208), self->sprite_animation_speed);
				json_save_var_bool(/*"sprite_animation_speed_israndom"*/ STR(2209), self->sprite_animation_speed_israndom);
				json_save_var(/*"sprite_animation_speed_random_min"*/ STR(2210), self->sprite_animation_speed_random_min);
				json_save_var(/*"sprite_animation_speed_random_max"*/ STR(2211), self->sprite_animation_speed_random_max);
				json_save_var(/*"sprite_animation_onend"*/ STR(2212), self->sprite_animation_onend);
				json_save_var_bool(/*"angle_extend"*/ STR(2213), self->angle_extend);
				json_save_var_point3D(/*"angle"*/ STR(837), self->angle);
				json_save_var_point3D(/*"angle_israndom"*/ STR(2214), self->angle_israndom);
				json_save_var_point3D(/*"angle_random_min"*/ STR(2215), self->angle_random_min);
				json_save_var_point3D(/*"angle_random_max"*/ STR(2216), self->angle_random_max);
				json_save_var(/*"angle_speed"*/ STR(2217), self->angle_speed);
				json_save_var(/*"angle_speed_israndom"*/ STR(2218), self->angle_speed_israndom);
				json_save_var(/*"angle_speed_random_min"*/ STR(2219), self->angle_speed_random_min);
				json_save_var(/*"angle_speed_random_max"*/ STR(2220), self->angle_speed_random_max);
				json_save_var(/*"angle_speed_add"*/ STR(2221), self->angle_speed_add);
				json_save_var(/*"angle_speed_add_israndom"*/ STR(2222), self->angle_speed_add_israndom);
				json_save_var(/*"angle_speed_add_random_min"*/ STR(2223), self->angle_speed_add_random_min);
				json_save_var(/*"angle_speed_add_random_max"*/ STR(2224), self->angle_speed_add_random_max);
				json_save_var(/*"angle_speed_mul"*/ STR(2225), self->angle_speed_mul);
				json_save_var(/*"angle_speed_mul_israndom"*/ STR(2226), self->angle_speed_mul_israndom);
				json_save_var(/*"angle_speed_mul_random_min"*/ STR(2227), self->angle_speed_mul_random_min);
				json_save_var(/*"angle_speed_mul_random_max"*/ STR(2228), self->angle_speed_mul_random_max);
				json_save_var_bool(/*"spd_extend"*/ STR(2229), self->spd_extend);
				json_save_var_point3D(/*"spd"*/ STR(2230), self->spd);
				json_save_var_point3D(/*"spd_israndom"*/ STR(2231), self->spd_israndom);
				json_save_var_point3D(/*"spd_random_min"*/ STR(2232), self->spd_random_min);
				json_save_var_point3D(/*"spd_random_max"*/ STR(2233), self->spd_random_max);
				json_save_var_point3D(/*"spd_add"*/ STR(2234), self->spd_add);
				json_save_var_point3D(/*"spd_add_israndom"*/ STR(2235), self->spd_add_israndom);
				json_save_var_point3D(/*"spd_add_random_min"*/ STR(2236), self->spd_add_random_min);
				json_save_var_point3D(/*"spd_add_random_max"*/ STR(2237), self->spd_add_random_max);
				json_save_var_point3D(/*"spd_mul"*/ STR(2238), self->spd_mul);
				json_save_var_point3D(/*"spd_mul_israndom"*/ STR(2239), self->spd_mul_israndom);
				json_save_var_point3D(/*"spd_mul_random_min"*/ STR(2240), self->spd_mul_random_min);
				json_save_var_point3D(/*"spd_mul_random_max"*/ STR(2241), self->spd_mul_random_max);
				json_save_var_bool(/*"rot_extend"*/ STR(2242), self->rot_extend);
				json_save_var_point3D(/*"rot"*/ STR(2243), self->rot);
				json_save_var_point3D(/*"rot_israndom"*/ STR(2244), self->rot_israndom);
				json_save_var_point3D(/*"rot_random_min"*/ STR(2245), self->rot_random_min);
				json_save_var_point3D(/*"rot_random_max"*/ STR(2246), self->rot_random_max);
				json_save_var_bool(/*"rot_spd_extend"*/ STR(2247), self->rot_spd_extend);
				json_save_var_point3D(/*"rot_spd"*/ STR(2248), self->rot_spd);
				json_save_var_point3D(/*"rot_spd_israndom"*/ STR(2249), self->rot_spd_israndom);
				json_save_var_point3D(/*"rot_spd_random_min"*/ STR(2250), self->rot_spd_random_min);
				json_save_var_point3D(/*"rot_spd_random_max"*/ STR(2251), self->rot_spd_random_max);
				json_save_var_point3D(/*"rot_spd_add"*/ STR(2252), self->rot_spd_add);
				json_save_var_point3D(/*"rot_spd_add_israndom"*/ STR(2253), self->rot_spd_add_israndom);
				json_save_var_point3D(/*"rot_spd_add_random_min"*/ STR(2254), self->rot_spd_add_random_min);
				json_save_var_point3D(/*"rot_spd_add_random_max"*/ STR(2255), self->rot_spd_add_random_max);
				json_save_var_point3D(/*"rot_spd_mul"*/ STR(2256), self->rot_spd_mul);
				json_save_var_point3D(/*"rot_spd_mul_israndom"*/ STR(2257), self->rot_spd_mul_israndom);
				json_save_var_point3D(/*"rot_spd_mul_random_min"*/ STR(2258), self->rot_spd_mul_random_min);
				json_save_var_point3D(/*"rot_spd_mul_random_max"*/ STR(2259), self->rot_spd_mul_random_max);
				json_save_var(/*"sprite_angle"*/ STR(2260), self->sprite_angle);
				json_save_var_bool(/*"sprite_angle_israndom"*/ STR(2261), self->sprite_angle_israndom);
				json_save_var(/*"sprite_angle_random_min"*/ STR(2262), self->sprite_angle_random_min);
				json_save_var(/*"sprite_angle_random_max"*/ STR(2263), self->sprite_angle_random_max);
				json_save_var(/*"sprite_angle_add"*/ STR(2264), self->sprite_angle_add);
				json_save_var_bool(/*"sprite_angle_add_israndom"*/ STR(2265), self->sprite_angle_add_israndom);
				json_save_var(/*"sprite_angle_add_random_min"*/ STR(2266), self->sprite_angle_add_random_min);
				json_save_var(/*"sprite_angle_add_random_max"*/ STR(2267), self->sprite_angle_add_random_max);
				json_save_var(/*"scale"*/ STR(1802), self->scale);
				json_save_var_bool(/*"scale_israndom"*/ STR(2268), self->scale_israndom);
				json_save_var(/*"scale_random_min"*/ STR(2269), self->scale_random_min);
				json_save_var(/*"scale_random_max"*/ STR(2270), self->scale_random_max);
				json_save_var(/*"scale_add"*/ STR(2271), self->scale_add);
				json_save_var_bool(/*"scale_add_israndom"*/ STR(2272), self->scale_add_israndom);
				json_save_var(/*"scale_add_random_min"*/ STR(2273), self->scale_add_random_min);
				json_save_var(/*"scale_add_random_max"*/ STR(2274), self->scale_add_random_max);
				json_save_var(/*"alpha"*/ STR(2275), self->alpha);
				json_save_var_bool(/*"alpha_israndom"*/ STR(2276), self->alpha_israndom);
				json_save_var(/*"alpha_random_min"*/ STR(2277), self->alpha_random_min);
				json_save_var(/*"alpha_random_max"*/ STR(2278), self->alpha_random_max);
				json_save_var(/*"alpha_add"*/ STR(2279), self->alpha_add);
				json_save_var_bool(/*"alpha_add_israndom"*/ STR(2280), self->alpha_add_israndom);
				json_save_var(/*"alpha_add_random_min"*/ STR(2281), self->alpha_add_random_min);
				json_save_var(/*"alpha_add_random_max"*/ STR(2282), self->alpha_add_random_max);
				json_save_var_color(/*"color"*/ STR(909), self->color);
				json_save_var_bool(/*"color_israndom"*/ STR(2283), self->color_israndom);
				json_save_var_color(/*"color_random_start"*/ STR(2284), self->color_random_start);
				json_save_var_color(/*"color_random_end"*/ STR(2285), self->color_random_end);
				json_save_var_bool(/*"color_mix_enabled"*/ STR(2286), self->color_mix_enabled);
				json_save_var_color(/*"color_mix"*/ STR(1812), self->color_mix);
				json_save_var_bool(/*"color_mix_israndom"*/ STR(2287), self->color_mix_israndom);
				json_save_var_color(/*"color_mix_random_start"*/ STR(2288), self->color_mix_random_start);
				json_save_var_color(/*"color_mix_random_end"*/ STR(2289), self->color_mix_random_end);
				json_save_var(/*"color_mix_time"*/ STR(2290), self->color_mix_time);
				json_save_var_bool(/*"color_mix_time_israndom"*/ STR(2291), self->color_mix_time_israndom);
				json_save_var(/*"color_mix_time_random_min"*/ STR(2292), self->color_mix_time_random_min);
				json_save_var(/*"color_mix_time_random_max"*/ STR(2293), self->color_mix_time_random_max);
				json_save_var_bool(/*"spawn_region"*/ STR(2294), self->spawn_region);
				json_save_var_bool(/*"bounding_box"*/ STR(2295), self->bounding_box);
				json_save_var_bool(/*"bounce"*/ STR(2296), self->bounce);
				json_save_var(/*"bounce_factor"*/ STR(2297), self->bounce_factor);
				json_save_var_bool(/*"orbit"*/ STR(2298), self->orbit);
			}
			
			json_save_object_done();
		}
		json_save_array_done();
		json_save_object_done();
	}
	
	void project_save_project(ScopeAny self)
	{
		json_save_object_start({ /*"project"*/ STR(206) });
		json_save_var(/*"name"*/ STR(808), json_string_encode(sVar(project_name)));
		json_save_var(/*"author"*/ STR(2299), json_string_encode(sVar(project_author)));
		json_save_var(/*"description"*/ STR(1798), json_string_encode(sVar(project_description)));
		json_save_var(/*"video_width"*/ STR(2300), sVar(project_video_width));
		json_save_var(/*"video_height"*/ STR(2301), sVar(project_video_height));
		json_save_var_bool(/*"video_keep_aspect_ratio"*/ STR(2302), sVar(project_video_keep_aspect_ratio));
		json_save_var(/*"render_settings"*/ STR(2303), sVar(project_render_settings));
		json_save_var(/*"tempo"*/ STR(37), sVar(project_tempo));
		json_save_var(/*"grid_rows"*/ STR(2304), sVar(project_grid_rows));
		json_save_var(/*"grid_columns"*/ STR(2305), sVar(project_grid_columns));
		if (ObjType(obj_view, sInt(view_main))->camera == -IntType(4) || ObjType(obj_view, sInt(view_main))->camera == -IntType(5))
			json_save_var(/*"view_main_camera"*/ STR(2306), ObjType(obj_view, sInt(view_main))->camera);
		else
			json_save_var(/*"view_main_camera"*/ STR(2306), save_id_get(ObjType(obj_view, sInt(view_main))->camera));
		
		if (ObjType(obj_view, sInt(view_second))->camera == -IntType(4) || ObjType(obj_view, sInt(view_second))->camera == -IntType(5))
			json_save_var(/*"view_second_camera"*/ STR(2307), ObjType(obj_view, sInt(view_second))->camera);
		else
			json_save_var(/*"view_second_camera"*/ STR(2307), save_id_get(ObjType(obj_view, sInt(view_second))->camera));
		
		json_save_object_start({ /*"timeline"*/ STR(119) });
		json_save_var_bool(/*"repeat"*/ STR(2308), sVar(timeline_repeat));
		json_save_var_bool(/*"seamless_repeat"*/ STR(2309), sVar(timeline_seamless_repeat));
		json_save_var_bool(/*"intervals_show"*/ STR(2311), sVar(timeline_intervals_show));
		json_save_var(/*"interval_size"*/ STR(2312), sVar(timeline_interval_size));
		json_save_var(/*"interval_offset"*/ STR(2313), sVar(timeline_interval_offset));
		json_save_var(/*"marker"*/ STR(2314), sVar(timeline_marker));
		json_save_var(/*"list_width"*/ STR(2315), idVar(sVar(timeline), list_width));
		json_save_var(/*"hor_scroll"*/ STR(2316), ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
		json_save_var(/*"zoom"*/ STR(2317), sVar(timeline_zoom));
		json_save_var_nullable(/*"region_start"*/ STR(2318), sVar(timeline_region_start));
		json_save_var_nullable(/*"region_end"*/ STR(2319), sVar(timeline_region_end));
		json_save_var(/*"hide_color_tag"*/ STR(2320), sVar(timeline_hide_color_tag));
		json_save_object_done();
		json_save_object_start({ /*"work_camera"*/ STR(2321) });
		json_save_var_point3D(/*"focus"*/ STR(2322), sVar(cam_work_focus));
		json_save_var(/*"angle_xy"*/ STR(2323), sVar(cam_work_angle_xy));
		json_save_var(/*"angle_z"*/ STR(2324), sVar(cam_work_angle_z));
		json_save_var(/*"roll"*/ STR(2325), sVar(cam_work_roll));
		json_save_var(/*"zoom"*/ STR(2317), sVar(cam_work_zoom));
		json_save_object_done();
		json_save_object_done();
	}
	
	void project_save_render(ScopeAny self)
	{
		json_save_object_start({ /*"render"*/ STR(9) });
		json_save_var(/*"render_samples"*/ STR(2326), sVar(project_render_samples));
		json_save_var(/*"render_distance"*/ STR(2327), sVar(project_render_distance));
		json_save_var_bool(/*"render_ssao"*/ STR(2328), sVar(project_render_ssao));
		json_save_var(/*"render_ssao_radius"*/ STR(2329), sVar(project_render_ssao_radius));
		json_save_var(/*"render_ssao_power"*/ STR(2330), sVar(project_render_ssao_power));
		json_save_var_color(/*"render_ssao_color"*/ STR(2331), sVar(project_render_ssao_color));
		json_save_var_bool(/*"render_shadows"*/ STR(2332), sVar(project_render_shadows));
		json_save_var(/*"render_shadows_sun_buffer_size"*/ STR(2333), sVar(project_render_shadows_sun_buffer_size));
		json_save_var(/*"render_shadows_spot_buffer_size"*/ STR(2334), sVar(project_render_shadows_spot_buffer_size));
		json_save_var(/*"render_shadows_point_buffer_size"*/ STR(2335), sVar(project_render_shadows_point_buffer_size));
		json_save_var(/*"render_shadows_transparent"*/ STR(2336), sVar(project_render_shadows_transparent));
		json_save_var(/*"render_subsurface_samples"*/ STR(2337), sVar(project_render_subsurface_samples));
		json_save_var(/*"render_subsurface_highlight"*/ STR(2338), sVar(project_render_subsurface_highlight));
		json_save_var(/*"render_subsurface_highlight_strength"*/ STR(2339), sVar(project_render_subsurface_highlight_strength));
		json_save_var_bool(/*"render_indirect"*/ STR(2340), sVar(project_render_indirect));
		json_save_var(/*"render_indirect_precision"*/ STR(2342), sVar(project_render_indirect_precision));
		json_save_var(/*"render_indirect_blur_radius"*/ STR(2341), sVar(project_render_indirect_blur_radius));
		json_save_var(/*"render_indirect_strength"*/ STR(2343), sVar(project_render_indirect_strength));
		json_save_var_bool(/*"render_reflections"*/ STR(2344), sVar(project_render_reflections));
		json_save_var(/*"render_reflections_precision"*/ STR(2345), sVar(project_render_reflections_precision));
		json_save_var(/*"render_reflections_thickness"*/ STR(2346), sVar(project_render_reflections_thickness));
		json_save_var(/*"render_reflections_fade_amount"*/ STR(2347), sVar(project_render_reflections_fade_amount));
		json_save_var_bool(/*"render_glow"*/ STR(2348), sVar(project_render_glow));
		json_save_var(/*"render_glow_radius"*/ STR(2349), sVar(project_render_glow_radius));
		json_save_var(/*"render_glow_intensity"*/ STR(2350), sVar(project_render_glow_intensity));
		json_save_var_bool(/*"render_glow_falloff"*/ STR(2351), sVar(project_render_glow_falloff));
		json_save_var(/*"render_glow_falloff_radius"*/ STR(2352), sVar(project_render_glow_falloff_radius));
		json_save_var(/*"render_glow_falloff_intensity"*/ STR(2353), sVar(project_render_glow_falloff_intensity));
		json_save_var_bool(/*"render_aa"*/ STR(2354), sVar(project_render_aa));
		json_save_var(/*"render_aa_power"*/ STR(2355), sVar(project_render_aa_power));
		json_save_var(/*"bend_style"*/ STR(2356), sVar(project_bend_style));
		json_save_var_bool(/*"opaque_leaves"*/ STR(2357), sVar(project_render_opaque_leaves));
		json_save_var_bool(/*"liquid_animation"*/ STR(2358), sVar(project_render_liquid_animation));
		json_save_var_bool(/*"water_reflections"*/ STR(2359), sVar(project_render_water_reflections));
		json_save_var(/*"block_emissive"*/ STR(2360), sVar(project_render_block_emissive));
		json_save_var(/*"block_subsurface"*/ STR(2361), sVar(project_render_block_subsurface));
		json_save_var_bool(/*"texture_filtering"*/ STR(2362), sVar(project_render_texture_filtering));
		json_save_var_bool(/*"transparent_block_texture_filtering"*/ STR(2363), sVar(project_render_transparent_block_texture_filtering));
		json_save_var(/*"texture_filtering_level"*/ STR(2364), sVar(project_render_texture_filtering_level));
		json_save_var(/*"render_alpha_mode"*/ STR(2365), sVar(project_render_alpha_mode));
		json_save_var(/*"tonemapper"*/ STR(2366), sVar(project_render_tonemapper));
		json_save_var(/*"exposure"*/ STR(2367), sVar(project_render_exposure));
		json_save_var(/*"gamma"*/ STR(2368), sVar(project_render_gamma));
		json_save_var_bool(/*"material_maps"*/ STR(2369), sVar(project_render_material_maps));
		json_save_object_done();
	}
	
	void project_save_resource(ScopeAny self)
	{
		json_save_object_start();
		json_save_var(/*"id"*/ STR(82), sVar(save_id));
		json_save_var(/*"type"*/ STR(794), DsList(global::res_type_name_list).Value(sVar(type)));
		json_save_var(/*"filename"*/ STR(1245), json_string_encode(sVar(filename)));
		if (sVar(type) == e_res_type_SKIN || sVar(type) == e_res_type_DOWNLOADED_SKIN)
			json_save_var_bool(/*"player_skin"*/ STR(1801), sVar(player_skin));
		if (sVar(type) == e_res_type_ITEM_SHEET)
			json_save_var_point2D(/*"item_sheet_size"*/ STR(2370), sVar(item_sheet_size));
		if (sVar(type) == e_res_type_SCENERY || sVar(type) == e_res_type_FROM_WORLD)
		{
			json_save_var_bool(/*"scenery_tl_add"*/ STR(2371), sVar(scenery_tl_add));
			json_save_var_bool(/*"scenery_download_skins"*/ STR(2372), sVar(scenery_download_skins));
		}
		if (sVar(type) == e_res_type_SCENERY)
		{
			json_save_var(/*"scenery_palette"*/ STR(2373), sVar(scenery_palette));
			json_save_var(/*"scenery_integrity"*/ STR(2374), sVar(scenery_integrity));
			json_save_var_bool(/*"scenery_integrity_invert"*/ STR(2375), sVar(scenery_integrity_invert));
			json_save_var_bool(/*"randomize"*/ STR(2376), sVar(scenery_randomize));
		}
		if (sVar(type) == e_res_type_FROM_WORLD)
		{
			json_save_var(/*"world_regions_dir"*/ STR(2377), json_string_encode(sVar(world_regions_dir)));
			json_save_var_point3D(/*"world_box_start"*/ STR(2378), sVar(world_box_start));
			json_save_var_point3D(/*"world_box_end"*/ STR(2379), sVar(world_box_end));
			json_save_var(/*"world_filter_mode"*/ STR(2380), sVar(world_filter_mode));
			json_save_array_start({ /*"world_filter_array"*/ STR(2381) });
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(world_filter_array))); i++)
				json_save_array_value(sArr(world_filter_array).Value(i));
			json_save_array_done();
		}
		json_save_var(/*"material_format"*/ STR(2382), sVar(material_format));
		if (global::load_folder != global::save_folder)
			res_save(self);
		json_save_object_done();
	}
	
	void project_save_start(VarType fn, BoolType saveall)
	{
		json_save_start(fn);
		json_save_object_start();
		json_save_var(/*"format"*/ STR(88), project_format);
		json_save_var(/*"created_in"*/ STR(2464), mineimator_version_full);
		withAll (obj_template, noone)
			self->save = saveall;
		
		withAll (obj_timeline, noone)
			self->save = saveall;
		
		withAll (obj_resource, noone)
			self->save = saveall;
		
	}
	
	void project_save_template(ScopeAny self)
	{
		json_save_object_start();
		json_save_var(/*"id"*/ STR(82), sVar(save_id));
		json_save_var(/*"type"*/ STR(794), DsList(global::temp_type_name_list).Value(sVar(type)));
		json_save_var(/*"name"*/ STR(808), json_string_encode(sVar(name)));
		if (sVar(type) == e_temp_type_CHARACTER || sVar(type) == e_temp_type_SPECIAL_BLOCK || sVar(type) == e_temp_type_BODYPART)
		{
			json_save_var_save_id(/*"model_tex"*/ STR(2387), sVar(model_tex));
			json_save_var_save_id(/*"model_tex_material"*/ STR(2388), sVar(model_tex_material));
			json_save_var_save_id(/*"model_tex_normal"*/ STR(2389), sVar(model_tex_normal));
			json_save_object_start({ /*"model"*/ STR(536) });
			json_save_var(/*"name"*/ STR(808), sVar(model_name));
			json_save_var_state_vars(/*"state"*/ STR(1006), sVar(model_state));
			if (sVar(type) == e_temp_type_BODYPART)
				json_save_var(/*"part_name"*/ STR(41), sVar(model_part_name));
			else
				json_save_var(/*"model_version"*/ STR(2390), ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->version);
			
			json_save_object_done();
			if (sVar(pattern_type) != /*""*/ STR(0))
			{
				IntType colorindex = ds_list_find_index(global::minecraft_color_list, sVar(pattern_base_color));
				if (colorindex > -IntType(1))
					json_save_var(/*"pattern_base_color"*/ STR(2392), DsList(global::minecraft_color_name_list).Value(colorindex));
				else
					json_save_var(/*"pattern_base_color"*/ STR(2392), /*"white"*/ STR(606));
				
				json_save_array_start({ /*"pattern_pattern_list"*/ STR(2395) });
				for (IntType p = IntType(0); p < array_length(VarType::CreateRef(sVar(pattern_pattern_list))); p++)
					json_save_array_value(sVar(pattern_pattern_list).Value(p));
				json_save_array_done();
				json_save_array_start({ /*"pattern_color_list"*/ STR(2396) });
				for (IntType c = IntType(0); c < array_length(VarType::CreateRef(sVar(pattern_color_list))); c++)
					json_save_array_value(DsList(global::minecraft_color_name_list).Value(ds_list_find_index(global::minecraft_color_list, sVar(pattern_color_list).Value(c))));
				json_save_array_done();
			}
		}
		else
			if (sVar(type) == e_temp_type_ITEM)
			{
				json_save_object_start({ /*"item"*/ STR(528) });
				json_save_var_save_id(/*"tex"*/ STR(2397), sVar(item_tex));
				json_save_var_save_id(/*"tex_material"*/ STR(2398), sVar(item_tex_material));
				json_save_var_save_id(/*"tex_normal"*/ STR(2399), sVar(item_tex_normal));
				if (idVar(sVar(item_tex), type) == e_res_type_PACK && sVar(item_slot) < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)))
					json_save_var(/*"name"*/ STR(808), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(sVar(item_slot)));
				else
					json_save_var(/*"slot"*/ STR(2402), sVar(item_slot));
				
				json_save_var_bool(/*"3d"*/ STR(1850), sVar(item_3d));
				json_save_var_bool(/*"face_camera"*/ STR(1845), sVar(item_face_camera));
				json_save_var_bool(/*"bounce"*/ STR(2296), sVar(item_bounce));
				json_save_var_bool(/*"spin"*/ STR(2403), sVar(item_spin));
				json_save_object_done();
			}
			else
				if (sVar(type) == e_temp_type_BLOCK)
				{
					json_save_object_start({ /*"block"*/ STR(529) });
					json_save_var(/*"name"*/ STR(808), sVar(block_name));
					json_save_var_state_vars(/*"state"*/ STR(1006), sArr(block_state));
					json_save_var_save_id(/*"tex"*/ STR(2397), sVar(block_tex));
					json_save_var_save_id(/*"tex_material"*/ STR(2398), sVar(block_tex_material));
					json_save_var_save_id(/*"tex_normal"*/ STR(2399), sVar(block_tex_normal));
					json_save_var_bool(/*"randomize"*/ STR(2376), sVar(block_randomize));
					json_save_var_bool(/*"repeat_enable"*/ STR(2406), sVar(block_repeat_enable));
					json_save_var_point3D(/*"repeat"*/ STR(2308), sVar(block_repeat));
					json_save_object_done();
				}
				else
					if (sVar(type) == e_temp_type_SCENERY)
					{
						json_save_var_save_id(/*"scenery"*/ STR(527), sVar(scenery));
						json_save_object_start({ /*"block"*/ STR(529) });
						json_save_var_save_id(/*"tex"*/ STR(2397), sVar(block_tex));
						json_save_var_save_id(/*"tex_material"*/ STR(2398), sVar(block_tex_material));
						json_save_var_save_id(/*"tex_normal"*/ STR(2399), sVar(block_tex_normal));
						json_save_var_bool(/*"repeat_enable"*/ STR(2406), sVar(block_repeat_enable));
						json_save_var_point3D(/*"repeat"*/ STR(2308), sVar(block_repeat));
						json_save_object_done();
					}
					else
						if (sVar(type) == e_temp_type_MODEL)
						{
							json_save_var_save_id(/*"model"*/ STR(536), sVar(model));
							json_save_var_save_id(/*"model_tex"*/ STR(2387), sVar(model_tex));
							json_save_var_save_id(/*"model_tex_material"*/ STR(2388), sVar(model_tex_material));
							json_save_var_save_id(/*"model_tex_normal"*/ STR(2389), sVar(model_tex_normal));
						}
				
			
		
		
		if (type_is_shape(sVar(type)))
		{
			json_save_object_start({ /*"shape"*/ STR(543) });
			json_save_var_save_id(/*"tex"*/ STR(2397), sVar(shape_tex));
			json_save_var_save_id(/*"tex_material"*/ STR(2398), sVar(shape_tex_material));
			json_save_var_save_id(/*"tex_normal"*/ STR(2399), sVar(shape_tex_normal));
			json_save_var_bool(/*"tex_mapped"*/ STR(2407), sVar(shape_tex_mapped));
			json_save_var(/*"tex_hoffset"*/ STR(2408), sVar(shape_tex_hoffset));
			json_save_var(/*"tex_voffset"*/ STR(2409), sVar(shape_tex_voffset));
			json_save_var(/*"tex_hrepeat"*/ STR(2410), sVar(shape_tex_hrepeat));
			json_save_var(/*"tex_vrepeat"*/ STR(2411), sVar(shape_tex_vrepeat));
			json_save_var_bool(/*"tex_hmirror"*/ STR(2412), sVar(shape_tex_hmirror));
			json_save_var_bool(/*"tex_vmirror"*/ STR(2413), sVar(shape_tex_vmirror));
			json_save_var_bool(/*"closed"*/ STR(2414), sVar(shape_closed));
			json_save_var_bool(/*"invert"*/ STR(1835), sVar(shape_invert));
			json_save_var(/*"detail"*/ STR(2415), sVar(shape_detail));
			json_save_var_bool(/*"face_camera"*/ STR(1845), sVar(shape_face_camera));
			json_save_object_done();
		}
		else
			if (sVar(type) == e_temp_type_TEXT)
			{
				json_save_object_start({ /*"text"*/ STR(99) });
				json_save_var_save_id(/*"font"*/ STR(554), sVar(text_font));
				json_save_var_bool(/*"3d"*/ STR(1850), sVar(text_3d));
				json_save_var_bool(/*"face_camera"*/ STR(1845), sVar(text_face_camera));
				json_save_object_done();
			}
			else
				if (sVar(type) == e_temp_type_PARTICLE_SPAWNER)
					project_save_particles(self);
		
		
		json_save_object_done();
	}
	
}
