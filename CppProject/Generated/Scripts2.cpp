/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.07.28 11:53:44 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType action_background_image(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_background_image, fn, sVar(background_image), res);
			}
		
		
		if (sVar(background_image) != null_)
			idInt(sVar(background_image), count)--;
		sVar(background_image) = res;
		if (sVar(background_image) != null_)
			idInt(sVar(background_image), count)++;
		return 0.0;
	}
	
	void action_background_image_box_mapped(ScopeAny self, VarType mapped)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_image_box_mapped, sVar(background_image_box_mapped), mapped, false);
		sVar(background_image_box_mapped) = mapped;
	}
	
	RealType action_background_image_rotation(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_image_rotation, true);
				tl_value_set(self, { e_value_BG_IMAGE_ROTATION, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_image_rotation, sVar(background_image_rotation), sVar(background_image_rotation) * add + val, true);
		}
		sVar(background_image_rotation) = sVar(background_image_rotation) * add + val;
		return 0.0;
	}
	
	void action_background_image_save_map()
	{
		StringType fn = file_dialog_save_image(/*"cube"*/ STR(3));
		if (fn != /*""*/ STR(0))
			sprite_save_lib(ID_spr_map_cube, IntType(0), fn);
	}
	
	RealType action_background_image_show(ScopeAny self, VarType show)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_image_show, true);
				tl_value_set(self, { e_value_BG_IMAGE_SHOW, show, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_image_show, sVar(background_image_show), show, false);
		}
		sVar(background_image_show) = show;
		return 0.0;
	}
	
	void action_background_image_stretch(ScopeAny self, VarType stretch)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_image_stretch, sVar(background_image_stretch), stretch, false);
		sVar(background_image_stretch) = stretch;
	}
	
	void action_background_image_type(ScopeAny self, VarType type)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_image_type, sVar(background_image_type), type, false);
		sVar(background_image_type) = type;
	}
	
	RealType action_background_leaves_acacia_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_acacia_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_ACACIA_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_acacia_color, sVar(background_leaves_acacia_color), color, true);
		}
		sVar(background_leaves_acacia_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_birch_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_birch_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_BIRCH_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_birch_color, sVar(background_leaves_birch_color), color, true);
		}
		sVar(background_leaves_birch_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_dark_oak_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_dark_oak_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_DARK_OAK_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_dark_oak_color, sVar(background_leaves_dark_oak_color), color, true);
		}
		sVar(background_leaves_dark_oak_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_jungle_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_jungle_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_JUNGLE_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_jungle_color, sVar(background_leaves_jungle_color), color, true);
		}
		sVar(background_leaves_jungle_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_mangrove_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_mangrove_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_MANGROVE_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_mangrove_color, sVar(background_leaves_mangrove_color), color, true);
		}
		sVar(background_leaves_mangrove_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_oak_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_oak_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_OAK_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_oak_color, sVar(background_leaves_oak_color), color, true);
		}
		sVar(background_leaves_oak_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_leaves_spruce_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_leaves_spruce_color, true);
				tl_value_set(self, { e_value_BG_LEAVES_SPRUCE_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_leaves_spruce_color, sVar(background_leaves_spruce_color), color, true);
		}
		sVar(background_leaves_spruce_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_night_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_night_color, true);
				tl_value_set(self, { e_value_BG_NIGHT_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_night_color, sVar(background_night_color), color, true);
		}
		sVar(background_night_color) = color;
		return 0.0;
	}
	
	RealType action_background_sky_clouds_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_clouds_color, true);
				tl_value_set(self, { e_value_BG_SKY_CLOUDS_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_clouds_color, sVar(background_sky_clouds_color), color, true);
		}
		sVar(background_sky_clouds_color) = color;
		return 0.0;
	}
	
	RealType action_background_sky_clouds_height(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_clouds_height, true);
				tl_value_set(self, { e_value_BG_SKY_CLOUDS_HEIGHT, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_clouds_height, sVar(background_sky_clouds_height), sVar(background_sky_clouds_height) * add + val, true);
		}
		sVar(background_sky_clouds_height) = sVar(background_sky_clouds_height) * add + val;
		return 0.0;
	}
	
	void action_background_sky_clouds_mode(ScopeAny self, VarType mode)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_sky_clouds_mode, sVar(background_sky_clouds_mode), mode, false);
		sVar(background_sky_clouds_mode) = mode;
		background_sky_update_clouds(self);
	}
	
	RealType action_background_sky_clouds_offset(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_clouds_offset, true);
				tl_value_set(self, { e_value_BG_SKY_CLOUDS_OFFSET, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_clouds_offset, sVar(background_sky_clouds_offset), sVar(background_sky_clouds_offset) * add + val, IntType(1));
		}
		sVar(background_sky_clouds_offset) = sVar(background_sky_clouds_offset) * add + val;
		return 0.0;
	}
	
	RealType action_background_sky_clouds_show(ScopeAny self, VarType show)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_clouds_show, true);
				tl_value_set(self, { e_value_BG_SKY_CLOUDS_SHOW, show, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_clouds_show, sVar(background_sky_clouds_show), show, false);
		}
		sVar(background_sky_clouds_show) = show;
		return 0.0;
	}
	
	void action_background_sky_clouds_size(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_sky_clouds_size, sVar(background_sky_clouds_size), sVar(background_sky_clouds_size) * add + val, true);
		sVar(background_sky_clouds_size) = sVar(background_sky_clouds_size) * add + val;
		background_sky_update_clouds(self);
	}
	
	RealType action_background_sky_clouds_speed(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_clouds_speed, true);
				tl_value_set(self, { e_value_BG_SKY_CLOUDS_SPEED, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_clouds_speed, sVar(background_sky_clouds_speed), sVar(background_sky_clouds_speed) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_sky_clouds_speed) = sVar(background_sky_clouds_speed) * add + val / 100.0;
		return 0.0;
	}
	
	RealType action_background_sky_clouds_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_background_sky_clouds_tex, fn, sVar(background_sky_clouds_tex), res);
			}
		
		
		idInt(sVar(background_sky_clouds_tex), count)--;
		sVar(background_sky_clouds_tex) = res;
		idInt(sVar(background_sky_clouds_tex), count)++;
		background_sky_update_clouds(self);
		return 0.0;
	}
	
	void action_background_sky_clouds_thickness(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_background_sky_clouds_thickness, sVar(background_sky_clouds_thickness), sVar(background_sky_clouds_thickness) * add + val, IntType(1));
		sVar(background_sky_clouds_thickness) = sVar(background_sky_clouds_thickness) * add + val;
		background_sky_update_clouds(self);
	}
	
	RealType action_background_sky_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_color, true);
				tl_value_set(self, { e_value_BG_SKY_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_color, sVar(background_sky_color), color, true);
		}
		sVar(background_sky_color) = color;
		return 0.0;
	}
	
	RealType action_background_sky_moon_angle(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_moon_angle, true);
				tl_value_set(self, { e_value_BG_SKY_MOON_ANGLE, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_moon_angle, sVar(background_sky_moon_angle), sVar(background_sky_moon_angle) * add + val, true);
		}
		sVar(background_sky_moon_angle) = sVar(background_sky_moon_angle) * add + val;
		return 0.0;
	}
	
	RealType action_background_sky_moon_phase(ScopeAny self, VarType phase)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_moon_phase, false);
				tl_value_set(self, { e_value_BG_SKY_MOON_PHASE, phase, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_moon_phase, sVar(background_sky_moon_phase), phase, true);
		}
		sVar(background_sky_moon_phase) = phase;
		return 0.0;
	}
	
	RealType action_background_sky_moon_scale(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_moon_scale, true);
				tl_value_set(self, { e_value_BG_SKY_MOON_SCALE, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_moon_scale, sVar(background_sky_moon_scale), sVar(background_sky_moon_scale) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_sky_moon_scale) = sVar(background_sky_moon_scale) * add + val / 100.0;
		return 0.0;
	}
	
	RealType action_background_sky_moon_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_background_sky_moon_tex, fn, sVar(background_sky_moon_tex), res);
			}
		
		
		idInt(sVar(background_sky_moon_tex), count)--;
		sVar(background_sky_moon_tex) = res;
		idInt(sVar(background_sky_moon_tex), count)++;
		return 0.0;
	}
	
	RealType action_background_sky_rotation(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_rotation, true);
				tl_value_set(self, { e_value_BG_SKY_ROTATION, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_rotation, sVar(background_sky_rotation), sVar(background_sky_rotation) * add + val, true);
		}
		sVar(background_sky_rotation) = sVar(background_sky_rotation) * add + val;
		return 0.0;
	}
	
	RealType action_background_sky_sun_angle(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_sun_angle, true);
				tl_value_set(self, { e_value_BG_SKY_SUN_ANGLE, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_sun_angle, sVar(background_sky_sun_angle), sVar(background_sky_sun_angle) * add + val, true);
		}
		sVar(background_sky_sun_angle) = sVar(background_sky_sun_angle) * add + val;
		return 0.0;
	}
	
	RealType action_background_sky_sun_scale(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_sun_scale, true);
				tl_value_set(self, { e_value_BG_SKY_SUN_SCALE, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_sun_scale, sVar(background_sky_sun_scale), sVar(background_sky_sun_scale) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_sky_sun_scale) = sVar(background_sky_sun_scale) * add + val / 100.0;
		return 0.0;
	}
	
	RealType action_background_sky_sun_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_TEXTURE);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_background_sky_sun_tex, fn, sVar(background_sky_sun_tex), res);
			}
		
		
		idInt(sVar(background_sky_sun_tex), count)--;
		sVar(background_sky_sun_tex) = res;
		idInt(sVar(background_sky_sun_tex), count)++;
		return 0.0;
	}
	
	RealType action_background_sky_time(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sky_time, true);
				tl_value_set(self, { e_value_BG_SKY_TIME, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sky_time, sVar(background_sky_time), sVar(background_sky_time) * add + val, true);
		}
		sVar(background_sky_time) = sVar(background_sky_time) * add + val;
		return 0.0;
	}
	
	RealType action_background_sunlight_angle(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sunlight_angle, true);
				tl_value_set(self, { e_value_BG_SUNLIGHT_ANGLE, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sunlight_angle, sVar(background_sunlight_angle), sVar(background_sunlight_angle) * add + val, true);
		}
		sVar(background_sunlight_angle) = sVar(background_sunlight_angle) * add + val;
		return 0.0;
	}
	
	RealType action_background_sunlight_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sunlight_color, true);
				tl_value_set(self, { e_value_BG_SUNLIGHT_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sunlight_color, sVar(background_sunlight_color), color, true);
		}
		sVar(background_sunlight_color) = color;
		return 0.0;
	}
	
	RealType action_background_sunlight_strength(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_sunlight_strength, true);
				tl_value_set(self, { e_value_BG_SUNLIGHT_STRENGTH, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_sunlight_strength, sVar(background_sunlight_strength), sVar(background_sunlight_strength) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_sunlight_strength) = sVar(background_sunlight_strength) * add + val / 100.0;
		if (sVar(background_sunlight_strength) == IntType(0))
			sVar(background_sunlight_strength) = IntType(0);
		return 0.0;
	}
	
	RealType action_background_texture_animation_speed(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_texture_animation_speed, true);
				tl_value_set(self, { e_value_BG_TEXTURE_ANI_SPEED, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_texture_animation_speed, sVar(background_texture_animation_speed), sVar(background_texture_animation_speed) * add + val, true);
		}
		sVar(background_texture_animation_speed) = sVar(background_texture_animation_speed) * add + val;
		return 0.0;
	}
	
	RealType action_background_twilight(ScopeAny self, VarType twilight)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_twilight, true);
				tl_value_set(self, { e_value_BG_TWILIGHT, twilight, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_twilight, sVar(background_twilight), twilight, false);
		}
		sVar(background_twilight) = twilight;
		return 0.0;
	}
	
	RealType action_background_water_color(ScopeAny self, VarType color)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_water_color, true);
				tl_value_set(self, { e_value_BG_WATER_COLOR, color, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_water_color, sVar(background_water_color), color, true);
		}
		sVar(background_water_color) = color;
		withAll (obj_resource, self->id)
			res_update_colors(ScopeAny(self));
		
		ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
		return 0.0;
	}
	
	RealType action_background_wind(ScopeAny self, VarType wind)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind, true);
				tl_value_set(self, { e_value_BG_WIND, wind, false });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind, sVar(background_wind), wind, false);
		}
		sVar(background_wind) = wind;
		return 0.0;
	}
	
	RealType action_background_wind_direction(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind_direction, true);
				tl_value_set(self, { e_value_BG_WIND_DIRECTION, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind_direction, sVar(background_wind_direction), sVar(background_wind_direction) * add + val, true);
		}
		sVar(background_wind_direction) = sVar(background_wind_direction) * add + val;
		return 0.0;
	}
	
	RealType action_background_wind_directional_speed(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind_directional_speed, true);
				tl_value_set(self, { e_value_BG_WIND_DIRECTIONAL_SPEED, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind_directional_speed, sVar(background_wind_directional_speed), sVar(background_wind_directional_speed) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_wind_directional_speed) = sVar(background_wind_directional_speed) * add + val / 100.0;
		return 0.0;
	}
	
	RealType action_background_wind_directional_strength(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind_directional_strength, true);
				tl_value_set(self, { e_value_BG_WIND_DIRECTIONAL_STRENGTH, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind_directional_strength, sVar(background_wind_directional_strength), sVar(background_wind_directional_strength) * add + val, true);
		}
		sVar(background_wind_directional_strength) = sVar(background_wind_directional_strength) * add + val;
		return 0.0;
	}
	
	RealType action_background_wind_speed(ScopeAny self, RealType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind_speed, true);
				tl_value_set(self, { e_value_BG_WIND_SPEED, val / 100.0, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind_speed, sVar(background_wind_speed), sVar(background_wind_speed) * add + val / 100.0, true);
		}
		else
			val *= 100.0;
		
		sVar(background_wind_speed) = sVar(background_wind_speed) * add + val / 100.0;
		return 0.0;
	}
	
	RealType action_background_wind_strength(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			if (action_tl_select_single(self, { null_, e_tl_type_BACKGROUND }))
			{
				tl_value_set_start(self, ID_action_background_wind_strength, true);
				tl_value_set(self, { e_value_BG_WIND_STRENGTH, val, add });
				tl_value_set_done();
				return IntType(0);
			}
			history_set_var(self, ID_action_background_wind_strength, sVar(background_wind_strength), sVar(background_wind_strength) * add + val, true);
		}
		sVar(background_wind_strength) = sVar(background_wind_strength) * add + val;
		return 0.0;
	}
	
	RealType action_bench_block_name(ScopeAny self, VarType block)
	{
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			if (self->block_name == block)
				return IntType(0);
			self->block_name = block;
			self->block_state = array_copy_1d(ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(sVar(block_name)))->default_state);
			temp_update_block(ScopeAny(self));
			ObjType(obj_preview, self->preview)->update = true;
		}
		
		return 0.0;
	}
	
	RealType action_bench_block_state(ScopeAny self, StringType val)
	{
		VarType state;
		state = idVar(sInt(menu_block_state), name);
		withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
		{
			if (state_vars_get_value(self->block_state, state) == val)
				return IntType(0);
			state_vars_set_value(VarType::CreateRef(self->block_state), state, val);
			temp_update_block(ScopeAny(self));
			ObjType(obj_preview, self->preview)->update = true;
		}
		
		return 0.0;
	}
	
	RealType action_bench_block_tex(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_block_tex, fn, ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->block_tex = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	RealType action_bench_block_tex_material(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_block_tex_material, fn, ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	RealType action_bench_block_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_block_tex_normal, fn, ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_bench_create(ScopeAny self, BoolType edit)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType s = IntType(0); s < self->spawn_amount; s++)
				{
					withOne (Object, save_id_find(self->spawn_save_id.Value(s)), self->id)
					{
						if (self->subAssetId == ID_obj_timeline)
							tl_remove_clean(self);
						instance_destroy(self);
					}
					
				}
			}
			
		}
		else
		{
			IntType hobj, tl;
			hobj = null_;
			if (sReal(history_redo) > 0)
			{
				history_restore_bench(self, ObjType(obj_history, global::history_data)->bench_save_obj);
				if (ObjType(obj_history, global::history_data)->open_editor)
				{
					tab_template_editor_update_ptype_list(self);
					tab_show(self, sInt(template_editor));
				}
			}
			else
			{
				hobj = history_set(self, ID_action_bench_create);
				ObjType(obj_history, hobj)->bench_save_obj = history_save_bench(self);
				ObjType(obj_history, hobj)->spawn_amount = IntType(0);
				ObjType(obj_history, hobj)->open_editor = edit;
				if (edit)
					tab_show(self, sInt(template_editor));
			}
			
			if (type_is_timeline(ObjType(obj_bench_settings, sInt(bench_settings))->type))
			{
				tl = new_tl(ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_LIGHT_SOURCE ? ObjType(obj_bench_settings, sInt(bench_settings))->light_type : ObjType(obj_bench_settings, sInt(bench_settings))->type);
				withOne (obj_history, hobj, self->id)
				{
					self->spawn_save_id[self->spawn_amount] = ObjType(obj_timeline, tl)->save_id;
					self->spawn_amount++;
				}
				
				if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_CAMERA)
					ObjType(obj_view, sInt(view_second))->show = true;
			}
			else
			{
				withOne (obj_bench_settings, sInt(bench_settings), self->id)
				{
					IntType temp = temp_duplicate(ScopeAny(self));
					if (ObjType(obj_template, temp)->type != e_temp_type_CUBE && ObjType(obj_template, temp)->type != e_temp_type_CYLINDER && ObjType(obj_template, temp)->type != e_temp_type_CONE)
						ObjType(obj_template, temp)->shape_tex_mapped = false;
					if (ObjType(obj_template, temp)->type == e_temp_type_PARTICLE_SPAWNER)
						ObjType(obj_template, temp)->pc_spawn_region_path = null_;
					withOne (obj_history, hobj, self->id)
					{
						self->spawn_save_id[self->spawn_amount] = ObjType(obj_template, temp)->save_id;
						self->spawn_amount++;
					}
					
					withOne (obj_template, temp, self->id)
					{
						if (self->type != e_temp_type_MODEL && self->model != null_)
						{
							idInt(self->model, count)--;
							self->model = null_;
						}
						if (self->type != e_temp_type_CHARACTER && self->type != e_temp_type_SPECIAL_BLOCK && self->type != e_temp_type_BODYPART && self->type != e_temp_type_MODEL)
						{
							if (self->model_tex != null_)
								idInt(self->model_tex, count)--;
							if (self->model_tex_material != null_)
								idInt(self->model_tex_material, count)--;
							if (self->model_tex_normal != null_)
								idInt(self->model_tex_normal, count)--;
							self->model_tex = null_;
							self->model_tex_material = null_;
							self->model_tex_normal = null_;
							self->model_file = null_;
							self->model_part = null_;
							self->model_state = ArrType();
						}
						if (self->type != e_temp_type_ITEM)
						{
							idInt(self->item_tex, count)--;
							if (self->item_tex_material != null_)
								idInt(self->item_tex_material, count)--;
							if (self->item_tex_normal != null_)
								idInt(self->item_tex_normal, count)--;
							self->item_tex = null_;
							self->item_tex_material = null_;
							self->item_tex_normal = null_;
						}
						if (self->type != e_temp_type_BLOCK && self->type != e_temp_type_SCENERY)
						{
							idInt(self->block_tex, count)--;
							self->block_tex = null_;
							idInt(self->block_tex_material, count)--;
							self->block_tex_material = null_;
							idInt(self->block_tex_normal, count)--;
							self->block_tex_normal = null_;
							self->block_state = ArrType();
						}
						if (self->type != e_temp_type_SCENERY && self->scenery != null_)
						{
							idInt(self->scenery, count)--;
							self->scenery = null_;
						}
						if (!type_is_shape(self->type))
						{
							if (self->shape_tex != null_)
							{
								if (idVar(self->shape_tex, type) != e_tl_type_CAMERA)
									idInt(self->shape_tex, count)--;
								self->shape_tex = null_;
							}
							if (self->shape_tex_material != null_)
							{
								idInt(self->shape_tex_material, count)--;
								self->shape_tex_material = null_;
							}
							if (self->shape_tex_normal != null_)
							{
								idInt(self->shape_tex_normal, count)--;
								self->shape_tex_normal = null_;
							}
						}
						if (self->type != e_temp_type_TEXT)
						{
							idInt(self->text_font, count)--;
							self->text_font = null_;
						}
						tl = temp_animate(ScopeAny(self));
						sortlist_add(global::_app->lib_list, self->id);
					}
					
					global::temp_edit = temp;
				}
				
				withAll (obj_template, self->id)
				{
					if (self->creator != global::_app->bench_settings)
						continue;
					sortlist_add(global::_app->lib_list, self->id);
					self->creator = global::_app->id;
					if (self->model_tex != null_)
						idInt(self->model_tex, count)++;
					if (self->model_tex_material != null_)
						idInt(self->model_tex_material, count)++;
					if (self->model_tex_normal != null_)
						idInt(self->model_tex_normal, count)++;
					if (self->item_tex != null_)
						idInt(self->item_tex, count)++;
					if (self->item_tex_material != null_)
						idInt(self->item_tex_material, count)++;
					if (self->item_tex_normal != null_)
						idInt(self->item_tex_normal, count)++;
					if (self->block_tex != null_)
						idInt(self->block_tex, count)++;
					if (self->block_tex_material != null_)
						idInt(self->block_tex_material, count)++;
					if (self->block_tex_normal != null_)
						idInt(self->block_tex_normal, count)++;
					if (self->scenery > IntType(0))
						idInt(self->scenery, count)++;
					if (self->shape_tex != null_ && idVar(self->shape_tex, type) != e_tl_type_CAMERA)
						idInt(self->shape_tex, count)++;
					if (self->shape_tex_material != null_)
						idInt(self->shape_tex_material, count)++;
					if (self->shape_tex_normal != null_)
						idInt(self->shape_tex_normal, count)++;
					if (self->text_font != null_)
						idInt(self->text_font, count)++;
					withOne (obj_history, hobj, self->id)
					{
						self->spawn_save_id[self->spawn_amount] = ObjType(obj_template, self.otherId)->save_id;
						self->spawn_amount++;
					}
					
				}
				
			}
			
			if (sReal(history_redo) > 0)
			{
				withOne (obj_bench_settings, sInt(bench_settings), self->id)
					temp_particles_type_clear(ScopeAny(self));
				
				withOne (obj_timeline, tl, self->id)
				{
					self->value_default[e_value_POS_X] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_POS_Z);
					self->value_default[e_value_ROT_X] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_X);
					self->value_default[e_value_ROT_Y] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_Y);
					self->value_default[e_value_ROT_Z] = ObjType(obj_history, global::history_data)->value_default.Value(e_value_ROT_Z);
					self->value[e_value_POS_X] = self->value_default.Value(e_value_POS_X);
					self->value[e_value_POS_Y] = self->value_default.Value(e_value_POS_Y);
					self->value[e_value_POS_Z] = self->value_default.Value(e_value_POS_Z);
					self->value[e_value_ROT_X] = self->value_default.Value(e_value_ROT_X);
					self->value[e_value_ROT_Y] = self->value_default.Value(e_value_ROT_Y);
					self->value[e_value_ROT_Z] = self->value_default.Value(e_value_ROT_Z);
				}
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
				{
					self->value_default[e_value_POS_X] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_X);
					self->value_default[e_value_POS_Y] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_Y);
					self->value_default[e_value_POS_Z] = ObjType(obj_timeline, tl)->value_default.Value(e_value_POS_Z);
					self->value_default[e_value_ROT_X] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_X);
					self->value_default[e_value_ROT_Y] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_Y);
					self->value_default[e_value_ROT_Z] = ObjType(obj_timeline, tl)->value_default.Value(e_value_ROT_Z);
				}
				
				if (sVar(setting_place_new) > 0 && !keyboard_check(vk_shift) && ObjType(obj_timeline, tl)->type != e_tl_type_FOLDER && ObjType(obj_timeline, tl)->type != e_tl_type_CAMERA && (ObjType(obj_timeline, tl)->type != e_tl_type_SCENERY || idVar(ObjType(obj_timeline, tl)->temp, scenery) != null_) && (ObjType(obj_timeline, tl)->type != e_tl_type_MODEL || idVar(ObjType(obj_timeline, tl)->temp, model) != null_) && ObjType(obj_timeline, tl)->value_type.Value(e_value_type_TRANSFORM_POS))
					app_start_place(self, tl, true);
				log({ /*"Created"*/ STR(4), DsList(global::tl_type_name_list).Value(ObjType(obj_bench_settings, sInt(bench_settings))->type) });
			}
			
		}
		
		if (!(sReal(history_redo) > 0) && edit)
			tab_template_editor_update_ptype_list(self);
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_PARTICLE_SPAWNER)
		{
			if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
				bench_update_particles_list(self);
			particle_spawner_clear(self);
			preview_reset_view(self);
			sBool(update) = true;
		}
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
}
