/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 22:36:38 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	StringType res_load_browse(ScopeAny self)
	{
		StringType fn;
		switch ((IntType)sVar(type))
		{
			case e_res_type_PACK:
			{
				fn = file_dialog_open_pack();
				break;
			}
			case e_res_type_SCENERY:
			{
				fn = file_dialog_open_scenery();
				break;
			}
			case e_res_type_FONT:
			{
				fn = file_dialog_open_font();
				break;
			}
			case e_res_type_SOUND:
			{
				fn = file_dialog_open_sound();
				break;
			}
			case e_res_type_MODEL:
			{
				fn = file_dialog_open_model();
				break;
			}
			default:
				fn = file_dialog_open_image();
				break;
		}
		
		if (!file_exists_lib(fn))
			return /*""*/ STR(0);
		return fn;
	}
	
	IntType res_load_legacy_block_sheet(StringType fn, VarType format)
	{
		IntType list;
		if (format >= e_project_FORMAT_100_DEMO_2)
			list = global::legacy_block_100_texture_list;
		else
			if (format == e_project_FORMAT_07_DEMO)
				list = global::legacy_block_07_demo_texture_list;
			else
				list = global::legacy_block_05_texture_list;
		
		
		IntType oldtex;
		RealType sheetwid, blocksize;
		oldtex = texture_create(fn);
		sheetwid = IntType(16);
		if (format >= e_project_FORMAT_100_DEMO_2)
			sheetwid = IntType(32);
		blocksize = ceil(texture_width(oldtex) / sheetwid);
		IntType newsurf, newtex;
		newsurf = surface_create((IntType)(block_sheet_width * blocksize), (IntType)(block_sheet_height * blocksize));
		surface_set_target(newsurf);
		draw_clear_alpha(c_black, 0.0);
		gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
		draw_texture({ ObjType(obj_resource, global::mc_res)->block_sheet_texture, IntType(0), IntType(0), blocksize / 16.0, blocksize / 16.0 });
		draw_texture_start();
		for (IntType i = IntType(0); i < ds_list_size(list); i++)
		{
			VarType name = DsList(list).Value(i);
			if (name == /*""*/ STR(0))
				continue;
			IntType newindex = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), name);
			if (newindex < IntType(0))
			{
				VarType key = ds_map_find_key(global::legacy_block_texture_name_map, name);
				if (is_undefined(key))
				{
					debug({ /*"Could not convert block texture"*/ STR(2612), name });
					continue;
				}
				newindex = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), key);
				if (newindex < IntType(0))
				{
					debug({ /*"Could not convert block texture"*/ STR(2612), key });
					continue;
				}
			}
			RealType oldx, oldy, newx, newy;
			oldx = (mod(i, sheetwid)) * blocksize;
			oldy = ((IntType)(i / sheetwid)) * blocksize;
			newx = (mod(newindex, block_sheet_width)) * blocksize;
			newy = ((IntType)(newindex / block_sheet_width)) * blocksize;
			gpu_set_blendmode(bm_subtract);
			draw_blank(newx, newy, blocksize, blocksize);
			gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
			draw_texture_part({ oldtex, newx, newy, oldx, oldy, blocksize, blocksize });
		}
		draw_texture_done();
		gpu_set_blendmode(bm_normal);
		surface_reset_target();
		newtex = texture_surface(newsurf);
		surface_free(newsurf);
		return newtex;
	}
	
	RealType res_load_pack(ScopeAny self)
	{
		StringType fname = global::load_folder + /*"/"*/ STR(20) + sVar(filename);
		switch (StringType(sStr(load_stage)).id)
		{
			case 1317: // unzip
			{
				debug({ /*"res_load_pack"*/ STR(2613), /*"unzip"*/ STR(1317) });
				if (sVar(type) != e_res_type_PACK_UNZIPPED)
				{
					if (!unzip(fname))
					{
						log({ /*"Error unzipping pack"*/ STR(2614) });
						error(/*"errorunzippack"*/ STR(2615));
						withOne (app, global::_app->id, self->id)
							load_next(ScopeAny(self));
						
						return IntType(0);
					}
				}
				sVar(type) = e_res_type_PACK;
				sStr(load_stage) = /*"modeltextures"*/ STR(1399);
				global::load_assets_dir = unzip_directory;
				res_load_pack_version(self);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadpackmodeltextures"*/ STR(2616) });
					ObjType(obj_popup, global::_app->popup_loading)->progress = 1.0 / 4.0;
				}
				
				break;
			}
			
			case 1399: // modeltextures
			{
				debug({ /*"res_load_pack"*/ STR(2613), /*"modeltextures"*/ STR(1399) });
				res_load_pack_model_textures(self);
				sStr(load_stage) = /*"blocktextures"*/ STR(2617);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadpackblocktextures"*/ STR(2618) });
					ObjType(obj_popup, global::_app->popup_loading)->progress = 2.0 / 4.0;
				}
				
				break;
			}
			
			case 2617: // blocktextures
			{
				debug({ /*"res_load_pack"*/ STR(2613), /*"blocktextures"*/ STR(2617) });
				file_rename_lib(global::load_assets_dir + mc_textures_directory + /*"blocks"*/ STR(1023), global::load_assets_dir + mc_textures_directory + /*"block"*/ STR(4));
				res_load_pack_block_textures(self);
				sStr(load_stage) = /*"itemtextures"*/ STR(2619);
				withOne (app, global::_app->id, self->id)
				{
					ObjType(obj_popup, global::_app->popup_loading)->text = text_get({ /*"loadpackitemtextures"*/ STR(2620) });
					ObjType(obj_popup, global::_app->popup_loading)->progress = 3.0 / 4.0;
				}
				
				break;
			}
			
			case 2619: // itemtextures
			{
				debug({ /*"res_load_pack"*/ STR(2613), /*"itemtextures"*/ STR(2619) });
				file_rename_lib(global::load_assets_dir + mc_textures_directory + /*"items"*/ STR(2621), global::load_assets_dir + mc_textures_directory + /*"item"*/ STR(549));
				res_load_pack_item_textures(self, /*"diffuse"*/ STR(635), /*""*/ STR(0));
				res_load_pack_item_textures(self, /*"material"*/ STR(640), /*"_s"*/ STR(2622));
				res_load_pack_item_textures(self, /*"normal"*/ STR(629), /*"_n"*/ STR(2623));
				res_load_pack_particle_textures(self);
				res_load_pack_misc(self);
				res_update_colors(self);
				sBool(ready) = true;
				global::_app->history_resource_update = true;
				log({ /*"Pack loaded"*/ STR(2624) });
				move_all_to_texture_page();
				withAll (obj_template, self->id)
					if (self->item_tex == self.otherId)
						render_generate_item(ScopeAny(self));
				
				withAll (obj_particle_type, self->id)
					if (self->sprite_tex == self.otherId || self->sprite_template_tex == self.otherId)
						ptype_update_sprite_vbuffers(ScopeAny(self));
				
				withOne (obj_bench_settings, global::_app->bench_settings, self->id)
					if (self->item_tex == self.otherId)
						render_generate_item(ScopeAny(self));
				
				withOne (app, global::_app->id, self->id)
				{
					if (global::_app->background_ground_tex == self.otherId)
						background_ground_update_texture(ScopeAny(self));
					if (global::_app->background_ground_tex_material == self.otherId)
						background_ground_update_texture_material(ScopeAny(self));
					if (global::_app->background_ground_tex_normal == self.otherId)
						background_ground_update_texture_normal(ScopeAny(self));
					if (global::_app->background_sky_clouds_tex == self.otherId)
						background_sky_update_clouds(ScopeAny(self));
					load_next(ScopeAny(self));
				}
				
				break;
			}
			
		}
		
		return 0.0;
	}
	
	void res_load_pack_block_sheet(ScopeAny self, StringType type, StringType suffix)
	{
		VarType blocksize;
		IntType texlist, texanilist, surf, fileslist;
		ArrType anisurf;
		blocksize = null_;
		fileslist = null_;
		debug_timer_start();
		if (dev_mode_debug_unused)
		{
			ArrType filesarr = file_find(global::load_assets_dir + mc_textures_directory + /*"block/"*/ STR(821), /*".png"*/ STR(10));
			fileslist = ds_list_create();
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(filesarr)); i++)
				ds_list_add({ fileslist, filesarr.Value(i) });
		}
		log({ /*"Block textures"*/ STR(2625), type, /*"load static"*/ STR(2626) });
		texlist = ds_list_create();
		for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)); t++)
		{
			StringType name, fname;
			name = string_replace(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(t), /*" opaque"*/ STR(861), /*""*/ STR(0));
			name = string_replace(name, /*" noalpha"*/ STR(862), /*""*/ STR(0));
			fname = global::load_assets_dir + mc_textures_directory + name + suffix + /*".png"*/ STR(10);
			if (!file_exists_lib(fname) && !is_undefined(DsMap(global::legacy_block_texture_name_map).Value(name)))
				fname = global::load_assets_dir + mc_textures_directory + DsMap(global::legacy_block_texture_name_map).Value(name) + suffix + /*".png"*/ STR(10);
			if (file_exists_lib(fname))
			{
				IntType tex = texture_create(fname);
				blocksize = max({ blocksize, texture_width(tex) });
				ds_list_add({ texlist, tex });
				if (dev_mode_debug_unused)
					ds_list_delete_value(fileslist, fname);
			}
			else
			{
				if (dev_mode)
					log({ /*"Block texture not found"*/ STR(2627), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(t) + suffix });
				ds_list_add({ texlist, null_ });
			}
			
		}
		log({ /*"Block textures"*/ STR(2625), type, /*"load animated"*/ STR(2628) });
		texanilist = ds_list_create();
		for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list)); t++)
		{
			StringType name, fname;
			name = string_replace(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list).Value(t), /*" opaque"*/ STR(861), /*""*/ STR(0));
			fname = global::load_assets_dir + mc_textures_directory + name + suffix + /*".png"*/ STR(10);
			if (!file_exists_lib(fname) && !is_undefined(DsMap(global::legacy_block_texture_name_map).Value(name)))
				fname = global::load_assets_dir + mc_textures_directory + DsMap(global::legacy_block_texture_name_map).Value(name) + suffix + /*".png"*/ STR(10);
			if (file_exists_lib(fname))
			{
				IntType tex = texture_create(fname);
				ds_list_add({ texanilist, tex });
				if (fileslist != null_)
					ds_list_delete_value(fileslist, fname);
			}
			else
			{
				if (dev_mode)
					log({ /*"Animated block texture not found"*/ STR(2629), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list).Value(t) + suffix });
				ds_list_add({ texanilist, null_ });
			}
			
		}
		if (fileslist != null_)
		{
			ds_list_sort(fileslist, true);
			if (ds_list_size(fileslist) > IntType(0))
			{
				StringType str = /*"The following block textures were unused:\n"*/ STR(2630);
				for (IntType i = IntType(0); i < ds_list_size(fileslist); i++)
					str += /*"  "*/ STR(1784) + filename_name(DsList(fileslist).Value(i)) + /*"\n"*/ STR(710);
				log({ str });
			}
			ds_list_destroy(fileslist);
		}
		if (blocksize == null_)
			blocksize = block_size_;
		log({ /*"Block textures, blocksize"*/ STR(2631), type, blocksize });
		draw_texture_start();
		surf = surface_create((IntType)(block_sheet_width * blocksize), (IntType)(block_sheet_height * blocksize));
		log({ /*"Block textures"*/ STR(2625), /*"static block surface"*/ STR(2632) });
		surface_set_target(surf);
	{
		gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
		draw_clear_alpha(c_black, 0.0);
		for (IntType t = IntType(0); t < ds_list_size(texlist); t++)
		{
			IntType tex;
			RealType dx, dy;
			tex = DsList(texlist).Value(t);
			dx = (mod(t, block_sheet_width)) * blocksize;
			dy = ((IntType)(t / block_sheet_width)) * blocksize;
			if (tex != null_)
			{
				RealType texwid, scale;
				texwid = texture_width(tex);
				scale = (RealType)blocksize / texwid;
				if (string_contains(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(t), /*" opaque"*/ STR(861)))
					draw_box(dx, dy, blocksize, blocksize, false, c_black, IntType(1));
				draw_texture_part({ tex, dx, dy, IntType(0), IntType(0), texwid, texwid, scale, scale });
				if (type == /*"normal"*/ STR(629) || string_contains(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(t), /*" noalpha"*/ STR(862)))
				{
					gpu_set_blendmode_ext_sepalpha(bm_src_color, bm_one, bm_one, bm_one);
					draw_texture_part({ tex, dx, dy, IntType(0), IntType(0), texwid, texwid, scale, scale, c_black, IntType(1) });
					gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
				}
			}
			else
			{
				if (type == /*"diffuse"*/ STR(635))
				{
					if (self->id != global::mc_res)
					{
						draw_texture_part({ ObjType(obj_resource, global::mc_res)->block_sheet_texture, dx, dy, (mod(t, block_sheet_width)) * block_size_, ((IntType)(t / block_sheet_width)) * block_size_, block_size_, block_size_, (RealType)blocksize / block_size_, (RealType)blocksize / block_size_ });
					}
					else
						draw_missing(dx, dy, blocksize, blocksize);
					
				}
				else
					if (type == /*"material"*/ STR(640))
						draw_box(dx, dy, blocksize, blocksize, false, c_black, IntType(1));
					else
						if (type == /*"normal"*/ STR(629))
							draw_box(dx, dy, blocksize, blocksize, false, c_normal, IntType(1));
				
				
			}
			
		}
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		draw_texture_done();
		if (self->id == global::mc_res)
		{
			IntType previewsurf = surface_create((IntType)(block_sheet_width), (IntType)(block_sheet_height));
			log({ /*"Block textures"*/ STR(2625), /*"static block preview"*/ STR(2633) });
			surface_set_target(previewsurf);
		{
			gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
			gpu_set_tex_filter(true);
			draw_clear_alpha(c_black, 0.0);
			draw_surface_ext(surf, IntType(0), IntType(0), 1.0 / block_size_, 1.0 / block_size_, 0.0, c_white, 1.0);
			gpu_set_tex_filter(false);
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
			global::load_assets_block_preview_buffer = buffer_create((IntType)(block_sheet_width * block_sheet_height * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::load_assets_block_preview_buffer, previewsurf, IntType(0));
		}
		if (type == /*"diffuse"*/ STR(635))
			sInt(block_sheet_texture) = texture_surface(surf);
		else
			if (type == /*"material"*/ STR(640))
				sInt(block_sheet_texture_material) = texture_surface(surf);
			else
				if (type == /*"normal"*/ STR(629))
					sInt(block_sheet_tex_normal) = texture_surface(surf);
		
		
		log({ /*"Block textures"*/ STR(2625), type, /*"animated block surfaces"*/ STR(2634) });
		for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
			anisurf[f] = surface_create((IntType)(block_sheet_ani_width * blocksize), (IntType)(block_sheet_ani_height * blocksize));
		draw_texture_start();
		gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
		log({ /*"Block textures"*/ STR(2625), type, /*"animated frames"*/ STR(2635) });
		for (IntType t = IntType(0); t < ds_list_size(texanilist); t++)
		{
			IntType tex;
			RealType dx, dy;
			tex = DsList(texanilist).Value(t);
			dx = (mod(t, block_sheet_ani_width)) * blocksize;
			dy = ((IntType)(t / block_sheet_ani_width)) * blocksize;
			VarType framefade, frametime, framelist;
			RealType opaque;
			StringType fname;
			VarType texwid;
			RealType images, aniframes, anilength, aniloops;
			framefade = false;
			frametime = IntType(1);
			framelist = null_;
			opaque = string_contains(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list).Value(t), /*" opaque"*/ STR(861));
			fname = global::load_assets_dir + mc_textures_directory + DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list).Value(t) + suffix + /*".png.mcmeta"*/ STR(2636);
			if (file_exists_lib(fname))
			{
				IntType map = json_load({ fname });
				if (ds_map_valid(map))
				{
					VarType animation = DsMap(map).Value(/*"animation"*/ STR(2637));
					if (!is_undefined(animation))
					{
						if (!is_undefined(DsMap(animation).Value(/*"interpolate"*/ STR(2638))))
							framefade = DsMap(animation).Value(/*"interpolate"*/ STR(2638));
						if (!is_undefined(DsMap(animation).Value(/*"frametime"*/ STR(2639))))
							frametime = DsMap(animation).Value(/*"frametime"*/ STR(2639));
						if (!is_undefined(DsMap(animation).Value(/*"frames"*/ STR(1813))))
							framelist = DsMap(animation).Value(/*"frames"*/ STR(1813));
					}
				}
			}
			if (tex != null_)
			{
				texwid = texture_width(tex);
				images = texture_height(tex) / texwid;
			}
			else
			{
				texwid = blocksize;
				images = IntType(1);
			}
			
			if (framelist != null_)
				aniframes = ds_list_size((IntType)(framelist));
			else
				aniframes = images;
			
			anilength = aniframes * frametime;
			if (anilength > block_sheet_ani_frames * 1.5)
			{
				aniframes = IntType(1);
				anilength = IntType(1);
			}
			aniloops = max({ IntType(1), round(block_sheet_ani_frames / anilength) });
			for (RealType f = IntType(0); f < block_sheet_ani_frames; f++)
			{
				VarType aniprogress = snap(frac(f / (block_sheet_ani_frames / aniloops)), 1.0 / block_sheet_ani_frames);
				surface_set_target(anisurf.Value(f));
			{
				if (t == IntType(0))
					draw_clear_alpha(c_black, 0.0);
				if (tex != null_)
				{
					VarType image, nextimage;
					image = aniprogress * aniframes;
					nextimage = floor(image) + IntType(1);
					if (framelist != null_)
					{
						nextimage = DsList(framelist).Value(mod((floor(image) + IntType(1)), ds_list_size((IntType)(framelist))));
						image = DsList(framelist).Value(mod(floor(image), ds_list_size((IntType)(framelist)))) + frac(image);
					}
					image = mod(image, images);
					nextimage = mod(nextimage, images);
					if (opaque > 0)
						draw_box(dx, dy, blocksize, blocksize, false, c_black, IntType(1));
					draw_texture_part({ tex, dx, dy, IntType(0), floor(image) * texwid, blocksize, blocksize });
					if (opaque > 0)
					{
						gpu_set_blendmode_ext_sepalpha(bm_src_color, bm_one, bm_one, bm_one);
						draw_texture_part({ tex, dx, dy, IntType(0), floor(image) * texwid, blocksize, blocksize, IntType(1), IntType(1), c_black, IntType(1) });
						gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
					}
					if (framefade > 0)
					{
						gpu_set_blendmode_ext_sepalpha(bm_src_alpha, bm_inv_src_alpha, bm_one, bm_inv_src_alpha);
						draw_texture_part({ tex, dx, dy, IntType(0), nextimage * texwid, blocksize, blocksize, IntType(1), IntType(1), c_white, frac(image) });
						gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
					}
				}
				else
				{
					if (type == /*"diffuse"*/ STR(635))
					{
						if (self->id != global::mc_res)
						{
							draw_texture_part({ ObjType(obj_resource, global::mc_res)->block_sheet_ani_texture.Value(f), dx, dy, (mod(t, block_sheet_ani_width)) * block_size_, ((IntType)(t / block_sheet_ani_width)) * block_size_, block_size_, block_size_, (RealType)blocksize / block_size_, (RealType)blocksize / block_size_ });
						}
						else
							draw_missing(dx, dy, blocksize, blocksize);
						
					}
					else
						if (type == /*"material"*/ STR(640))
							draw_box(dx, dy, blocksize, blocksize, false, c_black, IntType(1));
					
				}
				
			}
				surface_reset_target();
			}
		}
		gpu_set_blendmode(bm_normal);
		draw_texture_done();
		if (self->id == global::mc_res)
		{
			log({ /*"Block textures"*/ STR(2625), /*"animated block preview"*/ STR(2640) });
			IntType previewanisurf = surface_create((IntType)(block_sheet_ani_width), (IntType)(block_sheet_ani_height));
			surface_set_target(previewanisurf);
		{
			draw_clear_alpha(c_black, 0.0);
			draw_surface_ext(anisurf.Value(IntType(0)), IntType(0), IntType(0), 1.0 / block_size_, 1.0 / block_size_, 0.0, c_white, 1.0);
		}
			surface_reset_target();
			global::load_assets_block_preview_ani_buffer = buffer_create((IntType)(block_sheet_ani_width * block_sheet_ani_height * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::load_assets_block_preview_ani_buffer, previewanisurf, IntType(0));
		}
		if (type == /*"diffuse"*/ STR(635))
		{
			ArrType samplepos;
			RealType sampleposamount;
			samplepos[IntType(0)] = point2D((RealType)blocksize / 2.0, (RealType)blocksize / 2.0);
			samplepos[IntType(1)] = point2D(IntType(0), (RealType)blocksize / 2.0);
			samplepos[IntType(2)] = point2D((RealType)blocksize / 2.0, IntType(0));
			samplepos[IntType(3)] = point2D(blocksize - IntType(1), (RealType)blocksize / 2.0);
			samplepos[IntType(4)] = point2D((RealType)blocksize / 2.0, blocksize - IntType(1));
			samplepos[IntType(5)] = point2D((RealType)blocksize / 4.0, (RealType)blocksize / 4.0);
			samplepos[IntType(6)] = point2D(IntType(0), IntType(0));
			samplepos[IntType(7)] = point2D(blocksize - IntType(1), blocksize - IntType(1));
			sampleposamount = IntType(8);
			log({ /*"Block textures"*/ STR(2625), /*"find static block depths"*/ STR(2641) });
			global::buffer_current = buffer_create((IntType)(surface_get_width(surf) * surface_get_height(surf) * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::buffer_current, surf, IntType(0));
			IntType wid = surface_get_width(surf);
			sInt(block_sheet_depth_list) = ds_list_create();
			for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)); t++)
			{
				if (DsList(texlist).Value(t) == null_)
				{
					ds_list_add({ sInt(block_sheet_depth_list), e_block_depth_DEPTH0 });
					continue;
				}
				RealType opaque = string_contains(DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(t), /*"leaves"*/ STR(896));
				if (opaque > 0)
				{
					ds_list_add({ sInt(block_sheet_depth_list), e_block_depth_DEPTH1 });
					continue;
				}
				RealType bx, by;
				IntType dep;
				bx = (mod(t, block_sheet_width)) * blocksize;
				by = ((IntType)(t / block_sheet_width)) * blocksize;
				dep = e_block_depth_DEPTH0;
				for (IntType s = IntType(0); s < sampleposamount; s++)
				{
					VecType spos;
					RealType alpha;
					spos = samplepos.Value(s);
					alpha = buffer_read_alpha(bx + spos.Real(X_), by + spos.Real(Y_), wid);
					if (alpha < IntType(1))
						dep = e_block_depth_DEPTH1;
					if (alpha > IntType(0) && alpha < IntType(1))
					{
						dep = e_block_depth_DEPTH2;
						break;
					}
				}
				ds_list_add({ sInt(block_sheet_depth_list), dep });
			}
			buffer_delete(global::buffer_current);
			log({ /*"Block textures"*/ STR(2625), /*"find animated block depths"*/ STR(2642) });
			global::buffer_current = buffer_create((IntType)(surface_get_width(anisurf.Value(IntType(0))) * surface_get_height(anisurf.Value(IntType(0))) * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::buffer_current, anisurf.Value(IntType(0)), IntType(0));
			wid = surface_get_width(anisurf.Value(IntType(0)));
			sInt(block_sheet_ani_depth_list) = ds_list_create();
			for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list)); t++)
			{
				if (DsList(texanilist).Value(t) == null_)
				{
					ds_list_add({ sInt(block_sheet_ani_depth_list), e_block_depth_DEPTH0 });
					continue;
				}
				RealType bx, by;
				IntType dep;
				bx = (mod(t, block_sheet_ani_width)) * blocksize;
				by = ((IntType)(t / block_sheet_ani_width)) * blocksize;
				dep = e_block_depth_DEPTH0;
				for (IntType s = IntType(0); s < sampleposamount; s++)
				{
					VecType spos;
					RealType alpha;
					spos = samplepos.Value(s);
					alpha = buffer_read_alpha(bx + spos.Real(X_), by + spos.Real(Y_), wid);
					if (alpha < IntType(1))
						dep = e_block_depth_DEPTH1;
					if (alpha > IntType(0) && alpha < IntType(1))
					{
						dep = e_block_depth_DEPTH2;
						break;
					}
				}
				ds_list_add({ sInt(block_sheet_ani_depth_list), dep });
			}
			buffer_delete(global::buffer_current);
		}
		for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
		{
			if (type == /*"diffuse"*/ STR(635))
				sVar(block_sheet_ani_texture)[f] = texture_surface(anisurf.Value(f));
			else
				if (type == /*"material"*/ STR(640))
					sVar(block_sheet_ani_texture_material)[f] = texture_surface(anisurf.Value(f));
				else
					if (type == /*"normal"*/ STR(629))
						sVar(block_sheet_ani_tex_normal)[f] = texture_surface(anisurf.Value(f));
			
			
			surface_free(anisurf.Value(f));
		}
		for (IntType t = IntType(0); t < ds_list_size(texlist); t++)
			if (DsList(texlist).Value(t) != null_)
				texture_free(DsList(texlist).Value(t));
		for (IntType t = IntType(0); t < ds_list_size(texanilist); t++)
			if (DsList(texanilist).Value(t) != null_)
				texture_free(DsList(texanilist).Value(t));
		surface_free(surf);
		ds_list_destroy(texlist);
		ds_list_destroy(texanilist);
		log({ /*"Block textures"*/ STR(2625), type, /*"done"*/ STR(1770) });
		debug_timer_stop(/*"Block textures: "*/ STR(2643) + type);
	}
	
	void res_load_pack_block_textures(ScopeAny self)
	{
		if (sInt(block_sheet_texture) != null_)
			texture_free(sInt(block_sheet_texture));
		if (sInt(block_sheet_texture_material) != null_)
			texture_free(sInt(block_sheet_texture_material));
		if (sInt(block_sheet_tex_normal) != null_)
			texture_free(sInt(block_sheet_tex_normal));
		if (sVar(block_sheet_ani_texture) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_texture).Value(f));
		if (sVar(block_sheet_ani_texture_material) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_texture_material).Value(f));
		if (sVar(block_sheet_ani_tex_normal) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_tex_normal).Value(f));
		if (sInt(block_sheet_depth_list) != null_)
			ds_list_destroy(sInt(block_sheet_depth_list));
		if (sInt(block_sheet_ani_depth_list) != null_)
			ds_list_destroy(sInt(block_sheet_ani_depth_list));
		res_load_pack_block_sheet(self, /*"diffuse"*/ STR(635), /*""*/ STR(0));
		if (self->id != global::mc_res)
		{
			res_load_pack_block_sheet(self, /*"material"*/ STR(640), /*"_s"*/ STR(2622));
			res_load_pack_block_sheet(self, /*"normal"*/ STR(629), /*"_n"*/ STR(2623));
		}
		else
		{
			sInt(block_sheet_texture_material) = texture_duplicate(ID_spr_default_material);
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				sVar(block_sheet_ani_texture_material)[f] = texture_duplicate(ID_spr_default_material);
			sInt(block_sheet_tex_normal) = texture_duplicate(ID_spr_default_normal);
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				sVar(block_sheet_ani_tex_normal)[f] = texture_duplicate(ID_spr_default_normal);
		}
		
		log({ /*"Block textures all"*/ STR(2644), /*"done"*/ STR(1770) });
	}
	
	void res_load_pack_item_textures(ScopeAny self, StringType type, StringType suffix)
	{
		if (type == /*"diffuse"*/ STR(635) && sInt(item_sheet_texture) != null_)
			texture_free(sInt(item_sheet_texture));
		if (type == /*"material"*/ STR(640) && sInt(item_sheet_texture_material) != null_)
			texture_free(sInt(item_sheet_texture_material));
		if (type == /*"normal"*/ STR(629) && sInt(item_sheet_tex_normal) != null_)
			texture_free(sInt(item_sheet_tex_normal));
		VarType itemsize;
		IntType texlist, surf, fileslist;
		itemsize = null_;
		fileslist = null_;
		debug_timer_start();
		if (dev_mode_debug_unused && type == /*"diffuse"*/ STR(635))
		{
			ArrType filesarr = file_find(global::load_assets_dir + mc_textures_directory + /*"item/"*/ STR(2493), /*".png"*/ STR(10));
			fileslist = ds_list_create();
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(filesarr)); i++)
				ds_list_add({ fileslist, filesarr.Value(i) });
		}
		log({ /*"Item textures"*/ STR(2645), type, /*"load"*/ STR(2646) });
		texlist = ds_list_create();
		for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)); t++)
		{
			if (DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(t) == /*""*/ STR(0))
			{
				ds_list_add({ texlist, null_ });
				continue;
			}
			VarType name;
			StringType fname;
			name = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(t);
			fname = global::load_assets_dir + mc_textures_directory + name + suffix + /*".png"*/ STR(10);
			if (!file_exists_lib(fname) && !is_undefined(DsMap(global::legacy_item_texture_name_map).Value(name)))
				fname = global::load_assets_dir + mc_textures_directory + DsMap(global::legacy_item_texture_name_map).Value(name) + suffix + /*".png"*/ STR(10);
			if (file_exists_lib(fname))
			{
				IntType tex = texture_create(fname);
				itemsize = max({ itemsize, texture_width(tex) });
				ds_list_add({ texlist, tex });
				if (fileslist != null_)
					ds_list_delete_value(fileslist, fname);
			}
			else
			{
				if (dev_mode)
					log({ /*"Item texture not found"*/ STR(2647), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(t) + suffix });
				ds_list_add({ texlist, null_ });
			}
			
		}
		if (fileslist != null_)
		{
			ds_list_sort(fileslist, true);
			if (ds_list_size(fileslist) > IntType(0))
			{
				StringType str = /*"The following item textures were unused:\n"*/ STR(2648);
				for (IntType i = IntType(0); i < ds_list_size(fileslist); i++)
					str += /*"  "*/ STR(1784) + filename_name(DsList(fileslist).Value(i)) + /*"\n"*/ STR(710);
				log({ str });
			}
			ds_list_destroy(fileslist);
		}
		if (itemsize == null_)
			itemsize = item_size;
		log({ /*"Item textures"*/ STR(2645), /*"surface"*/ STR(555) });
		draw_texture_start();
		surf = surface_create((IntType)(item_sheet_width * itemsize), (IntType)(item_sheet_height * itemsize));
		surface_set_target(surf);
	{
		gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
		draw_clear_alpha(c_black, 0.0);
		for (IntType t = IntType(0); t < ds_list_size(texlist); t++)
		{
			IntType tex;
			RealType dx, dy;
			tex = DsList(texlist).Value(t);
			dx = (mod(t, item_sheet_width)) * itemsize;
			dy = ((IntType)(t / item_sheet_width)) * itemsize;
			if (tex != null_)
			{
				RealType wid, hei, scale;
				wid = texture_width(tex);
				hei = texture_height(tex);
				scale = (RealType)itemsize / wid;
				draw_texture_part({ tex, dx, dy, IntType(0), IntType(0), wid, hei, scale, scale });
			}
			else
			{
				if (type == /*"diffuse"*/ STR(635) && self->id != global::mc_res)
					draw_texture_part({ ObjType(obj_resource, global::mc_res)->item_sheet_texture, dx, dy, (mod(t, item_sheet_width)) * item_size, ((IntType)(t / item_sheet_width)) * item_size, item_size, item_size, (RealType)itemsize / item_size, (RealType)itemsize / item_size });
				if (type == /*"material"*/ STR(640))
					draw_box(dx, dy, itemsize, itemsize, false, c_black, IntType(1));
				if (type == /*"normal"*/ STR(629))
					draw_box(dx, dy, itemsize, itemsize, false, c_normal, IntType(1));
			}
			
		}
		gpu_set_blendmode(bm_normal);
	}
		surface_reset_target();
		draw_texture_done();
		if (type == /*"diffuse"*/ STR(635))
			sInt(item_sheet_texture) = texture_surface(surf);
		else
			if (type == /*"material"*/ STR(640))
				sInt(item_sheet_texture_material) = texture_surface(surf);
			else
				sInt(item_sheet_tex_normal) = texture_surface(surf);
		
		
		for (IntType t = IntType(0); t < ds_list_size(texlist); t++)
			if (DsList(texlist).Value(t) != null_)
				texture_free(DsList(texlist).Value(t));
		surface_free(surf);
		ds_list_destroy(texlist);
		log({ /*"Item textures"*/ STR(2645), type, /*"done"*/ STR(1770) });
		debug_timer_stop(/*"Item textures: "*/ STR(2649) + type);
	}
	
	void res_load_pack_misc(ScopeAny self)
	{
		if (sInt(block_preview_texture) != null_)
			texture_free(sInt(block_preview_texture));
		if (sInt(colormap_grass_texture) != null_)
			texture_free(sInt(colormap_grass_texture));
		if (sInt(colormap_foliage_texture) != null_)
			texture_free(sInt(colormap_foliage_texture));
		if (sVar(sun_texture) != null_)
			texture_free(sVar(sun_texture));
		if (sInt(moonphases_texture) != null_)
		{
			texture_free(sInt(moonphases_texture));
			for (IntType t = IntType(0); t < IntType(8); t++)
				texture_free(sArr(moon_texture).Value(t));
		}
		if (sVar(clouds_texture) != null_)
			texture_free(sVar(clouds_texture));
		if (sInt(glint_entity_texture) != null_)
			texture_free(sInt(glint_entity_texture));
		if (sInt(glint_item_texture) != null_)
			texture_free(sInt(glint_item_texture));
		if (!file_exists_lib(global::load_assets_dir + mc_pack_image_file) && self->id != global::mc_res)
			sInt(block_preview_texture) = texture_sprite(ID_spr_unknown_pack);
		else
			sInt(block_preview_texture) = texture_create(global::load_assets_dir + mc_pack_image_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_grass_image_file) && self->id != global::mc_res)
			sInt(colormap_grass_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->colormap_grass_texture);
		else
			sInt(colormap_grass_texture) = texture_create(global::load_assets_dir + mc_grass_image_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_foliage_image_file) && self->id != global::mc_res)
			sInt(colormap_foliage_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->colormap_foliage_texture);
		else
			sInt(colormap_foliage_texture) = texture_create(global::load_assets_dir + mc_foliage_image_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_sun_image_file) && self->id != global::mc_res)
			sVar(sun_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->sun_texture);
		else
			sVar(sun_texture) = texture_create(global::load_assets_dir + mc_sun_image_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_moon_phases_image_file) && self->id != global::mc_res)
			sInt(moonphases_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->moonphases_texture);
		else
			sInt(moonphases_texture) = texture_create(global::load_assets_dir + mc_moon_phases_image_file);
		
		sArr(moon_texture) = texture_split(sInt(moonphases_texture), IntType(4), IntType(2));
		if (!file_exists_lib(global::load_assets_dir + mc_clouds_image_file) && self->id != global::mc_res)
			sVar(clouds_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->clouds_texture);
		else
			sVar(clouds_texture) = texture_create(global::load_assets_dir + mc_clouds_image_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_glint_entity_file) && self->id != global::mc_res)
			sInt(glint_entity_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->glint_entity_texture);
		else
			sInt(glint_entity_texture) = texture_create(global::load_assets_dir + mc_glint_entity_file);
		
		if (!file_exists_lib(global::load_assets_dir + mc_glint_item_file) && self->id != global::mc_res)
			sInt(glint_item_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->glint_item_texture);
		else
			sInt(glint_item_texture) = texture_create(global::load_assets_dir + mc_glint_item_file);
		
	}
	
	void res_load_pack_model_textures(ScopeAny self)
	{
		if (sInt(model_texture_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_texture_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_texture_map)).Value(key));
				key = ds_map_find_next(sInt(model_texture_map), key);
			}
			
			ds_map_destroy(sInt(model_texture_map));
		}
		if (sInt(model_texture_material_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_texture_material_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_texture_material_map)).Value(key));
				key = ds_map_find_next(sInt(model_texture_material_map), key);
			}
			
			ds_map_destroy(sInt(model_texture_material_map));
		}
		if (sInt(model_tex_normal_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_tex_normal_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_tex_normal_map)).Value(key));
				key = ds_map_find_next(sInt(model_tex_normal_map), key);
			}
			
			ds_map_destroy(sInt(model_tex_normal_map));
		}
		debug_timer_start();
		log({ /*"Model textures"*/ STR(2650), /*"load"*/ STR(2646) });
		sInt(model_texture_map) = ds_map_create();
		sInt(model_texture_material_map) = ds_map_create();
		sInt(model_tex_normal_map) = ds_map_create();
		for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list)); t++)
		{
			VarType name;
			StringType fname, matfname, norfname;
			IntType tex;
			name = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t);
			fname = global::load_assets_dir + mc_textures_directory + name + /*".png"*/ STR(10);
			matfname = global::load_assets_dir + mc_textures_directory + name + /*"_s.png"*/ STR(2651);
			norfname = global::load_assets_dir + mc_textures_directory + name + /*"_n.png"*/ STR(2652);
			if (file_exists_lib(fname))
			{
				if (name == /*"entity/steve"*/ STR(2653))
					tex = res_load_player_skin(fname);
				else
					tex = texture_create_square(fname);
				
			}
			else
				if (self->id != global::mc_res)
					tex = texture_duplicate(DsMap(ObjType(obj_resource, global::mc_res)->model_texture_map).Value(name));
				else
				{
					if (dev_mode)
						log({ /*"Model texture not found"*/ STR(2654), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t) });
					tex = texture_create_missing();
				}
			
			
			DsMap(sInt(model_texture_map))[name] = tex;
			if (file_exists_lib(matfname))
			{
				if (matfname == /*"entity/steve_s"*/ STR(2655))
					tex = res_load_player_skin(matfname);
				else
					tex = texture_create_square(matfname);
				
			}
			else
				tex = texture_duplicate(ID_spr_default_material);
			
			DsMap(sInt(model_texture_material_map))[name] = tex;
			if (file_exists_lib(norfname))
			{
				if (norfname == /*"entity/steve_n"*/ STR(2656))
					tex = res_load_player_skin(norfname);
				else
					tex = texture_create_square(norfname);
				
			}
			else
				tex = texture_duplicate(ID_spr_default_normal);
			
			DsMap(sInt(model_tex_normal_map))[name] = tex;
		}
		log({ /*"Model textures"*/ STR(2650), /*"done"*/ STR(1770) });
		debug_timer_stop(/*"Model textures"*/ STR(2650));
	}
	
	void res_load_pack_particle_textures(ScopeAny self)
	{
		VarType particlesize, explosionsize;
		IntType particlelist, explosionlist, surf;
		RealType tempwidth, tempheight;
		particlesize = null_;
		explosionsize = null_;
		particlelist = ds_list_create();
		explosionlist = ds_list_create();
		surf = null_;
		if (sInt(particle_texture_atlas_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(particle_texture_atlas_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(particle_texture_atlas_map)).Value(key));
				key = ds_map_find_next(sInt(particle_texture_atlas_map), key);
			}
			
			ds_map_destroy(sInt(particle_texture_atlas_map));
		}
		if (sInt(particle_texture_uvs_map) != null_)
			ds_map_clear(sInt(particle_texture_uvs_map));
		else
			sInt(particle_texture_uvs_map) = ds_map_create();
		
		if (sInt(particle_texture_pixeluvs_map) != null_)
			ds_map_clear(sInt(particle_texture_pixeluvs_map));
		else
			sInt(particle_texture_pixeluvs_map) = ds_map_create();
		
		if (sArr(particles_texture).Value(IntType(0)) != null_)
		{
			texture_free(sArr(particles_texture).Value(IntType(0)));
			sArr(particles_texture)[IntType(0)] = null_;
		}
		if (sArr(particles_texture).Value(IntType(1)) != null_)
		{
			texture_free(sArr(particles_texture).Value(IntType(1)));
			sArr(particles_texture)[IntType(1)] = null_;
		}
		debug_timer_start();
		log({ /*"Particle textures"*/ STR(2657), /*"load"*/ STR(2646) });
		sInt(particle_texture_map) = ds_map_create();
		for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->particle_texture_list)); t++)
		{
			VarType name;
			StringType fname;
			IntType tex;
			name = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->particle_texture_list).Value(t);
			fname = global::load_assets_dir + mc_textures_directory + name + /*".png"*/ STR(10);
			if (file_exists_lib(fname))
			{
				tex = texture_create_square(fname);
			}
			else
				if (self->id != global::mc_res)
					tex = texture_duplicate(DsMap(ObjType(obj_resource, global::mc_res)->particle_texture_map).Value(name));
				else
				{
					if (dev_mode)
						log({ /*"Particle texture not found"*/ STR(2658), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->particle_texture_list).Value(t) });
					tex = texture_create_missing();
				}
			
			
			if (DsMap(global::legacy_particles_map).Value(name) != VarType())
			{
				if (string_contains(name, /*"explosion"*/ STR(2659)))
				{
					explosionsize = max({ explosionsize, texture_width(tex) });
					ds_list_add({ explosionlist, t });
				}
				else
				{
					particlesize = max({ particlesize, texture_width(tex) });
					ds_list_add({ particlelist, t });
				}
				
			}
			DsMap(sInt(particle_texture_map))[name] = tex;
		}
		sInt(particle_texture_atlas_map) = ds_map_create();
		for (IntType i = IntType(0); i < ds_list_size(global::particle_template_list); i++)
		{
			IntType ptemp, psprite;
			RealType drawx;
			ptemp = DsList(global::particle_template_list).Value(i);
			drawx = IntType(0);
			psprite = IntType(0);
			tempwidth = IntType(0);
			tempheight = IntType(0);
			for (IntType j = IntType(0); j < ds_list_size(ObjType(obj_particle_template, ptemp)->texture_list); j++)
			{
				psprite = DsMap(sInt(particle_texture_map)).Value(DsList(ObjType(obj_particle_template, ptemp)->texture_list).Value(j));
				tempwidth += sprite_get_width(psprite);
				tempheight = max({ tempheight, sprite_get_height(psprite) });
			}
			IntType tempsurf = surface_create((IntType)(tempwidth), (IntType)(tempheight));
			surface_set_target(tempsurf);
		{
			gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
			draw_clear_alpha(c_black, 0.0);
			for (IntType j = IntType(0); j < ds_list_size(ObjType(obj_particle_template, ptemp)->texture_list); j++)
			{
				psprite = DsMap(sInt(particle_texture_map)).Value(DsList(ObjType(obj_particle_template, ptemp)->texture_list).Value(j));
				DsMap(sInt(particle_texture_uvs_map))[DsList(ObjType(obj_particle_template, ptemp)->texture_list).Value(j)] = ArrType::From({ (drawx / tempwidth), IntType(0), ((RealType)sprite_get_width(psprite) / tempwidth), ((RealType)sprite_get_height(psprite) / tempheight) });
				DsMap(sInt(particle_texture_pixeluvs_map))[DsList(ObjType(obj_particle_template, ptemp)->texture_list).Value(j)] = ArrType::From({ drawx, IntType(0), sprite_get_width(psprite), sprite_get_height(psprite) });
				draw_sprite(psprite, IntType(0), (IntType)(drawx), IntType(0));
				drawx += sprite_get_width(psprite);
			}
		}
			surface_reset_target();
			DsMap(sInt(particle_texture_atlas_map))[ObjType(obj_particle_template, ptemp)->name] = texture_surface(tempsurf);
			surface_free(tempsurf);
		}
		log({ /*"Particle textures"*/ STR(2657), /*"legacy sheets"*/ STR(2660) });
		if (file_exists_lib(global::load_assets_dir + mc_particles_image_file))
			sArr(particles_texture)[IntType(0)] = texture_create(global::load_assets_dir + mc_particles_image_file);
		if (file_exists_lib(global::load_assets_dir + mc_explosion_image_file))
			sArr(particles_texture)[IntType(1)] = texture_create(global::load_assets_dir + mc_explosion_image_file);
		if (sArr(particles_texture).Value(IntType(0)) == null_)
		{
			draw_texture_start();
			surf = surface_create((IntType)(IntType(16) * particlesize), (IntType)(IntType(16) * particlesize));
			surface_set_target(surf);
		{
			gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
			draw_clear_alpha(c_black, 0.0);
			for (IntType i = IntType(0); i < ds_list_size(particlelist); i++)
			{
				IntType texindex = DsList(particlelist).Value(i);
				VarType texname = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->particle_texture_list).Value(texindex);
				VarType texcoord = DsMap(global::legacy_particles_map).Value(texname);
				if (texcoord != VarType())
				{
					IntType tex;
					RealType wid, hei, scale;
					tex = DsMap(sInt(particle_texture_map)).Value(texname);
					wid = texture_width(tex);
					hei = texture_height(tex);
					scale = (RealType)particlesize / wid;
					draw_texture_part({ tex, DsList(texcoord).Value(X_) * particlesize, DsList(texcoord).Value(Y_) * particlesize, IntType(0), IntType(0), wid, hei, scale, scale });
				}
			}
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
			draw_texture_done();
		}
		if (surface_exists(surf))
		{
			sArr(particles_texture)[IntType(0)] = texture_surface(surf);
			surface_free(surf);
			surf = null_;
		}
		if (sArr(particles_texture).Value(IntType(1)) == null_)
		{
			draw_texture_start();
			surf = surface_create((IntType)(IntType(4) * explosionsize), (IntType)(IntType(4) * explosionsize));
			surface_set_target(surf);
		{
			gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
			draw_clear_alpha(c_black, 0.0);
			for (IntType i = IntType(0); i < ds_list_size(explosionlist); i++)
			{
				IntType texindex = DsList(explosionlist).Value(i);
				VarType texname = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->particle_texture_list).Value(texindex);
				VarType texcoord = DsMap(global::legacy_particles_map).Value(texname);
				if (texcoord != VarType())
				{
					IntType tex;
					RealType wid, hei, scale;
					tex = DsMap(sInt(particle_texture_map)).Value(texname);
					wid = texture_width(tex);
					hei = texture_height(tex);
					scale = (RealType)explosionsize / wid;
					draw_texture_part({ tex, DsList(texcoord).Value(X_) * explosionsize, DsList(texcoord).Value(Y_) * explosionsize, IntType(0), IntType(0), wid, hei, scale, scale });
				}
			}
			gpu_set_blendmode(bm_normal);
		}
			surface_reset_target();
			draw_texture_done();
		}
		if (surface_exists(surf))
		{
			sArr(particles_texture)[IntType(1)] = texture_surface(surf);
			surface_free(surf);
		}
		if (sInt(particle_texture_map) != null_ && (self->id != global::mc_res))
		{
			VarType key = ds_map_find_first(sInt(particle_texture_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(particle_texture_map)).Value(key));
				key = ds_map_find_next(sInt(particle_texture_map), key);
			}
			
			ds_map_destroy(sInt(particle_texture_map));
		}
		log({ /*"Particle textures"*/ STR(2657), /*"done"*/ STR(1770) });
		debug_timer_stop(/*"Particle textures"*/ STR(2657));
	}
	
}
