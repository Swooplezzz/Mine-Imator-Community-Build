/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.07.16 08:08:38 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType settings_load_legacy(ScopeAny self, StringType fn)
	{
		log({ /*"Loading legacy settings"*/ STR(2699), fn });
		global::buffer_current = buffer_load_lib(fn);
		global::load_format = buffer_read_byte();
		log({ /*"load_format"*/ STR(1244), global::load_format });
		if (global::load_format >= e_settings_FORMAT_110_PRE_1)
		{
			buffer_delete(global::buffer_current);
			return IntType(0);
		}
		if (global::load_format >= e_settings_FORMAT_100)
		{
			gmlGlobal::room_speed = buffer_read_byte();
			if (dev_mode)
				buffer_read_string_int();
			else
				sStr(setting_project_folder) = buffer_read_string_int();
			
		}
		sVar(setting_backup) = buffer_read_byte();
		sReal(setting_backup_time) = buffer_read_byte();
		sReal(setting_backup_amount) = buffer_read_byte();
		if (global::load_format < e_settings_FORMAT_100)
			buffer_read_byte();
		if (global::load_format >= e_settings_FORMAT_100_DEMO_5)
		{
			buffer_read_byte();
			sVar(setting_spawn_cameras) = buffer_read_byte();
		}
		buffer_read_byte();
		buffer_read_double();
		if (global::load_format >= e_settings_FORMAT_100)
		{
			buffer_read_byte();
			buffer_read_byte();
		}
		if (global::load_format >= e_settings_FORMAT_103)
		{
			buffer_read_byte();
			buffer_read_int();
		}
		buffer_read_string_int();
		buffer_read_string_int();
		if (global::load_format < e_settings_FORMAT_100)
		{
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
			buffer_read_int();
		}
		else
			settings_load_legacy_colors();
		
		sVar(setting_timeline_autoscroll) = buffer_read_byte();
		if (global::load_format >= e_settings_FORMAT_103)
		{
			sReal(setting_timeline_compact) = buffer_read_byte();
			sVar(setting_timeline_select_jump) = buffer_read_byte();
		}
		if (global::load_format >= e_settings_FORMAT_100)
			sReal(setting_z_is_up) = buffer_read_byte();
		IntType keynew = buffer_read_byte();
		buffer_read_byte();
		IntType keyimportasset = null_;
		IntType keyimportassetcontrol = null_;
		if (global::load_format >= e_settings_FORMAT_100)
		{
			keyimportasset = buffer_read_byte();
			keyimportassetcontrol = buffer_read_byte();
		}
		IntType keyopen = buffer_read_byte();
		buffer_read_byte();
		IntType keysave = buffer_read_byte();
		buffer_read_byte();
		if (keynew == IntType(0) || keyimportasset == IntType(0) || keyopen == IntType(0) || keysave == IntType(0))
		{
			buffer_delete(global::buffer_current);
			return IntType(0);
		}
		if (global::load_format >= e_settings_FORMAT_100)
		{
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
		}
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		if (global::load_format < e_settings_FORMAT_100)
		{
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
			buffer_read_byte();
		}
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		buffer_read_byte();
		sReal(setting_move_speed) = buffer_read_double();
		sReal(setting_look_sensitivity) = buffer_read_double();
		sReal(setting_fast_modifier) = buffer_read_double();
		sReal(setting_slow_modifier) = buffer_read_double();
		buffer_read_byte();
		buffer_read_int();
		buffer_read_double();
		sVar(setting_scenery_remove_edges) = buffer_read_byte();
		if (global::load_format >= e_settings_FORMAT_106)
			sVar(project_render_liquid_animation) = buffer_read_byte();
		if (global::load_format >= e_settings_FORMAT_100)
		{
			sVar(project_render_texture_filtering) = buffer_read_byte();
			buffer_read_byte();
			if (global::load_format >= e_settings_FORMAT_106_2)
				sVar(project_render_block_emissive) = buffer_read_double();
			if (global::load_format < e_settings_FORMAT_106_3)
				buffer_read_int();
			sVar(project_render_ssao) = buffer_read_byte();
			sVar(project_render_ssao_radius) = buffer_read_double();
			sVar(project_render_ssao_power) = buffer_read_double();
			buffer_read_byte();
			sVar(project_render_ssao_color) = buffer_read_int();
			sVar(project_render_shadows) = buffer_read_byte();
		}
		sVar(project_render_shadows_sun_buffer_size) = buffer_read_int();
		sVar(project_render_shadows_spot_buffer_size) = buffer_read_int();
		sVar(project_render_shadows_point_buffer_size) = buffer_read_int();
		if (global::load_format >= e_settings_FORMAT_100)
		{
			buffer_read_byte();
			buffer_read_double();
			buffer_read_byte();
			buffer_read_double();
			sVar(project_render_aa) = buffer_read_byte();
			sVar(project_render_aa_power) = buffer_read_double() == buffer_read_byte();
			buffer_read_string_int();
			buffer_read_double();
			sVar(setting_panel_left_bottom_size) = buffer_read_double();
			sVar(setting_panel_right_bottom_size) = buffer_read_double();
			sVar(setting_panel_bottom_bottom_size) = buffer_read_double();
			sVar(setting_panel_top_size) = buffer_read_double();
			sVar(setting_panel_left_top_size) = buffer_read_double();
			sVar(setting_panel_right_top_size) = buffer_read_double();
			ArrType locarr = ArrType::From({ /*"left_secondary"*/ STR(188), /*"right_secondary"*/ STR(189), /*"bottom"*/ STR(190), /*"top"*/ STR(191), /*"left"*/ STR(192), /*"right"*/ STR(193) });
			sVar(setting_properties_location) = locarr.Value(buffer_read_byte());
			sVar(setting_ground_editor_location) = locarr.Value(buffer_read_byte());
			sVar(setting_template_editor_location) = locarr.Value(buffer_read_byte());
			locarr.Value(buffer_read_byte());
			sVar(setting_timeline_editor_location) = locarr.Value(buffer_read_byte());
			sVar(setting_frame_editor_location) = locarr.Value(buffer_read_byte());
			sVar(setting_settings_location) = locarr.Value(buffer_read_byte());
			sVar(setting_view_split) = buffer_read_double();
			sVar(setting_view_main_overlays) = buffer_read_byte() == buffer_read_byte();
			sVar(setting_view_main_particles) = buffer_read_byte();
			sVar(setting_view_main_grid) = buffer_read_byte();
			sVar(setting_view_main_aspect_ratio) = buffer_read_byte();
			sVar(setting_view_main_location) = buffer_read_string_int();
			sVar(setting_view_second_show) = buffer_read_byte();
			sVar(setting_view_second_overlays) = buffer_read_byte() == buffer_read_byte();
			sVar(setting_view_second_particles) = buffer_read_byte();
			sVar(setting_view_second_grid) = buffer_read_byte();
			sVar(setting_view_second_aspect_ratio) = buffer_read_byte();
			sVar(setting_view_second_location) = buffer_read_string_int();
			sVar(setting_view_second_width) = buffer_read_double();
			sVar(setting_view_second_height) = buffer_read_double() == buffer_read_byte();
		}
		else
		{
			buffer_read_int();
			sVar(project_render_shadows_blur_quality) = buffer_read_byte();
			sVar(project_render_shadows_blur_size) = min({ buffer_read_double(), IntType(4) });
			buffer_read_double();
		}
		
		if (global::load_format >= e_settings_FORMAT_106)
		{
			sVar(setting_export_movie_format) = buffer_read_string_int();
			sVar(setting_export_movie_frame_rate) = buffer_read_byte();
			sVar(setting_export_movie_bit_rate) = buffer_read_int();
			sVar(setting_export_movie_include_audio) = buffer_read_byte();
			sVar(setting_export_movie_remove_background) = buffer_read_byte();
			sVar(setting_export_movie_include_hidden) = buffer_read_byte();
			sVar(setting_export_movie_high_quality) = buffer_read_byte();
			sVar(setting_export_image_remove_background) = buffer_read_byte();
			sVar(setting_export_image_include_hidden) = buffer_read_byte();
			sVar(setting_export_image_high_quality) = buffer_read_byte();
		}
		if (global::load_format >= e_settings_FORMAT_CB_102)
		{
			buffer_read_byte();
			buffer_read_byte();
		}
		buffer_delete(global::buffer_current);
		return 0.0;
	}
	
	void settings_load_legacy_colors()
	{
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
		buffer_read_int();
	}
	
	RealType settings_load_legacy_recent(ScopeAny self, StringType fn)
	{
		if (!file_exists_lib(fn))
			return IntType(0);
		log({ /*"Loading legacy recent files"*/ STR(2700), fn });
		global::buffer_current = buffer_load_lib(fn);
		sVar(recent_amount) = buffer_read_byte();
		for (IntType _it = 0, _it_max = sVar(recent_amount); _it < _it_max; _it++)
		{
			withOne (obj_recent, (new obj_recent)->id, self->id)
			{
				self->filename = buffer_read_string_int();
				self->name = buffer_read_string_int();
				self->author = buffer_read_string_int();
				self->description = buffer_read_string_int();
				buffer_read_double();
				StringType thumbnailfn = filename_path(self->filename) + /*"thumbnail.png"*/ STR(2473);
				if (file_exists_lib(thumbnailfn))
					self->thumbnail = texture_create(thumbnailfn);
				else
					self->thumbnail = null_;
				
				ds_list_add({ global::_app->recent_list, self->id });
			}
			
		}
		buffer_delete(global::buffer_current);
		return 0.0;
	}
	
	void settings_save(ScopeAny self)
	{
		log({ /*"Saving settings"*/ STR(2701), settings_file });
		json_save_start(settings_file);
		json_save_object_start();
		json_save_var(/*"format"*/ STR(88), settings_format);
		json_save_object_start({ /*"assets"*/ STR(705) });
		json_save_var(/*"version"*/ STR(87), sStr(setting_minecraft_assets_version));
		if (sVar(setting_minecraft_assets_new_version) != /*""*/ STR(0))
		{
			json_save_object_start({ /*"new"*/ STR(2594) });
			json_save_var(/*"version"*/ STR(87), sVar(setting_minecraft_assets_new_version));
			json_save_var(/*"format"*/ STR(88), sVar(setting_minecraft_assets_new_format));
			json_save_var(/*"changes"*/ STR(89), json_string_encode(sVar(setting_minecraft_assets_new_changes)));
			json_save_var(/*"image"*/ STR(90), json_string_encode(sStr(setting_minecraft_assets_new_image)));
			json_save_object_done();
		}
		json_save_object_done();
		json_save_array_start({ /*"recent_files"*/ STR(2702) });
		for (IntType i = IntType(0); i < ds_list_size(sInt(recent_list)); i++)
		{
			withOne (Object, DsList(sInt(recent_list)).Value(i), self->id)
			{
				json_save_object_start();
				json_save_var(/*"filename"*/ STR(1247), json_string_encode(sVar(filename)));
				json_save_var(/*"name"*/ STR(810), json_string_encode(sVar(name)));
				json_save_var(/*"author"*/ STR(2302), json_string_encode(sVar(author)));
				json_save_var(/*"description"*/ STR(1801), json_string_encode(sVar(description)));
				json_save_object_done();
			}
			
		}
		json_save_array_done();
		json_save_array_start({ /*"closed_toasts"*/ STR(2595) });
		for (IntType i = IntType(0); i < ds_list_size(sInt(closed_toast_list)); i++)
			json_save_array_value(DsList(sInt(closed_toast_list)).Value(i));
		json_save_array_done();
		json_save_object_start({ /*"program"*/ STR(2596) });
		if (sReal(setting_advanced_mode) > 0)
			json_save_var(/*"advanced_mode"*/ STR(2597), sReal(setting_advanced_mode));
		json_save_var(/*"fps"*/ STR(2598), gmlGlobal::room_speed);
		json_save_var(/*"project_folder"*/ STR(2599), json_string_encode(sStr(setting_project_folder)));
		json_save_var_bool(/*"backup"*/ STR(114), sVar(setting_backup));
		json_save_var(/*"backup_time"*/ STR(2600), sReal(setting_backup_time));
		json_save_var(/*"backup_amount"*/ STR(2601), sReal(setting_backup_amount));
		json_save_var_bool(/*"spawn_cameras"*/ STR(2602), sVar(setting_spawn_cameras));
		json_save_var_bool(/*"unlimited_values"*/ STR(2603), sReal(setting_unlimited_values));
		json_save_var_bool(/*"scenery_remove_edges"*/ STR(2703), sVar(setting_scenery_remove_edges));
		json_save_var_bool(/*"watermark_custom"*/ STR(2604), sVar(setting_watermark_custom));
		json_save_var(/*"watermark_fn"*/ STR(2605), sStr(setting_watermark_fn));
		json_save_var(/*"watermark_halign"*/ STR(2606), sVar(setting_watermark_halign));
		json_save_var(/*"watermark_valign"*/ STR(2607), sVar(setting_watermark_valign));
		json_save_var(/*"watermark_padding"*/ STR(2608), sReal(setting_watermark_padding));
		json_save_var(/*"watermark_scale"*/ STR(2609), sReal(setting_watermark_scale));
		json_save_var(/*"watermark_opacity"*/ STR(2610), sReal(setting_watermark_opacity));
		json_save_object_done();
		json_save_object_start({ /*"interface"*/ STR(2611) });
		json_save_var(/*"language_filename"*/ STR(2612), json_string_encode(sStr(setting_language_filename)));
		json_save_var(/*"theme"*/ STR(2613), ObjType(obj_theme, sInt(setting_theme))->name);
		json_save_var(/*"accent"*/ STR(2614), sInt(setting_accent));
		json_save_var_color(/*"accent_custom"*/ STR(2615), sVar(setting_accent_custom));
		json_save_var_bool(/*"timeline_autoscroll"*/ STR(2616), sVar(setting_timeline_autoscroll));
		json_save_var_bool(/*"timeline_show_markers"*/ STR(2617), sBool(setting_timeline_show_markers));
		json_save_var_bool(/*"interface_compact"*/ STR(2618), sVar(setting_interface_compact));
		json_save_var_bool(/*"timeline_compact"*/ STR(2619), sReal(setting_timeline_compact));
		json_save_var_bool(/*"reduced_motion"*/ STR(2620), sVar(setting_reduced_motion));
		json_save_var_bool(/*"timeline_select_jump"*/ STR(2621), sVar(setting_timeline_select_jump));
		json_save_var_bool(/*"timeline_hide_ghosts"*/ STR(2622), sVar(setting_timeline_hide_ghosts));
		json_save_var_bool(/*"timeline_frame_snap"*/ STR(2623), sVar(setting_timeline_frame_snap));
		json_save_var_bool(/*"z_is_up"*/ STR(2624), sReal(setting_z_is_up));
		json_save_var_bool(/*"search_variants"*/ STR(2625), sVar(setting_search_variants));
		json_save_var_bool(/*"separate_tool_modes"*/ STR(2632), sVar(setting_separate_tool_modes));
		json_save_var_bool(/*"show_shortcuts_bar"*/ STR(2626), sBool(setting_show_shortcuts_bar));
		json_save_var_bool(/*"gizmos_face_camera"*/ STR(2627), sVar(setting_gizmos_face_camera));
		json_save_var_bool(/*"fade_gizmos"*/ STR(2628), sVar(setting_fade_gizmos));
		json_save_var_bool(/*"camera_lock_mouse"*/ STR(2629), sVar(setting_camera_lock_mouse));
		json_save_var_bool(/*"place_new"*/ STR(2630), sVar(setting_place_new));
		json_save_var(/*"scale"*/ STR(1805), sVar(setting_interface_scale));
		json_save_var_bool(/*"scale_auto"*/ STR(2631), sVar(setting_interface_scale_auto));
		json_save_var(/*"panel_left_bottom_size"*/ STR(2633), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size);
		json_save_var(/*"panel_right_bottom_size"*/ STR(2634), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size);
		json_save_var(/*"panel_bottom_size"*/ STR(2635), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size);
		json_save_var(/*"panel_top_size"*/ STR(2636), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size);
		json_save_var(/*"panel_left_top_size"*/ STR(2637), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size);
		json_save_var(/*"panel_right_top_size"*/ STR(2638), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size);
		json_save_var(/*"properties_location"*/ STR(2639), ObjType(obj_panel, ObjType(obj_tab, sInt(properties))->panel)->location);
		json_save_var(/*"ground_editor_location"*/ STR(2640), ObjType(obj_panel, ObjType(obj_tab, sInt(ground_editor))->panel)->location);
		json_save_var(/*"template_editor_location"*/ STR(2641), ObjType(obj_panel, ObjType(obj_tab, sInt(template_editor))->panel)->location);
		json_save_var(/*"timeline_location"*/ STR(2704), ObjType(obj_panel, idInt(sVar(timeline), panel))->location);
		json_save_var(/*"timeline_editor_location"*/ STR(2642), ObjType(obj_panel, ObjType(obj_tab, sInt(timeline_editor))->panel)->location);
		json_save_var(/*"frame_editor_location"*/ STR(2643), ObjType(obj_panel, ObjType(obj_tab, sInt(frame_editor))->panel)->location);
		json_save_var(/*"settings_location"*/ STR(2644), ObjType(obj_panel, ObjType(obj_tab, sInt(settings))->panel)->location);
		if (window_exists(e_window_TIMELINE))
		{
			json_save_object_start({ /*"timeline_window"*/ STR(2645) });
			window_state_save(e_window_TIMELINE);
			json_save_object_done();
		}
		json_save_var(/*"view_split"*/ STR(2646), sReal(view_split));
		json_save_var_bool(/*"view_main_overlays"*/ STR(2647), ObjType(obj_view, sInt(view_main))->overlays);
		json_save_var_bool(/*"view_main_aspect_ratio"*/ STR(2648), ObjType(obj_view, sInt(view_main))->aspect_ratio);
		json_save_var_bool(/*"view_main_grid"*/ STR(2649), ObjType(obj_view, sInt(view_main))->grid);
		json_save_var_bool(/*"view_main_gizmos"*/ STR(2650), ObjType(obj_view, sInt(view_main))->gizmos);
		json_save_var_bool(/*"view_main_effects"*/ STR(2652), ObjType(obj_view, sInt(view_main))->effects);
		json_save_var_bool(/*"view_main_particles"*/ STR(2653), ObjType(obj_view, sInt(view_main))->particles);
		json_save_var(/*"view_main_location"*/ STR(2654), ObjType(obj_view, sInt(view_main))->location);
		json_save_var_bool(/*"view_second_show"*/ STR(2655), ObjType(obj_view, sInt(view_second))->show);
		json_save_var_bool(/*"view_second_overlays"*/ STR(2656), ObjType(obj_view, sInt(view_second))->overlays);
		json_save_var_bool(/*"view_second_aspect_ratio"*/ STR(2657), ObjType(obj_view, sInt(view_second))->aspect_ratio);
		json_save_var_bool(/*"view_second_grid"*/ STR(2658), ObjType(obj_view, sInt(view_second))->grid);
		json_save_var_bool(/*"view_second_gizmos"*/ STR(2659), ObjType(obj_view, sInt(view_second))->gizmos);
		json_save_var_bool(/*"view_second_effects"*/ STR(2661), ObjType(obj_view, sInt(view_second))->effects);
		json_save_var_bool(/*"view_second_particles"*/ STR(2662), ObjType(obj_view, sInt(view_second))->particles);
		json_save_var(/*"view_second_location"*/ STR(2663), ObjType(obj_view, sInt(view_second))->location);
		json_save_var(/*"view_second_width"*/ STR(2664), ObjType(obj_view, sInt(view_second))->width);
		json_save_var(/*"view_second_height"*/ STR(2665), ObjType(obj_view, sInt(view_second))->height);
		if (window_exists(e_window_VIEW_SECOND))
		{
			json_save_object_start({ /*"view_second_window"*/ STR(2666) });
			window_state_save(e_window_VIEW_SECOND);
			json_save_object_done();
		}
		json_save_var_bool(/*"snap"*/ STR(293), sReal(setting_snap));
		json_save_var_bool(/*"snap_absolute"*/ STR(2667), sVar(setting_snap_absolute));
		json_save_var(/*"snap_size_position"*/ STR(2668), sReal(setting_snap_size_position));
		json_save_var(/*"snap_size_rotation"*/ STR(2669), sReal(setting_snap_size_rotation));
		json_save_var(/*"snap_size_scale"*/ STR(2670), sReal(setting_snap_size_scale));
		json_save_var_bool(/*"modelbench_popup_hidden"*/ STR(2671), ObjType(obj_popup, sInt(popup_modelbench))->hidden);
		json_save_object_done();
		json_save_object_start({ /*"controls"*/ STR(2672) });
		VarType obj;
		for (IntType i = IntType(0); i < e_keybind_amount; i++)
		{
			obj = global::keybinds.Value(i);
			json_save_var(idVar(obj, name), idVar(obj, keybind));
		}
		json_save_var(/*"move_speed"*/ STR(2673), sReal(setting_move_speed));
		json_save_var(/*"look_sensitivity"*/ STR(2674), sReal(setting_look_sensitivity));
		json_save_var(/*"fast_modifier"*/ STR(2675), sReal(setting_fast_modifier));
		json_save_var(/*"slow_modifier"*/ STR(2676), sReal(setting_slow_modifier));
		json_save_object_done();
		json_save_object_start({ /*"export"*/ STR(2677) });
		json_save_var(/*"exportmovie_format"*/ STR(2678), ObjType(obj_popup, sInt(popup_exportmovie))->format);
		json_save_var(/*"exportmovie_frame_rate"*/ STR(2679), ObjType(obj_popup, sInt(popup_exportmovie))->frame_rate);
		json_save_var(/*"exportmovie_framespersecond"*/ STR(2680), ObjType(obj_popup, sInt(popup_exportmovie))->framespersecond);
		json_save_var(/*"exportmovie_bit_rate"*/ STR(2681), ObjType(obj_popup, sInt(popup_exportmovie))->bit_rate);
		json_save_var_bool(/*"exportmovie_include_audio"*/ STR(2682), ObjType(obj_popup, sInt(popup_exportmovie))->include_audio);
		json_save_var_bool(/*"exportmovie_remove_background"*/ STR(2683), ObjType(obj_popup, sInt(popup_exportmovie))->remove_background);
		json_save_var_bool(/*"exportmovie_include_hidden"*/ STR(2705), ObjType(obj_popup, sInt(popup_exportmovie))->include_hidden);
		json_save_var_bool(/*"exportmovie_high_quality"*/ STR(2684), ObjType(obj_popup, sInt(popup_exportmovie))->high_quality);
		json_save_var_bool(/*"exportmovie_watermark"*/ STR(2685), ObjType(obj_popup, sInt(popup_exportmovie))->watermark);
		json_save_var_bool(/*"exportimage_remove_background"*/ STR(2686), ObjType(obj_popup, sInt(popup_exportimage))->remove_background);
		json_save_var_bool(/*"exportimage_include_hidden"*/ STR(2687), ObjType(obj_popup, sInt(popup_exportimage))->include_hidden);
		json_save_var_bool(/*"exportimage_high_quality"*/ STR(2688), ObjType(obj_popup, sInt(popup_exportimage))->high_quality);
		json_save_var_bool(/*"exportimage_watermark"*/ STR(2689), ObjType(obj_popup, sInt(popup_exportimage))->watermark);
		json_save_object_done();
		json_save_object_start({ /*"collapse"*/ STR(1065) });
		VarType key = ds_map_find_first(global::collapse_map);
		while (!is_undefined(key))
		{
			json_save_var_bool(key, DsMap(global::collapse_map).Value(key));
			key = ds_map_find_next(global::collapse_map, key);
		}
		
		json_save_object_done();
		json_save_object_start({ /*"main_window"*/ STR(2690) });
		window_state_save(e_window_MAIN);
		json_save_object_done();
		json_save_object_start({ /*"world_import"*/ STR(2693) });
		json_save_var_bool(/*"filter_enabled"*/ STR(2694), sVar(setting_world_import_filter_enabled));
		json_save_var(/*"filter_mode"*/ STR(2695), sVar(setting_world_import_filter_mode));
		json_save_array_start({ /*"filter_list"*/ STR(2696) });
		for (IntType i = IntType(0); i < ds_list_size(sInt(setting_world_import_filter_list)); i++)
			json_save_array_value(DsList(sInt(setting_world_import_filter_list)).Value(i));
		json_save_array_done();
		json_save_var_bool(/*"unload_regions"*/ STR(2697), sVar(setting_world_import_unload_regions));
		json_save_object_done();
		json_save_object_done();
		json_save_done();
		debug({ /*"Saved settings"*/ STR(2706) });
	}
	
	void settings_startup(ScopeAny self)
	{
		trial_startup();
		sReal(setting_advanced_mode) = dev_mode_advanced;
		sStr(setting_minecraft_assets_version) = minecraft_version;
		sVar(setting_minecraft_assets_new_version) = /*""*/ STR(0);
		sVar(setting_minecraft_assets_new_format) = IntType(0);
		sVar(setting_minecraft_assets_new_changes) = /*""*/ STR(0);
		sStr(setting_minecraft_assets_new_image) = /*""*/ STR(0);
		sStr(setting_project_folder) = projects_directory;
		directory_create_lib(sStr(setting_project_folder));
		sInt(closed_toast_list) = ds_list_create();
		sReal(backup_text_ani) = IntType(0);
		sInt(backup_next) = IntType(0);
		sVar(setting_backup) = true;
		sReal(setting_backup_time) = IntType(3);
		sReal(setting_backup_amount) = IntType(5);
		sVar(setting_spawn_cameras) = true;
		sReal(setting_unlimited_values) = false;
		sVar(setting_watermark_custom) = false;
		sStr(setting_watermark_fn) = /*""*/ STR(0);
		sInt(setting_watermark_image) = null_;
		sVar(setting_watermark_halign) = /*"right"*/ STR(193);
		sVar(setting_watermark_valign) = /*"bottom"*/ STR(190);
		sReal(setting_watermark_padding) = IntType(0);
		sReal(setting_watermark_scale) = .33;
		sReal(setting_watermark_opacity) = IntType(1);
		sInt(setting_theme) = global::theme_darker;
		sInt(setting_accent) = IntType(7);
		sVar(setting_accent_custom) = hex_to_color(/*"03A9F4"*/ STR(2707));
		sStr(setting_language_filename) = language_file;
		sVar(setting_timeline_autoscroll) = true;
		sReal(setting_timeline_compact) = false;
		sBool(setting_timeline_show_markers) = true;
		sVar(setting_timeline_select_jump) = true;
		sVar(setting_timeline_hide_ghosts) = false;
		sVar(setting_timeline_frame_snap) = false;
		sReal(setting_z_is_up) = false;
		sVar(setting_search_variants) = true;
		sVar(setting_separate_tool_modes) = false;
		sBool(setting_show_shortcuts_bar) = true;
		sVar(setting_gizmos_face_camera) = true;
		sVar(setting_fade_gizmos) = true;
		sVar(setting_camera_lock_mouse) = (platform_get() != e_platform_MAC_OS);
		sVar(setting_place_new) = true;
		sVar(setting_interface_scale_auto) = true;
		sVar(setting_interface_scale) = interface_scale_default_get();
		sVar(setting_interface_compact) = false;
		sVar(setting_panel_left_bottom_size) = IntType(300);
		sVar(setting_panel_right_bottom_size) = IntType(300);
		sVar(setting_panel_bottom_size) = IntType(300);
		sVar(setting_panel_top_size) = IntType(205);
		sVar(setting_panel_left_top_size) = IntType(300);
		sVar(setting_panel_right_top_size) = IntType(300);
		sVar(setting_properties_location) = /*"right"*/ STR(193);
		sVar(setting_ground_editor_location) = /*"right_secondary"*/ STR(189);
		sVar(setting_template_editor_location) = /*"right_secondary"*/ STR(189);
		sVar(setting_timeline_editor_location) = /*"right"*/ STR(193);
		sVar(setting_frame_editor_location) = /*"right_secondary"*/ STR(189);
		sVar(setting_settings_location) = /*"right_secondary"*/ STR(189);
		sVar(setting_view_split) = 0.5;
		sVar(setting_view_main_overlays) = true;
		sVar(setting_view_main_aspect_ratio) = false;
		sVar(setting_view_main_grid) = false;
		sVar(setting_view_main_gizmos) = true;
		sVar(setting_view_main_fog) = true;
		sVar(setting_view_main_effects) = true;
		sVar(setting_view_main_particles) = true;
		sVar(setting_view_main_location) = /*"full"*/ STR(2708);
		sVar(setting_view_second_show) = false;
		sVar(setting_view_second_overlays) = true;
		sVar(setting_view_second_aspect_ratio) = true;
		sVar(setting_view_second_grid) = false;
		sVar(setting_view_second_gizmos) = false;
		sVar(setting_view_second_fog) = true;
		sVar(setting_view_second_effects) = true;
		sVar(setting_view_second_particles) = true;
		sVar(setting_view_second_location) = /*"right_bottom"*/ STR(2709);
		sVar(setting_view_second_width) = IntType(440);
		sVar(setting_view_second_height) = IntType(280);
		sVar(setting_modelbench_popup_hidden) = false;
		sReal(setting_move_speed) = IntType(1);
		sReal(setting_look_sensitivity) = IntType(1);
		sReal(setting_fast_modifier) = IntType(3);
		sReal(setting_slow_modifier) = 0.25;
		sVar(setting_scenery_remove_edges) = true;
		sVar(setting_export_movie_format) = /*"mp4"*/ STR(57);
		sVar(setting_export_movie_frame_rate) = IntType(30);
		sVar(setting_export_movie_framespersecond) = IntType(30);
		sVar(setting_export_movie_bit_rate) = IntType(2500000);
		sVar(setting_export_movie_include_audio) = true;
		sVar(setting_export_movie_remove_background) = false;
		sVar(setting_export_movie_include_hidden) = false;
		sVar(setting_export_movie_high_quality) = true;
		sVar(setting_export_movie_watermark) = global::trial_version;
		sVar(setting_export_image_remove_background) = false;
		sVar(setting_export_image_include_hidden) = false;
		sVar(setting_export_image_high_quality) = true;
		sVar(setting_export_image_watermark) = global::trial_version;
		sInt(project_render_pass) = e_render_pass_COMBINED;
		sVar(setting_world_import_filter_enabled) = false;
		sVar(setting_world_import_filter_mode) = IntType(0);
		sInt(setting_world_import_filter_list) = ds_list_create();
		sVar(setting_world_import_unload_regions) = true;
		sReal(setting_snap) = false;
		sVar(setting_snap_absolute) = true;
		sReal(setting_snap_size_position) = IntType(1);
		sReal(setting_snap_size_rotation) = IntType(15);
		sReal(setting_snap_size_scale) = IntType(1);
		sBool(setting_tool_select) = false;
		sVar(setting_tool_move) = true;
		sBool(setting_tool_rotate) = true;
		sBool(setting_tool_scale) = false;
		sBool(setting_tool_bend) = true;
		sBool(setting_tool_transform) = false;
		sVar(setting_main_window_rect) = null_;
		sVar(setting_main_window_maximized) = true;
		sVar(setting_reduced_motion) = false;
		sBool(setting_wind_enable) = true;
		settings_load(self);
		languages_load();
		interface_update_instant(self);
	}
	
	void shader_add_set(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uAddTexture"*/ STR(2710)), surface_get_texture((IntType)(argument[IntType(0)])));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uAddTexture"*/ STR(2710)), false);
		render_set_uniform(/*"uAmount"*/ STR(2711), argument[IntType(1)]);
		if (argument_count > IntType(2))
			render_set_uniform_color(/*"uBlendColor"*/ STR(1904), argument[IntType(2)], IntType(1));
		else
			render_set_uniform_color(/*"uBlendColor"*/ STR(1904), c_white, IntType(1));
		
		if (argument_count > IntType(3))
			render_set_uniform(/*"uPower"*/ STR(2712), argument[IntType(3)]);
		else
			render_set_uniform(/*"uPower"*/ STR(2712), IntType(1));
		
	}
	
	void shader_blur_set(VarType kernel, RealType radius, RealType xdir, RealType ydir)
	{
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uKernel"*/ STR(2714), kernel);
		render_set_uniform_int(/*"uSamples"*/ STR(2715), (RealType)array_length(VarType::CreateRef(kernel)) / 2.0);
		render_set_uniform(/*"uRadius"*/ STR(2716), radius);
		render_set_uniform_vec2(/*"uDirection"*/ STR(2717), xdir, ydir);
	}
	
	void shader_border_set(ScopeAny self)
	{
		render_set_uniform_vec2(/*"uTexSize"*/ STR(2718), global::render_width, global::render_height);
		render_set_uniform_color(/*"uColor"*/ STR(2719), sVar(border_mode) == e_render_mode_SELECT ? c_white : c_yellow, IntType(1));
	}
	
	void shader_ca_set()
	{
		render_set_uniform(/*"uBlurAmount"*/ STR(2720), idVar(global::render_camera, value).Value(e_value_CAM_CA_BLUR_AMOUNT));
		render_set_uniform_vec3(/*"uColorOffset"*/ STR(2721), idVar(global::render_camera, value).Value(e_value_CAM_CA_RED_OFFSET), idVar(global::render_camera, value).Value(e_value_CAM_CA_GREEN_OFFSET), idVar(global::render_camera, value).Value(e_value_CAM_CA_BLUE_OFFSET));
		render_set_uniform_int(/*"uDistortChannels"*/ STR(2722), idVar(global::render_camera, value).Value(e_value_CAM_CA_DISTORT_CHANNELS));
	}
	
	void shader_clear()
	{
		gpu_set_tex_mip_enable(mip_off);
		texture_set_stage(IntType(0), IntType(0));
		shader_reset();
		global::shader_texture_surface = false;
		global::shader_texture_filter_linear = false;
		global::shader_texture_filter_mipmap = false;
	}
	
	void shader_clip_set(VarType xx, VarType yy, VarType w, VarType h)
	{
		render_set_uniform(/*"uBox"*/ STR(2723), ArrType::From({ xx, yy, w, h }));
		render_set_uniform(/*"uScreenSize"*/ STR(2713), ArrType::From({ IntType(1), IntType(1) }));
	}
	
	void shader_color_camera_set()
	{
		render_set_uniform(/*"uEmissive"*/ STR(2493), idVar(global::render_camera, value).Value(e_value_EMISSIVE));
		render_set_uniform_color(/*"uBlendColor"*/ STR(1904), idVar(global::render_camera, value).Value(e_value_RGB_MUL), idVar(global::render_camera, value).Value(e_value_ALPHA));
		render_set_uniform_color(/*"uRGBAdd"*/ STR(2066), idVar(global::render_camera, value).Value(e_value_RGB_ADD), IntType(1));
		render_set_uniform_color(/*"uRGBSub"*/ STR(2067), idVar(global::render_camera, value).Value(e_value_RGB_SUB), IntType(1));
		render_set_uniform_color(/*"uHSBAdd"*/ STR(2068), idVar(global::render_camera, value).Value(e_value_HSB_ADD), IntType(1));
		render_set_uniform_color(/*"uHSBSub"*/ STR(2069), idVar(global::render_camera, value).Value(e_value_HSB_SUB), IntType(1));
		render_set_uniform_color(/*"uHSBMul"*/ STR(2070), idVar(global::render_camera, value).Value(e_value_HSB_MUL), IntType(1));
		render_set_uniform_color(/*"uMixColor"*/ STR(2071), idVar(global::render_camera, value).Value(e_value_MIX_COLOR), idVar(global::render_camera, value).Value(e_value_MIX_PERCENT));
	}
	
	void shader_color_correction_set()
	{
		render_set_uniform(/*"uContrast"*/ STR(2724), idVar(global::render_camera, value).Value(e_value_CAM_CONTRAST) + IntType(1));
		render_set_uniform(/*"uBrightness"*/ STR(2725), idVar(global::render_camera, value).Value(e_value_CAM_BRIGHTNESS));
		render_set_uniform(/*"uSaturation"*/ STR(2726), idVar(global::render_camera, value).Value(e_value_CAM_SATURATION));
		render_set_uniform(/*"uVibrance"*/ STR(2727), idVar(global::render_camera, value).Value(e_value_CAM_VIBRANCE));
		render_set_uniform_color(/*"uColorBurn"*/ STR(2728), idVar(global::render_camera, value).Value(e_value_CAM_COLOR_BURN), IntType(1));
	}
	
	void shader_color_fog_lights_set()
	{
		render_set_uniform_int(/*"uIsGround"*/ STR(2496), IntType(0));
		render_set_uniform_int(/*"uIsSky"*/ STR(2499), IntType(0));
		render_set_uniform_int(/*"uColorsExt"*/ STR(2065), IntType(0));
		render_set_uniform_vec3(/*"uSunDirection"*/ STR(2729), global::_app->background_sun_direction.Real(X_), global::_app->background_sun_direction.Real(Y_), global::_app->background_sun_direction.Real(Z_));
		render_set_uniform_int(/*"uLightAmount"*/ STR(2730), global::_app->background_light_amount);
		render_set_uniform(/*"uLightData"*/ STR(2731), global::_app->background_light_data);
		render_set_uniform_color(/*"uAmbientColor"*/ STR(2732), global::_app->background_ambient_color_final, IntType(1));
		render_set_uniform(/*"uEmissive"*/ STR(2493), IntType(0));
		render_set_uniform_color(/*"uFallbackColor"*/ STR(2733), (global::render_background > 0) ? global::_app->background_sky_color_final : c_black, IntType(1));
		render_set_uniform_int(/*"uTonemapper"*/ STR(2734), global::render_tonemapper);
		render_set_uniform(/*"uExposure"*/ STR(2735), global::render_exposure);
		render_set_uniform(/*"uGamma"*/ STR(2736), global::render_gamma);
	}
	
	void shader_depth_point_set()
	{
		render_set_uniform_vec3(/*"uEye"*/ STR(2737), global::render_proj_from.Real(X_), global::render_proj_from.Real(Y_), global::render_proj_from.Real(Z_));
		render_set_uniform(/*"uNear"*/ STR(2738), global::proj_depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::proj_depth_far);
	}
	
	void shader_depth_set()
	{
		render_set_uniform(/*"uNear"*/ STR(2738), global::proj_depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::proj_depth_far);
	}
	
	void shader_distort_set()
	{
		render_set_uniform(/*"uDistortAmount"*/ STR(2740), idVar(global::render_camera, value).Value(e_value_CAM_DISTORT_AMOUNT));
		render_set_uniform_int(/*"uRepeatImage"*/ STR(2741), idVar(global::render_camera, value).Value(e_value_CAM_DISTORT_REPEAT));
		render_set_uniform(/*"uZoomAmount"*/ STR(2742), idVar(global::render_camera, value).Value(e_value_CAM_DISTORT_ZOOM_AMOUNT));
	}
	
	void shader_high_bloom_threshold_set()
	{
		render_set_uniform(/*"uThreshold"*/ STR(2743), idVar(global::render_camera, value).Value(e_value_CAM_BLOOM_THRESHOLD));
	}
	
	void shader_high_depth_normal_set()
	{
		render_set_uniform(/*"uNormalBufferScale"*/ STR(2744), is_cpp() ? normal_buffer_scale : IntType(1));
		render_set_uniform(/*"uNear"*/ STR(2738), global::depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::depth_far);
	}
	
	void shader_high_dof_coc_blur_set(RealType checkx, RealType checky)
	{
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform_vec2(/*"uPixelCheck"*/ STR(2745), checkx, checky);
	}
	
	void shader_high_dof_coc_set(ScopeAny self, VarType depthbuffer)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(depthbuffer)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		render_set_uniform(/*"uDepth"*/ STR(2747), idVar(global::render_camera, value).Value(e_value_CAM_DOF_DEPTH));
		render_set_uniform(/*"uRange"*/ STR(2748), idVar(global::render_camera, value).Value(e_value_CAM_DOF_RANGE));
		render_set_uniform(/*"uFadeSize"*/ STR(2749), idVar(global::render_camera, value).Value(e_value_CAM_DOF_FADE_SIZE));
		render_set_uniform(/*"uNear"*/ STR(2738), global::cam_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::cam_far);
	}
	
	void shader_high_dof_set(ScopeAny self, VarType blurbuffer)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uBlurBuffer"*/ STR(2750)), surface_get_texture((IntType)(blurbuffer)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uBlurBuffer"*/ STR(2750)), false);
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uBlurSize"*/ STR(2751), idVar(global::render_camera, value).Value(e_value_CAM_DOF_BLUR_SIZE));
		render_set_uniform(/*"uBias"*/ STR(2752), idVar(global::render_camera, value).Value(e_value_CAM_DOF_BIAS));
		render_set_uniform(/*"uThreshold"*/ STR(2743), idVar(global::render_camera, value).Value(e_value_CAM_DOF_THRESHOLD));
		render_set_uniform(/*"uGain"*/ STR(2753), idVar(global::render_camera, value).Value(e_value_CAM_DOF_GAIN));
		render_set_uniform_int(/*"uFringe"*/ STR(2754), bool_to_float(idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE)));
		render_set_uniform_vec3(/*"uFringeAngle"*/ STR(2755), -degtorad(idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_RED) + 180.0), -degtorad(idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_GREEN) + 180.0), -degtorad(idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_BLUE) + 180.0));
		render_set_uniform_vec3(/*"uFringeStrength"*/ STR(2756), idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_RED), idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_GREEN), idVar(global::render_camera, value).Value(e_value_CAM_DOF_FRINGE_BLUE));
		render_generate_dof_samples(idVar(global::render_camera, value).Value(e_value_CAM_BLADE_AMOUNT), idVar(global::render_camera, value).Value(e_value_CAM_BLADE_ANGLE), idVar(global::render_camera, value).Value(e_value_CAM_DOF_BLUR_RATIO));
		render_set_uniform_int(/*"uSampleAmount"*/ STR(2757), global::render_dof_sample_amount);
		render_set_uniform(/*"uSamples"*/ STR(2715), global::render_dof_samples);
		render_set_uniform(/*"uWeightSamples"*/ STR(2758), global::render_dof_weight_samples);
	}
	
	void shader_high_fog_apply_set(ScopeAny self, VarType fogbuffer)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uFogBuffer"*/ STR(2759)), surface_get_texture((IntType)(fogbuffer)));
		render_set_uniform_color(/*"uFogColor"*/ STR(1914), global::_app->background_fog_object_color_final, IntType(1));
	}
	
	void shader_high_indirect_blur_set(ScopeAny self)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_depth)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), surface_get_texture((IntType)(global::render_surface_normal)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), surface_get_texture(global::render_sample_noise_texture));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), false);
		render_set_uniform(/*"uNormalBufferScale"*/ STR(2744), is_cpp() ? normal_buffer_scale : IntType(1));
		render_set_uniform(/*"uNoiseSize"*/ STR(2762), global::render_sample_noise_size);
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uSamples"*/ STR(2715), global::render_samples);
		render_set_uniform(/*"uBlurSize"*/ STR(2751), global::_app->project_render_indirect_blur_radius);
	}
	
	void shader_high_lighting_apply_set(ScopeAny self, VarType shadows, VarType mask, VarType material)
	{
		render_set_uniform_int(/*"uShadowsEnabled"*/ STR(2763), global::render_shadows || global::render_ssao);
		if ((global::render_shadows || global::render_ssao) && surface_exists((IntType)(shadows)))
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uShadows"*/ STR(2764)), surface_get_texture((IntType)(shadows)));
		if (global::render_shadows && surface_exists((IntType)(global::render_surface_specular)))
		{
			render_set_uniform_int(/*"uSpecularEnabled"*/ STR(2765), true);
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSpecular"*/ STR(2766)), surface_get_texture((IntType)(global::render_surface_specular)));
		}
		else
			render_set_uniform_int(/*"uSpecularEnabled"*/ STR(2765), false);
		
		if (global::render_shadows && surface_exists((IntType)(global::render_surface_emissive)))
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uEmissive"*/ STR(2493)), surface_get_texture((IntType)(global::render_surface_emissive)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMask"*/ STR(2767)), surface_get_texture((IntType)(mask)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMaterialBuffer"*/ STR(2768)), surface_get_texture((IntType)(material)));
		render_set_uniform(/*"uIndirectEnabled"*/ STR(2769), global::render_indirect);
		render_set_uniform(/*"uIndirectStrength"*/ STR(2770), global::_app->project_render_indirect_strength);
		render_set_uniform(/*"uReflectionsEnabled"*/ STR(2771), global::render_reflections);
		render_set_uniform_color(/*"uFallbackColor"*/ STR(2733), global::_app->background_sky_color_final, IntType(1));
		render_set_uniform(/*"uGamma"*/ STR(2736), global::render_gamma);
	}
	
	void shader_high_light_point_set(ScopeAny self)
	{
		render_set_uniform_int(/*"uIsSky"*/ STR(2499), IntType(0));
		render_set_uniform_int(/*"uIsWater"*/ STR(2494), IntType(0));
		render_set_uniform_vec3(/*"uLightPosition"*/ STR(2772), global::render_light_from.Value(X_), global::render_light_from.Value(Y_), global::render_light_from.Value(Z_));
		render_set_uniform_color(/*"uLightColor"*/ STR(2773), global::render_light_color, IntType(1));
		render_set_uniform(/*"uLightStrength"*/ STR(2774), global::render_light_strength);
		render_set_uniform(/*"uLightNear"*/ STR(2775), global::render_light_near);
		render_set_uniform(/*"uLightFar"*/ STR(2776), global::render_light_far);
		render_set_uniform(/*"uLightFadeSize"*/ STR(2777), global::render_light_fade_size);
		render_set_uniform_vec3(/*"uShadowPosition"*/ STR(2778), global::render_shadow_from.Real(X_), global::render_shadow_from.Real(Y_), global::render_shadow_from.Real(Z_));
		render_set_uniform(/*"uLightSpecular"*/ STR(2500), global::render_light_specular_strength);
		render_set_uniform(/*"uLightSize"*/ STR(2779), global::render_light_size);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_point_atlas_buffer)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		render_set_uniform(/*"uDepthBufferSize"*/ STR(2780), global::_app->project_render_shadows_point_buffer_size);
	}
	
	void shader_high_light_point_shadowless_set()
	{
		render_set_uniform_int(/*"uIsSky"*/ STR(2499), IntType(0));
		render_set_uniform_int(/*"uLightAmount"*/ STR(2730), global::render_shadowless_point_amount);
		render_set_uniform(/*"uLightData"*/ STR(2731), global::render_shadowless_point_data);
		render_set_uniform(/*"uEmissive"*/ STR(2493), IntType(0));
		global::render_light_specular_strength = IntType(1);
		render_set_uniform(/*"uLightSpecular"*/ STR(2500), global::render_light_specular_strength);
	}
	
	void shader_high_light_spot_set(ScopeAny self)
	{
		render_set_uniform(/*"uEmissive"*/ STR(2493), IntType(0));
		render_set_uniform_int(/*"uIsSky"*/ STR(2499), IntType(0));
		render_set_uniform_int(/*"uIsWater"*/ STR(2494), IntType(0));
		render_set_uniform(/*"uLightMatrix"*/ STR(2781), global::render_spot_matrix);
		render_set_uniform(/*"uShadowMatrix"*/ STR(2782), global::render_shadow_matrix);
		render_set_uniform_vec3(/*"uLightPosition"*/ STR(2772), global::render_light_from.Value(X_), global::render_light_from.Value(Y_), global::render_light_from.Value(Z_));
		render_set_uniform_color(/*"uLightColor"*/ STR(2773), global::render_light_color, IntType(1));
		render_set_uniform(/*"uLightStrength"*/ STR(2774), global::render_light_strength);
		render_set_uniform(/*"uLightSpecular"*/ STR(2500), global::render_light_specular_strength);
		render_set_uniform(/*"uLightSize"*/ STR(2779), global::render_light_size);
		render_set_uniform(/*"uLightNear"*/ STR(2775), global::render_light_near);
		render_set_uniform(/*"uLightFar"*/ STR(2776), global::render_light_far);
		render_set_uniform(/*"uLightFadeSize"*/ STR(2777), global::render_light_fade_size);
		render_set_uniform(/*"uLightSpotSharpness"*/ STR(2783), global::render_light_spot_sharpness);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uLightGobo"*/ STR(2784)), sprite_get_texture((IntType)(global::render_gobo_texture), IntType(0)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uLightGobo"*/ STR(2784)), true);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_spot_buffer)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), true);
	}
	
	void shader_high_light_sun_set(ScopeAny self)
	{
		render_set_uniform(/*"uEmissive"*/ STR(2493), IntType(0));
		render_set_uniform_int(/*"uIsGround"*/ STR(2496), IntType(0));
		render_set_uniform_int(/*"uIsSky"*/ STR(2499), IntType(0));
		render_set_uniform_int(/*"uIsWater"*/ STR(2494), IntType(0));
		render_set_uniform_mat4_array(/*"uLightMatBiasMVP"*/ STR(2785), ArrType::From({ ObjType(frustum, global::render_cascades.Value(IntType(0)))->matBias, ObjType(frustum, global::render_cascades.Value(IntType(1)))->matBias, ObjType(frustum, global::render_cascades.Value(IntType(2)))->matBias }));
		render_set_uniform(/*"uSunNear"*/ STR(2786), ArrType::From({ ObjType(frustum, global::render_cascades.Value(IntType(0)))->near_, ObjType(frustum, global::render_cascades.Value(IntType(1)))->near_, ObjType(frustum, global::render_cascades.Value(IntType(2)))->near_ }));
		render_set_uniform(/*"uSunFar"*/ STR(2787), ArrType::From({ ObjType(frustum, global::render_cascades.Value(IntType(0)))->far_, ObjType(frustum, global::render_cascades.Value(IntType(1)))->far_, ObjType(frustum, global::render_cascades.Value(IntType(2)))->far_ }));
		render_set_uniform_color(/*"uLightColor"*/ STR(2773), global::render_light_color, IntType(1));
		render_set_uniform(/*"uLightStrength"*/ STR(2774), global::render_light_strength);
		render_set_uniform(/*"uLightSpecular"*/ STR(2500), global::render_light_specular_strength);
		render_set_uniform_vec3(/*"uLightDirection"*/ STR(2788), global::render_sun_direction.Real(X_), global::render_sun_direction.Real(Y_), global::render_sun_direction.Real(Z_));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer0"*/ STR(2789)), surface_get_texture((IntType)(global::render_surface_sun_buffer.Value(IntType(0)))));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer0"*/ STR(2789)), true);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer1"*/ STR(2790)), surface_get_texture((IntType)(global::render_surface_sun_buffer.Value(IntType(1)))));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer1"*/ STR(2790)), true);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer2"*/ STR(2791)), surface_get_texture((IntType)(global::render_surface_sun_buffer.Value(IntType(2)))));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer2"*/ STR(2791)), true);
		render_set_uniform(/*"uCascadeEndClipSpace"*/ STR(2792), ArrType::From({ ObjType(frustum, global::render_cascades.Value(IntType(0)))->clipEndDepth, ObjType(frustum, global::render_cascades.Value(IntType(1)))->clipEndDepth, ObjType(frustum, global::render_cascades.Value(IntType(2)))->clipEndDepth }));
	}
	
	void shader_high_raytrace_resolve_set(ScopeAny self, BoolType indirect)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_depth)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), surface_get_texture((IntType)(global::render_surface_normal)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMaterialBuffer"*/ STR(2768)), surface_get_texture((IntType)(global::render_surface_material)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uMaterialBuffer"*/ STR(2768)), false);
		render_set_uniform(/*"uNormalBufferScale"*/ STR(2744), is_cpp() ? normal_buffer_scale : IntType(1));
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform_int(/*"uIndirect"*/ STR(2793), bool_to_float(indirect));
	}
	
	void shader_high_raytrace_set(ScopeAny self, IntType mode, VarType surf)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_depth)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), surface_get_texture((IntType)(global::render_surface_normal)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), surface_get_texture(global::render_sample_noise_texture));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMaterialBuffer"*/ STR(2768)), surface_get_texture((IntType)(global::render_surface_material)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDiffuseBuffer"*/ STR(2794)), surface_get_texture((IntType)(global::render_surface_diffuse)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), true);
		render_set_uniform_int(/*"uRayType"*/ STR(2795), mode);
		render_set_uniform(/*"uNormalBufferScale"*/ STR(2744), is_cpp() ? normal_buffer_scale : IntType(1));
		if (mode == e_raytrace_INDIRECT)
		{
			render_set_uniform(/*"uPrecision"*/ STR(2796), global::_app->project_render_indirect_precision);
			render_set_uniform(/*"uThickness"*/ STR(2797), 0.001);
			render_set_uniform(/*"uRayDistance"*/ STR(2798), IntType(5000));
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMaterialBuffer"*/ STR(2768)), surface_get_texture((IntType)(global::render_surface_emissive)));
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDataBuffer"*/ STR(2799)), surface_get_texture((IntType)(global::render_surface_shadows)));
		}
		if (mode == e_raytrace_REFLECTIONS)
		{
			render_set_uniform(/*"uPrecision"*/ STR(2796), global::_app->project_render_reflections_precision);
			render_set_uniform(/*"uThickness"*/ STR(2797), global::_app->project_render_reflections_thickness);
			render_set_uniform(/*"uRayDistance"*/ STR(2798), IntType(5000));
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDataBuffer"*/ STR(2799)), surface_get_texture((IntType)(surf)));
		}
		render_set_uniform(/*"uNoiseSize"*/ STR(2762), global::render_sample_noise_size);
		render_set_uniform(/*"uNear"*/ STR(2738), global::depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::depth_far);
		render_set_uniform(/*"uProjMatrix"*/ STR(2800), global::proj_matrix);
		render_set_uniform(/*"uProjMatrixInv"*/ STR(2801), matrix_inverse(global::proj_matrix));
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uViewMatrixInv"*/ STR(2802), matrix_inverse(global::view_matrix));
		render_set_uniform_color(/*"uSkyColor"*/ STR(2803), global::_app->background_sky_color_final, IntType(1));
		render_set_uniform_color(/*"uFogColor"*/ STR(1914), global::_app->background_fog_color_final, IntType(1));
		render_set_uniform(/*"uFadeAmount"*/ STR(2804), global::_app->project_render_reflections_fade_amount);
		render_set_uniform(/*"uGamma"*/ STR(2736), global::render_gamma);
		render_set_uniform(/*"uIndirectStength"*/ STR(2805), global::_app->project_render_indirect_strength);
	}
	
	void shader_high_samples_add_set(ScopeAny self, VarType exponent, VarType decimal, VarType alpha, VarType sample)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesExp"*/ STR(2806)), surface_get_texture((IntType)(exponent)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesDec"*/ STR(2807)), surface_get_texture((IntType)(decimal)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesAlpha"*/ STR(2808)), surface_get_texture((IntType)(alpha)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSample"*/ STR(2809)), surface_get_texture((IntType)(sample)));
	}
	
	void shader_high_samples_unpack_set(ScopeAny self)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesExp"*/ STR(2806)), surface_get_texture((IntType)(global::render_surface_sample_expo)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesDec"*/ STR(2807)), surface_get_texture((IntType)(global::render_surface_sample_dec)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSamplesAlpha"*/ STR(2808)), surface_get_texture((IntType)(global::render_surface_sample_alpha)));
		render_set_uniform(/*"uSamplesStrength"*/ STR(2810), 255.0 / global::render_samples);
		render_set_uniform_int(/*"uRenderBackground"*/ STR(2811), global::render_background);
	}
	
	void shader_high_ssao_set(ScopeAny self, VarType mask)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_depth)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), surface_get_texture((IntType)(global::render_surface_normal)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uEmissiveBuffer"*/ STR(2812)), surface_get_texture((IntType)(global::render_surface_emissive)));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), surface_get_texture(global::render_sample_noise_texture));
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMaskBuffer"*/ STR(2813)), surface_get_texture((IntType)(mask)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNormalBuffer"*/ STR(2760)), false);
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uEmissiveBuffer"*/ STR(2812)), false);
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), true);
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uMaskBuffer"*/ STR(2813)), true);
		render_set_uniform(/*"uNormalBufferScale"*/ STR(2744), is_cpp() ? normal_buffer_scale : IntType(1));
		render_set_uniform(/*"uNear"*/ STR(2738), global::depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::depth_far);
		render_set_uniform(/*"uProjMatrix"*/ STR(2800), global::proj_matrix);
		render_set_uniform(/*"uProjMatrixInv"*/ STR(2801), matrix_inverse(global::proj_matrix));
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uNoiseSize"*/ STR(2762), global::render_sample_noise_size);
		render_set_uniform(/*"uKernel"*/ STR(2714), global::render_ssao_kernel);
		render_set_uniform(/*"uRadius"*/ STR(2716), global::_app->project_render_ssao_radius);
		render_set_uniform(/*"uPower"*/ STR(2712), global::_app->project_render_ssao_power);
		render_set_uniform_color(/*"uColor"*/ STR(2719), global::_app->project_render_ssao_color, IntType(1));
	}
	
	void shader_high_subsurface_scatter_set(ScopeAny self, VarType ssssurf, VarType rangesurf)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSSSBuffer"*/ STR(2814)), surface_get_texture((IntType)(ssssurf)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uSSSBuffer"*/ STR(2814)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uSSSRangeBuffer"*/ STR(2815)), surface_get_texture((IntType)(rangesurf)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uSSSRangeBuffer"*/ STR(2815)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), surface_get_texture((IntType)(global::render_surface_depth)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDepthBuffer"*/ STR(2746)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uDirect"*/ STR(2816)), surface_get_texture((IntType)(global::render_surface_shadows)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uDirect"*/ STR(2816)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), surface_get_texture(global::render_sample_noise_texture));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2761)), false);
		render_set_uniform(/*"uNoiseSize"*/ STR(2762), global::render_sample_noise_size);
		render_set_uniform(/*"uProjMatrix"*/ STR(2800), global::proj_matrix);
		render_set_uniform(/*"uProjMatrixInv"*/ STR(2801), matrix_inverse(global::proj_matrix));
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2713), global::render_width, global::render_height);
		render_set_uniform(/*"uNear"*/ STR(2738), global::depth_near);
		render_set_uniform(/*"uFar"*/ STR(2739), global::depth_far);
		render_set_uniform_int(/*"uSamples"*/ STR(2715), global::render_subsurface_size);
		render_set_uniform(/*"uKernel"*/ STR(2714), global::render_subsurface_kernel);
	}
	
}
