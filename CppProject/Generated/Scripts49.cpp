/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.09.14 04:57:19 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void render_set_uniform_color(StringType name, VarType color, VarType alpha)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_set_uniform_color(uniform, color, alpha);
	}
	
	void render_set_uniform_int(StringType name, VarType val)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
		{
			if (!is_array(val))
				shader_submit_int(uniform, val);
		}
	}
	
	void render_set_uniform_mat4_array(StringType name, ArrType val)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_submit_mat4_array(uniform, val);
	}
	
	void render_set_uniform_vec2(StringType name, VarType xx, VarType yy)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_submit_vec2(uniform, xx, yy);
	}
	
	void render_set_uniform_vec3(StringType name, VarType xx, VarType yy, VarType zz)
	{
		VarType uniform = DsMap(idInt(global::render_shader_obj, uniform_map)).Value(name);
		if (!is_undefined(uniform) && uniform > -IntType(1))
			shader_submit_vec3(uniform, xx, yy, zz);
	}
	
	void render_start(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		global::render_target = argument[IntType(0)];
		global::render_camera = argument[IntType(1)];
		global::render_width = global::_app->project_video_width;
		global::render_height = global::_app->project_video_height;
		if (surface_exists(global::render_pass_surf))
			surface_free(global::render_pass_surf);
		global::render_pass_surf = null_;
		global::render_world_count = IntType(0);
		global::render_pass = global::_app->project_render_pass;
		global::render_ssao = global::_app->project_render_ssao > 0 && (global::render_pass == e_render_pass_COMBINED || global::render_pass == e_render_pass_DEPTH_U24 || global::render_pass == e_render_pass_NORMAL || global::render_pass == e_render_pass_AO || global::render_pass == e_render_pass_REFLECTIONS);
		global::render_shadows = global::_app->project_render_shadows > 0 && (global::render_pass == e_render_pass_COMBINED || global::render_pass == e_render_pass_SHADOWS || global::render_pass == e_render_pass_SPECULAR || global::render_pass == e_render_pass_INDIRECT || global::render_pass == e_render_pass_INDIRECT_SHADOWS || global::render_pass == e_render_pass_REFLECTIONS);
		global::render_indirect = global::render_shadows && global::_app->project_render_indirect > 0 && (global::render_pass == e_render_pass_COMBINED || global::render_pass == e_render_pass_INDIRECT || global::render_pass == e_render_pass_INDIRECT_SHADOWS || global::render_pass == e_render_pass_REFLECTIONS);
		global::render_reflections = global::_app->project_render_reflections > 0 && (global::render_pass == e_render_pass_COMBINED || global::render_pass == e_render_pass_REFLECTIONS);
		global::render_glow = global::_app->project_render_glow > 0 && (global::render_quality == e_view_mode_RENDER);
		global::render_glow_falloff = global::_app->project_render_glow > 0 && global::_app->project_render_glow_falloff > 0 && (global::render_quality == e_view_mode_RENDER);
		global::render_depth_normals = (global::render_ssao || global::render_indirect || global::render_reflections || global::_app->project_render_subsurface_samples >= IntType(0));
		if (global::render_camera != null_)
		{
			if (!(idVar(global::render_camera, value).Value(e_value_CAM_SIZE_USE_PROJECT) > 0))
			{
				global::render_width = idVar(global::render_camera, value).Value(e_value_CAM_WIDTH);
				global::render_height = idVar(global::render_camera, value).Value(e_value_CAM_HEIGHT);
			}
			if (idVar(global::render_camera, value).Value(e_value_CAM_LIGHT_MANAGEMENT) > 0)
			{
				global::render_tonemapper = idVar(global::render_camera, value).Value(e_value_CAM_TONEMAPPER);
				global::render_exposure = idVar(global::render_camera, value).Value(e_value_CAM_EXPOSURE);
				global::render_gamma = idVar(global::render_camera, value).Value(e_value_CAM_GAMMA);
			}
			else
			{
				global::render_tonemapper = global::_app->project_render_tonemapper;
				global::render_exposure = global::_app->project_render_exposure;
				global::render_gamma = global::_app->project_render_gamma;
			}
			
			global::render_camera_bloom = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_BLOOM) > 0) && !(global::render_pass > 0);
			global::render_camera_lens_dirt = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_LENS_DIRT) > 0 && idVar(global::render_camera, value).Value(e_value_TEXTURE_OBJ) != null_) && !(global::render_pass > 0);
			global::render_camera_dof = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_DOF) > 0) && !(global::render_pass > 0);
			global::render_camera_color_correction = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_COLOR_CORRECTION) > 0) && !(global::render_pass > 0);
			global::render_camera_grain = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_GRAIN) > 0) && !(global::render_pass > 0);
			global::render_camera_vignette = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE) > 0) && !(global::render_pass > 0);
			global::render_camera_ca = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_CA) > 0) && !(global::render_pass > 0);
			global::render_camera_distort = (global::render_effects > 0 && idVar(global::render_camera, value).Value(e_value_CAM_DISTORT) > 0) && !(global::render_pass > 0);
			global::render_camera_lens_dirt = global::render_camera_lens_dirt && ((global::render_camera_bloom && idVar(global::render_camera, value).Value(e_value_CAM_LENS_DIRT_BLOOM) > 0) || (global::render_glow && idVar(global::render_camera, value).Value(e_value_CAM_LENS_DIRT_GLOW) > 0)) && !(global::render_pass > 0);
			global::render_camera_lens_dirt_bloom = global::render_camera_lens_dirt && idVar(global::render_camera, value).Value(e_value_CAM_LENS_DIRT_BLOOM) > 0 && !(global::render_pass > 0);
			global::render_camera_lens_dirt_glow = global::render_camera_lens_dirt && idVar(global::render_camera, value).Value(e_value_CAM_LENS_DIRT_GLOW) > 0 && !(global::render_pass > 0);
			global::_app->render_camera_colors = (idVar(global::render_camera, value).Value(e_value_ALPHA) < IntType(1) || idVar(global::render_camera, value).Value(e_value_EMISSIVE) > IntType(0) || idVar(global::render_camera, value).Value(e_value_MIX_COLOR) > IntType(0) || idVar(global::render_camera, value).Value(e_value_RGB_ADD) != c_black || idVar(global::render_camera, value).Value(e_value_RGB_SUB) != c_black || idVar(global::render_camera, value).Value(e_value_RGB_MUL) != c_white || idVar(global::render_camera, value).Value(e_value_HSB_ADD) != c_black || idVar(global::render_camera, value).Value(e_value_HSB_SUB) != c_black || idVar(global::render_camera, value).Value(e_value_HSB_MUL) != c_red);
		}
		else
		{
			global::render_camera_bloom = false;
			global::render_camera_dof = false;
			global::render_camera_color_correction = false;
			global::render_camera_grain = false;
			global::render_camera_vignette = false;
			global::render_camera_ca = false;
			global::render_camera_distort = false;
			global::render_camera_lens_dirt = false;
			global::render_camera_lens_dirt_bloom = false;
			global::render_camera_lens_dirt_glow = false;
			global::_app->render_camera_colors = false;
			global::render_tonemapper = global::_app->project_render_tonemapper;
			global::render_exposure = global::_app->project_render_exposure;
			global::render_gamma = global::_app->project_render_gamma;
		}
		
		if (argument_count > IntType(2))
		{
			global::render_width = argument[IntType(2)];
			global::render_height = argument[IntType(3)];
		}
		global::render_ratio = (RealType)global::render_width / global::render_height;
		global::render_overlay = (global::_app->render_camera_colors || global::render_watermark);
		render_refresh_effects();
		withAll (obj_timeline, global::_app->id)
			self->render_visible = tl_get_visible(ScopeAny(self));
		
		global::render_prev_color = draw_get_color();
		global::render_prev_alpha = draw_get_alpha();
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		render_update_text();
		render_update_item();
		render_update_camera();
		camera_apply(global::cam_render);
	}
	
	void render_startup(ScopeAny self)
	{
		log({ /*"Render init"*/ STR(2494) });
		gpu_set_blendenable(true);
		gpu_set_blendmode(bm_normal);
		gpu_set_alphatestenable(true);
		gpu_set_alphatestref(IntType(0));
		gpu_set_texfilter(false);
		gpu_set_tex_mip_enable(mip_off);
		gpu_set_tex_mip_filter(tf_linear);
		gpu_set_texrepeat(true);
		gpu_set_ztestenable(false);
		render_set_culling(true);
		gpu_set_tex_max_mip(IntType(4));
		shader_reset_uniforms();
		global::render_view_current = null_;
		global::render_width = IntType(1);
		global::render_height = IntType(1);
		global::render_ratio = IntType(1);
		global::render_camera = null_;
		global::render_light_specular_strength = IntType(0);
		global::render_effects = false;
		global::render_effects_done = false;
		global::render_effects_list = ds_list_create();
		global::render_effects_progress = IntType(0);
		global::render_quality = e_view_mode_FLAT;
		global::render_camera_bloom = false;
		global::render_camera_dof = false;
		global::render_glow = false;
		global::render_glow_falloff = false;
		global::render_camera_ca = false;
		global::render_camera_distort = false;
		global::render_camera_color_correction = false;
		global::render_camera_grain = false;
		global::render_camera_vignette = false;
		global::render_overlay = false;
		global::render_camera_lens_dirt = true;
		global::render_camera_lens_dirt_bloom = true;
		global::render_camera_lens_dirt_glow = true;
		global::render_ssao = false;
		global::render_shadows = false;
		global::render_indirect = false;
		global::render_depth_normals = false;
		global::render_click_box = vbuffer_create_cube(view_3d_box_size / 2.0, point2D(IntType(0), IntType(0)), point2D(IntType(1), IntType(1)), IntType(1), IntType(1), false, false);
		global::render_list = ds_list_create();
		global::render_lights = true;
		global::render_particles = true;
		global::render_hidden = false;
		global::render_background = true;
		global::render_watermark = false;
		global::render_time = IntType(0);
		global::render_surface_time = IntType(0);
		global::render_active = null_;
		global::render_repeat = vec3(IntType(0));
		global::render_target = null_;
		global::render_surface[IntType(0)] = null_;
		global::render_surface[IntType(1)] = null_;
		global::render_surface[IntType(2)] = null_;
		global::render_surface_hdr[IntType(0)] = null_;
		global::render_surface_hdr[IntType(1)] = null_;
		global::render_surface_hdr[IntType(2)] = null_;
		global::render_surface_depth = null_;
		global::render_surface_normal = null_;
		global::render_surface_material = null_;
		global::render_surface_emissive = null_;
		global::render_surface_diffuse = null_;
		global::render_surface_shadows = null_;
		global::render_surface_specular = null_;
		global::render_surface_lens = null_;
		global::render_surface_sample_expo = null_;
		global::render_surface_sample_dec = null_;
		global::render_surface_sample_alpha = null_;
		global::render_gobo_texture = null_;
		global::depth_near = IntType(1);
		global::depth_far = IntType(5000);
		global::render_post_index = IntType(0);
		global::render_world_count = IntType(0);
		global::taa_matrix = MAT_IDENTITY;
		global::taa_jitter_matrix = MAT_IDENTITY;
		global::render_alpha_hash = false;
		global::render_alpha_hash_force = false;
		global::render_sample_noise_texture = null_;
		global::render_sample_noise_size = IntType(128);
		global::render_sample_noise_texture_array = ArrType::From({});
		global::render_shadowless_point_amount = IntType(0);
		global::render_shadowless_point_list = ds_list_create();
		global::render_surface_spot_buffer = null_;
		global::render_surface_point_buffer = null_;
		global::render_surface_point_atlas_buffer = null_;
		global::render_ssao_kernel = render_generate_sample_kernel(IntType(12));
		global::render_grain_noise = null_;
		global::render_subsurface_size = (IntType(16) * IntType(2)) + IntType(1);
		global::render_subsurface_kernel = render_generate_gaussian_kernel(global::render_subsurface_size);
		global::render_blur_kernel = render_generate_gaussian_kernel(IntType(19));
		global::render_samples_clear = false;
		global::render_samples = IntType(0);
		global::render_sample_current = IntType(0);
		global::render_samples_done = false;
		global::render_matrix = ArrType::From({});
		global::render_pass_surf = null_;
		global::render_blend_prev = null_;
		global::render_alpha_prev = null_;
		global::render_cascades_count = IntType(3);
		global::render_cascade_ends = ArrType::From({ 0.0, 0.035, 0.15, 1.0 });
		global::render_cascade_debug = IntType(1);
		for (IntType i = IntType(0); i < global::render_cascades_count; i++)
		{
			global::render_cascades[i] = (new frustum())->id;
			global::render_surface_sun_buffer[i] = null_;
		}
		global::render_mode = null_;
		global::render_mode_shader_map = ds_int_map_create();
		DsMap(global::render_mode_shader_map)[e_render_mode_CLICK] = ID_shader_replace;
		DsMap(global::render_mode_shader_map)[e_render_mode_SELECT] = ID_shader_blend;
		DsMap(global::render_mode_shader_map)[e_render_mode_PLACE] = ID_shader_blend;
		DsMap(global::render_mode_shader_map)[e_render_mode_PREVIEW] = ID_shader_color_fog;
		DsMap(global::render_mode_shader_map)[e_render_mode_COLOR] = ID_shader_color_fog;
		DsMap(global::render_mode_shader_map)[e_render_mode_COLOR_FOG] = ID_shader_color_fog;
		DsMap(global::render_mode_shader_map)[e_render_mode_COLOR_FOG_LIGHTS] = ID_shader_color_fog_lights;
		DsMap(global::render_mode_shader_map)[e_render_mode_ALPHA_FIX] = ID_shader_alpha_fix;
		DsMap(global::render_mode_shader_map)[e_render_mode_ALPHA_TEST] = ID_shader_alpha_test;
		DsMap(global::render_mode_shader_map)[e_render_mode_DEPTH] = ID_shader_depth;
		DsMap(global::render_mode_shader_map)[e_render_mode_DEPTH_NO_SKY] = ID_shader_depth;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_SUN_DEPTH] = ID_shader_depth_ortho;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_SPOT_DEPTH] = ID_shader_depth;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_POINT_DEPTH] = ID_shader_depth_point;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_SUN] = ID_shader_high_light_sun;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_SPOT] = ID_shader_high_light_spot;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_POINT] = ID_shader_high_light_point;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_LIGHT_POINT_SHADOWLESS] = ID_shader_high_light_point_shadowless;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_FOG] = ID_shader_high_fog;
		DsMap(global::render_mode_shader_map)[e_render_mode_COLOR_GLOW] = ID_shader_color_glow;
		DsMap(global::render_mode_shader_map)[e_render_mode_SCENE_TEST] = ID_shader_replace_alpha;
		DsMap(global::render_mode_shader_map)[e_render_mode_AO_MASK] = ID_shader_replace_alpha;
		DsMap(global::render_mode_shader_map)[e_render_mode_HIGH_DEPTH_NORMAL] = ID_shader_high_depth_normal;
		DsMap(global::render_mode_shader_map)[e_render_mode_MATERIAL] = ID_shader_high_material;
		DsMap(global::render_mode_shader_map)[e_render_mode_SUBSURFACE] = ID_shader_high_subsurface;
		project_reset_render(self);
		if (!file_exists_lib(render_default_file))
		{
			if (!directory_exists_lib(render_directory))
				directory_create_lib(render_directory);
			project_save_start(render_default_file, false);
			project_save_render(self);
			project_save_done();
			log({ /*"Saved default render settings"*/ STR(2495), render_default_file });
		}
	}
	
	void render_update_camera()
	{
		if (!(global::render_camera > 0))
		{
			RealType xx, yy, zz, cx, cy;
			global::cam_from = point3D_copy(global::_app->cam_work_from);
			global::cam_to.Real(X_) = global::_app->cam_work_from.Real(X_) + lengthdir_x(1.0, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
			global::cam_to.Real(Y_) = global::_app->cam_work_from.Real(Y_) + lengthdir_y(1.0, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
			global::cam_to.Real(Z_) = global::_app->cam_work_from.Real(Z_) + lengthdir_z(IntType(1), global::_app->cam_work_angle_look_z);
			xx = global::cam_to.Real(X_) - global::cam_from.Real(X_);
			yy = global::cam_to.Real(Y_) - global::cam_from.Real(Y_);
			zz = global::cam_to.Real(Z_) - global::cam_from.Real(Z_);
			cx = lengthdir_x(1.0, -global::_app->cam_work_roll) / sqrt(xx * xx + yy * yy + zz * zz);
			cy = lengthdir_y(1.0, -global::_app->cam_work_roll);
			global::cam_up.Real(X_) = -cx * xx * zz - cy * yy;
			global::cam_up.Real(Y_) = cy * xx - cx * yy * zz;
			global::cam_up.Real(Z_) = cx * (xx * xx + yy * yy);
			global::cam_fov = IntType(45);
		}
		else
		{
			VarType mat = idVar(global::render_camera, matrix);
			VarType pos = idVar(global::render_camera, world_pos);
			if (idVar(global::render_camera, value).Value(e_value_CAM_SHAKE) > 0)
			{
				VecType shake = vec3(simplex_lib({ ((RealType)global::_app->timeline_marker / global::_app->project_tempo) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_SPEED_X) }) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_STRENGTH_X), simplex_lib({ ((RealType)global::_app->timeline_marker / global::_app->project_tempo) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_SPEED_Y), IntType(1000) }) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_STRENGTH_Y), simplex_lib({ ((RealType)global::_app->timeline_marker / global::_app->project_tempo) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_SPEED_Z), IntType(2000) }) * idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_STRENGTH_Z));
				MatrixType shakemat;
				if (idVar(global::render_camera, value).Value(e_value_CAM_SHAKE_MODE) > 0)
					shakemat = matrix_create(shake, vec3(IntType(0)), vec3(IntType(1)));
				else
					shakemat = matrix_create(vec3(IntType(0)), shake, vec3(IntType(1)));
				
				mat = matrix_multiply(shakemat, mat);
				pos = point3D(mat.Value(MAT_X), mat.Value(MAT_Y), mat.Value(MAT_Z));
			}
			VecType pos_lookat = point3D_mul_matrix(point3D(IntType(0), IntType(1), IntType(0)), mat);
			global::cam_from = point3D_copy(pos);
			global::cam_to = point3D_copy(pos_lookat);
			global::cam_up.Real(X_) = mat.Value(IntType(8));
			global::cam_up.Real(Y_) = mat.Value(IntType(9));
			global::cam_up.Real(Z_) = mat.Value(IntType(10));
			global::cam_fov = max({ IntType(1), idVar(global::render_camera, value).Value(e_value_CAM_FOV) });
		}
		
		global::cam_near = IntType(1);
		global::cam_far = global::_app->project_render_distance;
		global::cam_far_prev = global::cam_far;
		background_sky_update();
	}
	
	void render_update_cascades(VecType dir)
	{
		MatrixType mV = matrix_create_lookat(global::cam_from, global::cam_to, global::cam_up);
		MatrixType mP = matrix_build_projection_perspective_fov(-global::cam_fov, -global::render_ratio, global::cam_near, global::cam_far_prev);
		ObjType(frustum, global::cam_frustum)->build(matrix_multiply(mV, mP));
		ObjType(frustum, global::cam_frustum)->build_vbuffer();
		RealType startz, disz;
		VarType endz;
		ArrType sunmatV;
		startz = global::cam_near;
		endz = min({ global::cam_far_prev, IntType(7500) });
		disz = endz - startz;
		sunmatV = matrix_create_lookat(vec3(dir.Real(X_), dir.Real(Y_), dir.Real(Z_)), vec3(IntType(0)), vec3(IntType(0), IntType(0), IntType(1)));
		for (IntType i = IntType(0); i < global::render_cascades_count; i++)
		{
			VarType cascade;
			RealType zn, zf;
			MatrixType submP;
			cascade = global::render_cascades.Value(i);
			zn = (global::cam_near + (global::render_cascade_ends.Value(i) * disz));
			zf = (global::cam_near + (global::render_cascade_ends.Value(i + IntType(1)) * disz));
			submP = matrix_build_projection_perspective_fov(-global::cam_fov, -global::render_ratio, zn, zf);
			idFunc(cascade, build)({ matrix_multiply(mV, submP) });
			VecType orthoMin, orthoMax;
			orthoMin = ArrType::From({ no_limit, no_limit, no_limit, no_limit });
			orthoMax = ArrType::From({ -no_limit, -no_limit, -no_limit, -no_limit });
			for (IntType j = IntType(0); j < IntType(8); j++)
			{
				VecType corner = vec4_mul_matrix(idArr(cascade, corners).Value(j), sunmatV);
				orthoMin = vec4_min(orthoMin, corner);
				orthoMax = vec4_max(orthoMax, corner);
			}
			orthoMin.Real(Z_) = -IntType(30000);
			orthoMax.Real(Z_) += IntType(100);
			RealType diagonalXY = vec3_length(vec3_sub(idArr(cascade, corners).Value(IntType(1)), idArr(cascade, corners).Value(IntType(3))));
			diagonalXY = max({ diagonalXY, vec3_length(vec3_sub(idArr(cascade, corners).Value(IntType(1)), idArr(cascade, corners).Value(IntType(7)))) });
			RealType w, h, dif;
			w = orthoMax.Real(X_) - orthoMin.Real(X_);
			h = orthoMax.Real(Y_) - orthoMin.Real(Y_);
			dif = diagonalXY - h;
			if (dif > IntType(0))
			{
				orthoMax.Real(Y_) += dif / 2.0;
				orthoMin.Real(Y_) -= dif / 2.0;
			}
			dif = diagonalXY - w;
			if (dif > IntType(0))
			{
				orthoMax.Real(X_) += dif / 2.0;
				orthoMin.Real(X_) -= dif / 2.0;
			}
			RealType pixelsize = diagonalXY / global::_app->project_render_shadows_sun_buffer_size;
			orthoMax.Real(X_) = round(orthoMax.Real(X_) / pixelsize) * pixelsize;
			orthoMin.Real(X_) = round(orthoMin.Real(X_) / pixelsize) * pixelsize;
			orthoMax.Real(Y_) = round(orthoMax.Real(Y_) / pixelsize) * pixelsize;
			orthoMin.Real(Y_) = round(orthoMin.Real(Y_) / pixelsize) * pixelsize;
			MatrixType lightMatVinv = matrix_inverse(sunmatV);
			ArrType lightPoints = ArrType::From({ ArrType::From({ orthoMin.Real(X_), orthoMax.Real(Y_), orthoMax.Real(Z_) }), ArrType::From({ orthoMin.Real(X_), orthoMin.Real(Y_), orthoMax.Real(Z_) }), ArrType::From({ orthoMax.Real(X_), orthoMin.Real(Y_), orthoMax.Real(Z_) }), ArrType::From({ orthoMax.Real(X_), orthoMax.Real(Y_), orthoMax.Real(Z_) }), ArrType::From({ orthoMin.Real(X_), orthoMax.Real(Y_), orthoMin.Real(Z_) }), ArrType::From({ orthoMin.Real(X_), orthoMin.Real(Y_), orthoMin.Real(Z_) }), ArrType::From({ orthoMax.Real(X_), orthoMin.Real(Y_), orthoMin.Real(Z_) }), ArrType::From({ orthoMax.Real(X_), orthoMax.Real(Y_), orthoMin.Real(Z_) }) });
			for (IntType j = IntType(0); j < IntType(8); j++)
				idArr(cascade, corners)[j] = vec3_mul_matrix(lightPoints.Value(j), lightMatVinv);
			idReal(cascade, near_) = orthoMin.Real(Z_);
			idReal(cascade, far_) = orthoMax.Real(Z_);
			idVar(cascade, matView) = sunmatV;
			idVar(cascade, matProj) = matrix_create_ortho(orthoMin.Real(X_), orthoMax.Real(X_), orthoMax.Real(Y_), orthoMin.Real(Y_), -orthoMin.Real(Z_), -orthoMax.Real(Z_));
			MatrixType matBias = ArrType::From({ 0.5, IntType(0), IntType(0), IntType(0), IntType(0), 0.5, IntType(0), IntType(0), IntType(0), IntType(0), 0.5, IntType(0), 0.5, 0.5, 0.5, IntType(1) });
			idVar(cascade, matBias) = matrix_multiply(matrix_multiply(idVar(cascade, matView), idVar(cascade, matProj)), matBias);
			ArrType vView = ArrType::From({ 0.0, 0.0, zf, 1.0 });
			VecType vClip = vec4_mul_matrix(vView, mP);
			idReal(cascade, clipEndDepth) = vClip.Real(Z_);
		}
	}
	
	void render_update_effects()
	{
		global::render_effects_done = true;
		global::render_effects_progress++;
		for (IntType i = global::render_effects_progress; i < ds_list_size(global::render_effects_list); i++)
		{
			if (DsList(global::render_effects_list).Value(i) > 0)
			{
				global::render_effects_done = false;
				break;
			}
		}
	}
	
	void render_update_item()
	{
		withAll (obj_timeline, noone)
		{
			if (self->type != e_tl_type_ITEM)
				continue;
			VarType slot, res, matres, norres;
			slot = self->value.Value(e_value_ITEM_SLOT);
			res = self->value.Value(e_value_TEXTURE_OBJ);
			matres = self->value.Value(e_value_TEXTURE_MATERIAL_OBJ);
			norres = self->value.Value(e_value_TEXTURE_NORMAL_OBJ);
			if (!(self->value.Value(e_value_CUSTOM_ITEM_SLOT) > 0) && res == null_)
			{
				if (self->item_vbuffer > 0)
				{
					vbuffer_destroy(self->item_vbuffer);
					self->item_vbuffer = null_;
				}
			}
			if (!(self->value.Value(e_value_CUSTOM_ITEM_SLOT) > 0))
				slot = idVar(self->temp, item_slot);
			if (res == null_)
				res = idVar(self->temp, item_tex);
			if (matres == null_)
				matres = idVar(self->temp, item_tex_material);
			if (norres == null_)
				norres = idVar(self->temp, item_tex_normal);
			render_generate_item(ScopeAny(self), { slot, ArrType::From({ res, matres, norres }), idVar(self->temp, item_3d) });
		}
		
	}
	
	void render_update_samples()
	{
		global::_app->render_sample_noise_exists = false;
		render_world_start();
		render_world_done();
		BoolType refresh = (global::render_samples == -IntType(1) || (!matrix_equals(global::render_matrix, global::view_proj_matrix)) || (global::render_target_size.Real(X_) != global::render_width) || (global::render_target_size.Real(Y_) != global::render_height) || !surface_exists((IntType)(global::render_surface_sample_dec)));
		if (refresh)
		{
			global::render_matrix = array_copy_1d(global::view_proj_matrix);
			global::render_target_size = point2D(global::render_width, global::render_height);
			global::render_samples = IntType(0);
			global::render_samples_clear = true;
			global::render_samples_done = false;
		}
		if (!global::render_samples_done)
		{
			global::render_samples++;
			if (global::render_samples > global::_app->project_render_samples)
			{
				global::render_samples_done = true;
				global::render_samples--;
			}
		}
	}
	
	void render_update_text()
	{
		withAll (obj_timeline, noone)
		{
			if (self->type != e_tl_type_TEXT)
				continue;
			VarType text, font;
			text = self->value.Value(e_value_TEXT);
			font = self->value.Value(e_value_TEXT_FONT);
			if (text == /*""*/ STR(0))
				text = ObjType(obj_timeline, self->id)->text;
			if (font == null_)
				font = idVar(self->temp, text_font);
			render_generate_text(ScopeAny(self), { text, font, idVar(self->temp, text_3d), self->value.Value(e_value_TEXT_HALIGN), self->value.Value(e_value_TEXT_VALIGN), self->value.Value(e_value_TEXT_AA) });
		}
		
		withAll (obj_particle_type, noone)
			if ((self->temp != particle_sheet && self->temp != particle_template) && self->temp != null_ && idVar(self->temp, type) == e_temp_type_TEXT)
				render_generate_text(ScopeAny(self), { ObjType(obj_particle_type, self->id)->text, idVar(self->temp, text_font), idVar(self->temp, text_3d) });
		
		withAll (obj_preview, noone)
			if (instance_exists(self->select) && Obj(self->select)->subAssetId != ID_obj_resource && idVar(self->select, type) == e_temp_type_TEXT)
				render_generate_text(ScopeAny(self), { /*"AaBbCc"*/ STR(2076), idVar(self->select, text_font), idVar(self->select, text_3d) });
		
	}
	
	RealType render_update_tl_resource(ScopeAny self)
	{
		VarType diffuseres, materialres, normalres;
		diffuseres = null_;
		materialres = null_;
		normalres = null_;
		switch ((IntType)sVar(type))
		{
			case e_tl_type_BODYPART:
			{
				if (sVar(model_part) == null_)
					return IntType(0);
				if (idInt(sVar(model_part), shape_list) == null_)
					return IntType(0);
				withOne (Object, sVar(temp), self->id)
				{
					diffuseres = temp_get_model_texobj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_OBJ));
					materialres = temp_get_model_tex_material_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ));
					normalres = temp_get_model_tex_normal_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_NORMAL_OBJ));
				}
				
				if ((diffuseres != null_ && !res_is_ready(diffuseres)) || (materialres != null_ && !res_is_ready(materialres)) || (normalres != null_ && !res_is_ready(normalres)))
					return IntType(0);
				sVar(model_part_tex_name) = model_part_get_texture_name(sVar(model_part), idInt(sVar(temp), model_texture_name_map));
				sVar(model_part_tex_material_name) = model_part_get_texture_material_name(sVar(model_part), idInt(sVar(temp), model_texture_material_name_map));
				sVar(model_part_tex_normal_name) = model_part_get_tex_normal_name(sVar(model_part), idInt(sVar(temp), model_tex_normal_name_map));
				sArr(model_part_shape_tex) = ArrType::From({});
				sArr(model_part_shape_tex_material) = ArrType::From({});
				sArr(model_part_shape_tex_normal) = ArrType::From({});
				sArr(model_part_shape_material_res) = ArrType::From({});
				IntType shapetexnamemap, shapetexmatnamemap, shapetexnormnamemap;
				shapetexnamemap = idInt(sVar(temp), model_shape_texture_name_map);
				shapetexmatnamemap = idInt(sVar(temp), model_shape_texture_material_name_map);
				shapetexnormnamemap = idInt(sVar(temp), model_shape_tex_normal_name_map);
				for (IntType i = IntType(0); i < ds_list_size(idInt(sVar(model_part), shape_list)); i++)
				{
					VarType shape = DsList(idInt(sVar(model_part), shape_list)).Value(i);
					VarType shapetexname = sVar(model_part_tex_name);
					if (ObjType(obj_model_shape, shape)->texture_name != /*""*/ STR(0))
						shapetexname = ObjType(obj_model_shape, shape)->texture_name;
					VarType shapetexmatname = sVar(model_part_tex_material_name);
					if (ObjType(obj_model_shape, shape)->texture_material_name != /*""*/ STR(0))
						shapetexmatname = ObjType(obj_model_shape, shape)->texture_material_name;
					VarType shapetexnormname = sVar(model_part_tex_normal_name);
					if (ObjType(obj_model_shape, shape)->texture_normal_name != /*""*/ STR(0))
						shapetexnormname = ObjType(obj_model_shape, shape)->texture_normal_name;
					if (shapetexnamemap != null_)
					{
						VarType maptexname = DsMap(shapetexnamemap).Value(ObjType(obj_model_shape, shape)->description);
						if (!is_undefined(maptexname))
							shapetexname = maptexname;
					}
					if (shapetexmatnamemap != null_)
					{
						VarType maptexmatname = DsMap(shapetexmatnamemap).Value(ObjType(obj_model_shape, shape)->description);
						if (!is_undefined(maptexmatname))
							shapetexmatname = maptexmatname;
					}
					if (shapetexnormnamemap != null_)
					{
						VarType maptexnormname = DsMap(shapetexnormnamemap).Value(ObjType(obj_model_shape, shape)->description);
						if (!is_undefined(maptexnormname))
							shapetexnormname = maptexnormname;
					}
					withOne (Object, diffuseres, self->id)
						idArr(self.otherId, model_part_shape_tex)[i] = res_get_model_texture(self, shapetexname);
					
					if (materialres != null_)
					{
						sArr(model_part_shape_material_res)[i] = idVar(materialres, material_format);
						withOne (Object, materialres, self->id)
						{
							if (self->id == global::mc_res)
								idArr(self.otherId, model_part_shape_tex_material)[i] = null_;
							else
								idArr(self.otherId, model_part_shape_tex_material)[i] = res_get_model_texture_material(self, shapetexmatname);
							
						}
						
					}
					else
					{
						sArr(model_part_shape_tex_material)[i] = null_;
						sArr(model_part_shape_material_res)[i] = (idVar(sVar(temp), model) == null_ ? ObjType(obj_resource, global::mc_res)->material_format : VarType(e_material_FORMAT_NONE));
					}
					
					if (normalres != null_)
					{
						withOne (Object, normalres, self->id)
							idArr(self.otherId, model_part_shape_tex_normal)[i] = res_get_model_tex_normal(self, shapetexnormname);
						
					}
					else
						sArr(model_part_shape_tex_normal)[i] = null_;
					
				}
				break;
			}
			
			case e_tl_type_SCENERY:
			case e_tl_type_BLOCK:
			{
				withOne (Object, sVar(temp), self->id)
				{
					diffuseres = temp_get_block_texobj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_OBJ));
					materialres = temp_get_block_tex_material_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ));
					normalres = temp_get_block_tex_normal_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_NORMAL_OBJ));
				}
				
				if (!res_is_ready(diffuseres) || !res_is_ready(materialres) || !res_is_ready(normalres))
					return IntType(0);
			}
			
		}
		
		sVar(render_res_diffuse) = diffuseres;
		sVar(render_res_material) = materialres;
		sVar(render_res_normal) = normalres;
		return IntType(1);
	}
	
	void render_watermark_image(VarType draw_width, VarType draw_height)
	{
		RealType watermark_x, watermark_y, watermark_width, watermark_height;
		watermark_x = IntType(0);
		watermark_y = IntType(0);
		if (is_undefined(draw_width))
		{
			draw_width = global::render_width;
			draw_height = global::render_height;
		}
		IntType sprite;
		RealType scale, opacity, padding, padx, pady;
		StringType halign, valign;
		padx = IntType(0);
		pady = IntType(0);
		if (global::_app->setting_watermark_custom > 0)
		{
			scale = global::_app->setting_watermark_scale;
			opacity = global::_app->setting_watermark_opacity;
			halign = global::_app->setting_watermark_halign.Str();
			valign = global::_app->setting_watermark_valign.Str();
			padding = global::_app->setting_watermark_padding;
			if (global::_app->setting_watermark_image != null_)
				sprite = global::_app->setting_watermark_image;
			else
				sprite = ID_spr_watermark;
			
		}
		else
		{
			scale = .33;
			opacity = IntType(1);
			halign = /*"right"*/ STR(193);
			valign = /*"bottom"*/ STR(190);
			padding = IntType(0);
			sprite = ID_spr_watermark;
		}
		
		watermark_width = sprite_get_width(sprite);
		watermark_height = sprite_get_height(sprite);
		if (watermark_width > watermark_height)
			scale *= (RealType)draw_width / watermark_width;
		else
			scale *= (RealType)draw_height / watermark_height;
		
		gpu_set_texfilter(true);
		watermark_x = draw_width - (watermark_width / IntType(2) * scale);
		watermark_y = draw_height - (watermark_height / IntType(2) * scale);
		switch (StringType(halign).id)
		{
			case 192: // left
			{
				watermark_x = watermark_width / IntType(2) * scale;
				padx = draw_width * padding;
				break;
			}
			
			case 1440: // center
			{
				watermark_x = (RealType)draw_width / 2.0;
				break;
			}
			
			case 193: // right
			{
				watermark_x = draw_width - (watermark_width / IntType(2) * scale);
				padx = -(draw_width * padding);
				break;
			}
			
		}
		
		switch (StringType(valign).id)
		{
			case 191: // top
			{
				watermark_y = watermark_height / IntType(2) * scale;
				pady = (draw_height * padding);
				break;
			}
			
			case 1440: // center
			{
				watermark_y = (RealType)draw_height / 2.0;
				break;
			}
			
			case 190: // bottom
			{
				watermark_y = draw_height - (watermark_height / IntType(2) * scale);
				pady = -(draw_height * padding);
				break;
			}
			
		}
		
		watermark_x -= (watermark_width / 2.0) * scale;
		watermark_y -= (watermark_height / 2.0) * scale;
		watermark_x += padx;
		watermark_y += pady;
		gpu_set_texfilter(true);
		draw_image({ sprite, IntType(0), round(watermark_x), round(watermark_y), scale, scale, c_white, opacity });
		gpu_set_blendmode_ext_sepalpha(bm_src_color, bm_one, bm_one, bm_one);
		draw_image({ sprite, IntType(0), round(watermark_x), round(watermark_y), scale, scale, c_black, opacity });
		gpu_set_blendmode(bm_normal);
		gpu_set_texfilter(false);
	}
	
	void render_world(ScopeAny self, IntType mode)
	{
		global::render_mode = mode;
		global::render_shader_obj = DsMap(global::shader_map).Value(DsMap(global::render_mode_shader_map).Value(global::render_mode));
		withOne (Object, global::render_shader_obj, self->id)
			shader_use(self);
		
		global::shader_check_uniform = true;
		IntType i, renderlistsize;
		VarType tl;
		renderlistsize = ds_list_size(global::render_list);
		render_world_tl_reset();
		for (i = IntType(0); i < renderlistsize; i++)
		{
			tl = DsList(global::render_list).Value(i);
			if (idVar(tl, depth) >= IntType(0))
				break;
			withOne (Object, tl, self->id)
				render_world_tl(self);
			
		}
		if (global::render_mode != e_render_mode_CLICK && global::render_mode != e_render_mode_SELECT && global::render_mode != e_render_mode_PLACE && global::render_mode != e_render_mode_HIGH_LIGHT_SUN_DEPTH && global::render_mode != e_render_mode_HIGH_LIGHT_SPOT_DEPTH && global::render_mode != e_render_mode_HIGH_LIGHT_POINT_DEPTH)
		{
			render_world_tl_reset();
			render_world_ground(self);
			render_world_sky_clouds(self);
			render_world_tl_reset();
		}
		for (; i < renderlistsize; i++)
			withOne (Object, DsList(global::render_list).Value(i), self->id)
				render_world_tl(self);
		
		render_world_tl_reset();
		withOne (Object, global::render_shader_obj, self->id)
			shader_clear();
		
		if (gpu_get_tex_filter())
			gpu_set_tex_filter(false);
		global::shader_check_uniform = false;
		global::render_world_count++;
	}
	
	RealType render_world_background()
	{
		if (!(global::render_background > 0))
			return IntType(0);
		draw_clear((IntType)(global::_app->background_sky_color));
		if (global::_app->background_image_show > 0)
		{
			if (global::_app->background_image != null_ && global::_app->background_image_type == /*"image"*/ STR(90))
			{
				if (global::_app->background_image_stretch > 0)
					draw_texture({ idVar(global::_app->background_image, texture), IntType(0), IntType(0), (RealType)global::render_width / texture_width(idVar(global::_app->background_image, texture)), (RealType)global::render_height / texture_height(idVar(global::_app->background_image, texture)) });
				else
					draw_texture({ idVar(global::_app->background_image, texture), IntType(0), IntType(0) });
				
			}
		}
		else
			draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, global::_app->background_sky_color_final, IntType(1));
		
		if (global::_app->background_twilight > 0)
		{
			RealType cam_xyangle, p;
			IntType backgroundcolor;
			backgroundcolor = c_black;
			cam_xyangle = point_direction(global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_to.Real(X_), global::cam_to.Real(Y_)) - global::_app->background_sky_rotation;
			p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(90))) / 180.0, IntType(1)) * .25;
			backgroundcolor = merge_color(backgroundcolor, (IntType)(global::_app->background_fog_color_final), global::_app->background_sunset_alpha * p);
			p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(270))) / 180.0, IntType(1)) * .25;
			backgroundcolor = merge_color(backgroundcolor, (IntType)(global::_app->background_fog_color_final), global::_app->background_sunrise_alpha * p);
			gpu_set_blendmode(bm_add);
			draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, backgroundcolor, IntType(1));
			gpu_set_blendmode(bm_normal);
		}
		return 0.0;
	}
	
	RealType render_world_block(VarType vbuffer, VarType res, BoolType rotate, VarType size, VarType temp)
	{
		if (vbuffer == null_)
			return IntType(0);
		if (!is_array(res))
			res = ArrType::From({ res, global::mc_res, global::mc_res });
		if (!res_is_ready(res.Value(IntType(0))))
			res[IntType(0)] = global::mc_res;
		if (!res_is_ready(res.Value(IntType(1))))
			res[IntType(1)] = global::mc_res;
		if (!res_is_ready(res.Value(IntType(2))))
			res[IntType(2)] = global::mc_res;
		VarType tex, texprev, texani;
		VarType texmat, texmatprev, texanimat;
		BoolType texanimatsheet;
		VarType texnormal, texnormalprev, texaninormal;
		tex = idVar(res.Value(IntType(0)), block_sheet_texture);
		texmat = idVar(res.Value(IntType(1)), block_sheet_texture_material);
		texnormal = idVar(res.Value(IntType(2)), block_sheet_tex_normal);
		render_set_uniform_int(/*"uMaterialFormat"*/ STR(2496), idVar(res.Value(IntType(1)), material_format));
		texprev = tex;
		texmatprev = texmat;
		texnormalprev = texnormal;
		if (idVar(res.Value(IntType(0)), block_sheet_ani_texture) != null_)
			texani = idVar(res.Value(IntType(0)), block_sheet_ani_texture).Value(block_texture_get_frame());
		else
			texani = ObjType(obj_resource, global::mc_res)->block_sheet_ani_texture.Value(block_texture_get_frame());
		
		texanimatsheet = (idVar(res.Value(IntType(1)), block_sheet_ani_texture_material) == null_);
		if (!texanimatsheet)
			texanimat = idVar(res.Value(IntType(1)), block_sheet_ani_texture_material).Value(block_texture_get_frame());
		else
			texanimat = ObjType(obj_resource, global::mc_res)->block_sheet_ani_texture_material.Value(block_texture_get_frame());
		
		if (idVar(res.Value(IntType(2)), block_sheet_ani_tex_normal) != null_)
			texaninormal = idVar(res.Value(IntType(2)), block_sheet_ani_tex_normal).Value(block_texture_get_frame());
		else
			texaninormal = ObjType(obj_resource, global::mc_res)->block_sheet_ani_tex_normal.Value(block_texture_get_frame());
		
		VarType blend = global::shader_blend_color;
		render_set_texture(tex);
		render_set_texture(texmat, /*"Material"*/ STR(2497));
		render_set_texture(texnormal, /*"Normal"*/ STR(2498));
		if (rotate)
			matrix_world_multiply_pre(matrix_create(point3D(IntType(0), size.Value(Y_) * block_size_, IntType(0)), vec3(IntType(0), IntType(0), IntType(90)), vec3(IntType(1))));
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_NORMAL]))
			vbuffer_render({ vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_NORMAL] });
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_GRASS]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_grass)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_GRASS] });
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), blend, global::shader_blend_alpha);
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_ANIMATED]))
		{
			if (texani != texprev)
			{
				render_set_texture(texani);
				texprev = texani;
			}
			if (texanimat != texmatprev)
			{
				render_set_texture(texanimat, /*"Material"*/ STR(2497));
				texmatprev = texanimat;
			}
			if (texaninormal != texnormalprev)
			{
				render_set_texture(texaninormal, /*"Normal"*/ STR(2498));
				texnormalprev = texaninormal;
			}
			if (texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
			vbuffer_render({ vbuffer[e_block_depth_DEPTH0][e_block_vbuffer_ANIMATED] });
			if (res.Value(IntType(1)) != global::mc_res && texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
		}
		render_set_texture(tex);
		if (tex != texprev)
		{
			render_set_texture(tex);
			texprev = tex;
		}
		if (texmat != texmatprev)
		{
			render_set_texture(texmat, /*"Material"*/ STR(2497));
			texmatprev = texmat;
		}
		if (texnormal != texnormalprev)
		{
			render_set_texture(texnormal, /*"Normal"*/ STR(2498));
			texnormalprev = texnormal;
		}
		IntType filterprev;
		if (global::_app->project_render_texture_filtering > 0 && !(global::_app->project_render_transparent_block_texture_filtering > 0))
		{
			filterprev = gpu_get_tex_mip_bias();
			gpu_set_tex_mip_bias(-IntType(16));
			render_set_texture(tex);
			texprev = tex;
			render_set_texture(texmat, /*"Material"*/ STR(2497));
			texmatprev = texmat;
			render_set_texture(texnormal, /*"Normal"*/ STR(2498));
			texnormalprev = texnormal;
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_NORMAL]))
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_NORMAL] });
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_GRASS]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_grass)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_GRASS] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_FOLIAGE]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_foliage)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_FOLIAGE] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_OAK]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_oak)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_OAK] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_SPRUCE]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_spruce)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_SPRUCE] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_BIRCH]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_birch)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_BIRCH] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_JUNGLE]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_jungle)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_JUNGLE] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_ACACIA]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_acacia)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_ACACIA] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_DARK_OAK]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_dark_oak)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_DARK_OAK] });
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_MANGROVE]))
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_leaves_mangrove)), global::shader_blend_alpha);
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_LEAVES_MANGROVE] });
		}
		render_set_uniform_color(/*"uBlendColor"*/ STR(1908), blend, global::shader_blend_alpha);
		if (global::_app->project_render_texture_filtering > 0 && !(global::_app->project_render_transparent_block_texture_filtering > 0))
			gpu_set_tex_mip_bias(filterprev);
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_ANIMATED]))
		{
			if (texani != texprev)
			{
				render_set_texture(texani);
				texprev = texani;
			}
			if (texanimat != texmatprev)
			{
				render_set_texture(texanimat, /*"Material"*/ STR(2497));
				texmatprev = texanimat;
			}
			if (texaninormal != texnormalprev)
			{
				render_set_texture(texaninormal, /*"Normal"*/ STR(2498));
				texnormalprev = texaninormal;
			}
			if (texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
			vbuffer_render({ vbuffer[e_block_depth_DEPTH1][e_block_vbuffer_ANIMATED] });
			if (res.Value(IntType(1)) != global::mc_res && texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
		}
		if (tex != texprev)
		{
			render_set_texture(tex);
			texprev = tex;
		}
		if (texmat != texmatprev)
		{
			render_set_texture(texmat, /*"Material"*/ STR(2497));
			texmatprev = texmat;
		}
		if (texnormal != texnormalprev)
		{
			render_set_texture(texnormal, /*"Normal"*/ STR(2498));
			texnormalprev = texnormal;
		}
		render_set_texture(tex);
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_NORMAL]))
			vbuffer_render({ vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_NORMAL] });
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_ANIMATED]))
		{
			render_set_texture(texani);
			render_set_texture(texanimat, /*"Material"*/ STR(2497));
			render_set_texture(texaninormal, /*"Normal"*/ STR(2498));
			if (texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
			vbuffer_render({ vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_ANIMATED] });
			if (res.Value(IntType(1)) != global::mc_res && texanimatsheet)
			{
				render_set_uniform(/*"uMetallic"*/ STR(2499), IntType(0));
				render_set_uniform(/*"uRoughness"*/ STR(2500), IntType(1));
				render_set_uniform(/*"uEmissive"*/ STR(2501), IntType(0));
			}
		}
		if (!vbuffer_is_empty(vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_WATER]))
		{
			if (global::render_mode != e_render_mode_HIGH_LIGHT_SUN_DEPTH && global::render_mode != e_render_mode_HIGH_LIGHT_SPOT_DEPTH && global::render_mode != e_render_mode_HIGH_LIGHT_POINT_DEPTH)
			{
				render_set_texture(texani);
				render_set_uniform_color(/*"uBlendColor"*/ STR(1908), color_multiply(blend, idVar(res.Value(IntType(0)), color_water)), global::shader_blend_alpha);
				render_set_uniform_int(/*"uIsWater"*/ STR(2502), IntType(1));
				if (global::_app->project_render_water_reflections > 0)
				{
					render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2497));
					render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2498));
					if (global::shader_uniform_roughness != .07)
					{
						global::shader_uniform_roughness = .07;
						render_set_uniform(/*"uRoughness"*/ STR(2500), global::shader_uniform_roughness);
					}
					if (global::shader_uniform_metallic != IntType(0))
					{
						global::shader_uniform_metallic = IntType(0);
						render_set_uniform(/*"uMetallic"*/ STR(2499), global::shader_uniform_metallic);
					}
					if (global::shader_uniform_emissive != IntType(0))
					{
						global::shader_uniform_emissive = IntType(0);
						render_set_uniform(/*"uEmissive"*/ STR(2501), global::shader_uniform_emissive);
					}
				}
				else
				{
					render_set_texture(texanimat, /*"Material"*/ STR(2497));
					render_set_texture(texaninormal, /*"Normal"*/ STR(2498));
				}
				
				vbuffer_render({ vbuffer[e_block_depth_DEPTH2][e_block_vbuffer_WATER] });
				render_set_uniform_color(/*"uBlendColor"*/ STR(1908), blend, global::shader_blend_alpha);
				render_set_uniform_int(/*"uIsWater"*/ STR(2502), IntType(0));
			}
		}
		return 0.0;
	}
	
}
