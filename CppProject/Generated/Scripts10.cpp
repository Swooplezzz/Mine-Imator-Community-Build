/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.19 13:27:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_tl_frame_cam_dof_depth(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_depth, true);
		tl_value_set(self, { e_value_CAM_DOF_DEPTH, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fade_size(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fade_size, true);
		tl_value_set(self, { e_value_CAM_DOF_FADE_SIZE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fringe(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fringe, false);
		tl_value_set(self, { e_value_CAM_DOF_FRINGE, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fringe_angle(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fringe_angle, true);
		tl_value_set(self, { e_value_CAM_DOF_FRINGE_ANGLE_RED + global::axis_edit, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fringe_blue(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fringe_blue, true);
		tl_value_set(self, { e_value_CAM_DOF_FRINGE_BLUE, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fringe_green(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fringe_green, true);
		tl_value_set(self, { e_value_CAM_DOF_FRINGE_GREEN, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_fringe_red(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_fringe_red, true);
		tl_value_set(self, { e_value_CAM_DOF_FRINGE_RED, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_gain(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_gain, true);
		tl_value_set(self, { e_value_CAM_DOF_GAIN, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_range(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_range, true);
		tl_value_set(self, { e_value_CAM_DOF_RANGE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_dof_threshold(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_dof_threshold, true);
		tl_value_set(self, { e_value_CAM_DOF_THRESHOLD, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_exposure(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_exposure, true);
		tl_value_set(self, { e_value_CAM_EXPOSURE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_fov(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_fov, true);
		tl_value_set(self, { e_value_CAM_FOV, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_gamma(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_gamma, true);
		tl_value_set(self, { e_value_CAM_GAMMA, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_grain(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_grain, false);
		tl_value_set(self, { e_value_CAM_GRAIN, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_grain_saturation(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_grain_saturation, true);
		tl_value_set(self, { e_value_CAM_GRAIN_SATURATION, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_grain_size(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_grain_size, true);
		tl_value_set(self, { e_value_CAM_GRAIN_SIZE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_grain_strength(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_grain_strength, true);
		tl_value_set(self, { e_value_CAM_GRAIN_STRENGTH, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_height(ScopeAny self, VarType val, VarType add)
	{
		RealType ratio = (RealType)idVar(global::tl_edit, value).Value(e_value_CAM_WIDTH) / idVar(global::tl_edit, value).Value(e_value_CAM_HEIGHT);
		tl_value_set_start(self, ID_action_tl_frame_cam_height, true);
		tl_value_set(self, { e_value_CAM_HEIGHT, val, add });
		if (idVar(global::tl_edit, value).Value(e_value_CAM_SIZE_KEEP_ASPECT_RATIO) > 0)
			tl_value_set(self, { e_value_CAM_WIDTH, max({ IntType(1), round(idVar(global::tl_edit, value).Value(e_value_CAM_HEIGHT) * ratio) }), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt, false);
		tl_value_set(self, { e_value_CAM_LENS_DIRT, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt_bloom(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt_bloom, false);
		tl_value_set(self, { e_value_CAM_LENS_DIRT_BLOOM, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt_glow(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt_glow, false);
		tl_value_set(self, { e_value_CAM_LENS_DIRT_GLOW, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt_intensity(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt_intensity, true);
		tl_value_set(self, { e_value_CAM_LENS_DIRT_INTENSITY, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt_power(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt_power, true);
		tl_value_set(self, { e_value_CAM_LENS_DIRT_POWER, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_lens_dirt_radius(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_lens_dirt_radius, true);
		tl_value_set(self, { e_value_CAM_LENS_DIRT_RADIUS, val / 100.0, add });
		tl_value_set_done();
	}
	
	RealType action_tl_frame_cam_lens_dirt_tex_browse(ScopeAny self)
	{
		StringType fn = file_dialog_open_image();
		if (!file_exists_lib(fn))
			return IntType(0);
		action_res_image_load(self, fn, e_res_type_TEXTURE);
		return 0.0;
	}
	
	void action_tl_frame_cam_light_management(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_light_management, false);
		tl_value_set(self, { e_value_CAM_LIGHT_MANAGEMENT, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_rotate(ScopeAny self, VarType rotate)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_rotate, false);
		tl_value_set(self, { e_value_CAM_ROTATE, rotate, false });
		if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
		{
			tl_value_set(self, { e_value_ROT_Z, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
			tl_value_set(self, { e_value_ROT_X, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
		}
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_rotate_angle_xy(ScopeAny self, RealType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_rotate_angle_xy, true);
		tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_XY, val, add });
		if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
			tl_value_set(self, { e_value_ROT_Z, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_rotate_angle_z(ScopeAny self, RealType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_rotate_angle_z, true);
		tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_Z, val, add });
		if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
			tl_value_set(self, { e_value_ROT_X, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_rotate_distance(ScopeAny self, VarType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_rotate_distance, true);
		tl_value_set(self, { e_value_CAM_ROTATE_DISTANCE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_shake(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_shake, false);
		tl_value_set(self, { e_value_CAM_SHAKE, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_shake_mode(ScopeAny self, VarType mode)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_shake_mode, false);
		tl_value_set(self, { e_value_CAM_SHAKE_MODE, mode, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_shake_speed(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_shake_speed, true);
		tl_value_set(self, { e_value_CAM_SHAKE_SPEED_X + global::axis_edit, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_shake_strength(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_shake_strength, true);
		tl_value_set(self, { e_value_CAM_SHAKE_STRENGTH_X + global::axis_edit, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_size_keep_aspect_ratio(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_size_keep_aspect_ratio, false);
		tl_value_set(self, { e_value_CAM_SIZE_KEEP_ASPECT_RATIO, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_tonemapper(ScopeAny self, VarType tonemapper)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_tonemapper, false);
		tl_value_set(self, { e_value_CAM_TONEMAPPER, tonemapper, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_video_template(ScopeAny self, VarType videotemplate)
	{
		IntType tid;
		tl_value_set_start(self, ID_action_tl_frame_cam_video_template, false);
		tid = videotemplate;
		idVar(ObjType(obj_tab, global::_app->frame_editor)->camera, video_template) = tid;
		if (tid > IntType(0))
		{
			tl_value_set(self, { e_value_CAM_SIZE_USE_PROJECT, false, false });
			tl_value_set(self, { e_value_CAM_WIDTH, idVar(tid, width), false });
			tl_value_set(self, { e_value_CAM_HEIGHT, idVar(tid, height), false });
		}
		else
			if (tid == IntType(0))
				tl_value_set(self, { e_value_CAM_SIZE_USE_PROJECT, false, false });
			else
				tl_value_set(self, { e_value_CAM_SIZE_USE_PROJECT, true, false });
		
		
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_vignette(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_vignette, false);
		tl_value_set(self, { e_value_CAM_VIGNETTE, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_vignette_color(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_vignette_color, true);
		tl_value_set(self, { e_value_CAM_VIGNETTE_COLOR, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_vignette_radius(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_vignette_radius, true);
		tl_value_set(self, { e_value_CAM_VIGNETTE_RADIUS, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_vignette_softness(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_vignette_softness, true);
		tl_value_set(self, { e_value_CAM_VIGNETTE_SOFTNESS, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_vignette_strength(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_cam_vignette_strength, true);
		tl_value_set(self, { e_value_CAM_VIGNETTE_STRENGTH, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_cam_width(ScopeAny self, VarType val, VarType add)
	{
		RealType ratio = (RealType)idVar(global::tl_edit, value).Value(e_value_CAM_WIDTH) / idVar(global::tl_edit, value).Value(e_value_CAM_HEIGHT);
		tl_value_set_start(self, ID_action_tl_frame_cam_width, true);
		tl_value_set(self, { e_value_CAM_WIDTH, val, add });
		if (idVar(global::tl_edit, value).Value(e_value_CAM_SIZE_KEEP_ASPECT_RATIO) > 0)
			tl_value_set(self, { e_value_CAM_HEIGHT, max({ IntType(1), round((RealType)idVar(global::tl_edit, value).Value(e_value_CAM_WIDTH) / ratio) }), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_clear(ScopeAny self, VarType clear)
	{
		tl_value_set_start(self, ID_action_tl_frame_clear, false);
		tl_value_set(self, { e_value_CLEAR, clear, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_offset_x(ScopeAny self, VarType value)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_offset_x, false);
		tl_value_set(self, { e_value_COPY_POS_OFFSET_X, value, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_offset_y(ScopeAny self, VarType value)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_offset_y, false);
		tl_value_set(self, { e_value_COPY_POS_OFFSET_Y, value, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_offset_z(ScopeAny self, VarType value)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_offset_z, false);
		tl_value_set(self, { e_value_COPY_POS_OFFSET_Z, value, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_target(ScopeAny self, VarType target)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_target, false);
		tl_value_set(self, { e_value_POS_TARGET, target, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_x(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_x, false);
		tl_value_set(self, { e_value_COPY_POS_X, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_y(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_y, false);
		tl_value_set(self, { e_value_COPY_POS_Y, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_pos_z(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_pos_z, false);
		tl_value_set(self, { e_value_COPY_POS_Z, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_rot_target(ScopeAny self, VarType target)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_rot_target, false);
		tl_value_set(self, { e_value_ROT_TARGET, target, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_rot_x(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_rot_x, false);
		tl_value_set(self, { e_value_COPY_ROT_X, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_rot_y(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_rot_y, false);
		tl_value_set(self, { e_value_COPY_ROT_Y, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_rot_z(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_rot_z, false);
		tl_value_set(self, { e_value_COPY_ROT_Z, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_scale_target(ScopeAny self, VarType target)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_scale_target, false);
		tl_value_set(self, { e_value_SCALE_TARGET, target, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_scale_x(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_scale_x, false);
		tl_value_set(self, { e_value_COPY_SCALE_X, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_scale_y(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_scale_y, false);
		tl_value_set(self, { e_value_COPY_SCALE_Y, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_copy_scale_z(ScopeAny self, VarType enable)
	{
		tl_value_set_start(self, ID_action_tl_frame_copy_scale_z, false);
		tl_value_set(self, { e_value_COPY_SCALE_Z, enable, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_custom_item_slot(ScopeAny self, VarType custom)
	{
		tl_value_set_start(self, ID_action_tl_frame_custom_item_slot, false);
		tl_value_set(self, { e_value_CUSTOM_ITEM_SLOT, custom, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_custom_seed(ScopeAny self, VarType customseed)
	{
		tl_value_set_start(self, ID_action_tl_frame_custom_seed, false);
		tl_value_set(self, { e_value_CUSTOM_SEED, customseed, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_all(ScopeAny self, ArrType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_all, true);
		tl_value_set(self, { e_value_EASE_IN_X, val.Value(IntType(0)), add });
		tl_value_set(self, { e_value_EASE_IN_Y, val.Value(IntType(1)), add });
		tl_value_set(self, { e_value_EASE_OUT_X, val.Value(IntType(2)), add });
		tl_value_set(self, { e_value_EASE_OUT_Y, val.Value(IntType(3)), add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_in(ScopeAny self, ArrType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_in, true);
		tl_value_set(self, { e_value_EASE_IN_X, val.Value(IntType(0)), add });
		tl_value_set(self, { e_value_EASE_IN_Y, val.Value(IntType(1)), add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_in_x(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_in_x, true);
		tl_value_set(self, { e_value_EASE_IN_X, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_in_y(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_in_y, true);
		tl_value_set(self, { e_value_EASE_IN_Y, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_out(ScopeAny self, ArrType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_out, true);
		tl_value_set(self, { e_value_EASE_OUT_X, val.Value(IntType(0)), add });
		tl_value_set(self, { e_value_EASE_OUT_Y, val.Value(IntType(1)), add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_out_x(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_out_x, true);
		tl_value_set(self, { e_value_EASE_OUT_X, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_out_y(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_out_y, true);
		tl_value_set(self, { e_value_EASE_OUT_Y, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ease_set_all(ScopeAny self, VarType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ease_set_all, false);
		tl_value_set(self, { e_value_EASE_IN_X, val.Value(IntType(0)), add });
		tl_value_set(self, { e_value_EASE_IN_Y, val.Value(IntType(1)), add });
		tl_value_set(self, { e_value_EASE_OUT_X, val.Value(IntType(2)), add });
		tl_value_set(self, { e_value_EASE_OUT_Y, val.Value(IntType(3)), add });
		tl_value_set_done();
	}
	
	void action_tl_frame_emissive(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_emissive, true);
		tl_value_set(self, { e_value_EMISSIVE, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_force(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_force, true);
		tl_value_set(self, { e_value_FORCE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_force_directional(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_force_directional, true);
		tl_value_set(self, { e_value_FORCE_DIRECTIONAL, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_force_vortex(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_force_vortex, true);
		tl_value_set(self, { e_value_FORCE_VORTEX, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_freeze(ScopeAny self, VarType freeze)
	{
		tl_value_set_start(self, ID_action_tl_frame_freeze, false);
		tl_value_set(self, { e_value_FREEZE, freeze, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_glow_color(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_glow_color, true);
		tl_value_set(self, { e_value_GLOW_COLOR, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_hsb_add(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_hsb_add, true);
		tl_value_set(self, { e_value_HSB_ADD, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_hsb_mul(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_hsb_mul, true);
		tl_value_set(self, { e_value_HSB_MUL, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_hsb_sub(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_hsb_sub, true);
		tl_value_set(self, { e_value_HSB_SUB, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_ik_angle_offset(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ik_angle_offset, true);
		tl_value_set(self, { e_value_IK_ANGLE_OFFSET, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ik_blend(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_ik_blend, true);
		tl_value_set(self, { e_value_IK_BLEND, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_ik_target(ScopeAny self, VarType target)
	{
		tl_value_set_start(self, ID_action_tl_frame_ik_target, false);
		tl_value_set(self, { e_value_IK_TARGET, target, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_ik_target_angle(ScopeAny self, VarType target)
	{
		tl_value_set_start(self, ID_action_tl_frame_ik_target_angle, false);
		tl_value_set(self, { e_value_IK_TARGET_ANGLE, target, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_item_slot(ScopeAny self, VarType slot, BoolType add)
	{
		if (add == VarType())
			add = false;
		tl_value_set_start(self, ID_action_tl_frame_item_slot, true);
		tl_value_set(self, { e_value_ITEM_SLOT, slot, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_color(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_color, true);
		tl_value_set(self, { e_value_LIGHT_COLOR, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_fade_size(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_fade_size, true);
		tl_value_set(self, { e_value_LIGHT_FADE_SIZE, val / 100.0, add });
		tl_value_set_done();
	}
	
	RealType action_tl_frame_light_gobo_tex_browse(ScopeAny self)
	{
		StringType fn = file_dialog_open_image();
		if (!file_exists_lib(fn))
			return IntType(0);
		action_res_image_load(self, fn, e_res_type_TEXTURE);
		return 0.0;
	}
	
	void action_tl_frame_light_range(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_range, true);
		tl_value_set(self, { e_value_LIGHT_RANGE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_size(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_size, true);
		tl_value_set(self, { e_value_LIGHT_SIZE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_specular_strength(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_specular_strength, true);
		tl_value_set(self, { e_value_LIGHT_SPECULAR_STRENGTH, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_spot_radius(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_spot_radius, true);
		tl_value_set(self, { e_value_LIGHT_SPOT_RADIUS, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_spot_sharpness(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_spot_sharpness, true);
		tl_value_set(self, { e_value_LIGHT_SPOT_SHARPNESS, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_strength(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_light_strength, true);
		tl_value_set(self, { e_value_LIGHT_STRENGTH, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_light_type(ScopeAny self, VarType mode)
	{
		idVar(global::tl_edit, type) = mode;
		global::render_samples = -IntType(1);
		withOne (Object, global::tl_edit, self->id)
		{
			tl_update_value_types(self);
		}
		
		app_update_tl_edit(self);
	}
	
	void action_tl_frame_look_at_rotate(ScopeAny self, VarType enable)
	{
		idBool(idVar(sVar(tab), camera), look_at_rotate) = enable;
	}
	
	void action_tl_frame_metallic(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_metallic, true);
		tl_value_set(self, { e_value_METALLIC, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_mix_color(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_mix_color, true);
		tl_value_set(self, { e_value_MIX_COLOR, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_mix_percent(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_mix_percent, true);
		tl_value_set(self, { e_value_MIX_PERCENT, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_path(ScopeAny self, VarType path)
	{
		tl_value_set_start(self, ID_action_tl_frame_path, false);
		tl_value_set(self, { e_value_PATH_OBJ, path, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_path_offset(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_path_offset, true);
		tl_value_set(self, { e_value_PATH_OFFSET, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_path_offset_set_length(ScopeAny self)
	{
		VarType path = idVar(global::tl_edit, value).Value(e_value_PATH_OBJ);
		tl_value_set_start(self, ID_action_tl_frame_path_offset_set_length, false);
		tl_value_set(self, { e_value_PATH_OFFSET, idReal(path, path_length), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_path_point_angle(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_path_point_angle, true);
		tl_value_set(self, { e_value_PATH_POINT_ANGLE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_path_point_scale(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_path_point_scale, true);
		tl_value_set(self, { e_value_PATH_POINT_SCALE, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_pos(ScopeAny self, VarType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_pos, true);
		tl_value_set(self, { e_value_POS_X + global::axis_edit, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_pos_xyz(ScopeAny self, VarType point)
	{
		tl_value_set_start(self, ID_action_tl_frame_pos_xyz, false);
		tl_value_set(self, { e_value_POS_X, point.Value(X_), false });
		tl_value_set(self, { e_value_POS_Y, point.Value(Y_), false });
		tl_value_set(self, { e_value_POS_Z, point.Value(Z_), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_rgb_add(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_rgb_add, true);
		tl_value_set(self, { e_value_RGB_ADD, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_rgb_mul(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_rgb_mul, true);
		tl_value_set(self, { e_value_RGB_MUL, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_rgb_sub(ScopeAny self, VarType color)
	{
		tl_value_set_start(self, ID_action_tl_frame_rgb_sub, true);
		tl_value_set(self, { e_value_RGB_SUB, color, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_rot(ScopeAny self, RealType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_rot, true);
		tl_value_set(self, { e_value_ROT_X + global::axis_edit, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_rot_xyz(ScopeAny self, VarType rotation)
	{
		tl_value_set_start(self, ID_action_tl_frame_rot_xyz, false);
		tl_value_set(self, { e_value_ROT_X, rotation.Value(X_), false });
		tl_value_set(self, { e_value_ROT_Y, rotation.Value(Y_), false });
		tl_value_set(self, { e_value_ROT_Z, rotation.Value(Z_), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_roughness(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_roughness, true);
		tl_value_set(self, { e_value_ROUGHNESS, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_scale(ScopeAny self, VarType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_scale, true);
		tl_value_set(self, { e_value_SCA_X + global::axis_edit, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_scale_all_axis(ScopeAny self, VarType val, BoolType add)
	{
		VarType oldval, historyobj;
		RealType mul;
		BoolType stopdrag;
		oldval = idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit);
		historyobj = (sReal(history_pos) > IntType(0) || sReal(history_amount) == IntType(0) ? VarType(null_) : sArr(history).Value(IntType(0)));
		stopdrag = false;
		if (string_contains(sVar(window_busy), /*"drag"*/ STR(34)) || string_contains(sVar(window_busy), /*"rendercontrol"*/ STR(35)))
		{
			if (historyobj == null_ || !ObjType(obj_history, historyobj)->scale_link_drag)
			{
				tl_value_set_start(self, ID_action_tl_frame_scale_all_axis, false);
				ObjType(obj_history, global::history_data)->scale_link_drag = true;
				ObjType(obj_history, global::history_data)->scale_oldval = oldval;
				ObjType(obj_history, global::history_data)->scale_link_drag_val += val;
				mul = (RealType)(oldval + ObjType(obj_history, global::history_data)->scale_link_drag_val) / oldval;
			}
			else
			{
				tl_value_set_start(self, ID_action_tl_frame_scale_all_axis, true);
				oldval = ObjType(obj_history, global::history_data)->scale_oldval;
				ObjType(obj_history, global::history_data)->scale_link_drag_val += val;
				mul = (RealType)(oldval + ObjType(obj_history, global::history_data)->scale_link_drag_val) / oldval;
			}
			
		}
		else
			if (historyobj != null_ && ObjType(obj_history, historyobj)->scale_link_drag)
			{
				tl_value_set_start(self, ID_action_tl_frame_scale_all_axis, true);
				stopdrag = true;
				oldval = ObjType(obj_history, global::history_data)->scale_oldval;
				ObjType(obj_history, global::history_data)->scale_link_drag_val += val;
				mul = (RealType)(oldval + ObjType(obj_history, global::history_data)->scale_link_drag_val) / oldval;
			}
			else
			{
				tl_value_set_start(self, ID_action_tl_frame_scale_all_axis, true);
				mul = (RealType)val / oldval;
			}
		
		
		tl_value_set(self, { e_value_SCA_X, mul, false, true });
		tl_value_set(self, { e_value_SCA_Y, mul, false, true });
		tl_value_set(self, { e_value_SCA_Z, mul, false, true });
		tl_value_set_done();
		if (stopdrag)
			ObjType(obj_history, global::history_data)->scale_link_drag = false;
	}
	
	void action_tl_frame_scale_xyz(ScopeAny self, VarType value)
	{
		tl_value_set_start(self, ID_action_tl_frame_scale_xyz, false);
		tl_value_set(self, { e_value_SCA_X, value.Value(X_), false });
		tl_value_set(self, { e_value_SCA_Y, value.Value(Y_), false });
		tl_value_set(self, { e_value_SCA_Z, value.Value(Z_), false });
		tl_value_set_done();
	}
	
	void action_tl_frame_seed(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_seed, true);
		tl_value_set(self, { e_value_SEED, val, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_set_camera(ScopeAny self, VarType valueslist, BoolType reset)
	{
		tl_value_set_start(self, ID_action_tl_frame_set_camera, false);
		for (IntType i = IntType(0); i < ds_list_size(global::camera_values_list); i++)
		{
			VarType vid = DsList(global::camera_values_list).Value(i);
			if (reset)
			{
				if (valueslist.Value(i) == null_)
					tl_value_set(self, { vid, null_, false });
				if (valueslist.Value(i) > 0)
					tl_value_set(self, { vid, tl_value_default(vid), false });
			}
			else
				tl_value_set(self, { vid, valueslist.Value(i), false });
			
		}
		tl_value_set_done();
	}
	
	void action_tl_frame_set_colors(ScopeAny self, VarType alpha, VarType rgbadd, VarType rgbsub, VarType rgbmul, VarType hsbadd, VarType hsbsub, VarType hsbmul, VarType glowcolor, VarType mixcolor, VarType mixpercent)
	{
		tl_value_set_start(self, ID_action_tl_frame_set_colors, false);
		tl_value_set(self, { e_value_ALPHA, alpha, false });
		tl_value_set(self, { e_value_RGB_ADD, rgbadd, false });
		tl_value_set(self, { e_value_RGB_SUB, rgbsub, false });
		tl_value_set(self, { e_value_RGB_MUL, rgbmul, false });
		tl_value_set(self, { e_value_HSB_ADD, hsbadd, false });
		tl_value_set(self, { e_value_HSB_SUB, hsbsub, false });
		tl_value_set(self, { e_value_HSB_MUL, hsbmul, false });
		tl_value_set(self, { e_value_GLOW_COLOR, glowcolor, false });
		tl_value_set(self, { e_value_MIX_COLOR, mixcolor, false });
		tl_value_set(self, { e_value_MIX_PERCENT, mixpercent, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_set_light(ScopeAny self, VarType color, VarType strength, VarType specstrength, VarType size, VarType range, VarType fadesize, VarType spotradius, VarType spotsharpness)
	{
		tl_value_set_start(self, ID_action_tl_frame_set_light, false);
		tl_value_set(self, { e_value_LIGHT_COLOR, color, false });
		tl_value_set(self, { e_value_LIGHT_STRENGTH, strength, false });
		tl_value_set(self, { e_value_LIGHT_SPECULAR_STRENGTH, specstrength, false });
		tl_value_set(self, { e_value_LIGHT_SIZE, size, false });
		tl_value_set(self, { e_value_LIGHT_RANGE, range, false });
		tl_value_set(self, { e_value_LIGHT_FADE_SIZE, fadesize, false });
		tl_value_set(self, { e_value_LIGHT_SPOT_RADIUS, spotradius, false });
		tl_value_set(self, { e_value_LIGHT_SPOT_SHARPNESS, spotsharpness, false });
		tl_value_set_done();
	}
	
	void action_tl_frame_sound_end(ScopeAny self, VarType val, BoolType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_sound_end, true);
		tl_value_set(self, { e_value_SOUND_END, val, add });
		tl_value_set_done();
		tl_update_length();
	}
	
	void action_tl_frame_sound_obj(ScopeAny self, VarType object)
	{
		tl_value_set_start(self, ID_action_tl_frame_sound_obj, false);
		tl_value_set(self, { e_value_SOUND_OBJ, object, false });
		tl_value_set_done();
		tl_update_length();
	}
	
	void action_tl_frame_sound_pitch(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_sound_pitch, true);
		tl_value_set(self, { e_value_SOUND_PITCH, val / 100.0, add });
		tl_value_set_done();
		tl_update_length();
	}
	
	void action_tl_frame_sound_start(ScopeAny self, VarType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_sound_start, true);
		tl_value_set(self, { e_value_SOUND_START, val, add });
		tl_value_set_done();
		tl_update_length();
	}
	
	void action_tl_frame_sound_volume(ScopeAny self, RealType val, VarType add)
	{
		tl_value_set_start(self, ID_action_tl_frame_sound_volume, true);
		tl_value_set(self, { e_value_SOUND_VOLUME, val / 100.0, add });
		tl_value_set_done();
	}
	
	void action_tl_frame_spawn(ScopeAny self, VarType spawn)
	{
		tl_value_set_start(self, ID_action_tl_frame_spawn, false);
		tl_value_set(self, { e_value_SPAWN, spawn, false });
		tl_value_set_done();
	}
	
}
