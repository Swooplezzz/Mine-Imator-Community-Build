/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.11.15 18:00:31 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_bench_shape_type(ScopeAny self, VarType type)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_bench_shape_type, ObjType(obj_bench_settings, sInt(bench_settings))->shape_type, type, true);
		ObjType(obj_bench_settings, sInt(bench_settings))->shape_type = type;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
			temp_update_shape(ScopeAny(self));
		
	}
	
	void action_bench_text_3d(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->text_3d = enable;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	void action_bench_text_face_camera(ScopeAny self, VarType enable)
	{
		ObjType(obj_bench_settings, sInt(bench_settings))->text_face_camera = enable;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
	}
	
	RealType action_bench_text_font(ScopeAny self, IntType res)
	{
		StringType fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_font();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_FONT);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_bench_text_font, fn, ObjType(obj_bench_settings, sInt(bench_settings))->text_font, res);
			}
		
		
		ObjType(obj_bench_settings, sInt(bench_settings))->text_font = res;
		ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		return 0.0;
	}
	
	void action_collapse(StringType name, BoolType open)
	{
		DsMap(global::collapse_map)[name] = open;
	}
	
	void action_group_bend_sliders(ScopeAny self)
	{
		ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->bend_sliders = !(ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->bend_sliders > 0);
	}
	
	void action_group_combine_scale(ScopeAny self)
	{
		ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all = !(ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0);
	}
	
	void action_group_copy(ScopeAny self)
	{
		IntType group = sInt(context_menu_group);
		switch ((IntType)group)
		{
			case e_context_group_ROT_POINT:
			{
				DsList(sInt(context_group_copy_list))[group] = array_copy_1d(idVar(global::tl_edit, rot_point));
				return;
			}
			
			case e_context_group_POSITION:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_POS_X), idVar(global::tl_edit, value).Value(e_value_POS_Y), idVar(global::tl_edit, value).Value(e_value_POS_Z) });
				return;
			}
			
			case e_context_group_ROTATION:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_ROT_X), idVar(global::tl_edit, value).Value(e_value_ROT_Y), idVar(global::tl_edit, value).Value(e_value_ROT_Z) });
				return;
			}
			
			case e_context_group_SCALE:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_SCA_X), idVar(global::tl_edit, value).Value(e_value_SCA_Y), idVar(global::tl_edit, value).Value(e_value_SCA_Z) });
				return;
			}
			
			case e_context_group_BEND:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_X), idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_Y), idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_Z) });
				return;
			}
			
			case e_context_group_LIGHT:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_LIGHT_COLOR), idVar(global::tl_edit, value).Value(e_value_LIGHT_STRENGTH), idVar(global::tl_edit, value).Value(e_value_LIGHT_SPECULAR_STRENGTH), idVar(global::tl_edit, value).Value(e_value_LIGHT_SIZE), idVar(global::tl_edit, value).Value(e_value_LIGHT_RANGE), idVar(global::tl_edit, value).Value(e_value_LIGHT_FADE_SIZE), idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_RADIUS), idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_SHARPNESS) });
				return;
			}
			
			case e_context_group_COLOR:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_ALPHA), idVar(global::tl_edit, value).Value(e_value_RGB_ADD), idVar(global::tl_edit, value).Value(e_value_RGB_SUB), idVar(global::tl_edit, value).Value(e_value_RGB_MUL), idVar(global::tl_edit, value).Value(e_value_HSB_ADD), idVar(global::tl_edit, value).Value(e_value_HSB_SUB), idVar(global::tl_edit, value).Value(e_value_HSB_MUL), idVar(global::tl_edit, value).Value(e_value_GLOW_COLOR), idVar(global::tl_edit, value).Value(e_value_MIX_COLOR), idVar(global::tl_edit, value).Value(e_value_MIX_PERCENT) });
				return;
			}
			
			case e_context_group_CAMERA:
			{
				ArrType arr = array_create({ ds_list_size(global::camera_values_list), null_ });
				for (IntType i = IntType(0); i < ds_list_size(global::camera_values_list); i++)
				{
					VarType vid = DsList(global::camera_values_list).Value(i);
					arr[i] = idVar(global::tl_edit, value).Value(vid);
				}
				DsList(sInt(context_group_copy_list))[group] = arr;
				return;
			}
			
			case e_context_group_EASE:
			{
				DsList(sInt(context_group_copy_list))[group] = ArrType::From({ idVar(global::tl_edit, value).Value(e_value_EASE_IN_X), idVar(global::tl_edit, value).Value(e_value_EASE_IN_Y), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_X), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_Y) });
				return;
			}
			
		}
		
	}
	
	void action_group_copy_global(ScopeAny self)
	{
		DsList(sInt(context_group_copy_list))[e_context_group_POSITION] = array_copy_1d(idVar(global::tl_edit, world_pos));
	}
	
	RealType action_group_paste(ScopeAny self)
	{
		IntType group;
		VarType copy;
		group = sInt(context_menu_group);
		copy = DsList(sInt(context_group_copy_list)).Value(group);
		switch ((IntType)group)
		{
			case e_context_group_ROT_POINT:
			{
				action_tl_rotpoint_all(self, copy);
				return IntType(0);
			}
			case e_context_group_POSITION:
			{
				action_tl_frame_pos_xyz(self, copy);
				return IntType(0);
			}
			case e_context_group_ROTATION:
			{
				action_tl_frame_rot_xyz(self, copy);
				return IntType(0);
			}
			case e_context_group_SCALE:
			{
				action_tl_frame_scale_xyz(self, copy);
				return IntType(0);
			}
			case e_context_group_BEND:
			{
				action_tl_frame_bend_angle_xyz(self, copy);
				return IntType(0);
			}
			case e_context_group_LIGHT:
			{
				action_tl_frame_set_light(self, copy.Value(IntType(0)), copy.Value(IntType(1)), copy.Value(IntType(2)), copy.Value(IntType(3)), copy.Value(IntType(4)), copy.Value(IntType(5)), copy.Value(IntType(6)), copy.Value(IntType(7)));
				return IntType(0);
			}
			case e_context_group_COLOR:
			{
				action_tl_frame_set_colors(self, copy.Value(IntType(0)), copy.Value(IntType(1)), copy.Value(IntType(2)), copy.Value(IntType(3)), copy.Value(IntType(4)), copy.Value(IntType(5)), copy.Value(IntType(6)), copy.Value(IntType(7)), copy.Value(IntType(8)), copy.Value(IntType(9)));
				return IntType(0);
			}
			case e_context_group_CAMERA:
			{
				action_tl_frame_set_camera(self, copy);
				return IntType(0);
			}
			case e_context_group_EASE:
			{
				action_tl_frame_ease_set_all(self, copy, false);
				return IntType(0);
			}
		}
		
		return 0.0;
	}
	
	void action_group_reset(ScopeAny self)
	{
		VarType def;
		switch ((IntType)sInt(context_menu_group))
		{
			case e_context_group_ROT_POINT:
			{
				if (idVar(global::tl_edit, part_of) == null_ && idVar(global::tl_edit, temp) != null_)
					def = idVar(idVar(global::tl_edit, temp), rot_point);
				else
					def = point3D(IntType(0), IntType(0), IntType(0));
				
				action_tl_rotpoint_all(self, def);
				return;
			}
			
			case e_context_group_POSITION:
			{
				if (idVar(global::tl_edit, part_of) == null_)
					def = point3D(IntType(0), IntType(0), IntType(0));
				else
					def = point3D(idArr(global::tl_edit, value_default).Value(e_value_POS_X), idArr(global::tl_edit, value_default).Value(e_value_POS_Y), idArr(global::tl_edit, value_default).Value(e_value_POS_Z));
				
				action_tl_frame_pos_xyz(self, def);
				return;
			}
			
			case e_context_group_ROTATION:
			{
				if (idVar(global::tl_edit, type) == e_tl_type_CAMERA)
					def = ArrType::From({ IntType(0), IntType(0), IntType(0) });
				else
					def = point3D(idArr(global::tl_edit, value_default).Value(e_value_ROT_X), idArr(global::tl_edit, value_default).Value(e_value_ROT_Y), idArr(global::tl_edit, value_default).Value(e_value_ROT_Z));
				
				action_tl_frame_rot_xyz(self, def);
				return;
			}
			
			case e_context_group_SCALE:
			{
				action_tl_frame_scale_xyz(self, vec3(IntType(1)));
				return;
			}
			
			case e_context_group_BEND:
			{
				action_tl_frame_bend_angle_xyz(self, idVec(idVar(global::tl_edit, model_part), bend_default_angle));
				return;
			}
			
			case e_context_group_LIGHT:
			{
				action_tl_frame_set_light(self, c_white, IntType(1), IntType(1), IntType(2), IntType(250), 0.5, IntType(50), 0.5);
				return;
			}
			
			case e_context_group_COLOR:
			{
				action_tl_frame_set_colors(self, IntType(1), c_black, c_black, c_white, c_black, c_black, c_white, c_white, c_black, IntType(0));
				return;
			}
			
			case e_context_group_CAMERA:
			{
				action_tl_frame_set_camera(self, global::camera_use_default_list, true);
				return;
			}
			
			case e_context_group_EASE:
			{
				action_tl_frame_ease_set_all(self, ArrType::From({ IntType(1), IntType(0), IntType(0), IntType(1) }), false);
				return;
			}
			
		}
		
	}
	
	void action_lib_animate(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->tl_save_id), self->id)
				tl_remove_clean(self);
			
			withAll (obj_timeline, self->id)
				if (self->delete_ready)
					instance_destroy(ScopeAny(self));
			
		}
		else
		{
			IntType hobj, tl;
			hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_lib_animate);
			withOne (Object, global::temp_edit, self->id)
				tl = temp_animate(self);
			
			withOne (obj_history, hobj, self->id)
				self->tl_save_id = save_id_get(tl);
			
		}
		
		tl_update_list(self);
		tl_update_matrix(self);
	}
	
	void action_lib_block_name(ScopeAny self, VarType name)
	{
		ArrType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			withOne (obj_history, history_set_var(self, ID_action_lib_block_name, idVar(global::temp_edit, block_name), name, false), self->id)
				ObjType(obj_history, self->id)->state = array_copy_1d(idArr(global::temp_edit, block_state));
			
			state = array_copy_1d(ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(name))->default_state);
		}
		else
			state = array_copy_1d(ObjType(obj_history, global::history_data)->state);
		
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_name) = name;
			sArr(block_state) = state;
			temp_update_block(self);
			temp_update_display_name(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_randomize(ScopeAny self, VarType rep)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_randomize, idVar(global::temp_edit, block_randomize), rep, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_randomize) = rep;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_repeat(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_repeat, idVar(global::temp_edit, block_repeat).Value(global::axis_edit), idVar(global::temp_edit, block_repeat).Value(global::axis_edit) * add + val, true);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_repeat)[global::axis_edit] = sVar(block_repeat).Value(global::axis_edit) * add + val;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_repeat_enable(ScopeAny self, VarType rep)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_repeat_enable, idVar(global::temp_edit, block_repeat_enable), rep, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_repeat_enable) = rep;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_state(ScopeAny self, VarType val)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			state = idVar(sInt(menu_block_state), name);
			withOne (obj_history, history_set_var(self, ID_action_lib_block_state, state_vars_get_value(idArr(global::temp_edit, block_state), state), val, false), self->id)
				ObjType(obj_history, self->id)->state = state;
			
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			state_vars_set_value(VarType::CreateRef(sArr(block_state)), state, val);
			temp_update_block(self);
			temp_update_display_name(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	RealType action_lib_block_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex, fn, idVar(global::temp_edit, block_tex), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex), count)--;
			sVar(block_tex) = res;
			idInt(sVar(block_tex), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_block_tex_material(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex_material, fn, idVar(global::temp_edit, block_tex_material), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex_material), count)--;
			sVar(block_tex_material) = res;
			idInt(sVar(block_tex_material), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_block_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex_normal, fn, idVar(global::temp_edit, block_tex_normal), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex_normal), count)--;
			sVar(block_tex_normal) = res;
			idInt(sVar(block_tex_normal), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_bodypart_model_name(ScopeAny self, VarType name)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			withOne (obj_history, history_set_var(self, ID_action_lib_bodypart_model_name, idVar(global::temp_edit, model_name), name, false), self->id)
				ObjType(obj_history, self->id)->state = array_copy_1d(idVar(global::temp_edit, model_state));
			
			state = ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(name))->default_state;
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(model_name) = name;
			sVar(model_state) = array_copy_1d(state);
			temp_update_model(self);
			temp_update_model_part(self);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		tl_update_matrix(self);
	}
	
	RealType action_lib_bodypart_model_state(ScopeAny self, VarType val)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			state = idVar(sInt(menu_model_state), name);
			withOne (obj_history, history_set_var(self, ID_action_lib_bodypart_model_state, state_vars_get_value(idVar(global::temp_edit, model_state), state), val, false), self->id)
				ObjType(obj_history, self->id)->state = state;
			
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			if (state_vars_get_value(sVar(model_state), state) == val)
				return IntType(0);
			state_vars_set_value(VarType::CreateRef(sVar(model_state)), state, val);
			temp_update_model(self);
			temp_update_model_part(self);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		tl_update_matrix(self);
		return 0.0;
	}
	
	void action_lib_duplicate(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->temp_save_id), self->id)
				instance_destroy(self);
			
		}
		else
		{
			IntType hobj, temp;
			hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_lib_duplicate);
			withOne (Object, global::temp_edit, self->id)
				temp = temp_duplicate(self);
			
			withOne (obj_history, hobj, self->id)
				self->temp_save_id = save_id_get(temp);
			
			sortlist_add(sInt(lib_list), temp);
			global::temp_edit = temp;
		}
		
		tab_template_editor_update_ptype_list(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_3d(ScopeAny self, VarType is3d)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_3d, idVar(global::temp_edit, item_3d), is3d, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(item_3d) = is3d;
			render_generate_item(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_bounce(ScopeAny self, VarType bounce)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_bounce, idVar(global::temp_edit, item_bounce), bounce, false);
		idVar(global::temp_edit, item_bounce) = bounce;
	}
	
	void action_lib_item_face_camera(ScopeAny self, VarType face)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_face_camera, idVar(global::temp_edit, item_face_camera), face, false);
		idVar(global::temp_edit, item_face_camera) = face;
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_slot(ScopeAny self, VarType slot)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_slot, idVar(global::temp_edit, item_slot), slot, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(item_slot) = slot;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_spin(ScopeAny self, VarType spin)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_spin, idVar(global::temp_edit, item_spin), spin, false);
		idVar(global::temp_edit, item_spin) = spin;
	}
	
	RealType action_lib_item_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex), count)--;
			sVar(item_tex) = res;
			idInt(sVar(item_tex), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_item_tex_material(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex_material);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex_material), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex_material), count)--;
			sVar(item_tex_material) = res;
			idInt(sVar(item_tex_material), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_item_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(7))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex_normal);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex_normal), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex_normal), count)--;
			sVar(item_tex_normal) = res;
			idInt(sVar(item_tex_normal), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_list(ScopeAny self, VarType temp)
	{
		global::temp_edit = temp;
		tab_template_editor_update_ptype_list(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	RealType action_lib_model(ScopeAny self, IntType res)
	{
		StringType fn;
		IntType hobj;
		fn = /*""*/ STR(0);
		hobj = null_;
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_model();
					if (!file_exists_lib(fn))
						return IntType(0);
					if (filename_ext(fn) == /*".zip"*/ STR(7))
					{
						fn = unzip_model(fn);
						if (!file_exists_lib(fn))
							return IntType(0);
					}
					res = new_res(self, fn, e_res_type_MODEL);
					if (idBool(res, replaced))
					{
						global::res_edit = res;
						action_res_replace(self, { fn });
					}
					else
						withOne (Object, res, self->id)
							res_load(self);
					
					
				}
				hobj = history_set_res(self, ID_action_lib_model, fn, idVar(global::temp_edit, model), res);
				withOne (obj_history, hobj, self->id)
				{
					self->old_model_save_id = save_id_get(idVar(global::temp_edit, model));
					self->new_model_save_id = save_id_get(res);
					self->tl_amount = IntType(0);
					self->part_child_amount = IntType(0);
					history_save_tl_select(ScopeAny(self));
				}
				
				withAll (obj_timeline, self->id)
				{
					if (self->temp != global::temp_edit || self->part_list == null_)
						continue;
					withOne (obj_history, hobj, self->id)
					{
						self->tl_save_id[self->tl_amount] = save_id_get(self.otherId);
						for (IntType p = IntType(0); p < ds_list_size(ObjType(obj_timeline, self.otherId)->part_list); p++)
							self->tl_part_old_save_id[self->tl_amount][p] = save_id_get(DsList(ObjType(obj_timeline, self.otherId)->part_list).Value(p));
						self->tl_amount++;
					}
					
				}
				
			}
		
		
		tl_deselect_all();
		withOne (Object, global::temp_edit, self->id)
		{
			if (sVar(model) != null_)
				idInt(sVar(model), count)--;
			sVar(model) = res;
			if (sVar(model) != null_)
				idInt(sVar(model), count)++;
			temp_update_model(self);
			temp_update_model_timeline_tree(self, hobj);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			temp_update_rot_point(self);
		}
		
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->tl_amount; t++)
					withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
						for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
							idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_old_save_id[t][p];
				
				for (IntType m = IntType(0); m < self->part_child_amount; m++)
					withOne (Object, save_id_find(self->part_child_save_id.Value(m)), self->id)
						tl_set_parent(self, { save_id_find(ObjType(obj_history, global::history_data)->part_child_parent_save_id.Value(m)), ObjType(obj_history, global::history_data)->part_child_parent_tree_index.Value(m) });
				
				history_restore_tl_select(self);
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_new_save_id[t][p];
				
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								ObjType(obj_history, hobj)->tl_part_new_save_id[t][p] = save_id_get(DsList(sInt(part_list)).Value(p));
				
				
			}
		
		
		app_update_tl_edit(self);
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
}
