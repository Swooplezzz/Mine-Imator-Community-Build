/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.25 00:08:41 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_lib_block_randomize(ScopeAny self, VarType rep)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_randomize, idVar(global::temp_edit, block_randomize), rep, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_randomize) = rep;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_repeat(ScopeAny self, VarType val, VarType add)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_repeat, idVar(global::temp_edit, block_repeat).Value(global::axis_edit), idVar(global::temp_edit, block_repeat).Value(global::axis_edit) * add + val, true);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_repeat)[global::axis_edit] = sVar(block_repeat).Value(global::axis_edit) * add + val;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_repeat_enable(ScopeAny self, VarType rep)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_block_repeat_enable, idVar(global::temp_edit, block_repeat_enable), rep, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(block_repeat_enable) = rep;
			temp_update_block(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_block_state(ScopeAny self, VarType val)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			state = idVar(sInt(menu_block_state), name);
			withOne (obj_history, history_set_var(self, ID_action_lib_block_state, state_vars_get_value(idArr(global::temp_edit, block_state), state), val, false), self->id)
				ObjType(obj_history, self->id)->state = state;
			
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			state_vars_set_value(VarType::CreateRef(sArr(block_state)), state, val);
			temp_update_block(self);
			temp_update_display_name(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	RealType action_lib_block_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex, fn, idVar(global::temp_edit, block_tex), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex), count)--;
			sVar(block_tex) = res;
			idInt(sVar(block_tex), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_block_tex_material(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex_material, fn, idVar(global::temp_edit, block_tex_material), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex_material), count)--;
			sVar(block_tex_material) = res;
			idInt(sVar(block_tex_material), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_block_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_image_pack();
					if (!file_exists_lib(fn))
						return IntType(0);
					res = new_res(self, fn, e_res_type_BLOCK_SHEET);
					withOne (Object, res, self->id)
						res_load(self);
					
				}
				history_set_res(self, ID_action_lib_block_tex_normal, fn, idVar(global::temp_edit, block_tex_normal), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(block_tex_normal), count)--;
			sVar(block_tex_normal) = res;
			idInt(sVar(block_tex_normal), count)++;
			withAll (obj_timeline, self->id)
			{
				if (self->type == e_tl_type_SPECIAL_BLOCK && self->part_root != null_)
				{
					if (idVar(self->part_root, temp) == global::temp_edit)
						array_add(VarType::CreateRef(global::pattern_update), self->id);
				}
			}
			
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_bodypart_model_name(ScopeAny self, VarType name)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			withOne (obj_history, history_set_var(self, ID_action_lib_bodypart_model_name, idVar(global::temp_edit, model_name), name, false), self->id)
				ObjType(obj_history, self->id)->state = array_copy_1d(idVar(global::temp_edit, model_state));
			
			state = ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(name))->default_state;
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(model_name) = name;
			sVar(model_state) = array_copy_1d(state);
			temp_update_model(self);
			temp_update_model_part(self);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		tl_update_matrix(self);
	}
	
	RealType action_lib_bodypart_model_state(ScopeAny self, VarType val)
	{
		VarType state;
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
		{
			state = idVar(sInt(menu_model_state), name);
			withOne (obj_history, history_set_var(self, ID_action_lib_bodypart_model_state, state_vars_get_value(idVar(global::temp_edit, model_state), state), val, false), self->id)
				ObjType(obj_history, self->id)->state = state;
			
		}
		else
			state = ObjType(obj_history, global::history_data)->state;
		
		withOne (Object, global::temp_edit, self->id)
		{
			if (state_vars_get_value(sVar(model_state), state) == val)
				return IntType(0);
			state_vars_set_value(VarType::CreateRef(sVar(model_state)), state, val);
			temp_update_model(self);
			temp_update_model_part(self);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		tl_update_matrix(self);
		return 0.0;
	}
	
	void action_lib_duplicate(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->temp_save_id), self->id)
				instance_destroy(self);
			
		}
		else
		{
			IntType hobj, temp;
			hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_lib_duplicate);
			withOne (Object, global::temp_edit, self->id)
				temp = temp_duplicate(self);
			
			withOne (obj_history, hobj, self->id)
				self->temp_save_id = save_id_get(temp);
			
			sortlist_add(sInt(lib_list), temp);
			global::temp_edit = temp;
		}
		
		tab_template_editor_update_ptype_list(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_3d(ScopeAny self, VarType is3d)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_3d, idVar(global::temp_edit, item_3d), is3d, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(item_3d) = is3d;
			render_generate_item(self);
			temp_update_rot_point(self);
		}
		
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_bounce(ScopeAny self, VarType bounce)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_bounce, idVar(global::temp_edit, item_bounce), bounce, false);
		idVar(global::temp_edit, item_bounce) = bounce;
	}
	
	void action_lib_item_face_camera(ScopeAny self, VarType face)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_face_camera, idVar(global::temp_edit, item_face_camera), face, false);
		idVar(global::temp_edit, item_face_camera) = face;
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_slot(ScopeAny self, VarType slot)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_slot, idVar(global::temp_edit, item_slot), slot, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(item_slot) = slot;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_item_spin(ScopeAny self, VarType spin)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_item_spin, idVar(global::temp_edit, item_spin), spin, false);
		idVar(global::temp_edit, item_spin) = spin;
	}
	
	RealType action_lib_item_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(5))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex), count)--;
			sVar(item_tex) = res;
			idInt(sVar(item_tex), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_item_tex_material(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(5))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex_material);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex_material), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex_material), count)--;
			sVar(item_tex_material) = res;
			idInt(sVar(item_tex_material), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	RealType action_lib_item_tex_normal(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				VarType fn = /*""*/ STR(0);
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						if (filename_ext(fn) == /*".zip"*/ STR(5))
						{
							res = new_res(self, fn, e_res_type_PACK);
							withOne (Object, res, self->id)
								res_load(self);
							
						}
						else
							popup_importitemsheet_show(self, fn, ID_action_lib_item_tex_normal);
						
						return IntType(0);
					}
					
					case e_option_IMPORT_ITEM_SHEET_DONE:
					{
						fn = ObjType(obj_popup, sInt(popup_importitemsheet))->filename;
						if (ObjType(obj_popup, sInt(popup_importitemsheet))->is_sheet)
						{
							res = new_res(self, fn, e_res_type_ITEM_SHEET);
							idVar(res, item_sheet_size) = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
						}
						else
							res = new_res(self, fn, e_res_type_TEXTURE);
						
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				IntType hobj = history_set_res(self, ID_action_lib_item_tex, fn, idVar(global::temp_edit, item_tex_normal), res);
				ObjType(obj_history, hobj)->item_sheet_size = ObjType(obj_popup, sInt(popup_importitemsheet))->sheet_size;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			idInt(sVar(item_tex_normal), count)--;
			sVar(item_tex_normal) = res;
			idInt(sVar(item_tex_normal), count)++;
			render_generate_item(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_list(ScopeAny self, VarType temp)
	{
		global::temp_edit = temp;
		tab_template_editor_update_ptype_list(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	RealType action_lib_model(ScopeAny self, IntType res)
	{
		StringType fn;
		IntType hobj;
		fn = /*""*/ STR(0);
		hobj = null_;
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				if (res == e_option_BROWSE)
				{
					fn = file_dialog_open_model();
					if (!file_exists_lib(fn))
						return IntType(0);
					if (filename_ext(fn) == /*".zip"*/ STR(5))
					{
						fn = unzip_model(fn);
						if (!file_exists_lib(fn))
							return IntType(0);
					}
					res = new_res(self, fn, e_res_type_MODEL);
					if (idBool(res, replaced))
					{
						global::res_edit = res;
						action_res_replace(self, { fn });
					}
					else
						withOne (Object, res, self->id)
							res_load(self);
					
					
				}
				hobj = history_set_res(self, ID_action_lib_model, fn, idVar(global::temp_edit, model), res);
				withOne (obj_history, hobj, self->id)
				{
					self->old_model_save_id = save_id_get(idVar(global::temp_edit, model));
					self->new_model_save_id = save_id_get(res);
					self->tl_amount = IntType(0);
					self->part_child_amount = IntType(0);
					history_save_tl_select(ScopeAny(self));
				}
				
				withAll (obj_timeline, self->id)
				{
					if (self->temp != global::temp_edit || self->part_list == null_)
						continue;
					withOne (obj_history, hobj, self->id)
					{
						self->tl_save_id[self->tl_amount] = save_id_get(self.otherId);
						for (IntType p = IntType(0); p < ds_list_size(ObjType(obj_timeline, self.otherId)->part_list); p++)
							self->tl_part_old_save_id[self->tl_amount][p] = save_id_get(DsList(ObjType(obj_timeline, self.otherId)->part_list).Value(p));
						self->tl_amount++;
					}
					
				}
				
			}
		
		
		tl_deselect_all();
		withOne (Object, global::temp_edit, self->id)
		{
			if (sVar(model) != null_)
				idInt(sVar(model), count)--;
			sVar(model) = res;
			if (sVar(model) != null_)
				idInt(sVar(model), count)++;
			temp_update_model(self);
			temp_update_model_timeline_tree(self, hobj);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			temp_update_rot_point(self);
		}
		
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->tl_amount; t++)
					withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
						for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
							idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_old_save_id[t][p];
				
				for (IntType m = IntType(0); m < self->part_child_amount; m++)
					withOne (Object, save_id_find(self->part_child_save_id.Value(m)), self->id)
						tl_set_parent(self, { save_id_find(ObjType(obj_history, global::history_data)->part_child_parent_save_id.Value(m)), ObjType(obj_history, global::history_data)->part_child_parent_tree_index.Value(m) });
				
				history_restore_tl_select(self);
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_new_save_id[t][p];
				
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								ObjType(obj_history, hobj)->tl_part_new_save_id[t][p] = save_id_get(DsList(sInt(part_list)).Value(p));
				
				
			}
		
		
		app_update_tl_edit(self);
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
	void action_lib_model_name(ScopeAny self, VarType name)
	{
		VarType state, hobj;
		hobj = null_;
		if (sReal(history_undo) > 0)
		{
			name = ObjType(obj_history, global::history_data)->old_name;
			state = ObjType(obj_history, global::history_data)->old_state;
			hobj = global::history_data;
		}
		else
		{
			if (sReal(history_redo) > 0)
				name = ObjType(obj_history, global::history_data)->new_name;
			else
			{
				hobj = history_set(self, ID_action_lib_model_name);
				withOne (obj_history, hobj, self->id)
				{
					self->old_name = idVar(global::temp_edit, model_name);
					self->old_state = array_copy_1d(idVar(global::temp_edit, model_state));
					self->new_name = name;
					self->tl_amount = IntType(0);
					self->part_child_amount = IntType(0);
					history_save_tl_select(ScopeAny(self));
				}
				
				withAll (obj_timeline, self->id)
				{
					if (self->temp != global::temp_edit || self->part_list == null_)
						continue;
					withOne (obj_history, hobj, self->id)
					{
						self->tl_save_id[self->tl_amount] = save_id_get(self.otherId);
						for (IntType p = IntType(0); p < ds_list_size(ObjType(obj_timeline, self.otherId)->part_list); p++)
							self->tl_part_old_save_id[self->tl_amount][p] = save_id_get(DsList(ObjType(obj_timeline, self.otherId)->part_list).Value(p));
						self->tl_amount++;
					}
					
				}
				
			}
			
			state = ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(name))->default_state;
		}
		
		tl_deselect_all();
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(model_name) = name;
			sVar(model_state) = array_copy_1d(state);
			temp_update_model(self);
			temp_update_model_timeline_tree(self, hobj);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
			if (sVar(pattern_type) != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), self->id);
		}
		
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->tl_amount; t++)
					withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
						for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
							idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_old_save_id[t][p];
				
				for (IntType m = IntType(0); m < self->part_child_amount; m++)
					withOne (Object, save_id_find(self->part_child_save_id.Value(m)), self->id)
						tl_set_parent(self, { save_id_find(ObjType(obj_history, global::history_data)->part_child_parent_save_id.Value(m)), ObjType(obj_history, global::history_data)->part_child_parent_tree_index.Value(m) });
				
				history_restore_tl_select(self);
				history_restore_part_usage_tl(global::history_data);
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_new_save_id[t][p];
				
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								ObjType(obj_history, hobj)->tl_part_new_save_id[t][p] = save_id_get(DsList(sInt(part_list)).Value(p));
				
				
			}
		
		
		app_update_tl_edit(self);
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_model_part_name(ScopeAny self, VarType name)
	{
		if (!(sReal(history_undo) > 0) && !(sReal(history_redo) > 0))
			history_set_var(self, ID_action_lib_model_part_name, idVar(global::temp_edit, model_part_name), name, false);
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(model_part_name) = name;
			temp_update_model_part(self);
			temp_update_model_shape(self);
			temp_update_display_name(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		tl_update_matrix(self);
	}
	
	void action_lib_model_pattern(ScopeAny self, VarType color, ArrType patterns, ArrType colors)
	{
		if (sReal(history_undo) > 0)
		{
			color = ObjType(obj_history, global::history_data)->old_pattern_color;
			patterns = array_copy_1d(ObjType(obj_history, global::history_data)->old_pattern_patterns);
			colors = array_copy_1d(ObjType(obj_history, global::history_data)->old_pattern_colors);
		}
		else
			if (sReal(history_redo) > 0)
			{
				color = ObjType(obj_history, global::history_data)->new_pattern_color;
				patterns = array_copy_1d(ObjType(obj_history, global::history_data)->new_pattern_patterns);
				colors = array_copy_1d(ObjType(obj_history, global::history_data)->new_pattern_colors);
			}
			else
			{
				VarType hobj;
				history_pop(self);
				if (sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->script == ID_action_lib_model_pattern)
					hobj = sArr(history).Value(IntType(0));
				else
				{
					history_push(self);
					hobj = new_history(ID_action_lib_model_pattern);
					ObjType(obj_history, hobj)->old_pattern_color = color;
					ObjType(obj_history, hobj)->old_pattern_patterns = array_copy_1d(idVar(global::temp_edit, pattern_pattern_list));
					ObjType(obj_history, hobj)->old_pattern_colors = array_copy_1d(idVar(global::temp_edit, pattern_color_list));
				}
				
				ObjType(obj_history, hobj)->new_pattern_color = color;
				ObjType(obj_history, hobj)->new_pattern_patterns = patterns;
				ObjType(obj_history, hobj)->new_pattern_colors = colors;
				sArr(history)[IntType(0)] = hobj;
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			sVar(pattern_base_color) = color;
			sVar(pattern_pattern_list) = patterns;
			sVar(pattern_color_list) = colors;
		}
		
		array_add(VarType::CreateRef(global::pattern_update), global::temp_edit);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	void action_lib_model_state(ScopeAny self, VarType val)
	{
		VarType state, hobj;
		hobj = null_;
		if (sReal(history_undo) > 0)
		{
			val = ObjType(obj_history, global::history_data)->old_value;
			state = ObjType(obj_history, global::history_data)->state;
		}
		else
		{
			if (sReal(history_redo) > 0)
			{
				val = ObjType(obj_history, global::history_data)->new_value;
				state = ObjType(obj_history, global::history_data)->state;
			}
			else
			{
				state = idVar(sInt(menu_model_state), name);
				hobj = history_set_var(self, ID_action_lib_model_state, state_vars_get_value(idVar(global::temp_edit, model_state), state), val, false);
				withOne (obj_history, hobj, self->id)
				{
					ObjType(obj_history, self->id)->state = state;
					self->tl_amount = IntType(0);
					self->part_child_amount = IntType(0);
					history_save_tl_select(ScopeAny(self));
				}
				
				withAll (obj_timeline, self->id)
				{
					if (self->temp != global::temp_edit || self->part_list == null_)
						continue;
					withOne (obj_history, hobj, self->id)
					{
						self->tl_save_id[self->tl_amount] = save_id_get(self.otherId);
						for (IntType p = IntType(0); p < ds_list_size(ObjType(obj_timeline, self.otherId)->part_list); p++)
							self->tl_part_old_save_id[self->tl_amount][p] = save_id_get(DsList(ObjType(obj_timeline, self.otherId)->part_list).Value(p));
						self->tl_amount++;
					}
					
				}
				
			}
			
		}
		
		tl_deselect_all();
		withOne (Object, global::temp_edit, self->id)
		{
			state_vars_set_value(VarType::CreateRef(sVar(model_state)), state, val);
			temp_update_model(self);
			temp_update_model_timeline_tree(self, hobj);
			temp_update_model_shape(self);
			temp_update_display_name(self);
			model_shape_update_color(self);
		}
		
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->tl_amount; t++)
					withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
						for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
							idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_old_save_id[t][p];
				
				for (IntType m = IntType(0); m < self->part_child_amount; m++)
					withOne (Object, save_id_find(self->part_child_save_id.Value(m)), self->id)
						tl_set_parent(self, { save_id_find(ObjType(obj_history, global::history_data)->part_child_parent_save_id.Value(m)), ObjType(obj_history, global::history_data)->part_child_parent_tree_index.Value(m) });
				
				history_restore_tl_select(self);
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								idVar(DsList(sInt(part_list))[p], save_id) = ObjType(obj_history, global::history_data)->tl_part_new_save_id[t][p];
				
				
			}
			else
			{
				withOne (obj_history, hobj, self->id)
					for (IntType t = IntType(0); t < self->tl_amount; t++)
						withOne (Object, save_id_find(self->tl_save_id.Value(t)), self->id)
							for (IntType p = IntType(0); p < ds_list_size(sInt(part_list)); p++)
								ObjType(obj_history, hobj)->tl_part_new_save_id[t][p] = save_id_get(DsList(sInt(part_list)).Value(p));
				
				
			}
		
		
		app_update_tl_edit(self);
		tl_update_list(self);
		tl_update_matrix(self);
		ObjType(obj_preview, sInt(lib_preview))->update = true;
	}
	
	RealType action_lib_model_tex(ScopeAny self, IntType res)
	{
		StringType fn;
		fn = /*""*/ STR(0);
		if (sReal(history_undo) > 0)
			res = history_undo_res();
		else
			if (sReal(history_redo) > 0)
				res = history_redo_res(self);
			else
			{
				switch ((IntType)res)
				{
					case e_option_BROWSE:
					{
						fn = file_dialog_open_image_pack();
						if (!file_exists_lib(fn))
							return IntType(0);
						IntType type = e_res_type_SKIN;
						if (idVar(global::temp_edit, type) == e_tl_type_MODEL && idVar(global::temp_edit, model) != null_ && idInt(idVar(global::temp_edit, model), model_format) == e_model_format_BLOCK)
							type = e_res_type_BLOCK_SHEET;
						res = new_res(self, fn, type);
						if (idVar(global::temp_edit, model_file) != null_)
							idVar(res, player_skin) = idVar(idVar(global::temp_edit, model_file), player_skin);
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
					case e_option_DOWNLOAD_SKIN:
					{
						popup_downloadskin_show(self, ID_action_lib_model_tex);
						return IntType(0);
					}
					
					case e_option_DOWNLOAD_SKIN_DONE:
					{
						directory_create_lib(skins_directory_get());
						fn = skins_directory_get() + ObjType(obj_popup, sInt(popup_downloadskin))->username + /*".png"*/ STR(6);
						file_copy_lib(download_image_file, fn);
						res = new_res(self, fn, e_res_type_DOWNLOADED_SKIN);
						idVar(res, player_skin) = true;
						withOne (Object, res, self->id)
							res_load(self);
						
						break;
					}
					
				}
				
				history_set_res(self, ID_action_lib_model_tex, fn, idVar(global::temp_edit, model_tex), res);
			}
		
		
		withOne (Object, global::temp_edit, self->id)
		{
			if (sVar(model_tex) != null_)
				idInt(sVar(model_tex), count)--;
			sVar(model_tex) = res;
			if (sVar(model_tex) != null_)
				idInt(sVar(model_tex), count)++;
			if (sVar(pattern_type) != /*""*/ STR(0))
				array_add(VarType::CreateRef(global::pattern_update), global::temp_edit);
			temp_update_model_shape(self);
		}
		
		ObjType(obj_preview, sInt(lib_preview))->update = true;
		return 0.0;
	}
	
}
