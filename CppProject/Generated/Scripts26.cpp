/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void builder_spawn_threads(Scope<obj_builder> self, IntType number)
	{
		for (IntType t = IntType(0); t < number; t++)
		{
			IntType thread = (new obj_builder_thread)->id;
			ObjType(obj_builder_thread, thread)->threadid = t;
			ObjType(obj_builder_thread, thread)->block_obj = self->block_obj;
			ObjType(obj_builder_thread, thread)->block_state_id = self->block_state_id;
			ObjType(obj_builder_thread, thread)->block_waterlogged = self->block_waterlogged;
			ObjType(obj_builder_thread, thread)->build_size_x = self->build_size_x;
			ObjType(obj_builder_thread, thread)->build_size_y = self->build_size_y;
			ObjType(obj_builder_thread, thread)->build_size_z = self->build_size_z;
			ObjType(obj_builder_thread, thread)->build_size_xy = self->build_size_xy;
			ObjType(obj_builder_thread, thread)->build_size_total = self->build_size_total;
			ObjType(obj_builder_thread, thread)->build_size_sqrt = self->build_size_sqrt;
			ObjType(obj_builder_thread, thread)->block_render_model = self->block_render_model;
			ObjType(obj_builder_thread, thread)->block_render_model_multipart_map = ds_int_map_create();
			ObjType(obj_builder_thread, thread)->block_multithreaded_skip = false;
			ObjType(obj_builder_thread, thread)->builder_scenery = self->builder_scenery;
			ObjType(obj_builder_thread, thread)->builder_scenery_legacy = self->builder_scenery_legacy;
			if (self->block_tl_list != null_)
				ObjType(obj_builder_thread, thread)->block_tl_map = ds_int_map_create();
			ds_list_add({ self->thread_list, thread });
		}
		if (number > IntType(1))
			thread_task_begin();
	}
	
	void builder_start(Scope<obj_builder> self)
	{
		self->build_pos = IntType(0);
		self->build_size_xy = self->build_size_x * self->build_size_y;
		self->build_size_total = self->build_size_xy * self->build_size_z;
		self->build_edges = !(global::_app->setting_scenery_remove_edges > 0 && (self->build_size_x > IntType(300) && self->build_size_y > IntType(300)) && self->build_single_block == null_);
		self->block_tl_add = false;
		self->block_multithreaded_skip = false;
		ds_map_clear(self->block_text_front_map);
		ds_map_clear(self->block_text_front_color_map);
		ds_map_clear(self->block_text_front_glow_color_map);
		ds_map_clear(self->block_text_front_glowing_map);
		ds_map_clear(self->block_text_back_map);
		ds_map_clear(self->block_text_back_color_map);
		ds_map_clear(self->block_text_back_glowing_map);
		ds_map_clear(self->block_banner_color_map);
		ds_map_clear(self->block_banner_patterns_map);
		ds_map_clear(self->block_banner_pattern_colors_map);
		ds_map_clear(self->block_skull_map);
		ds_map_clear(self->block_skull_res_map);
		ds_map_clear(self->block_skull_texture_map);
		ds_map_clear(self->block_decorated_pot_sherds_map);
		builder_create_buffers(self);
	}
	
	void builder_thread_event_create(Scope<obj_builder_thread> self)
	{
		self->threadid = IntType(0);
		self->build_size_x = IntType(0);
		self->build_size_y = IntType(0);
		self->build_size_z = IntType(0);
		self->build_size_total = IntType(0);
		self->build_size_sqrt = IntType(0);
		self->build_pos = IntType(0);
		self->build_pos_x = IntType(0);
		self->build_pos_y = IntType(0);
		self->build_pos_z = IntType(0);
		self->build_edge_xp = false;
		self->build_edge_xn = false;
		self->build_edge_yp = false;
		self->build_edge_yn = false;
		self->build_edge_zp = false;
		self->build_edge_zn = false;
		self->builder_scenery = false;
		self->builder_scenery_legacy = false;
		self->block_pos_x = IntType(0);
		self->block_pos_y = IntType(0);
		self->block_pos_z = IntType(0);
		self->block_color = null_;
		self->block_face_min_depth_xp = null_;
		self->block_face_min_depth_xn = null_;
		self->block_face_min_depth_yp = null_;
		self->block_face_min_depth_yn = null_;
		self->block_face_min_depth_zp = null_;
		self->block_face_min_depth_zn = null_;
		self->block_obj = null_;
		self->block_waterlogged = null_;
		self->block_current = IntType(0);
		self->block_state_id = null_;
		self->block_state_id_current = IntType(0);
		self->block_render_model = null_;
		self->block_render_model_multipart_map = null_;
		self->block_tl_map = null_;
		self->block_vbuffer_current = null_;
		self->block_vertex_wave = e_vertex_wave_NONE;
		self->block_vertex_wave_zmin = null_;
		self->block_vertex_wave_zmax = null_;
		self->block_vertex_emissive = IntType(0);
		self->block_vertex_subsurface = IntType(0);
		self->block_vertex_rgb = c_white;
		self->block_vertex_alpha = IntType(1);
	}
	
	void camera_control_move(ScopeAny self, VarType cam, IntType lockx, IntType locky)
	{
		RealType mx, my;
		mx = -((display_mouse_get_x() - lockx) / 8.0) * sReal(setting_look_sensitivity);
		my = -((display_mouse_get_y() - locky) / 8.0) * sReal(setting_look_sensitivity);
		display_mouse_set(lockx, locky);
		if (!(cam > 0))
		{
			RealType move, spd, spdm, xd, yd, zd;
			sVar(cam_work_angle_look_xy) += mx;
			sVar(cam_work_angle_look_z) += my;
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			if (!(sInt(cam_work_focus_tl) > 0) && (mx != IntType(0) || my != IntType(0)))
			{
				camera_work_set_focus();
				camera_work_set_angle();
			}
			move = IntType(4) * sReal(setting_move_speed) * global::delta;
			spd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			spdm = IntType(1);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->active > 0)
				spdm = sReal(setting_fast_modifier);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->active > 0)
				spdm = sReal(setting_slow_modifier);
			xd = IntType(0);
			yd = IntType(0);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->active > 0)
			{
				xd += -sin(degtorad(sVar(cam_work_angle_look_xy))) * move;
				yd += -cos(degtorad(sVar(cam_work_angle_look_xy))) * move;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->active > 0)
			{
				xd += sin(degtorad(sVar(cam_work_angle_look_xy))) * move;
				yd += cos(degtorad(sVar(cam_work_angle_look_xy))) * move;
			}
			xd += -lengthdir_x(spd, sVar(cam_work_angle_look_xy));
			yd += -lengthdir_y(spd, sVar(cam_work_angle_look_xy));
			zd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->active) * move;
			zd += (dsin(sVar(cam_work_angle_look_z))) * (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			sVec(cam_work_from).Real(X_) += xd * spdm;
			sVec(cam_work_from).Real(Y_) += yd * spdm;
			sVec(cam_work_from).Real(Z_) += zd * spdm;
			if (!(sInt(cam_work_focus_tl) > 0))
			{
				sVar(cam_work_focus)[X_] += xd * spdm;
				sVar(cam_work_focus)[Y_] += yd * spdm;
				sVar(cam_work_focus)[Z_] += zd * spdm;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->pressed)
				camera_work_reset(self);
			if (xd != IntType(0) || yd != IntType(0) || zd != IntType(0) || mx != IntType(0) || my != IntType(0))
				camera_work_set_angle();
		}
		else
		{
			RealType move, roll, spd, spdm, xd, yd, zd;
			move = IntType(4) * sReal(setting_move_speed) * global::delta;
			spd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			spdm = IntType(1);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->active > 0)
				spdm = sReal(setting_fast_modifier);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->active > 0)
				spdm = sReal(setting_slow_modifier);
			xd = IntType(0);
			yd = IntType(0);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->active > 0)
			{
				xd += -sin(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
				yd += -cos(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->active > 0)
			{
				xd += sin(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
				yd += cos(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
			}
			xd += -lengthdir_x(spd, idVar(cam, value).Value(e_value_ROT_Z) + 90.0);
			yd += -lengthdir_y(spd, idVar(cam, value).Value(e_value_ROT_Z) + 90.0);
			zd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->active) * move;
			zd += (-dsin(idVar(cam, value).Value(e_value_ROT_X))) * (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			roll = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_BACK))->active) * IntType(4) * spdm * global::delta;
			tl_value_set_start(self, ID_camera_control_move, true);
			tl_value_set(self, { e_value_POS_X, xd * spdm, true });
			tl_value_set(self, { e_value_POS_Y, yd * spdm, true });
			tl_value_set(self, { e_value_POS_Z, zd * spdm, true });
			tl_value_set(self, { e_value_ROT_X, -my, true });
			tl_value_set(self, { e_value_ROT_Y, roll, true });
			tl_value_set(self, { e_value_ROT_Z, mx, true });
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_RESET))->active > 0)
				tl_value_set(self, { e_value_ROT_Y, IntType(0), false });
			tl_value_set_done();
		}
		
	}
	
	void camera_control_pan(ScopeAny self, VarType cam)
	{
		RealType mx, my, move;
		MatrixType mat;
		VecType vert;
		mx = -((gmlGlobal::mouse_x - sVar(mouse_previous_x)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		my = ((gmlGlobal::mouse_y - sVar(mouse_previous_y)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		move = IntType(4) * sReal(setting_move_speed);
		app_mouse_wrap(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		if (!(cam > 0))
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(sVar(cam_work_angle_look_z), IntType(0), sVar(cam_work_angle_look_xy) + IntType(90)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			sVec(cam_work_from).Real(X_) += vert.Real(X_);
			sVec(cam_work_from).Real(Y_) += vert.Real(Y_);
			sVec(cam_work_from).Real(Z_) += vert.Real(Z_);
			camera_work_set_angle();
		}
		else
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(-idVar(cam, value).Value(e_value_ROT_X), IntType(0), idVar(cam, value).Value(e_value_ROT_Z) + IntType(180)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			tl_value_set_start(self, ID_camera_control_pan, true);
			tl_value_set(self, { e_value_POS_X, vert.Real(X_), true });
			tl_value_set(self, { e_value_POS_Y, vert.Real(Y_), true });
			tl_value_set(self, { e_value_POS_Z, vert.Real(Z_), true });
			tl_value_set_done();
		}
		
	}
	
	void camera_control_rotate(ScopeAny self, VarType cam, IntType lockx, IntType locky)
	{
		RealType mx, my;
		mx = -((display_mouse_get_x() - lockx) / 4.0);
		my = ((display_mouse_get_y() - locky) / 4.0);
		display_mouse_set(lockx, locky);
		if (!(cam > 0))
		{
			sVar(cam_work_angle_xy) += mx;
			sVar(cam_work_angle_z) += my;
			sVar(cam_work_angle_z) = clamp(sVar(cam_work_angle_z), -89.9, 89.9);
			sVar(cam_work_angle_look_xy) += mx;
			sVar(cam_work_angle_look_z) -= my;
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			camera_work_set_from(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->pressed)
				camera_work_reset(self);
		}
		else
		{
			tl_value_set_start(self, ID_camera_control_rotate, true);
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_XY, mx, true });
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_Z, my, true });
			if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
			{
				tl_value_set(self, { e_value_ROT_Z, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
				tl_value_set(self, { e_value_ROT_X, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
			}
			tl_value_set_done();
		}
		
	}
	
	void camera_startup(ScopeAny self)
	{
		global::cam_from = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_to = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_window = camera_create();
		global::cam_render = camera_create();
		global::cam_frustum = (new frustum())->id;
		global::cam_aspect = IntType(1);
		camera_set_view_mat(global::cam_window, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_window, MAT_IDENTITY);
		camera_set_view_mat(global::cam_render, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_render, MAT_IDENTITY);
		view_set_camera(IntType(0), global::cam_window);
		camera_work_reset(self);
	}
	
	void camera_work_reset(ScopeAny self)
	{
		sVar(cam_work_focus) = point3D(IntType(0), IntType(0), IntType(16));
		sVec(cam_work_focus_last) = point3D(IntType(0), IntType(0), IntType(6));
		sInt(cam_work_focus_tl) = null_;
		sBool(cam_work_jump) = false;
		sVar(cam_work_angle_xy) = IntType(315);
		sVar(cam_work_angle_goal_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_z) = IntType(5);
		sVar(cam_work_angle_goal_z) = sVar(cam_work_angle_z);
		sVar(cam_work_roll) = IntType(0);
		sVar(cam_work_zoom) = IntType(100);
		sVar(cam_work_zoom_goal) = sVar(cam_work_zoom);
		sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
		sReal(cam_work_angle_look_off_xy) = IntType(0);
		sReal(cam_work_angle_look_off_z) = IntType(0);
		camera_work_set_from(self);
	}
	
	void camera_work_set_angle()
	{
		global::_app->cam_work_angle_xy = point_direction(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_));
		global::_app->cam_work_angle_z = point_zdirection(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_focus.Value(Z_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_), global::_app->cam_work_from.Real(Z_));
		global::_app->cam_work_angle_z = clamp(global::_app->cam_work_angle_z, -89.9, 89.9);
		global::_app->cam_work_zoom = point3D_distance(global::_app->cam_work_focus, global::_app->cam_work_from);
		global::_app->cam_work_zoom_goal = global::_app->cam_work_zoom;
	}
	
	void camera_work_set_focus()
	{
		global::_app->cam_work_focus[X_] = global::_app->cam_work_from.Real(X_) + lengthdir_x(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Y_] = global::_app->cam_work_from.Real(Y_) + lengthdir_y(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Z_] = global::_app->cam_work_from.Real(Z_) + lengthdir_z(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_z);
		if (vec3_equals(global::_app->cam_work_from, global::_app->cam_work_focus))
			global::_app->cam_work_focus = vec3_add(global::_app->cam_work_focus, 0.0001);
	}
	
	void camera_work_set_from(ScopeAny self)
	{
		sVec(cam_work_from).Real(X_) = sVar(cam_work_focus).Value(X_) + lengthdir_x(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Y_) = sVar(cam_work_focus).Value(Y_) + lengthdir_y(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Z_) = sVar(cam_work_focus).Value(Z_) + lengthdir_z(sVar(cam_work_zoom), sVar(cam_work_angle_z));
	}
	
	void collapse_event_create(ScopeAny self)
	{
		sVar(name) = /*""*/ STR(0);
		sVar(collapse_id) = null_;
		sVar(open) = false;
	}
	
	void collapse_register(StringType name)
	{
		DsMap(global::collapse_map)[name] = false;
	}
	
	void colorpicker_blue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->blue * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_brightness(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_draw(ScopeAny self)
	{
		VarType bx, by;
		RealType bw, bh;
		bx = sVar(dx) - IntType(12);
		by = sVar(dy) - IntType(12);
		bw = IntType(192);
		bh = IntType(192);
		if (app_mouse_box(self, bx, by, bw, bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickersatbripick"*/ STR(1035);
		}
		if (sVar(window_busy) == /*"colorpickersatbripick"*/ STR(1035))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sVar(window_focus) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor((clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1))) * IntType(255));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor((clamp(IntType(1) - (gmlGlobal::mouse_y - by) / bh, IntType(0), IntType(1))) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_sprite_general(ID_spr_colorpicker, IntType(0), IntType(0), IntType(0), IntType(192), IntType(192), (IntType)(bx), (IntType)(by), 1.0, 1.0, 0.0, c_white, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), c_white, draw_get_alpha());
		draw_image({ ID_spr_colorpicker_cursor, IntType(0), bx + (bw * ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->saturation / 255.0)), by + (bh * (IntType(1) - ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->brightness / 255.0))), IntType(1), IntType(1), c_white, IntType(1) });
		sVar(dy) = by + IntType(192) + IntType(8);
		sVar(dx) -= 4.0;
		sVar(dw) = IntType(176);
		bx = sVar(dx) + IntType(8);
		by = sVar(dy);
		bw = IntType(176) - IntType(16);
		bh = IntType(16);
		if (app_mouse_box(self, bx - IntType(8), by, bw + IntType(16), bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickerhuepick"*/ STR(1036);
		}
		if (sVar(window_busy) == /*"colorpickerhuepick"*/ STR(1036))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1)) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_image({ ID_spr_colorpicker_hue, IntType(0), sVar(dx), by, IntType(1), IntType(1), c_white, IntType(1) });
		draw_outline(sVar(dx), by, IntType(176), IntType(16), IntType(1), global::c_border, global::a_border, true);
		draw_image({ ID_spr_colorpicker_cursor, IntType(1), bx + (((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->hue / 255.0) * bw), by + IntType(8), IntType(1), IntType(1) });
		sVar(dy) += IntType(16) + IntType(8);
		tab_control(self, sReal(ui_large_height));
		togglebutton_add(self, { /*"colorpickerrgb"*/ STR(1037), null_, /*"rgb"*/ STR(1038), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1038), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhsv"*/ STR(1039), null_, /*"hsv"*/ STR(1040), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1040), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhex"*/ STR(1041), null_, /*"hex"*/ STR(1042), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1042), ID_colorpicker_set_mode });
		draw_togglebutton(self, /*"colorpickermode"*/ STR(1043), sVar(dx), sVar(dy), true, false);
		tab_next(self);
		if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1038))
		{
			textfield_group_add(self, { /*"colorpickerr"*/ STR(1044), color_get_red((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_red((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_red, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red });
			textfield_group_add(self, { /*"colorpickerg"*/ STR(1045), color_get_green((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_green((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_green, Y_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green });
			textfield_group_add(self, { /*"colorpickerb"*/ STR(1046), color_get_blue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_blue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_blue, Z_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue });
			if (draw_textfield_group(self, /*"colorpickerrgb"*/ STR(1037), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(3), true, false))
			{
				ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text, IntType(0)) });
				colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
			}
		}
		else
			if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1040))
			{
				textfield_group_add(self, { /*"colorpickerh"*/ STR(1047), floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_hue, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue });
				textfield_group_add(self, { /*"colorpickers"*/ STR(1048), floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_saturation, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation });
				textfield_group_add(self, { /*"colorpickerv"*/ STR(1049), floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_brightness, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness });
				VarType update = draw_textfield_group(self, /*"colorpickerhsv"*/ STR(1039), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(0), true, false);
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
			}
			else
				if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1042))
				{
					if (draw_inputbox(self, { /*"colorpickerhex"*/ STR(1041), sVar(dx), sVar(dy), IntType(176), IntType(24), color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->def), ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, null_ }))
						colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) ? ObjType(obj_colorpicker, sInt(colorpicker))->def : hex_to_color(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text), true);
					if (ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) && sVar(window_focus) == /*""*/ STR(0))
						ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = /*"000000"*/ STR(686);
				}
		
		
		sVar(dy) += sReal(ui_small_height) + IntType(4);
		sVar(settings_menu_w) = IntType(192);
	}
	
	void colorpicker_green(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->green * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_hue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_red(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->red * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_saturation(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_set_mode(ScopeAny self, VarType mode)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->mode = mode.Str();
	}
	
	void colorpicker_show(ScopeAny self, VarType name, VarType color, VarType def, IntType script, VarType xx, VarType yy, VarType width, RealType height)
	{
		if (sStr(settings_menu_name) == /*"colorpicker"*/ STR(706) && ObjType(obj_colorpicker, sInt(colorpicker))->value_script == script)
			popup_close(self);
		else
		{
			sVar(settings_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"settingsmenu"*/ STR(1050);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			sInt(settings_menu_window) = window_get_current();
			sStr(settings_menu_name) = /*"colorpicker"*/ STR(706);
			sVar(settings_menu_ani) = IntType(0);
			sStr(settings_menu_ani_type) = /*"show"*/ STR(751);
			sBool(settings_menu_primary) = false;
			sVar(settings_menu_x) = xx;
			sVar(settings_menu_y) = yy;
			if (sVar(settings_menu_x) < IntType(0))
				sVar(settings_menu_x) = xx + width + IntType(8);
			if (sVar(settings_menu_x) + IntType(192) > sReal(window_width))
				sVar(settings_menu_x) = sReal(window_width) - IntType(192);
			sVar(settings_menu_h_max) = null_;
			sReal(settings_menu_button_h) = height;
			sBool(settings_menu_above) = false;
			sInt(settings_menu_steps) = IntType(0);
			sInt(settings_menu_script) = ID_colorpicker_draw;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_name = name;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_script = script;
			ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"rgb"*/ STR(1038);
			ObjType(obj_colorpicker, sInt(colorpicker))->def = def;
			ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = color_get_hue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = color_get_saturation((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = color_get_value((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(color);
		}
		
	}
	
	void colorpicker_startup()
	{
		global::_app->colorpicker = (new obj_colorpicker)->id;
		withOne (obj_colorpicker, global::_app->colorpicker, global::_app->id)
		{
			self->value_name = /*""*/ STR(0);
			self->value_script = null_;
			self->color = null_;
			self->def = null_;
			self->hue = IntType(0);
			self->saturation = IntType(0);
			self->value = IntType(0);
			self->tbx_red = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_green = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_blue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_hue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_saturation = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_brightness = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1051));
			self->tbx_hexadecimal = new_textbox_hex();
			self->mode = /*"rgb"*/ STR(1038);
		}
		
	}
	
	void colorpicker_update(ScopeAny self, IntType control, VarType color, BoolType gethsb)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
		if (gethsb)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
		}
		else
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue }));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation }));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness }));
		}
		
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->hue);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->saturation);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->brightness);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->color);
		script_execute(self, { ObjType(obj_colorpicker, sInt(colorpicker))->value_script, ObjType(obj_colorpicker, sInt(colorpicker))->color });
	}
	
	IntType color_add(VarType color1, VarType color2)
	{
		return make_color_rgb(min({ IntType(255), color_get_red((IntType)(color1)) + color_get_red((IntType)(color2)) }), min({ IntType(255), color_get_green((IntType)(color1)) + color_get_green((IntType)(color2)) }), min({ IntType(255), color_get_blue((IntType)(color1)) + color_get_blue((IntType)(color2)) }));
	}
	
	IntType color_multiply(VarType color1, VarType color2)
	{
		return make_color_rgb((IntType)(((RealType)color_get_red((IntType)(color1)) / 255.0) * ((RealType)color_get_red((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_green((IntType)(color1)) / 255.0) * ((RealType)color_get_green((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_blue((IntType)(color1)) / 255.0) * ((RealType)color_get_blue((IntType)(color2)) / 255.0) * IntType(255)));
	}
	
	StringType color_to_hex(VarType color)
	{
		IntType r, g, b;
		StringType hex;
		r = color_get_red((IntType)(color));
		g = color_get_green((IntType)(color));
		b = color_get_blue((IntType)(color));
		hex = /*"0123456789ABCDEF"*/ STR(1052);
		return string_char_at(hex, (IntType)(((IntType)(r / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(r, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(g / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(g, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(b / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(b, IntType(16))) + IntType(1)));
	}
	
	IntType context_menu_add_level(ScopeAny self, VarType name, VarType xx, VarType yy, IntType item)
	{
		IntType script, level;
		if (item != null_)
			script = ObjType(obj_list_item, item)->context_menu_script;
		else
			script = null_;
		
		level = (new obj_context_menu_level)->id;
		ObjType(obj_context_menu_level, level)->name = name;
		ObjType(obj_context_menu_level, level)->level_x = xx;
		ObjType(obj_context_menu_level, level)->level_y = yy;
		ObjType(obj_context_menu_level, level)->level = sInt(context_menu_level_amount);
		ObjType(obj_context_menu_level, level)->ani = IntType(0);
		ObjType(obj_context_menu_level, level)->flip = false;
		sInt(context_menu_window) = window_get_current();
		if (script == null_)
		{
			ObjType(obj_context_menu_level, level)->level_list = list_init_context_menu(self, name);
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->width + IntType(8);
			ObjType(obj_context_menu_level, level)->level_height = (ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item) * IntType(24)) + IntType(8);
			ObjType(obj_context_menu_level, level)->script = null_;
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				if (ObjType(obj_list_item, DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i))->divider)
					ObjType(obj_context_menu_level, level)->level_height += IntType(8);
			}
		}
		else
		{
			ObjType(obj_context_menu_level, level)->level_list = null_;
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list_item, item)->context_menu_width;
			ObjType(obj_context_menu_level, level)->level_height = ObjType(obj_list_item, item)->context_menu_height;
			ObjType(obj_context_menu_level, level)->level_script = script;
		}
		
		if (sInt(context_menu_level_amount) > IntType(0))
		{
			if ((ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width + ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width) < sReal(window_width))
				ObjType(obj_context_menu_level, level)->level_x += (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width);
			else
				ObjType(obj_context_menu_level, level)->level_x -= ObjType(obj_context_menu_level, level)->level_width;
			
			ObjType(obj_context_menu_level, level)->level_y -= 4.0;
		}
		if (!sBool(toolbar_menu_active) && sInt(context_menu_level_amount) == IntType(0))
		{
			ObjType(obj_context_menu_level, level)->level_y -= 4.0;
			RealType offset = IntType(0);
			BoolType found = false;
			if (sVar(context_menu_find_script) != null_ && sVar(context_menu_name) == sVar(context_menu_name_last))
			{
				for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
				{
					IntType it = DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i);
					if (ObjType(obj_list_item, it)->divider)
						offset += IntType(8);
					if (!ObjType(obj_list_item, it)->disabled)
					{
						if (ObjType(obj_list_item, it)->script == sVar(context_menu_find_script))
						{
							found = true;
							break;
						}
						else
							if (!(ObjType(obj_list_item, it)->script > 0) && ObjType(obj_list_item, it)->context_menu_script == sVar(context_menu_find_script) && sVar(context_menu_find_script_name) == ObjType(obj_list_item, it)->context_menu_name)
							{
								found = true;
								break;
							}
						
					}
					offset += IntType(24);
				}
			}
			if (!found)
				offset = IntType(0);
			ObjType(obj_context_menu_level, level)->level_y -= 12.0 + offset;
			ObjType(obj_context_menu_level, level)->level_x -= (ObjType(obj_context_menu_level, level)->level_width - IntType(32));
			if (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width > sReal(window_width))
				ObjType(obj_context_menu_level, level)->level_x += sReal(window_width) - (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width);
			if (ObjType(obj_context_menu_level, level)->level_x < IntType(0))
				ObjType(obj_context_menu_level, level)->level_x = IntType(32);
			if (ObjType(obj_context_menu_level, level)->level_y + ObjType(obj_context_menu_level, level)->level_height > (sReal(window_height) - IntType(32)))
			{
				ObjType(obj_context_menu_level, level)->level_y = (sReal(window_height) - ObjType(obj_context_menu_level, level)->level_height) - IntType(32);
				ObjType(obj_context_menu_level, level)->flip = true;
			}
		}
		ds_list_add({ sInt(context_menu_level), level });
		sInt(context_menu_level_amount)++;
		return level;
	}
	
	BoolType context_menu_area(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, wid, hei, name;
		IntType font, c;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		wid = argument[IntType(2)];
		hei = argument[IntType(3)];
		name = argument[IntType(4)];
		if (app_mouse_box(self, xx, yy, wid, hei) && sBool(mouse_right_pressed))
		{
			if (argument_count > IntType(5))
			{
				sVar(context_menu_value) = argument[IntType(5)];
				sVar(context_menu_value_type) = argument[IntType(6)];
				sVar(context_menu_value_script) = argument[IntType(7)];
				sVar(context_menu_value_default) = argument[IntType(8)];
			}
			else
				sVar(context_menu_value) = null_;
			
			if (keyboard_check(vk_shift) && argument_count > IntType(5) && sVar(context_menu_value_script) != null_)
			{
				if (sInt(popup) == sInt(popup_armor_editor))
				{
					global::list_item_script = ID_action_value_reset;
					return true;
				}
				if (argument[IntType(6)] == e_context_type_TIME || argument[IntType(6)] == e_context_type_NUMBER)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)], false });
				if (argument[IntType(6)] == e_context_type_COLOR)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)] });
				return true;
			}
			context_menu_close(self);
			app_mouse_clear(self);
			sVar(context_menu_name) = name;
			sVar(context_menu_copy_axis_edit) = global::axis_edit;
			sVar(context_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"contextmenu"*/ STR(1053);
			sInt(context_menu_group) = sInt(context_menu_group_temp);
			font = draw_get_font();
			c = context_menu_add_level(self, name, gmlGlobal::mouse_x + IntType(1), gmlGlobal::mouse_y);
			ObjType(obj_context_menu_level, c)->ani = 0.99;
			if (font != draw_get_font())
				draw_set_font(font);
			return true;
		}
		return false;
	}
	
	RealType context_menu_close(ScopeAny self)
	{
		if (sVar(context_menu_name) == /*""*/ STR(0))
			return IntType(0);
		if (!sBool(toolbar_menu_active))
		{
			sVar(context_menu_name_last) = sVar(context_menu_name);
			sVar(context_menu_find_script) = null_;
			sVar(context_menu_find_script_name) = /*""*/ STR(0);
			VarType l = DsList(sInt(context_menu_level)).Value(IntType(0));
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, l)->level_list)->item); i++)
			{
				IntType item = DsList(ObjType(obj_list, ObjType(obj_context_menu_level, l)->level_list)->item).Value(i);
				if (ObjType(obj_list_item, item)->context_menu_active)
				{
					if (ObjType(obj_list_item, item)->script == null_)
					{
						sVar(context_menu_find_script) = ObjType(obj_list_item, item)->context_menu_script;
						sVar(context_menu_find_script_name) = ObjType(obj_list_item, item)->context_menu_name;
					}
					else
						sVar(context_menu_find_script) = ObjType(obj_list_item, item)->script;
					
					break;
				}
			}
		}
		if (sVar(context_menu_find_script) == ID_action_value_cut || sVar(context_menu_find_script) == ID_action_value_copy)
			sVar(context_menu_find_script) = ID_action_value_paste;
		if (sVar(context_menu_find_script) == ID_action_group_copy || sVar(context_menu_find_script) == ID_action_group_copy_global)
			sVar(context_menu_find_script) = ID_action_group_paste;
		sBool(toolbar_menu_active) = false;
		sVar(context_menu_name) = /*""*/ STR(0);
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_level_amount) = IntType(0);
		sInt(context_menu_mouseon_level) = IntType(0);
		ds_list_clear(sInt(context_menu_level));
		withAll (obj_context_menu_level, self->id)
		{
			list_destroy(ScopeAny(self), self->level_list);
			instance_destroy(ScopeAny(self));
		}
		
		sBool(mouse_left) = false;
		sBool(mouse_left_pressed) = false;
		sBool(mouse_left_double_pressed) = false;
		sInt(mouse_click_count) = IntType(0);
		sVar(context_menu_min_x) = IntType(0);
		sVar(context_menu_min_y) = IntType(0);
		sVar(context_menu_max_x) = IntType(0);
		sVar(context_menu_max_y) = IntType(0);
		return 0.0;
	}
	
	RealType context_menu_draw(ScopeAny self)
	{
		if (sInt(context_menu_level_amount) == IntType(0) || sInt(context_menu_window) != window_get_current())
			return IntType(0);
		if (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->ani == IntType(0) && sStr(context_menu_ani) == /*"hide"*/ STR(750))
		{
			sStr(context_menu_ani) = /*""*/ STR(0);
			context_menu_close(self);
			sVar(window_busy) = sVar(context_menu_busy_prev);
			return IntType(0);
		}
		if (sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*""*/ STR(0);
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_mouseon_item) = null_;
		global::axis_edit = sVar(context_menu_copy_axis_edit);
		sVar(context_menu_min_x) = no_limit;
		sVar(context_menu_min_y) = no_limit;
		sVar(context_menu_max_x) = -no_limit;
		sVar(context_menu_max_y) = -no_limit;
		if (sBool(context_menu_mouseon_reset))
		{
			sInt(context_menu_mouseon_level) = IntType(0);
			sBool(context_menu_mouseon_reset) = false;
		}
		for (IntType i = IntType(0); i < sInt(context_menu_level_amount); i++)
			context_menu_draw_level(self, i);
		withAll (obj_list_item, global::_app->id)
		{
			if (self->disabled || (self->context_menu_name == /*""*/ STR(0) && self->context_menu_script == null_) || (global::_app->context_menu_mouseon_level > IntType(0) && (ObjType(obj_context_menu_level, DsList(global::_app->context_menu_level).Value(IntType(1)))->name == self->context_menu_name)))
				continue;
			if (self->id == global::_app->context_menu_mouseon_item)
				self->hovertime += test_reduced_motion(IntType(6), (60.0 / gmlGlobal::room_speed));
			else
				self->hovertime -= test_reduced_motion(IntType(6), (60.0 / gmlGlobal::room_speed));
			
			self->hovertime = clamp(self->hovertime, IntType(0), IntType(6));
			if (!self->context_menu_active && self->hovertime == IntType(6))
			{
				self->context_menu_active = true;
				withOne (app, global::_app->id, self->id)
					context_menu_add_level(ScopeAny(self), ObjType(obj_list_item, self.otherId)->context_menu_name, ObjType(obj_list_item, self.otherId)->draw_x, ObjType(obj_list_item, self.otherId)->draw_y, self.otherId);
				
			}
			if (self->context_menu_active && self->hovertime == IntType(0))
			{
				self->context_menu_active = false;
				global::_app->context_menu_mouseon_level = IntType(0);
				withAll (obj_context_menu_level, self->id)
				{
					if (self->level > IntType(0) && self->name == ObjType(obj_list_item, self.otherId)->context_menu_name)
					{
						ds_list_delete_value(global::_app->context_menu_level, self->id);
						global::_app->context_menu_level_amount--;
						list_destroy(ScopeAny(self), self->level_list);
						instance_destroy(ScopeAny(self));
					}
				}
				
			}
		}
		
		if (((sBool(mouse_left_pressed) || sBool(mouse_right_pressed)) && !sBool(context_menu_mouseon)) || (sBool(mouse_left_released) && (!sBool(context_menu_mouseon) || (sInt(context_menu_mouseon_item) != null_ && !idBool(sInt(context_menu_mouseon_item), disabled) && idVar(sInt(context_menu_mouseon_item), context_menu_name) == /*""*/ STR(0)))))
			sStr(context_menu_ani) = /*"hide"*/ STR(750);
		if (sInt(context_menu_level_amount) > IntType(0) && ((gmlGlobal::mouse_x < sVar(context_menu_min_x) - IntType(64)) || (gmlGlobal::mouse_y < sVar(context_menu_min_y) - IntType(64)) || (gmlGlobal::mouse_x > sVar(context_menu_max_x) + IntType(64)) || (gmlGlobal::mouse_y > sVar(context_menu_max_y) + IntType(64))))
		{
			sStr(context_menu_ani) = /*"hide"*/ STR(750);
			ObjType(obj_context_menu_level, DsList(sInt(context_menu_level))[IntType(0)])->ani = IntType(0);
		}
		if (sVar(window_busy) == /*""*/ STR(0) && sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*"contextmenu"*/ STR(1053);
		return 0.0;
	}
	
	RealType context_menu_draw_level(ScopeAny self, IntType argument0)
	{
		IntType levelindex, level;
		VarType alphaease, aniease;
		levelindex = argument0;
		level = DsList(sInt(context_menu_level)).Value(levelindex);
		sVar(context_menu_current) = level;
		if (sStr(context_menu_ani) == /*""*/ STR(0) || sStr(context_menu_ani) == /*"open"*/ STR(924))
		{
			ObjType(obj_context_menu_level, level)->ani += test_reduced_motion(IntType(1), (0.07 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani >= IntType(1))
				ObjType(obj_context_menu_level, level)->ani = IntType(1);
		}
		else
		{
			ObjType(obj_context_menu_level, level)->ani -= test_reduced_motion(IntType(1), (0.125 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani <= IntType(0))
				ObjType(obj_context_menu_level, level)->ani = IntType(0);
		}
		
		aniease = ease(/*"easeoutexpo"*/ STR(594), ObjType(obj_context_menu_level, level)->ani);
		alphaease = aniease;
		aniease = IntType(1);
		sVar(dw) = ObjType(obj_context_menu_level, level)->level_width;
		sVar(dh) = ObjType(obj_context_menu_level, level)->level_height * aniease;
		sVar(dx) = ObjType(obj_context_menu_level, level)->level_x;
		sVar(dy) = (ObjType(obj_context_menu_level, level)->flip > 0) ? (ObjType(obj_context_menu_level, level)->level_y + (ObjType(obj_context_menu_level, level)->level_height - sVar(dh))) : ObjType(obj_context_menu_level, level)->level_y;
		sVar(dy) = max({ IntType(0), sVar(dy) });
		sVar(content_x) = sVar(dx);
		sVar(content_y) = sVar(dy);
		sVar(content_width) = sVar(dw);
		sVar(content_height) = sVar(dh);
		sBool(content_mouseon) = app_mouse_box(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh)) && (levelindex >= sInt(context_menu_mouseon_level));
		sVar(context_menu_min_x) = min({ sVar(dx), sVar(context_menu_min_x) });
		sVar(context_menu_min_y) = min({ sVar(dy), sVar(context_menu_min_y) });
		sVar(context_menu_max_x) = max({ sVar(dx) + sVar(dw), sVar(context_menu_max_x) });
		sVar(context_menu_max_y) = max({ sVar(dy) + sVar(dh), sVar(context_menu_max_y) });
		if (sBool(content_mouseon))
			sBool(context_menu_mouseon) = true;
		if (sBool(content_mouseon) && levelindex > sInt(context_menu_mouseon_level))
			sInt(context_menu_mouseon_level) = levelindex;
		if (!sBool(content_mouseon) && (levelindex >= sInt(context_menu_mouseon_level)))
			sBool(context_menu_mouseon_reset) = true;
		draw_set_alpha(alphaease);
		draw_dropshadow(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh), c_black, IntType(1));
		draw_box(sVar(dx), sVar(dy), sVar(dw), sVar(dh), false, global::c_level_top, IntType(1));
		draw_outline(sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), global::c_border, global::a_border, true);
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_begin(sVar(dx), sVar(dy), sVar(dw), sVar(dh));
		sVar(dy) = ((ObjType(obj_context_menu_level, level)->flip > 0) ? sVar(dy) : (ObjType(obj_context_menu_level, level)->level_y - ((IntType(1) - aniease) * ObjType(obj_context_menu_level, level)->level_height)));
		sVar(dy) = max({ IntType(0), sVar(dy) });
		if (ObjType(obj_context_menu_level, level)->level_list != null_)
		{
			sVar(dy) += IntType(4);
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				IntType item = DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i);
				if (ObjType(obj_list_item, item)->divider)
					sVar(dy) += IntType(8);
				if (list_item_draw(self, { item, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24), false }))
				{
					ObjType(obj_list_item, item)->context_menu_active = true;
					ObjType(obj_list_item, item)->hovertime = IntType(99999);
				}
				if (ObjType(obj_list_item, item)->context_menu_active)
					ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
				if (app_mouse_box(self, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24)))
					sInt(context_menu_mouseon_item) = item;
			}
		}
		else
		{
			if (script_execute(self, { ObjType(obj_context_menu_level, level)->level_script, sVar(dx), sVar(dy), sVar(dw), sVar(dh) }))
			{
				draw_set_alpha(1.0);
				return IntType(0);
			}
			if (!(ObjType(obj_context_menu_level, level)->flip > 0) && ObjType(obj_context_menu_level, level)->level_y + ObjType(obj_context_menu_level, level)->level_height > sReal(window_height))
			{
				ObjType(obj_context_menu_level, level)->level_y = sReal(window_height) - ObjType(obj_context_menu_level, level)->level_height;
				ObjType(obj_context_menu_level, level)->flip = true;
			}
		}
		
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_end();
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	VarType debug(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		StringType cap, valstr;
		if (!dev_mode)
			return argument[argument_count - IntType(1)];
		cap = string_repeat(/*"\t"*/ STR(1054), global::debug_indent) + string(argument[IntType(0)]);
		valstr = /*""*/ STR(0);
		if (argument_count > IntType(1))
		{
			valstr = /*": "*/ STR(1055);
			for (IntType a = IntType(1); a < argument_count; a++)
			{
				valstr += string(argument[a]);
				if (a < argument_count - IntType(1))
					valstr += /*", "*/ STR(1056);
			}
		}
		show_debug_message(cap + valstr);
		return argument[argument_count - IntType(1)];
	}
	
}
