/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.25 00:12:51 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType draw_button_label(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, IntType icon, IntType type, IntType script, IntType anchor, BoolType disabled)
	{
		RealType h, capwid;
		IntType font;
		VarType cap;
		BoolType customw;
		h = IntType(32);
		cap = text_get({ name });
		h = (type != e_button_TOOLBAR ? IntType(32) : sReal(toolbar_size));
		font = (type != e_button_TOOLBAR ? sInt(font_button) : sInt(font_value));
		if (type == e_button_BIG)
		{
			h = IntType(64);
			font = sInt(font_heading_big);
		}
		draw_set_font(font);
		capwid = string_width(cap);
		if (w == null_)
		{
			w = capwid + (icon == null_ ? IntType(24) : IntType(52));
			customw = false;
		}
		else
			customw = true;
		
		if (anchor == e_anchor_CENTER)
			xx = xx - floor((RealType)w / 2.0);
		else
			if (anchor == e_anchor_RIGHT)
				xx -= w;
		
		if (yy > sVar(content_y) + sVar(content_height) || yy + h < sVar(content_y) || xx > sVar(content_x) + sVar(content_width) || xx + w < sVar(content_x))
			return IntType(0);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && !disabled;
		mouseclick = mouseon && sBool(mouse_left);
		microani_set(name, script, mouseon, mouseclick, false);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		VarType focus;
		IntType backcolor, linecolor, contentcolor;
		RealType backalpha, linealpha, contentalpha, contentx;
		focus = max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) });
		if (type == e_button_PRIMARY || type == e_button_BIG)
		{
			backcolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
			backcolor = merge_color(backcolor, global::c_accent_pressed, focus);
			backcolor = merge_color(backcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			backalpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = global::c_button_text;
			contentalpha = global::a_button_text;
		}
		else
		{
			backcolor = merge_color(global::c_overlay, (IntType)(global::c_accent_overlay), focus);
			backalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
			backalpha = lerp(backalpha, global::a_accent_overlay, focus);
			backalpha = lerp(backalpha, 0.0, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
			contentcolor = merge_color(contentcolor, (IntType)(global::c_accent), focus);
			contentcolor = merge_color(contentcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			contentalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
			contentalpha = lerp(contentalpha, 1.0, focus);
			contentalpha = lerp(contentalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			linecolor = merge_color((IntType)(global::c_border), (IntType)(global::c_accent), focus);
			linealpha = lerp(global::a_border, global::a_accent, focus);
		}
		
		draw_box(xx, yy, w, h, false, backcolor, backalpha);
		if (type == e_button_PRIMARY || type == e_button_BIG)
			draw_box_bevel(xx, yy, w, h, IntType(1));
		if (type == e_button_SECONDARY)
		{
			draw_box(xx, yy, w, h, false, global::c_level_top, draw_get_alpha());
			draw_outline(xx, yy, w, h, IntType(1), linecolor, linealpha, IntType(1));
		}
		draw_box_hover({ xx, yy, w, h, global::microani_arr.Value(e_microani_PRESS) });
		if (customw)
			contentx = floor((xx + (RealType)w / 2.0) - ((capwid + (icon == null_ ? 0.0 : 32.0)) / 2.0));
		else
			contentx = floor(xx + (icon == null_ ? 12.0 : 8.0));
		
		if (icon != null_)
		{
			draw_image({ ID_spr_icons, icon, contentx + IntType(12), yy + h / 2.0, IntType(1), IntType(1), contentcolor, contentalpha });
			contentx += IntType(32);
		}
		draw_label(self, { cap, contentx, yy + h / 2.0, fa_left, fa_middle, contentcolor, contentalpha });
		microani_update({ mouseon, mouseclick, false, disabled });
		if (mouseon && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script });
			return true;
		}
		return 0.0;
	}
	
	BoolType draw_button_menu(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType name, type, xx, yy, wid, hei, value, text, script, tex, disabled, icon, caption, texcolor, texalpha, capwid;
		RealType flip;
		BoolType mouseon, menuactive, menuhide;
		VarType cap, menuid, nameid;
		name = argument[IntType(0)];
		type = argument[IntType(1)];
		xx = argument[IntType(2)];
		yy = argument[IntType(3)];
		wid = argument[IntType(4)];
		hei = argument[IntType(5)];
		value = argument[IntType(6)];
		text = argument[IntType(7)];
		script = argument[IntType(8)];
		if (argument_count > IntType(9))
			disabled = argument[IntType(9)];
		else
			disabled = false;
		
		if (argument_count > IntType(10))
			tex = argument[IntType(10)];
		else
			tex = null_;
		
		if (argument_count > IntType(11))
			icon = argument[IntType(11)];
		else
			icon = null_;
		
		if (argument_count > IntType(12))
			caption = argument[IntType(12)];
		else
			caption = /*""*/ STR(0);
		
		if (argument_count > IntType(13))
		{
			texcolor = argument[IntType(13)];
			texalpha = argument[IntType(14)];
			if (texcolor == null_)
				texcolor = c_white;
			if (texalpha == null_)
				texalpha = IntType(1);
		}
		else
		{
			texcolor = c_white;
			texalpha = IntType(1);
		}
		
		if (argument_count > IntType(15))
			capwid = argument[IntType(15)];
		else
			capwid = null_;
		
		if (sVar(menu_model_current) != null_)
		{
			cap = minecraft_asset_get_name(/*"modelstate"*/ STR(759), name);
			name = /*"modelstate"*/ STR(759) + name;
		}
		else
			if (sVar(menu_block_current) != null_)
			{
				cap = minecraft_asset_get_name(/*"blockstate"*/ STR(778), name);
				name = /*"blockstate"*/ STR(778) + name;
			}
			else
				cap = text_get({ name });
		
		
		if (sBool(menu_bench))
			nameid = /*"bench"*/ STR(736) + name;
		else
			nameid = name;
		
		menuactive = false;
		menuhide = false;
		menuid = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
		{
			if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
			{
				menuactive = true;
				menuhide = ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_ani_type == /*"hide"*/ STR(734);
				menuid = DsList(sInt(menu_list)).Value(i);
			}
		}
		flip = (yy + hei + hei * IntType(8) > sReal(window_height));
		microani_set(nameid, null_, false, false, false);
		IntType textcolor, bordercolor, chevroncolor, animation;
		RealType textalpha, borderalpha, chevronalpha;
		VarType fadealpha;
		textcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		textcolor = merge_color(textcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		textcolor = merge_color(textcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		textalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		textalpha = lerp(textalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		textalpha = lerp(textalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		fadealpha = global::microani_arr.Value(e_microani_FADE);
		animation = global::current_microani;
		if (type != e_menu_LIST_SEAMLESS)
		{
			draw_set_font(sInt(font_label));
			if (capwid == null_ && (!(sReal(window_compact) > 0) || global::_app->panel_compact > 0))
			{
				draw_label(self, { string_limit(cap, sVar(dw)), xx, yy - IntType(3), fa_left, fa_top, textcolor, textalpha });
				yy += (label_height + IntType(8));
			}
			else
			{
				if (capwid == null_ && sReal(window_compact) > 0)
				{
					cap = string_limit(cap, (RealType)sVar(dw) / 3.0);
					capwid = (RealType)sVar(dw) / 3.0;
				}
				draw_label(self, { cap, xx, yy + (RealType)hei / 2.0, fa_left, fa_middle, textcolor, textalpha });
				wid -= capwid;
				xx += capwid;
			}
			
			ObjType(value_animation, ObjType(micro_animation, animation)->fade)->value = IntType(1);
		}
		if (menuactive)
		{
			xx = lerp(xx, ObjType(obj_menu, menuid)->menu_x, ObjType(obj_menu, menuid)->menu_ani_ease);
			wid = lerp(wid, ObjType(obj_menu, menuid)->menu_w, ObjType(obj_menu, menuid)->menu_ani_ease);
		}
		bordercolor = merge_color((IntType)(global::c_border), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		borderalpha = lerp(global::a_border, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_PRESS));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box(xx, yy, wid, hei, false, global::c_level_top, draw_get_alpha());
		draw_outline(xx, yy, wid, hei, IntType(1), bordercolor, borderalpha * fadealpha, true);
		draw_box_hover({ xx, yy, wid, hei, global::microani_arr.Value(e_microani_PRESS) });
		mouseon = app_mouse_box(self, xx, yy, wid, hei) && !(disabled > 0) && sBool(content_mouseon);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		IntType item = list_item_add(text, null_, caption, tex, icon, -IntType(1), null_, false, false);
		ObjType(obj_list_item, item)->disabled = disabled;
		if (type == e_menu_TRANSITION_LIST)
		{
			ObjType(obj_list_item, item)->thumbnail_blend = global::c_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_alpha = global::a_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_backdrop = false;
		}
		else
		{
			ObjType(obj_list_item, item)->thumbnail_blend = texcolor;
			ObjType(obj_list_item, item)->thumbnail_alpha = texalpha;
		}
		
		list_item_draw(self, { item, xx, yy, wid, hei, false, null_, null_, false });
		instance_destroy(self, { item });
		chevroncolor = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		chevronalpha = lerp(global::a_text_tertiary, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		chevronalpha = lerp(chevronalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		chevronalpha = lerp(chevronalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_image({ ID_spr_icons, icons_CHEVRON_DOWN_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * (IntType(1) - global::microani_arr.Value(e_microani_CUSTOM_LINEAR)) });
		draw_image({ ID_spr_icons, icons_CHEVRON_UP_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * global::microani_arr.Value(e_microani_CUSTOM_LINEAR) });
		draw_box(xx, yy, wid, hei, false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_DISABLED));
		microani_update({ mouseon, mouseon && sBool(mouse_left), (menuactive && !menuhide), disabled, ((menuactive && !menuhide) ? !(flip > 0) : flip) });
		if (menuactive)
		{
			sVar(menu_x) = xx;
			sVar(menu_y) = yy;
		}
		if (mouseon && sBool(mouse_left_released) && menuhide)
		{
			sVar(window_busy) = /*"menu"*/ STR(1055);
			ObjType(obj_menu, menuid)->menu_ani_type = /*"show"*/ STR(735);
			app_mouse_clear(self);
		}
		if (mouseon && sBool(mouse_left_released) && !menuhide)
		{
			VarType m = null_;
			for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
			{
				if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
				{
					m = DsList(sInt(menu_list)).Value(i);
					break;
				}
			}
			if (m == null_)
				m = (new obj_menu)->id;
			sVar(window_busy) = /*"menu"*/ STR(1055);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			ObjType(obj_menu, m)->menu_name = nameid;
			ObjType(obj_menu, m)->menu_type = type;
			ObjType(obj_menu, m)->menu_window = window_get_current();
			ObjType(obj_menu, m)->menu_temp_edit = global::temp_edit;
			ObjType(obj_menu, m)->menu_script = script;
			ObjType(obj_menu, m)->menu_value = value;
			ObjType(obj_menu, m)->menu_ani = IntType(0);
			ObjType(obj_menu, m)->menu_ani_type = /*"show"*/ STR(735);
			ObjType(obj_menu, m)->menu_flip = flip;
			ObjType(obj_menu, m)->menu_x = xx;
			ObjType(obj_menu, m)->menu_x_start = xx;
			ObjType(obj_menu, m)->menu_y = yy;
			ObjType(obj_menu, m)->menu_w = wid;
			ObjType(obj_menu, m)->menu_w_start = wid;
			ObjType(obj_menu, m)->menu_button_h = hei;
			ObjType(obj_menu, m)->menu_item_w = wid;
			ObjType(obj_menu, m)->menu_item_h = ObjType(obj_menu, m)->menu_button_h;
			ObjType(obj_menu, m)->menu_include_tl_edit = (ObjType(obj_menu, m)->menu_name != /*"timelineeditorparent"*/ STR(1056));
			ObjType(obj_menu, m)->menu_margin = IntType(0);
			ObjType(obj_menu, m)->menu_transition = null_;
			ObjType(obj_menu, m)->menu_steps = IntType(0);
			ObjType(obj_menu, m)->menu_floating = false;
			ObjType(obj_menu, m)->content_x = sVar(content_x);
			ObjType(obj_menu, m)->content_width = sVar(content_width);
			sVar(menu_current) = m;
			sInt(menu_model_state) = sInt(menu_model_state_current);
			sInt(menu_block_state) = sInt(menu_block_state_current);
			if (type == e_menu_LIST || type == e_menu_LIST_SEAMLESS)
				ObjType(obj_menu, m)->menu_list = list_init(self, name);
			else
				if (type == e_menu_TIMELINE)
					ObjType(obj_menu, m)->menu_list = menu_timeline_init(self, m);
				else
					if (type == e_menu_BIOME)
						ObjType(obj_menu, m)->menu_list = menu_biome_init(self, m);
			
			
			ObjType(obj_menu, m)->menu_amount = ObjType(obj_menu, m)->menu_list == null_ ? IntType(0) : ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
			if (ObjType(obj_menu, m)->menu_list != null_)
				ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
			withOne (obj_menu, m, self->id)
				menu_focus_selected(self);
			
			if (ObjType(obj_menu, m)->menu_flip > 0)
				ObjType(obj_menu, m)->menu_show_amount = floor((ObjType(obj_menu, m)->menu_y * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			else
				ObjType(obj_menu, m)->menu_show_amount = floor(((sReal(window_height) - (ObjType(obj_menu, m)->menu_y + ObjType(obj_menu, m)->menu_button_h)) * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			
			global::current_microani = animation;
			sInt(menu_popup) = sInt(popup);
			return true;
		}
		global::current_microani = animation;
		return false;
	}
	
	void draw_button_text(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType text, xx, yy, script, value, tip, font;
		IntType wid, hei;
		BoolType mouseon;
		text = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		script = argument[IntType(3)];
		value = argument[IntType(4)];
		tip = /*""*/ STR(0);
		font = sInt(font_value);
		if (argument_count > IntType(5))
			tip = argument[IntType(5)];
		if (argument_count > IntType(6))
			font = argument[IntType(6)];
		draw_set_font((IntType)(font));
		wid = string_width(text);
		hei = string_height(text);
		mouseon = app_mouse_box(self, xx, yy - hei, wid, hei);
		microani_set(text, script, mouseon, mouseon && sBool(mouse_left), false);
		IntType color;
		RealType alpha;
		color = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(global::a_accent, global::a_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		color = merge_color(color, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		alpha = lerp(alpha, global::a_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		draw_label(self, { text, xx, yy, fa_left, fa_bottom, color, alpha });
		RealType grow = IntType(3) - (IntType(3) * (global::microani_arr.Value(e_microani_HOVER) * (IntType(1) - global::microani_arr.Value(e_microani_PRESS))));
		draw_line_ext(xx + grow, yy, xx + wid - (grow * IntType(2)), yy, color, alpha * global::microani_arr.Value(e_microani_HOVER));
		if (mouseon)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (tip != /*""*/ STR(0))
				tip_set(self, tip, xx, yy - hei, wid, hei);
			if (sBool(mouse_left_released) && script != null_)
			{
				script_execute(self, { script, value });
				app_mouse_clear(self);
			}
		}
		microani_update({ mouseon, mouseon && sBool(mouse_left), false });
	}
	
	RealType draw_button_transition(ScopeAny self, VarType xx, VarType yy, VarType transition)
	{
		BoolType mouseon, press, active;
		VarType tipname;
		mouseon = app_mouse_box(self, xx, yy, IntType(36), IntType(36));
		press = mouseon && sBool(mouse_left);
		if (global::tl_edit != null_)
			active = idVar(global::tl_edit, value).Value(e_value_TRANSITION) == transition;
		else
			active = false;
		
		tipname = transition;
		if (tipname != /*"linear"*/ STR(550) && tipname != /*"instant"*/ STR(551) && tipname != /*"bezier"*/ STR(552))
		{
			tipname = string_replace(tipname, /*"easeinout"*/ STR(1057), /*""*/ STR(0));
			tipname = string_replace(tipname, /*"easein"*/ STR(1058), /*""*/ STR(0));
			tipname = string_replace(tipname, /*"easeout"*/ STR(1059), /*""*/ STR(0));
			tipname = /*"ease"*/ STR(1060) + tipname;
		}
		if (transition == /*"bezier"*/ STR(552) && !(sReal(setting_advanced_mode) > 0))
			return IntType(0);
		return draw_button_icon(self, { /*"menu"*/ STR(1055) + transition, xx, yy, IntType(36), IntType(36), active, null_, null_, false, /*"transition"*/ STR(1061) + tipname, DsMap(sVar(transition_texture_map)).Value(transition) });
	}
	
	RealType draw_checkbox(ScopeAny self, StringType name, VarType xx, VarType yy, VarType active, IntType script, StringType tip)
	{
		VarType text;
		RealType w, h;
		BoolType pressed;
		text = text_get({ name });
		draw_set_font(sInt(font_label));
		w = IntType(32) + string_width(text);
		h = sReal(ui_small_height);
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + h < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0));
		mouseclick = mouseon && sBool(mouse_left);
		pressed = false;
		if (mouseon)
		{
			if (sBool(mouse_left) || sBool(mouse_left_released))
				pressed = true;
			sInt(mouse_cursor) = cr_handpoint;
		}
		microani_set(name, script, mouseon, mouseclick, active);
		VarType checkboxx, checkboxy;
		checkboxx = xx;
		checkboxy = yy + (h / 2.0) - IntType(8);
		IntType offcolor, oncolor, color;
		RealType offalpha, onalpha, alpha;
		offcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		offcolor = merge_color(offcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		offalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		offalpha = lerp(offalpha, global::a_accent, global::microani_arr.Value(e_microani_PRESS));
		oncolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		oncolor = merge_color(oncolor, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		onalpha = lerp(global::a_accent, global::a_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		onalpha = lerp(onalpha, global::a_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		color = merge_color(offcolor, oncolor, global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(offalpha, onalpha, global::microani_arr.Value(e_microani_ACTIVE));
		color = merge_color(color, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(alpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_outline(checkboxx, checkboxy, IntType(16), IntType(16), IntType(2) + (IntType(6) * global::microani_arr.Value(e_microani_ACTIVE)), color, alpha, true);
		draw_image({ ID_spr_checkbox_tick, IntType(0), checkboxx + IntType(8), checkboxy + IntType(8), IntType(1), IntType(1), global::c_level_middle, IntType(1) * global::microani_arr.Value(e_microani_ACTIVE) });
		draw_box_hover({ checkboxx, checkboxy, IntType(16), IntType(16), global::microani_arr.Value(e_microani_PRESS) });
		VarType shortlabel = string_limit(text, sVar(dw) - IntType(24));
		draw_label(self, { shortlabel, xx + IntType(24), yy + (h / 2.0), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		microani_update({ mouseon, mouseclick, active });
		if (string_width(shortlabel) < sVar(dw) - IntType(28))
			draw_help_circle(self, tip, xx + IntType(24) + string_width(shortlabel) + IntType(4), yy + (h / 2.0) - IntType(10), false);
		if (pressed && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script, !(active > 0) });
			return true;
		}
		return 0.0;
	}
	
	void draw_circle_ext(RealType xx, RealType yy, RealType rad, BoolType outline, RealType detail, IntType color, RealType alpha)
	{
		IntType oldcolor;
		RealType oldalpha;
		oldcolor = draw_get_color();
		oldalpha = draw_get_alpha();
		draw_set_color(color);
		draw_set_alpha(oldalpha * alpha);
		if (outline)
			draw_primitive_begin(pr_linestrip);
		else
		{
			draw_primitive_begin(pr_trianglefan);
			draw_vertex((IntType)(xx), (IntType)(yy));
		}
		
		for (RealType s = IntType(0); s <= pi_ * IntType(2); s += (pi_ * IntType(2)) / detail)
			draw_vertex((IntType)(xx + cos(s) * rad), (IntType)(yy + sin(s) * rad));
		draw_primitive_end();
		draw_set_color(oldcolor);
		draw_set_alpha(oldalpha);
	}
	
	void draw_divide(VarType xx, VarType yy, VarType w)
	{
		draw_line_ext(xx, yy, xx + w, yy, global::c_border, global::a_border);
	}
	
	void draw_divide_vertical(VarType xx, VarType yy, VarType h)
	{
		draw_line_ext(xx, yy, xx, yy + h, global::c_border, global::a_border);
	}
	
	RealType draw_dragger(ScopeAny self, StringType name, VarType xx, VarType yy, RealType wid, VarType value, RealType mul, RealType minval, VarType maxval, VarType def, RealType snapval, VarType tbx, IntType script, VarType capwidth, BoolType showcaption, BoolType disabled, StringType tip)
	{
		VarType caption, fieldx;
		RealType hei;
		BoolType dragmouseon;
		hei = sReal(ui_small_height);
		if (capwidth == null_ && showcaption)
			capwidth = sVar(dw) - wid;
		else
			if (!showcaption)
				capwidth = IntType(0);
		
		draw_set_font(sInt(font_label));
		if (capwidth > IntType(0))
			caption = string_limit(text_get({ name }), min({ capwidth, sVar(dw) - wid }));
		else
			caption = string_limit(text_get({ name }), sVar(dw) - wid);
		
		if (xx + wid + capwidth < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		if (!disabled)
			context_menu_area(self, { xx, yy, wid + capwidth, hei, /*"contextmenuvalue"*/ STR(1054), value, e_context_type_NUMBER, script, def });
		fieldx = xx + capwidth;
		dragmouseon = app_mouse_box(self, fieldx, yy, wid, hei) && sBool(content_mouseon) && (sVar(window_focus) != string(tbx)) && !disabled;
		if (dragmouseon && sBool(mouse_left_pressed))
			sVar(window_focus) = name + /*"press"*/ STR(1062);
		if (sVar(window_focus) == name + /*"press"*/ STR(1062))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
				if (app_mouse_box(self, fieldx, yy, wid, hei) && !disabled)
				{
					idVar(tbx, text) = string_decimals(value);
					sVar(window_focus) = string(tbx);
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
			else
				if (sReal(mouse_dx) != IntType(0))
				{
					sVar(dragger_drag_value) = value;
					sVar(window_busy) = name + /*"drag"*/ STR(30);
					sVar(window_focus) = /*""*/ STR(0);
				}
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
		{
			sInt(mouse_cursor) = cr_none;
			sVar(dragger_drag_value) += (gmlGlobal::mouse_x - sInt(mouse_click_x)) * mul * sReal(dragger_multiplier);
			window_mouse_set(sInt(mouse_click_x), sInt(mouse_click_y));
			RealType d;
			if (global::_app->setting_unlimited_values > 0)
				d = snap(sVar(dragger_drag_value), snapval) - value;
			else
				d = clamp(snap(sVar(dragger_drag_value), snapval), minval, maxval) - value;
			
			if (d != IntType(0))
			{
				script_execute(self, { script, d, true });
				idVar(tbx, text) = string_decimals(value + d);
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (draw_inputbox(self, { name, fieldx, yy, wid, hei, string(def), tbx, null_, disabled, false, sInt(font_digits), e_inputbox_RIGHT }) && script != null_)
		{
			VarType val = eval(idVar(tbx, text), def);
			script_execute(self, { script, (global::_app->setting_unlimited_values > 0) ? snap(val, snapval) : VarType(clamp(snap(val, snapval), minval, maxval)), false });
		}
		if (value < minval || value > maxval)
			draw_box(fieldx, yy, wid, hei, false, global::c_error, global::a_accent_overlay);
		else
			if ((abs(maxval) + abs(minval)) < IntType(100000))
			{
				RealType perc = percent(value, minval, maxval);
				draw_box(fieldx, yy, wid * perc, hei, false, global::c_accent_hover, global::a_accent_overlay);
			}
		
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		if (dragmouseon)
			sInt(mouse_cursor) = cr_size_we;
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		if (showcaption)
		{
			draw_label(self, { caption, xx, yy + hei / 2.0, fa_left, fa_middle, labelcolor, labelalpha, sInt(font_label) });
			if (xx + string_width(caption) + IntType(28) < fieldx)
				draw_help_circle(self, tip, xx + string_width(caption) + IntType(4), yy + (hei / 2.0) - IntType(10), disabled);
		}
		if (sVar(window_busy) != name + /*"drag"*/ STR(30) && sVar(window_busy) != name + /*"press"*/ STR(1062) && sVar(window_focus) != string(tbx))
			idVar(tbx, text) = string_decimals(value);
		return 0.0;
	}
	
	RealType draw_dragger_sky(ScopeAny self, StringType name, VarType xx, VarType yy, VarType value, RealType def, IntType script, IntType tbx, RealType time)
	{
		RealType wid, hei, capwidth, snapval;
		VarType caption, fieldx;
		BoolType dragmouseon;
		wid = dragger_width;
		hei = sReal(ui_small_height);
		capwidth = sVar(dw) - wid;
		snapval = IntType(1);
		draw_set_font(sInt(font_label));
		caption = string_limit(text_get({ name }), capwidth);
		if (xx + wid + capwidth < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		context_menu_area(self, { xx, yy, wid + capwidth, hei, /*"contextmenuvalue"*/ STR(1054), value, (time > 0) ? e_context_type_TIME : e_context_type_NUMBER, script, def });
		fieldx = xx + capwidth;
		dragmouseon = app_mouse_box(self, fieldx, yy, wid, hei) && sBool(content_mouseon) && (sVar(window_focus) != string(tbx));
		if (dragmouseon && sBool(mouse_left_pressed))
			sVar(window_focus) = name + /*"press"*/ STR(1062);
		if (sVar(window_focus) == name + /*"press"*/ STR(1062))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
				if (app_mouse_box(self, fieldx, yy, wid, hei))
				{
					if (!(time > 0))
						ObjType(obj_textbox, tbx)->text = string_decimals(value);
					sVar(window_focus) = string(tbx);
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
			else
				if (sReal(mouse_dx) != IntType(0))
				{
					sVar(dragger_drag_value) = value;
					sVar(window_busy) = name + /*"drag"*/ STR(30);
					sVar(window_focus) = /*""*/ STR(0);
				}
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
		{
			sInt(mouse_cursor) = cr_none;
			sVar(dragger_drag_value) += (gmlGlobal::mouse_x - sInt(mouse_click_x)) * sReal(dragger_multiplier);
			window_mouse_set(sInt(mouse_click_x), sInt(mouse_click_y));
			RealType d = snap(sVar(dragger_drag_value), snapval) - value;
			if (d != IntType(0))
			{
				script_execute(self, { script, d, true });
				if (time > 0)
					ObjType(obj_textbox, tbx)->text = rotation_get_time(value + d);
				else
					ObjType(obj_textbox, tbx)->text = string_decimals(value + d);
				
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (draw_inputbox(self, { name, fieldx, yy, wid, hei, string(def), tbx, null_, false, false, sInt(font_digits), e_inputbox_RIGHT }) && script != null_)
		{
			if (time > 0)
				script_execute(self, { script, time_get_rotation(ObjType(obj_textbox, tbx)->text), false });
			else
				script_execute(self, { script, clamp(string_get_real(ObjType(obj_textbox, tbx)->text, IntType(0)), -no_limit, no_limit), false });
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		if (dragmouseon)
			sInt(mouse_cursor) = cr_size_we;
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_label(self, { caption, xx, yy + hei / 2.0, fa_left, fa_middle, labelcolor, labelalpha, sInt(font_label) });
		if (sVar(window_busy) != name + /*"drag"*/ STR(30) && sVar(window_busy) != name + /*"press"*/ STR(1062) && sVar(window_focus) != string(tbx))
		{
			if (time > 0)
				ObjType(obj_textbox, tbx)->text = rotation_get_time(value);
			else
				ObjType(obj_textbox, tbx)->text = string_decimals(value);
			
		}
		return 0.0;
	}
	
	RealType draw_dropshadow(ScopeAny self, VarType xx, VarType yy, VarType width, VarType height, IntType color, VarType alpha)
	{
		alpha = alpha * draw_get_alpha() * .75;
		IntType slicesize;
		RealType offset;
		VarType drawx, drawy;
		slicesize = IntType(27);
		offset = IntType(16);
		drawx = xx - offset;
		drawy = yy - offset;
		width -= (IntType(11) * IntType(2));
		height -= (IntType(11) * IntType(2));
		if (width < IntType(0) || height < IntType(0))
			return IntType(0);
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), IntType(0), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize, IntType(0), IntType(1), slicesize, (IntType)(drawx), (IntType)(drawy), width, 1.0, color, alpha);
		drawx += width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), IntType(0), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx = xx - offset;
		drawy += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), slicesize, slicesize, IntType(1), (IntType)(drawx), (IntType)(drawy), 1.0, height, color, alpha);
		drawx += slicesize + width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), slicesize, slicesize, IntType(1), (IntType)(drawx), (IntType)(drawy), 1.0, height, color, alpha);
		drawx = xx - offset;
		drawy += height;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), slicesize + IntType(1), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize, slicesize + IntType(1), IntType(1), slicesize, (IntType)(drawx), (IntType)(drawy), width, 1.0, color, alpha);
		drawx += width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), slicesize + IntType(1), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		return 0.0;
	}
	
	void draw_gradient(VarType xx, VarType yy, VarType w, RealType h, IntType color, RealType alphalefttop, RealType alpharighttop, RealType alpharightbot, RealType alphaleftbot)
	{
		RealType alpha = draw_get_alpha();
		draw_primitive_begin(pr_trianglestrip);
		draw_vertex_color((IntType)(xx), (IntType)(yy), color, alphalefttop * alpha);
		draw_vertex_color((IntType)(xx + w), (IntType)(yy), color, alpharighttop * alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy + h), color, alphaleftbot * alpha);
		draw_vertex_color((IntType)(xx + w), (IntType)(yy + h), color, alpharightbot * alpha);
		draw_primitive_end();
	}
	
	RealType draw_help_circle(ScopeAny self, StringType text, VarType xx, VarType yy, BoolType disabled)
	{
		if (text == /*""*/ STR(0))
			return IntType(0);
		BoolType mouseon;
		IntType color;
		RealType alpha;
		mouseon = app_mouse_box(self, xx, yy, IntType(20), IntType(20)) && sBool(content_mouseon) && !disabled;
		microani_set(text, null_, mouseon, false, false);
		color = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(global::a_text_tertiary, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER)) * lerp(1.0, .5, global::microani_arr.Value(e_microani_DISABLED));
		draw_image({ ID_spr_icons, icons_HELP_CIRCLE, xx + IntType(10), yy + IntType(10), IntType(1), IntType(1), color, alpha });
		if (!disabled)
			tip_set(self, text_get({ text }), xx, yy, IntType(20), IntType(20));
		microani_update({ mouseon, false, false, disabled, IntType(0) });
		return 0.0;
	}
	
	void draw_image(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count < IntType(5))
			draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), 1.0, 1.0, 0.0, c_white, draw_get_alpha());
		else
			if (argument_count < IntType(7))
				draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], 0.0, c_white, draw_get_alpha());
			else
				if (argument_count < IntType(9))
					draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], 0.0, (IntType)(argument[IntType(6)]), argument[IntType(7)] * draw_get_alpha());
				else
					draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], argument[IntType(8)], (IntType)(argument[IntType(6)]), argument[IntType(7)] * draw_get_alpha());
			
		
		
	}
	
	RealType draw_image_box_cover(VarType sprite, RealType xx, RealType yy, VarType w, VarType h)
	{
		RealType sw, sh, scale;
		if (!sprite_exists((IntType)(sprite)))
			return IntType(0);
		sw = sprite_get_width((IntType)(sprite));
		sh = sprite_get_height((IntType)(sprite));
		if (sw / sh < (RealType)w / h)
		{
			scale = (RealType)w / sw;
			yy += (h - scale * sh) / 2.0;
			h = sh * scale;
		}
		else
		{
			scale = (RealType)h / sh;
			xx += (w - scale * sw) / 2.0;
			w = sw * scale;
		}
		
		xx = floor(xx);
		yy = floor(yy);
		w = ceil(w);
		h = ceil(h);
		draw_image({ sprite, IntType(0), xx, yy, scale, scale });
		return 0.0;
	}
	
	RealType draw_inputbox(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType inputname, xx, yy, w, h, placeholder, tbx, script, disabled, err, font, type, alpha;
		IntType capwid;
		RealType padding;
		BoolType focused;
		BoolType update;
		inputname = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		w = argument[IntType(3)];
		h = argument[IntType(4)];
		placeholder = argument[IntType(5)];
		tbx = argument[IntType(6)];
		script = argument[IntType(7)];
		disabled = false;
		err = false;
		font = sInt(font_value);
		type = e_inputbox_LEFT;
		alpha = IntType(1);
		focused = (sVar(window_focus) == string(tbx));
		if (argument_count > IntType(8))
			disabled = argument[IntType(8)];
		if (argument_count > IntType(9))
			err = argument[IntType(9)];
		if (argument_count > IntType(10))
			font = argument[IntType(10)];
		if (argument_count > IntType(11))
			type = argument[IntType(11)];
		if (argument_count > IntType(12))
			alpha = argument[IntType(12)];
		capwid = string_width(text_get({ inputname }));
		padding = (h - IntType(22)) / 2.0;
		if (sBool(textbox_jump))
			ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + h < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == string(tbx) + /*"click"*/ STR(1063)) && !(disabled > 0);
		microani_set(string(tbx) + inputname, script, mouseon || sVar(window_focus) == string(tbx), false, (mouseon && sBool(mouse_left)) || (sVar(window_focus) == string(tbx)));
		VarType bordercolor;
		RealType borderalpha;
		bordercolor = merge_color((IntType)(global::c_border), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		bordercolor = merge_color((IntType)(bordercolor), (IntType)(global::c_accent), max({ global::microani_arr.Value(e_microani_PRESS), global::microani_arr.Value(e_microani_ACTIVE) }));
		bordercolor = merge_color((IntType)(bordercolor), (IntType)(global::c_border), global::microani_arr.Value(e_microani_DISABLED));
		borderalpha = lerp(global::a_border, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		borderalpha = lerp(borderalpha, global::a_accent, max({ global::microani_arr.Value(e_microani_PRESS), global::microani_arr.Value(e_microani_ACTIVE) }));
		borderalpha = lerp(borderalpha, global::a_border, global::microani_arr.Value(e_microani_DISABLED)) * alpha;
		if (err > 0)
		{
			bordercolor = global::c_error;
			borderalpha = IntType(1) * alpha;
		}
		draw_box(xx, yy, w, h, false, global::c_level_top, alpha * draw_get_alpha());
		draw_outline(xx, yy, w, h, IntType(1), bordercolor, borderalpha, true);
		draw_box_hover({ xx, yy, w, h, global::microani_arr.Value(e_microani_PRESS) });
		if (err > 0)
		{
			draw_image({ ID_spr_icons, icons_WARNING_TRIANGLE, xx + w - IntType(14), yy + ((RealType)h / 2.0), IntType(1), IntType(1), global::c_error, IntType(1) });
			w -= 28.0;
		}
		if (string_contains(inputname, /*"search"*/ STR(1064)))
		{
			draw_image({ ID_spr_icons, icons_SEARCH, xx + w - IntType(14), yy + ((RealType)h / 2.0), IntType(1), IntType(1), bordercolor, borderalpha });
			w -= 28.0;
		}
		draw_set_font((IntType)(font));
		RealType tbxh;
		VarType placeholderx, textx, texty;
		IntType textvalign, texthalign;
		tbxh = max({ string_height(/*" "*/ STR(17)), h - IntType(9) });
		if (type == e_inputbox_LEFT || type == e_inputbox_RIGHT)
		{
			textx = xx + IntType(8);
			texty = yy + floor((RealType)h / 2.0) - ceil(tbxh / 2.0);
			texthalign = fa_left;
			textvalign = fa_top;
			placeholderx = textx;
			if (type == e_inputbox_RIGHT)
			{
				placeholderx = xx + w - IntType(8);
				texthalign = fa_right;
			}
		}
		else
		{
			textx = xx + (RealType)w / 2.0;
			texty = yy + IntType(38);
			texthalign = fa_center;
			textvalign = fa_bottom;
			placeholderx = textx;
		}
		
		if (font == sInt(font_digits) && h >= IntType(24))
			texty += IntType(1);
		if (disabled > 0)
		{
			draw_label(self, { string_limit(idVar(tbx, text) + idVar(tbx, suffix), w - padding * IntType(2)), placeholderx, texty, texthalign, textvalign, global::c_text_tertiary, global::a_text_tertiary });
			update = false;
		}
		if (idVar(tbx, text) == /*""*/ STR(0) && placeholder != /*""*/ STR(0))
		{
			IntType suffixwid = string_width(idVar(tbx, suffix));
			draw_label(self, { string_limit(placeholder, (w - suffixwid) - padding * IntType(2)), placeholderx - suffixwid, texty, texthalign, textvalign, global::c_text_tertiary, global::a_text_tertiary });
		}
		if (!(disabled > 0))
		{
			if (type == e_inputbox_BIG)
			{
				VarType textwid = min({ w, string_width(idVar(tbx, text) + idVar(tbx, suffix)) });
				update = textbox_draw(self, tbx, xx + (RealType)w / 2.0 - (RealType)textwid / 2.0, yy + IntType(5), textwid, h - IntType(9));
			}
			else
				update = textbox_draw(self, tbx, textx, texty, w - IntType(16), tbxh, true, type == e_inputbox_RIGHT);
			
		}
		if (mouseon)
			sInt(mouse_cursor) = cr_beam;
		if (sVar(window_focus) == string(tbx))
			context_menu_area(self, { xx, yy, w, h, /*"contextmenutextbox"*/ STR(1065), tbx, e_context_type_NONE, null_, null_ });
		draw_box(xx, yy, w, h, false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_DISABLED));
		if (mouseon && sBool(mouse_left_released) && (sVar(window_focus) != string(tbx)))
		{
			sVar(window_focus) = string(tbx);
			app_mouse_clear(self);
		}
		if (update && (script != null_))
			script_execute(self, { script, idVar(tbx, text) });
		microani_update({ mouseon || sVar(window_focus) == string(tbx), (mouseon && sBool(mouse_left)) && sVar(window_focus) != string(tbx), sVar(window_focus) == string(tbx), disabled });
		return update;
	}
	
	RealType draw_keybind(ScopeAny self, IntType keybindID, VarType xx, VarType yy)
	{
		VarType keyobj, w;
		StringType name;
		BoolType mouseon;
		keyobj = global::keybinds.Value(keybindID);
		name = /*"settingskey"*/ STR(1066) + idVar(keyobj, name);
		w = sVar(dw);
		tab_control(self, IntType(28));
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + sReal(tab_control_h) < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			tab_next(self, false);
			return IntType(0);
		}
		mouseon = app_mouse_box(self, xx, yy, w, sReal(tab_control_h)) && sBool(content_mouseon);
		context_menu_area(self, { xx, yy, w, sReal(tab_control_h), /*"keybind"*/ STR(1067), keybindID, null_, null_, null_ });
		microani_set(name, null_, mouseon || sVar(window_busy) == name, false, false);
		microani_update({ mouseon || sVar(window_busy) == name, false, false });
		VarType textcolor;
		RealType textalpha;
		textcolor = ((idReal(keyobj, match_error) > 0) ? global::c_error : global::c_text_secondary);
		textalpha = ((idReal(keyobj, match_error) > 0) ? 1.0 : global::a_text_secondary);
		draw_label(self, { text_get({ name }) + /*":"*/ STR(770), sVar(dx), sVar(dy) + (sReal(tab_control_h) / 2.0), fa_left, fa_middle, textcolor, textalpha, sInt(font_label) });
		textcolor = ((idReal(keyobj, match_error) > 0) ? global::c_error : global::c_text_main);
		textalpha = ((idReal(keyobj, match_error) > 0) ? 1.0 : global::a_text_main);
		draw_label(self, { text_control_name(sVar(window_busy) == name ? global::keybind_edit : idVar(keyobj, keybind)), sVar(dx) + w - (IntType(32) * global::microani_arr.Value(e_microani_HOVER)), sVar(dy) + (sReal(tab_control_h) / 2.0), fa_right, fa_middle, textcolor, textalpha, sInt(font_value) });
		draw_set_alpha(global::microani_arr.Value(e_microani_HOVER));
		if (draw_button_icon(self, { name + /*"edit"*/ STR(116), sVar(dx) + w - IntType(24), sVar(dy) + IntType(2), IntType(24), IntType(24), sVar(window_busy) == name, icons_PENCIL, null_, false, /*"tooltipeditkeybind"*/ STR(1068) }))
		{
			sVar(window_busy) = name;
			global::keybind_edit = keybind_new(null_);
		}
		draw_set_alpha(1.0);
		if (sVar(window_busy) == name)
		{
			BoolType update = false;
			if (keyboard_check_pressed(vk_anykey) || keyboard_check_released(vk_anykey))
			{
				global::keybind_edit[e_keybind_key_CTRL] = (keyboard_check_direct(vk_lcontrol) || keyboard_check_direct(vk_rcontrol));
				global::keybind_edit[e_keybind_key_SHIFT] = (keyboard_check_direct(vk_lshift) || keyboard_check_direct(vk_rshift));
				global::keybind_edit[e_keybind_key_ALT] = (keyboard_check_direct(vk_lalt) || keyboard_check_direct(vk_ralt));
				if (keyboard_check_pressed(vk_anykey))
				{
					IntType key = gmlGlobal::keyboard_lastkey;
					keyboard_clear(gmlGlobal::keyboard_lastkey);
					if (key != vk_control && key != vk_lcontrol && key != vk_rcontrol && key != vk_shift && key != vk_lshift && key != vk_rshift && key != vk_alt && key != vk_lalt && key != vk_ralt)
					{
						global::keybind_edit[e_keybind_key_CHAR] = key;
						update = true;
					}
				}
			}
			if (sBool(mouse_left_pressed))
			{
				update = true;
				app_mouse_clear(self);
			}
			if (update)
			{
				sVar(window_busy) = /*""*/ STR(0);
				if (!array_equals(VarType::CreateRef(global::keybind_edit), VarType::CreateRef(keybind_new(null_))))
					keybind_set(self, keybindID, global::keybind_edit);
			}
		}
		tab_next(self, false);
		return 0.0;
	}
	
}
