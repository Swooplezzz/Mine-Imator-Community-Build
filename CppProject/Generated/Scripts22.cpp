/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.10.16 22:12:03 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void block_load_timeline(Scope<obj_block> self, VarType map, VarType typemap)
	{
		self->timeline = true;
		if (is_string(DsMap(map).Value(/*"model"*/ STR(543))))
		{
			self->tl_model_name = DsMap(map).Value(/*"model"*/ STR(543));
			self->tl_model_state = ArrType();
			self->tl_model_state_amount = IntType(0);
			self->tl_has_model_state = false;
			if (DsMap(typemap).Value(/*"model_state"*/ STR(882)) == e_json_type_STRING)
			{
				self->tl_model_state = string_get_state_vars(DsMap(map).Value(/*"model_state"*/ STR(882)));
				self->tl_has_model_state = true;
			}
			else
				if (DsMap(typemap).Value(/*"model_state"*/ STR(882)) == e_json_type_OBJECT)
				{
					VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"model_state"*/ STR(882))));
					while (!is_undefined(key))
					{
						withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
						{
							self->vars = string_get_state_vars(key);
							self->value = string_get_state_vars(ds_map_find_value((IntType)(DsMap(map).Value(/*"model_state"*/ STR(882))), key));
							self->state_id = ArrType();
							for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
								if (state_vars_match_state_id(self->vars, self.otherId, i))
									self->state_id = array_add(VarType::CreateRef(self->state_id), i);
							ObjType(obj_block, self.otherId)->tl_model_state[ObjType(obj_block, self.otherId)->tl_model_state_amount++] = self->id;
						}
						
						key = ds_map_find_next((IntType)(DsMap(map).Value(/*"model_state"*/ STR(882))), key);
					}
					
					self->tl_has_model_state = true;
				}
			
		}
		else
		{
			self->tl_model_name = /*""*/ STR(0);
			self->tl_has_model_state = false;
		}
		
		if (is_bool(DsMap(map).Value(/*"model_double"*/ STR(883))))
			self->model_double = DsMap(map).Value(/*"model_double"*/ STR(883));
		self->tl_has_text = false;
		if (is_bool(DsMap(map).Value(/*"has_text"*/ STR(884))))
			self->tl_has_text = DsMap(map).Value(/*"has_text"*/ STR(884));
		if (self->tl_has_text > 0)
			self->tl_text_position = value_get_point3D(DsMap(map).Value(/*"text_position"*/ STR(885)), point3D(IntType(0), IntType(0), IntType(0)));
		self->tl_text_scale = DsMap(map).Value(/*"text_scale"*/ STR(886));
		self->tl_pattern_type = /*""*/ STR(0);
		if (is_string(DsMap(map).Value(/*"pattern_type"*/ STR(887))))
			self->tl_pattern_type = DsMap(map).Value(/*"pattern_type"*/ STR(887));
		self->tl_rot_point = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_rot_point_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"rotation_point"*/ STR(888)) == e_json_type_ARRAY)
			self->tl_rot_point = value_get_point3D(DsMap(map).Value(/*"rotation_point"*/ STR(888)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"rotation_point"*/ STR(888)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(888))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(888))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_rot_point_state[ObjType(obj_block, self.otherId)->tl_rot_point_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"rotation_point"*/ STR(888))), key);
				}
				
			}
		
		self->tl_position = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_position_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"position"*/ STR(40)) == e_json_type_ARRAY)
			self->tl_position = value_get_point3D(DsMap(map).Value(/*"position"*/ STR(40)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"position"*/ STR(40)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"position"*/ STR(40))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"position"*/ STR(40))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_position_state[ObjType(obj_block, self.otherId)->tl_position_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"position"*/ STR(40))), key);
				}
				
			}
		
		self->tl_rotation = point3D(IntType(0), IntType(0), IntType(0));
		self->tl_rotation_state_amount = IntType(0);
		if (DsMap(typemap).Value(/*"rotation"*/ STR(842)) == e_json_type_ARRAY)
			self->tl_rotation = value_get_point3D(DsMap(map).Value(/*"rotation"*/ STR(842)), point3D(IntType(0), IntType(0), IntType(0)));
		else
			if (DsMap(typemap).Value(/*"rotation"*/ STR(842)) == e_json_type_OBJECT)
			{
				VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"rotation"*/ STR(842))));
				while (!is_undefined(key))
				{
					withOne (obj_block_tl_state, (new obj_block_tl_state)->id, self->id)
					{
						self->vars = string_get_state_vars(key);
						self->value = value_get_point3D(ds_map_find_value((IntType)(DsMap(map).Value(/*"rotation"*/ STR(842))), key), point3D(IntType(0), IntType(0), IntType(0)));
						self->state_id = ArrType();
						for (IntType i = IntType(0); i < ObjType(obj_block, self.otherId)->state_id_amount; i++)
							if (state_vars_match_state_id(self->vars, self.otherId, i))
								self->state_id = array_add(VarType::CreateRef(self->state_id), i);
						ObjType(obj_block, self.otherId)->tl_rotation_state[ObjType(obj_block, self.otherId)->tl_rotation_state_amount++] = self->id;
					}
					
					key = ds_map_find_next((IntType)(DsMap(map).Value(/*"rotation"*/ STR(842))), key);
				}
				
			}
		
	}
	
	BoolType block_load_variant_model(ScopeAny self, VarType map, VarType type)
	{
		if (is_undefined(DsMap(map).Value(/*"model"*/ STR(543))))
		{
			log({ /*"Missing parameter \"model\""*/ STR(889) });
			return false;
		}
		StringType blockname;
		VarType blockmodel;
		blockname = string_replace(DsMap(map).Value(/*"model"*/ STR(543)), /*"minecraft:"*/ STR(834), /*""*/ STR(0));
		blockmodel = block_load_model_file(global::load_assets_dir + mc_models_directory + blockname + /*".json"*/ STR(725));
		if (!(blockmodel > 0))
			return false;
		VecType rot = vec3(IntType(0), IntType(0), IntType(0));
		if (!is_undefined(DsMap(map).Value(/*"x"*/ STR(846))))
			rot.Real(X_) = clamp(snap(DsMap(map).Value(/*"x"*/ STR(846)), IntType(90)), IntType(0), IntType(270));
		if (!is_undefined(DsMap(map).Value(/*"y"*/ STR(829))))
			rot.Real(Z_) = clamp(snap(DsMap(map).Value(/*"y"*/ STR(829)), IntType(90)), IntType(0), IntType(270));
		VarType uvlock = false;
		if (is_bool(DsMap(map).Value(/*"uvlock"*/ STR(890))))
			uvlock = DsMap(map).Value(/*"uvlock"*/ STR(890));
		else
			if (is_string(DsMap(map).Value(/*"uvlock"*/ STR(890))))
				uvlock = (DsMap(map).Value(/*"uvlock"*/ STR(890)) == /*"true"*/ STR(773));
		
		VarType weight = IntType(1);
		if (!is_undefined(DsMap(map).Value(/*"weight"*/ STR(891))))
			weight = DsMap(map).Value(/*"weight"*/ STR(891));
		sVar(total_weight) += weight;
		sInt(model_state_obj) = self.otherId;
		sVar(model)[sInt(model_amount)] = block_load_render_model(self, blockmodel, rot, uvlock, false, weight);
		if (type == /*"leaves"*/ STR(892))
			idInt(sVar(model)[sInt(model_amount)], opaque) = block_load_render_model(self, blockmodel, rot, uvlock, true, weight);
		sInt(model_amount)++;
		return true;
	}
	
	void block_render_model_generate(Scope<obj_builder_thread> self, IntType model)
	{
		instance_activate_object(model);
		RealType offx, offy, offz;
		offx = ObjType(obj_block_render_model, model)->offset_x + self->block_pos_x;
		offy = ObjType(obj_block_render_model, model)->offset_y + self->block_pos_y;
		offz = ObjType(obj_block_render_model, model)->offset_z + self->block_pos_z;
		if (self->block_vertex_emissive == null_)
			self->block_vertex_emissive = ObjType(obj_block_render_model, model)->emissive;
		for (IntType e = IntType(0); e < ObjType(obj_block_render_model, model)->element_amount; e++)
		{
			VarType el = ObjType(obj_block_render_model, model)->element.Value(e);
			instance_activate_object(el);
			RealType x1, x2, y1, y2, z1, z2;
			VarType mat;
			x1 = idReal(el, from_x);
			y1 = idReal(el, from_y);
			z1 = idReal(el, from_z);
			x2 = idReal(el, to_x);
			y2 = idReal(el, to_y);
			z2 = idReal(el, to_z);
			if (idBool(el, rotated))
				mat = matrix_multiply(idVar(el, matrix), matrix_build(offx, offy, offz, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
			else
			{
				mat = null_;
				x1 += offx;
				y1 += offy;
				z1 += offz;
				x2 += offx;
				y2 += offy;
				z2 += offz;
			}
			
			if (idVar(el, face_render_xp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_EAST))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_xp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_xp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_xp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_xp)][idInt(el, face_block_vbuffer_xp)];
				
				builder_add_face(self, x2, y2, z2, x2, y1, z2, x2, y1, z1, x2, y2, z1, idReal(el, face_uv_xp_0_x), idReal(el, face_uv_xp_0_y), idReal(el, face_uv_xp_1_x), idReal(el, face_uv_xp_1_y), idReal(el, face_uv_xp_2_x), idReal(el, face_uv_xp_2_y), idReal(el, face_uv_xp_3_x), idReal(el, face_uv_xp_3_y), mat);
			}
			if (idVar(el, face_render_xn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_WEST))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_xn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_xn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_xn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_xn)][idInt(el, face_block_vbuffer_xn)];
				
				builder_add_face(self, x1, y1, z2, x1, y2, z2, x1, y2, z1, x1, y1, z1, idReal(el, face_uv_xn_0_x), idReal(el, face_uv_xn_0_y), idReal(el, face_uv_xn_1_x), idReal(el, face_uv_xn_1_y), idReal(el, face_uv_xn_2_x), idReal(el, face_uv_xn_2_y), idReal(el, face_uv_xn_3_x), idReal(el, face_uv_xn_3_y), mat);
			}
			if (idVar(el, face_render_yp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_SOUTH))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_yp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_yp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_yp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_yp)][idInt(el, face_block_vbuffer_yp)];
				
				builder_add_face(self, x1, y2, z2, x2, y2, z2, x2, y2, z1, x1, y2, z1, idReal(el, face_uv_yp_0_x), idReal(el, face_uv_yp_0_y), idReal(el, face_uv_yp_1_x), idReal(el, face_uv_yp_1_y), idReal(el, face_uv_yp_2_x), idReal(el, face_uv_yp_2_y), idReal(el, face_uv_yp_3_x), idReal(el, face_uv_yp_3_y), mat);
			}
			if (idVar(el, face_render_yn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_NORTH))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_yn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_yn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_yn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_yn)][idInt(el, face_block_vbuffer_yn)];
				
				builder_add_face(self, x2, y1, z2, x1, y1, z2, x1, y1, z1, x2, y1, z1, idReal(el, face_uv_yn_0_x), idReal(el, face_uv_yn_0_y), idReal(el, face_uv_yn_1_x), idReal(el, face_uv_yn_1_y), idReal(el, face_uv_yn_2_x), idReal(el, face_uv_yn_2_y), idReal(el, face_uv_yn_3_x), idReal(el, face_uv_yn_3_y), mat);
			}
			if (idVar(el, face_render_zp) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_UP))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_zp);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_zp) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_zp);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_zp)][idInt(el, face_block_vbuffer_zp)];
				
				builder_add_face(self, x1, y1, z2, x2, y1, z2, x2, y2, z2, x1, y2, z2, idReal(el, face_uv_zp_0_x), idReal(el, face_uv_zp_0_y), idReal(el, face_uv_zp_1_x), idReal(el, face_uv_zp_1_y), idReal(el, face_uv_zp_2_x), idReal(el, face_uv_zp_2_y), idReal(el, face_uv_zp_3_x), idReal(el, face_uv_zp_3_y), mat);
			}
			if (idVar(el, face_render_zn) > 0 && !block_render_model_generate_face_cull(self, model, el, e_dir_DOWN))
			{
				if (self->block_color == null_)
					self->block_vertex_rgb = idVar(el, face_texture_color_zn);
				else
					self->block_vertex_rgb = self->block_color;
				
				if (idVar(el, face_vbuffer_zn) != null_)
					self->block_vbuffer_current = idVar(el, face_vbuffer_zn);
				else
					self->block_vbuffer_current = ObjType(obj_builder, global::mc_builder)->vbuffer[idInt(el, face_depth_zn)][idInt(el, face_block_vbuffer_zn)];
				
				builder_add_face(self, x1, y2, z1, x2, y2, z1, x2, y1, z1, x1, y1, z1, idReal(el, face_uv_zn_0_x), idReal(el, face_uv_zn_0_y), idReal(el, face_uv_zn_1_x), idReal(el, face_uv_zn_1_y), idReal(el, face_uv_zn_2_x), idReal(el, face_uv_zn_2_y), idReal(el, face_uv_zn_3_x), idReal(el, face_uv_zn_3_y), mat);
			}
			self->block_vertex_rgb = c_white;
			instance_deactivate_object(ObjType(obj_block_render_model, model)->element.Value(e));
		}
		instance_deactivate_object(model);
	}
	
	BoolType block_render_model_generate_face_cull(Scope<obj_builder_thread> self, IntType model, VarType el, IntType culldir)
	{
		switch ((IntType)culldir)
		{
			case e_dir_EAST:
			{
				if (!idBool(el, face_edge_xp) || self->block_face_min_depth_xp == null_ || self->block_face_min_depth_xp > ObjType(obj_block_render_model, model)->face_min_depth_xp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_xp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_xp || (self->block_face_min_xp <= idReal(el, from_z) && self->block_face_max_xp >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_WEST:
			{
				if (!idBool(el, face_edge_xn) || self->block_face_min_depth_xn == null_ || self->block_face_min_depth_xn > ObjType(obj_block_render_model, model)->face_min_depth_xn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_xn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_xn || (self->block_face_min_xn <= idReal(el, from_z) && self->block_face_max_xn >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_SOUTH:
			{
				if (!idBool(el, face_edge_yp) || self->block_face_min_depth_yp == null_ || self->block_face_min_depth_yp > ObjType(obj_block_render_model, model)->face_min_depth_yp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_yp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_yp || (self->block_face_min_yp <= idReal(el, from_z) && self->block_face_max_yp >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_NORTH:
			{
				if (!idBool(el, face_edge_yn) || self->block_face_min_depth_yn == null_ || self->block_face_min_depth_yn > ObjType(obj_block_render_model, model)->face_min_depth_yn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_yn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_yn || (self->block_face_min_yn <= idReal(el, from_z) && self->block_face_max_yn >= idReal(el, to_z)))
					return true;
				break;
			}
			
			case e_dir_UP:
			{
				if (!idBool(el, face_edge_zp) || self->block_face_min_depth_zp == null_ || self->block_face_min_depth_zp > ObjType(obj_block_render_model, model)->face_min_depth_zp)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_zp > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_zp || (self->block_face_min_zp <= idReal(el, from_y) && self->block_face_max_zp >= idReal(el, to_y)))
					return true;
				break;
			}
			
			case e_dir_DOWN:
			{
				if (!idBool(el, face_edge_zn) || self->block_face_min_depth_zn == null_ || self->block_face_min_depth_zn > ObjType(obj_block_render_model, model)->face_min_depth_zn)
					return false;
				if (self->block_current != null_ && ObjType(obj_block, self->block_current)->type == /*"leaves"*/ STR(892) && self->block_face_min_depth_zn > e_block_depth_DEPTH0)
					return false;
				if (self->block_face_full_zn || (self->block_face_min_zn <= idReal(el, from_y) && self->block_face_max_zn >= idReal(el, to_y)))
					return true;
				break;
			}
			
		}
		
		return false;
	}
	
	RealType block_set_bars(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"false"*/ STR(774);
		west = /*"false"*/ STR(774);
		south = /*"false"*/ STR(774);
		north = /*"false"*/ STR(774);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(893) || idVar(block, type) == /*"colored_bars"*/ STR(894))) || (sInt(block_face_min_depth_xp) != e_block_depth_DEPTH1 && sBool(block_face_full_xp)))
				east = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(893) || idVar(block, type) == /*"colored_bars"*/ STR(894))) || (sInt(block_face_min_depth_xn) != e_block_depth_DEPTH1 && sBool(block_face_full_xn)))
				west = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(893) || idVar(block, type) == /*"colored_bars"*/ STR(894))) || (sInt(block_face_min_depth_yp) != e_block_depth_DEPTH1 && sBool(block_face_full_yp)))
				south = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if ((block != null_ && (idVar(block, type) == /*"bars"*/ STR(893) || idVar(block, type) == /*"colored_bars"*/ STR(894))) || (sInt(block_face_min_depth_yn) != e_block_depth_DEPTH1 && sBool(block_face_full_yn)))
				north = /*"true"*/ STR(773);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(895), east, /*"west"*/ STR(896), west, /*"south"*/ STR(897), south, /*"north"*/ STR(898), north }));
		return IntType(0);
	}
	
	VarType block_set_bed(Scope<obj_builder_thread> self)
	{
		if (block_get_state_id_value(self->block_current, self->block_state_id_current, /*"part"*/ STR(899)) == /*"head"*/ STR(900))
			return null_;
		return IntType(0);
	}
	
	RealType block_set_big_dripleaf(Scope<obj_builder_thread> self)
	{
		if ((self->builder_scenery && !self->builder_scenery_legacy) || block_get_state_id_value(self->block_current, self->block_state_id_current, /*"type"*/ STR(801)) == /*"big_dripleaf_stem"*/ STR(901))
			return IntType(0);
		if (self->build_pos_z != (self->build_size_z - IntType(1)))
		{
			VarType facing = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"facing"*/ STR(902));
			self->block_state_id_current = block_get_state_id(self->block_current, ArrType::From({ /*"type"*/ STR(801), /*"big_dripleaf_stem"*/ STR(901), /*"facing"*/ STR(902), facing, /*"tilt"*/ STR(903), /*"none"*/ STR(904) }));
		}
		return IntType(0);
	}
	
	RealType block_set_cave_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block == null_ || idVar(block, type) != /*"cave_vines"*/ STR(905))
				global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		}
		else
			global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"type"*/ STR(801)) == /*"cave_vines_plant"*/ STR(906))
			return IntType(0);
		VarType berries = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"berries"*/ STR(907));
		if (sInt(build_pos_z) == IntType(0))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"type"*/ STR(801), /*"cave_vines"*/ STR(905), /*"berries"*/ STR(907), berries }));
		else
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"type"*/ STR(801), /*"cave_vines_plant"*/ STR(906), /*"berries"*/ STR(907), berries }));
		
		return IntType(0);
	}
	
	VarType block_set_chest(ScopeAny self)
	{
		VarType type;
		StringType double_;
		type = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"type"*/ STR(801));
		double_ = /*"false"*/ STR(774);
		switch (StringType(type).id)
		{
			case 908: // single
			{
				break;
			}
			case 194: // right
			{
				double_ = /*"true"*/ STR(773);
				break;
			}
			case 193: // left
			{
				return null_;
			}
			case 909: // legacy
			{
				if (idVar(sInt(block_current), name) == /*"ender_chest"*/ STR(910))
					break;
				IntType connectblock, discardblock;
				connectblock = null_;
				discardblock = null_;
				VarType facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(902));
				switch (StringType(facing).id)
				{
					case 895: // east
					{
						if (!sBool(build_edge_yn))
							connectblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
						if (!sBool(build_edge_yp))
							discardblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
						break;
					}
					
					case 896: // west
					{
						if (!sBool(build_edge_yp))
							connectblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
						if (!sBool(build_edge_yn))
							discardblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
						break;
					}
					
					case 897: // south
					{
						if (!sBool(build_edge_xp))
							connectblock = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						if (!sBool(build_edge_xn))
							discardblock = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						break;
					}
					
					case 898: // north
					{
						if (!sBool(build_edge_xn))
							connectblock = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						if (!sBool(build_edge_xp))
							discardblock = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
						break;
					}
					
				}
				
				if (discardblock == sInt(block_current))
					return null_;
				if (connectblock == sInt(block_current))
					double_ = /*"true"*/ STR(773);
				else
					double_ = /*"false"*/ STR(774);
				
			}
			
		}
		
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"double"*/ STR(911), double_);
		return IntType(0);
	}
	
	RealType block_set_chorus_plant(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_total) == IntType(1))
			return IntType(0);
		StringType east, west, south, north, up, down;
		east = /*"false"*/ STR(774);
		west = /*"false"*/ STR(774);
		south = /*"false"*/ STR(774);
		north = /*"false"*/ STR(774);
		up = /*"false"*/ STR(774);
		down = /*"false"*/ STR(774);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912)))
				east = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912)))
				west = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912)))
				south = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912)))
				north = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912)))
				up = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block != null_ && (block == sInt(block_current) || idVar(block, type) == /*"chorus_plant_connect"*/ STR(912) || idVar(block, name) == /*"end_stone"*/ STR(913)))
				down = /*"true"*/ STR(773);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(895), east, /*"west"*/ STR(896), west, /*"south"*/ STR(897), south, /*"north"*/ STR(898), north, /*"up"*/ STR(914), up, /*"down"*/ STR(915), down }));
		return IntType(0);
	}
	
	RealType block_set_colored_bars(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		VarType color = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"color"*/ STR(916));
		block_set_bars(self);
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"color"*/ STR(916), color);
		return IntType(0);
	}
	
	VarType block_set_door(ScopeAny self)
	{
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(917)) == /*"upper"*/ STR(918))
			return null_;
		VarType hinge = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"hinge"*/ STR(919));
		if (!sBool(build_edge_zp))
		{
			IntType aboveblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (aboveblock == sInt(block_current))
			{
				IntType abovestateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				hinge = block_get_state_id_value(sInt(block_current), abovestateid, /*"hinge"*/ STR(919));
				sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"hinge"*/ STR(919), hinge);
			}
		}
		VarType facing, open, dir;
		StringType location;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(902));
		open = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"open"*/ STR(920));
		if (facing == /*"east"*/ STR(895))
		{
			location = (hinge == /*"right"*/ STR(194) ? /*"south_west"*/ STR(921) : /*"north_west"*/ STR(922));
			if (open == /*"false"*/ STR(774))
				dir = (hinge == /*"right"*/ STR(194) ? /*"north"*/ STR(898) : /*"south"*/ STR(897));
		}
		else
			if (facing == /*"west"*/ STR(896))
			{
				location = (hinge == /*"right"*/ STR(194) ? /*"north_east"*/ STR(923) : /*"south_east"*/ STR(924));
				if (open == /*"false"*/ STR(774))
					dir = (hinge == /*"right"*/ STR(194) ? /*"south"*/ STR(897) : /*"north"*/ STR(898));
			}
			else
				if (facing == /*"south"*/ STR(897))
				{
					location = (hinge == /*"right"*/ STR(194) ? /*"north_west"*/ STR(922) : /*"north_east"*/ STR(923));
					if (open == /*"false"*/ STR(774))
						dir = (hinge == /*"right"*/ STR(194) ? /*"east"*/ STR(895) : /*"west"*/ STR(896));
				}
				else
					if (facing == /*"north"*/ STR(898))
					{
						location = (hinge == /*"right"*/ STR(194) ? /*"south_east"*/ STR(924) : /*"south_west"*/ STR(921));
						if (open == /*"false"*/ STR(774))
							dir = (hinge == /*"right"*/ STR(194) ? /*"west"*/ STR(896) : /*"east"*/ STR(895));
					}
			
		
		
		if (open == /*"true"*/ STR(773))
			dir = facing;
		VarType bottommodel = idVar(sInt(block_current), state_id_model_obj).Value(sReal(block_state_id_current));
		VarType topmodel = idVar(sInt(block_current), state_id_model_obj).Value(block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(917), /*"upper"*/ STR(918)));
		if (is_undefined(bottommodel) || is_undefined(topmodel))
			return null_;
		ArrType models = ArrType::From({ ObjType(obj_block_load_variant, bottommodel)->model.Value(IntType(0)), ObjType(obj_block_load_variant, topmodel)->model.Value(IntType(0)) });
		ObjType(obj_block_render_model, models[IntType(1)])->offset_z = block_size_;
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"location"*/ STR(925), location);
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"direction"*/ STR(926), dir);
		return ArrType::From({ ObjType(obj_block_render_model, models.Value(IntType(0)))->rendermodel_id, ObjType(obj_block_render_model, models.Value(IntType(1)))->rendermodel_id });
	}
	
	VarType block_set_double_plant(Scope<obj_builder_thread> self)
	{
		if (block_get_state_id_value(self->block_current, self->block_state_id_current, /*"half"*/ STR(917)) == /*"upper"*/ STR(918))
			return null_;
		ArrType models = ArrType::From({ ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(sReal(block_state_id_current)))->model.Value(IntType(0)), ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(917), /*"upper"*/ STR(918))))->model.Value(IntType(0)) });
		ObjType(obj_block_render_model, models[IntType(1)])->offset_z = block_size_;
		return ArrType::From({ ObjType(obj_block_render_model, models.Value(IntType(0)))->rendermodel_id, ObjType(obj_block_render_model, models.Value(IntType(1)))->rendermodel_id });
	}
	
	RealType block_set_dripstone(Scope<obj_builder_thread> self)
	{
		if (self->builder_scenery && !self->builder_scenery_legacy)
			return IntType(0);
		VarType thicknessprev, dir, thickness;
		RealType size, sizeoffset;
		thicknessprev = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"thickness"*/ STR(927));
		if (thicknessprev == /*"base"*/ STR(928))
			return IntType(0);
		dir = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"vertical_direction"*/ STR(929));
		size = (dir == /*"up"*/ STR(914) ? (self->build_size_z - IntType(1)) - self->build_pos_z : self->build_pos_z);
		sizeoffset = size;
		if (thicknessprev == /*"frustum"*/ STR(930))
			sizeoffset += IntType(1);
		else
			if (thicknessprev == /*"middle"*/ STR(931))
				sizeoffset += IntType(2);
			else
				if (thicknessprev == /*"base"*/ STR(928))
					sizeoffset += IntType(3);
		
		
		if (sizeoffset == IntType(0))
			thickness = thicknessprev;
		else
			if (sizeoffset == IntType(1))
				thickness = /*"frustum"*/ STR(930);
			else
				if (size >= (self->build_size_z - IntType(1)))
					thickness = /*"base"*/ STR(928);
				else
					thickness = /*"middle"*/ STR(931);
			
		
		
		self->block_state_id_current = block_get_state_id(self->block_current, ArrType::From({ /*"vertical_direction"*/ STR(929), dir, /*"thickness"*/ STR(927), thickness }));
		return IntType(0);
	}
	
	RealType block_set_fence(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		VarType variant;
		east = /*"false"*/ STR(774);
		west = /*"false"*/ STR(774);
		south = /*"false"*/ STR(774);
		north = /*"false"*/ STR(774);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(811));
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
					east = /*"true"*/ STR(773);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(932))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing != /*"east"*/ STR(895) && facing != /*"west"*/ STR(896))
							east = /*"true"*/ STR(773);
					}
				
			}
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
					west = /*"true"*/ STR(773);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(932))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing != /*"east"*/ STR(895) && facing != /*"west"*/ STR(896))
							west = /*"true"*/ STR(773);
					}
				
			}
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
					south = /*"true"*/ STR(773);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(932))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing != /*"south"*/ STR(897) && facing != /*"north"*/ STR(898))
							south = /*"true"*/ STR(773);
					}
				
			}
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
					north = /*"true"*/ STR(773);
				else
					if (idVar(block, type) == /*"fence_gate"*/ STR(932))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing != /*"south"*/ STR(897) && facing != /*"north"*/ STR(898))
							north = /*"true"*/ STR(773);
					}
				
			}
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(811), variant, /*"east"*/ STR(895), east, /*"west"*/ STR(896), west, /*"south"*/ STR(897), south, /*"north"*/ STR(898), north }));
		return IntType(0);
	}
	
	RealType block_set_fence_gate(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		IntType block;
		VarType facing;
		StringType inwall;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(902));
		inwall = /*"false"*/ STR(774);
		if (facing == /*"east"*/ STR(895) || facing == /*"west"*/ STR(896))
		{
			if (!sBool(build_edge_yp))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block != null_ && idVar(block, type) == /*"wall"*/ STR(933))
					inwall = /*"true"*/ STR(773);
			}
			if (inwall == /*"false"*/ STR(774) && !sBool(build_edge_yn))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block != null_ && idVar(block, type) == /*"wall"*/ STR(933))
					inwall = /*"true"*/ STR(773);
			}
		}
		else
			if (facing == /*"south"*/ STR(897) || facing == /*"north"*/ STR(898))
			{
				if (!sBool(build_edge_xp))
				{
					block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					if (block != null_ && idVar(block, type) == /*"wall"*/ STR(933))
						inwall = /*"true"*/ STR(773);
				}
				if (inwall == /*"false"*/ STR(774) && !sBool(build_edge_xn))
				{
					block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					if (block != null_ && idVar(block, type) == /*"wall"*/ STR(933))
						inwall = /*"true"*/ STR(773);
				}
			}
		
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"in_wall"*/ STR(934), inwall);
		return IntType(0);
	}
	
	RealType block_set_fence_nether(ScopeAny self)
	{
		return block_set_fence(self);
	}
	
	RealType block_set_fire(ScopeAny self)
	{
		if (!sBool(builder_scenery_legacy))
			return IntType(0);
		StringType east, west, south, north, up;
		VarType variant;
		east = /*"false"*/ STR(774);
		west = /*"false"*/ STR(774);
		south = /*"false"*/ STR(774);
		north = /*"false"*/ STR(774);
		up = /*"false"*/ STR(774);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(811));
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				east = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				west = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				south = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && block != sInt(block_current))
				north = /*"true"*/ STR(773);
		}
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && block != sInt(block_current))
				up = /*"true"*/ STR(773);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(811), variant, /*"east"*/ STR(895), east, /*"west"*/ STR(896), west, /*"south"*/ STR(897), south, /*"north"*/ STR(898), north, /*"up"*/ STR(914), up }));
		return IntType(0);
	}
	
	RealType block_set_kelp(ScopeAny self)
	{
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block == null_ || idVar(block, type) != /*"kelp"*/ STR(935))
				global::vertex_wave_zmin = sInt(block_pos_z);
		}
		else
			global::vertex_wave_zmin = sInt(block_pos_z);
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(811)) == /*"kelp_plant"*/ STR(936))
			return IntType(0);
		if (sInt(build_pos_z) != (sInt(build_size_z) - IntType(1)))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(811), /*"kelp_plant"*/ STR(936) }));
		return IntType(0);
	}
	
	IntType block_set_leaves(Scope<obj_builder_thread> self)
	{
		VarType model = ObjType(obj_block_load_variant, ObjType(obj_block, self->block_current)->state_id_model_obj.Value(sReal(block_state_id_current)))->model.Value(IntType(0));
		if (global::_app->project_render_opaque_leaves > 0)
			return ObjType(obj_block_render_model, ObjType(obj_block_render_model, model)->opaque)->rendermodel_id;
		else
			return ObjType(obj_block_render_model, model)->rendermodel_id;
		
		return IntType(0);
	}
	
	RealType block_set_redstone_repeater(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"locked"*/ STR(937)) == /*"true"*/ STR(773))
			return IntType(0);
		VarType facing;
		StringType locked;
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(902));
		locked = /*"false"*/ STR(774);
		if (!sBool(build_edge_xp) && (facing == /*"south"*/ STR(897) || facing == /*"north"*/ STR(898)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(938))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(902)) == /*"east"*/ STR(895))
					locked = /*"true"*/ STR(773);
			}
		}
		if (locked == /*"false"*/ STR(774) && !sBool(build_edge_xn) && (facing == /*"south"*/ STR(897) || facing == /*"north"*/ STR(898)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(938))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(902)) == /*"west"*/ STR(896))
					locked = /*"true"*/ STR(773);
			}
		}
		if (locked == /*"false"*/ STR(774) && !sBool(build_edge_yp) && (facing == /*"east"*/ STR(895) || facing == /*"west"*/ STR(896)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(938))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(902)) == /*"south"*/ STR(897))
					locked = /*"true"*/ STR(773);
			}
		}
		if (locked == /*"false"*/ STR(774) && !sBool(build_edge_yn) && (facing == /*"east"*/ STR(895) || facing == /*"west"*/ STR(896)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, name) == /*"powered_repeater"*/ STR(938))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"facing"*/ STR(902)) == /*"north"*/ STR(898))
					locked = /*"true"*/ STR(773);
			}
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"locked"*/ STR(937), locked);
		return IntType(0);
	}
	
	RealType block_set_redstone_wire(ScopeAny self)
	{
		VarType pow;
		RealType powreal, red;
		pow = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"power"*/ STR(939));
		powreal = (RealType)string_get_real(pow) / 15.0;
		if (powreal == IntType(0))
			red = 0.3;
		else
			red = 0.6 * powreal + 0.4;
		
		sInt(block_color) = make_color_rgb((IntType)(red * IntType(255)), IntType(0), IntType(0));
		sVar(block_vertex_emissive) = powreal;
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_total) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"none"*/ STR(904);
		west = /*"none"*/ STR(904);
		south = /*"none"*/ STR(904);
		north = /*"none"*/ STR(904);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(940))
					east = /*"side"*/ STR(941);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(942) || idVar(block, type) == /*"redstone_comparator"*/ STR(943))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing == /*"east"*/ STR(895) || facing == /*"west"*/ STR(896))
							east = /*"side"*/ STR(941);
					}
				
			}
			if (east == /*"none"*/ STR(904) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					east = /*"up"*/ STR(914);
			}
			if (east == /*"none"*/ STR(904) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					east = /*"side"*/ STR(941);
			}
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(940))
					west = /*"side"*/ STR(941);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(942) || idVar(block, type) == /*"redstone_comparator"*/ STR(943))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing == /*"east"*/ STR(895) || facing == /*"west"*/ STR(896))
							west = /*"side"*/ STR(941);
					}
				
			}
			if (west == /*"none"*/ STR(904) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					west = /*"up"*/ STR(914);
			}
			if (west == /*"none"*/ STR(904) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					west = /*"side"*/ STR(941);
			}
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(940))
					south = /*"side"*/ STR(941);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(942) || idVar(block, type) == /*"redstone_comparator"*/ STR(943))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing == /*"south"*/ STR(897) || facing == /*"north"*/ STR(898))
							south = /*"side"*/ STR(941);
					}
				
			}
			if (south == /*"none"*/ STR(904) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					south = /*"up"*/ STR(914);
			}
			if (south == /*"none"*/ STR(904) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					south = /*"side"*/ STR(941);
			}
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(940))
					north = /*"side"*/ STR(941);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(942) || idVar(block, type) == /*"redstone_comparator"*/ STR(943))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(902));
						if (facing == /*"south"*/ STR(897) || facing == /*"north"*/ STR(898))
							north = /*"side"*/ STR(941);
					}
				
			}
			if (north == /*"none"*/ STR(904) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					north = /*"up"*/ STR(914);
			}
			if (north == /*"none"*/ STR(904) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					north = /*"side"*/ STR(941);
			}
		}
		if (east == /*"none"*/ STR(904) && west == /*"none"*/ STR(904) && south == /*"none"*/ STR(904) && north == /*"none"*/ STR(904))
		{
			east = /*"side"*/ STR(941);
			west = /*"side"*/ STR(941);
			south = /*"side"*/ STR(941);
			north = /*"side"*/ STR(941);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(895), east, /*"west"*/ STR(896), west, /*"south"*/ STR(897), south, /*"north"*/ STR(898), north, /*"power"*/ STR(939), pow }));
		return IntType(0);
	}
	
}
