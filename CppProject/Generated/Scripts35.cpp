/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.25 01:36:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	IntType list_init_context_menu(ScopeAny self, VarType name)
	{
		list_init_start();
		if (sStr(context_menu_value_name) != /*""*/ STR(0))
		{
			switch (StringType(sStr(context_menu_value_name)).id)
			{
				case 1543: // pathoffset
				{
					list_item_add(text_get({ /*"contextmenupathsetlength"*/ STR(1544) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_frame_path_offset_set_length);
					break;
				}
				
			}
			
		}
		switch (StringType(name).id)
		{
			case 1100: // contextmenuvalue
			case 1545: // contextmenucategory
			{
				if (sInt(context_menu_group) == e_context_group_SCALE && sReal(setting_advanced_mode) > 0)
				{
					StringType text = ((ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0) ? /*"contextmenuscaleseparate"*/ STR(1546) : /*"contextmenuscalecombine"*/ STR(1547));
					list_item_add(text_get({ text }), null_, /*""*/ STR(0), null_, icons_SCALE, null_, ID_action_group_combine_scale, true);
				}
				if (name == /*"contextmenuvalue"*/ STR(1100))
				{
					list_item_add(text_get({ /*"contextmenuvaluecut"*/ STR(1548) }), null_, /*""*/ STR(0), null_, icons_CUT, null_, ID_action_value_cut, true);
					list_item_add(text_get({ /*"contextmenuvaluecopy"*/ STR(1549) }), null_, /*""*/ STR(0), null_, icons_COPY, null_, ID_action_value_copy, false);
					VarType caption = /*""*/ STR(0);
					if (sVar(context_menu_copy_type) == e_context_type_NUMBER)
						caption = string(sVar(context_menu_copy));
					else
						if (sVar(context_menu_copy_type) == e_context_type_COLOR)
							caption = color_to_hex(sVar(context_menu_copy));
						else
							if (sVar(context_menu_copy_type) == e_context_type_STRING)
								caption = sVar(context_menu_copy);
							else
								if (sVar(context_menu_copy_type) == e_context_type_TIME)
									caption = rotation_get_time(sVar(context_menu_copy));
						
					
					
					list_item_add(text_get({ /*"contextmenuvaluepaste"*/ STR(1550) }), null_, caption, null_, icons_PASTE, null_, ID_action_value_paste, false);
					ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value_type) == e_context_type_NONE || (sVar(context_menu_copy_type) != sVar(context_menu_value_type)));
					list_item_add(text_get({ /*"contextmenuvaluereset"*/ STR(1551) }), null_, /*""*/ STR(0), null_, icons_RESET, null_, ID_action_value_reset, false);
				}
				if (sInt(context_menu_group) != null_)
				{
					list_item_add(text_get({ /*"contextmenugroupcopy"*/ STR(1552) }), null_, /*""*/ STR(0), null_, icons_COPY_ALL, null_, ID_action_group_copy, true);
					list_item_add(text_get({ /*"contextmenugrouppaste"*/ STR(1553) }), null_, /*""*/ STR(0), null_, icons_PASTE_ALL, null_, ID_action_group_paste, false);
					ObjType(obj_list_item, global::list_item_last)->disabled = (DsList(sInt(context_group_copy_list)).Value(sInt(context_menu_group)) == null_);
					list_item_add(text_get({ /*"contextmenugroupreset"*/ STR(1554) }), null_, /*""*/ STR(0), null_, icons_RESET_ALL, null_, ID_action_group_reset, false);
					if (sInt(context_menu_group) == e_context_group_POSITION)
						list_item_add(text_get({ /*"contextmenugroupcopyglobalposition"*/ STR(1555) }), null_, /*""*/ STR(0), null_, icons_COPY_ALL, null_, ID_action_group_copy_global, true);
				}
				if (sVar(context_menu_value_type) == e_context_type_COLOR)
				{
					list_item_add(text_get({ /*"contextmenusetcolor"*/ STR(1556) }), null_, /*""*/ STR(0), null_, icons_PALETTE, icons_CHEVRON_RIGHT_TINY, null_, true);
					ObjType(obj_list_item, global::list_item_last)->context_menu_script = ID_menu_swatches_draw;
					ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"contextmenuswatchset"*/ STR(1557);
					ObjType(obj_list_item, global::list_item_last)->context_menu_width = IntType(204);
					ObjType(obj_list_item, global::list_item_last)->context_menu_height = IntType(0);
					list_item_add(text_get({ /*"contextmenumixcolor"*/ STR(1558) }), null_, /*""*/ STR(0), null_, icons_PLUS, icons_CHEVRON_RIGHT_TINY);
					ObjType(obj_list_item, global::list_item_last)->context_menu_script = ID_menu_swatches_draw;
					ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"contextmenuswatchmix"*/ STR(1559);
					ObjType(obj_list_item, global::list_item_last)->context_menu_width = IntType(204);
					ObjType(obj_list_item, global::list_item_last)->context_menu_height = IntType(0);
				}
				break;
			}
			
			case 1107: // contextmenutextbox
			{
				list_item_add(text_get({ /*"contextmenutextboxcut"*/ STR(1560) }), null_, text_control_name(keybind_new(/*"X"*/ STR(282), true)), null_, icons_CUT, null_, ID_action_textbox_cut, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(textbox_select_startpos) == sVar(textbox_select_endpos));
				list_item_add(text_get({ /*"contextmenutextboxcopy"*/ STR(1561) }), null_, text_control_name(keybind_new(/*"C"*/ STR(280), true)), null_, icons_COPY, null_, ID_action_textbox_copy, false);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(textbox_select_startpos) == sVar(textbox_select_endpos));
				list_item_add(text_get({ /*"contextmenutextboxpaste"*/ STR(1562) }), null_, text_control_name(keybind_new(/*"V"*/ STR(284), true)), null_, icons_PASTE, null_, ID_action_textbox_paste, false);
				ObjType(obj_list_item, global::list_item_last)->disabled = (clipboard_get_text() == /*""*/ STR(0) || !clipboard_has_text());
				list_item_add(text_get({ /*"contextmenutextboxselectall"*/ STR(1563) }), null_, text_control_name(keybind_new(/*"A"*/ STR(271), true)), null_, icons_SELECT_ALL, null_, ID_action_textbox_select_all, false);
				break;
			}
			
			case 1564: // timelinelist
			{
				list_item_add(text_get({ /*"contextmenutladdfolder"*/ STR(1565) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CREATE_FOLDER))->keybind), null_, icons_FOLDER, null_, ID_action_tl_folder, true);
				list_item_add(text_get({ /*"contextmenutlselectkeyframes"*/ STR(1566) }), sVar(context_menu_value), /*""*/ STR(0), null_, icons_KEYFRAME, null_, ID_action_tl_select_keyframes);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				if (sReal(setting_advanced_mode) > 0)
				{
					list_item_add(text_get({ /*"contextmenutlcolortag"*/ STR(1567) }), null_, /*""*/ STR(0), null_, icons_TAG, icons_CHEVRON_RIGHT_TINY, null_);
					ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"colortag"*/ STR(1568);
					ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				}
				list_item_add(text_get({ /*"contextmenutlexpandchildren"*/ STR(1569) }), null_, /*""*/ STR(0), null_, icons_MAXIMIZE, null_, ID_action_tl_extend_children);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				list_item_add(text_get({ /*"contextmenutlcollapsechildren"*/ STR(1570) }), null_, /*""*/ STR(0), null_, icons_MINIMIZE, null_, ID_action_tl_collapse_children);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				list_item_add(text_get({ /*"contextmenutlduplicate"*/ STR(1571) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DUPLICATE))->keybind), null_, icons_DUPLICATE, null_, ID_action_tl_duplicate, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				list_item_add(text_get({ /*"contextmenutldelete"*/ STR(1572) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DELETE))->keybind), null_, icons_DELETE, null_, ID_action_tl_remove);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(context_menu_value) == null_ && global::tl_edit == null_);
				list_item_add(text_get({ /*"contextmenutlexport"*/ STR(1573) }), null_, /*""*/ STR(0), null_, icons_ASSET_EXPORT, null_, ID_object_save);
				if (sVar(context_menu_value) == null_)
					ObjType(obj_list_item, global::list_item_last)->disabled = true;
				else
				{
					if (!(idReal(sVar(context_menu_value), selected) > 0))
					{
						if (idVar(sVar(context_menu_value), part_of) != null_)
							ObjType(obj_list_item, global::list_item_last)->disabled = true;
					}
					else
						ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings);
					
				}
				
				list_item_add(text_get({ /*"contextmenutlselectall"*/ STR(1574) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SELECT))->keybind), null_, icons_SELECT_ALL, null_, ID_action_tl_select_all, true);
				list_item_add(text_get({ /*"contextmenutlexpandall"*/ STR(1575) }), null_, /*""*/ STR(0), null_, icons_MAXIMIZE, null_, ID_action_tl_extend_all);
				list_item_add(text_get({ /*"contextmenutlcollapseall"*/ STR(1576) }), null_, /*""*/ STR(0), null_, icons_MINIMIZE, null_, ID_action_tl_collapse_all);
				break;
			}
			
			case 125: // timeline
			{
				list_item_add(text_get({ /*"contextmenutlkeyframestransition"*/ STR(1577) }), null_, /*""*/ STR(0), null_, icons_EASE_IN_OUT, icons_CHEVRON_RIGHT_TINY, null_, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings_keyframes);
				ObjType(obj_list_item, global::list_item_last)->context_menu_script = ID_menu_transitions;
				ObjType(obj_list_item, global::list_item_last)->context_menu_width = IntType(244);
				ObjType(obj_list_item, global::list_item_last)->context_menu_height = IntType(438);
				ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"timelinelkeyframetransitions"*/ STR(1578);
				list_item_add(text_get({ /*"contextmenutlkeyframescut"*/ STR(1579) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_CUT))->keybind), null_, icons_CUT_KEYFRAME, null_, ID_action_tl_keyframes_cut, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings_keyframes);
				list_item_add(text_get({ /*"contextmenutlkeyframescopy"*/ STR(1580) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_COPY))->keybind), null_, icons_COPY_KEYFRAME, null_, ID_tl_keyframes_copy);
				ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings_keyframes);
				list_item_add(text_get({ /*"contextmenutlkeyframespaste"*/ STR(1581) }), sVar(timeline_insert_pos), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_PASTE))->keybind), null_, icons_PASTE_KEYFRAME, null_, ID_action_tl_keyframes_paste);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sInt(copy_kf_amount) == IntType(0));
				list_item_add(text_get({ /*"contextmenutlkeyframesdelete"*/ STR(1582) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_DELETE))->keybind), null_, icons_DELETE_KEYFRAME, null_, ID_action_tl_keyframes_remove);
				ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings_keyframes);
				list_item_add(text_get({ /*"contextmenutlkeyframesexport"*/ STR(1583) }), null_, /*""*/ STR(0), null_, icons_SAVE_KEYFRAME, null_, ID_keyframes_save);
				ObjType(obj_list_item, global::list_item_last)->disabled = !sBool(timeline_settings_keyframes_export);
				list_item_add(text_get({ /*"contextmenutlkeyframesselect"*/ STR(1584) }), null_, /*""*/ STR(0), null_, icons_SELECT_ALL_KEYFRAME, icons_CHEVRON_RIGHT_TINY, null_);
				ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"timelinelkeyframesselect"*/ STR(1585);
				list_item_add(text_get({ /*"contextmenutlkeyframeswalk"*/ STR(1586) }), sStr(timeline_settings_walk_fn), /*""*/ STR(0), null_, icons_WALK_CYCLE, null_, ID_action_tl_load_loop, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = !file_exists_lib(sStr(timeline_settings_walk_fn));
				list_item_add(text_get({ /*"contextmenutlkeyframesrun"*/ STR(1587) }), sStr(timeline_settings_run_fn), /*""*/ STR(0), null_, icons_RUN_CYCLE, null_, ID_action_tl_load_loop);
				ObjType(obj_list_item, global::list_item_last)->disabled = !file_exists_lib(sStr(timeline_settings_run_fn));
				list_item_add(text_get({ /*"contextmenutlmarkeradd"*/ STR(1588) }), null_, /*""*/ STR(0), null_, icons_MARKER_ADD, null_, ID_action_tl_marker_new, true);
				if (sBool(setting_timeline_show_markers))
				{
					for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
					{
						if (idVar(DsList(sInt(timeline_marker_list)).Value(i), pos) == round(global::_app->timeline_marker))
						{
							ObjType(obj_list_item, global::list_item_last)->disabled = true;
							break;
						}
					}
				}
				else
					ObjType(obj_list_item, global::list_item_last)->disabled = true;
				
				break;
			}
			
			case 1585: // timelinelkeyframesselect
			{
				list_item_add(text_get({ /*"contextmenutlkeyframesselectbefore"*/ STR(1589) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_select_keyframes_before_marker);
				list_item_add(text_get({ /*"contextmenutlkeyframesselectafter"*/ STR(1590) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_select_keyframes_after_marker);
				list_item_add(text_get({ /*"contextmenutlkeyframesselectfirst"*/ STR(1591) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_select_keyframes_first);
				list_item_add(text_get({ /*"contextmenutlkeyframesselectlast"*/ STR(1592) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_select_keyframes_last);
				list_item_add(text_get({ /*"contextmenutlkeyframesselectregion"*/ STR(1593) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_tl_select_keyframes_region);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sVar(timeline_region_start) == null_);
				break;
			}
			
			case 1594: // timelinemarker
			{
				list_item_add(text_get({ /*"contextmenutlmarkeredit"*/ STR(1595) }), sVar(context_menu_value), /*""*/ STR(0), null_, icons_PENCIL, null_, ID_action_tl_marker_editor, true);
				list_item_add(text_get({ /*"contextmenutlmarkerdelete"*/ STR(1596) }), null_, /*""*/ STR(0), null_, icons_DELETE, null_, ID_action_tl_marker_delete);
				break;
			}
			
			case 1568: // colortag
			{
				list_item_add(text_get({ /*"contextmenucolornone"*/ STR(1597) }), null_, /*""*/ STR(0), null_, icons_CLOSE, null_, ID_action_tl_color_tag_remove, true);
				for (IntType i = IntType(0); i <= IntType(8); i++)
				{
					list_item_add(text_get({ /*"contextmenucolor"*/ STR(1598) + string(i) }), i, /*""*/ STR(0), ID_spr_16, null_, null_, ID_action_tl_color_tag);
					ObjType(obj_list_item, global::list_item_last)->thumbnail_blend = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(i);
				}
				break;
			}
			
			case 1599: // toolbarfile
			{
				list_item_add(text_get({ /*"toolbarfilenew"*/ STR(1600) }), VarType(), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_NEW))->keybind), null_, icons_FILE, null_, ID_action_toolbar_new);
				list_item_add(text_get({ /*"toolbarfileopen"*/ STR(1601) }), VarType(), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_OPEN))->keybind), null_, icons_FOLDER, null_, ID_action_toolbar_open);
				list_item_add(text_get({ /*"toolbarfilerecent"*/ STR(1602) }), VarType(), /*""*/ STR(0), null_, icons_FOLDER_RECENTS, icons_CHEVRON_RIGHT_TINY, null_);
				ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"toolbarfilerecent"*/ STR(1602);
				list_item_add(text_get({ /*"toolbarfilelastbackup"*/ STR(1603) }), VarType(), /*""*/ STR(0), null_, icons_RECENTS, null_, ID_action_toolbar_open_last_backup);
				ObjType(obj_list_item, global::list_item_last)->disabled = !file_exists(sStr(project_folder) + /*"/"*/ STR(20) + filename_name(sStr(project_folder)) + /*".backup1"*/ STR(78));
				list_item_add(text_get({ /*"toolbarfilesave"*/ STR(1604) }), VarType(), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE))->keybind), null_, icons_SAVE, null_, ID_action_toolbar_save, true);
				list_item_add(text_get({ /*"toolbarfilesaveas"*/ STR(1605) }), VarType(), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE_AS))->keybind), null_, icons_SAVE_AS, null_, ID_action_toolbar_save_as);
				if (sStr(window_state) == /*""*/ STR(0))
				{
					list_item_add(text_get({ /*"toolbarfileimport"*/ STR(1606) }), VarType(), text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_IMPORT_ASSET))->keybind), null_, icons_ASSET_IMPORT, null_, ID_action_toolbar_import_asset, true);
					list_item_add(text_get({ /*"toolbarfileworldimport"*/ STR(1607) }), VarType(), /*""*/ STR(0), null_, icons_SCENERY, null_, ID_world_import_begin, false);
				}
				break;
			}
			
			case 1602: // toolbarfilerecent
			{
				VarType recent;
				for (IntType i = IntType(0); i < min({ ds_list_size(sInt(recent_list)), IntType(10) }); i++)
				{
					recent = DsList(sInt(recent_list)).Value(i);
					list_item_add(idVar(recent, name), idVar(recent, filename), /*""*/ STR(0), null_, null_, null_, ID_action_toolbar_open);
				}
				break;
			}
			
			case 1608: // toolbaredit
			{
				list_item_add(text_get({ /*"toolbareditundo"*/ STR(1609) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_UNDO))->keybind), null_, icons_UNDO, null_, ID_action_toolbar_undo);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sReal(history_pos) == sReal(history_amount));
				list_item_add(text_get({ /*"toolbareditredo"*/ STR(1610) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_REDO))->keybind), null_, icons_REDO, null_, ID_action_toolbar_redo);
				ObjType(obj_list_item, global::list_item_last)->disabled = (sReal(history_pos) == IntType(0));
				list_item_add(text_get({ /*"toolbareditselectall"*/ STR(1611) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SELECT))->keybind), null_, icons_SELECT_ALL, null_, ID_action_tl_select_all, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = (ds_list_size(sInt(tree_list)) == IntType(0));
				list_item_add(text_get({ /*"toolbareditduplicate"*/ STR(1612) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DUPLICATE))->keybind), null_, icons_DUPLICATE, null_, ID_action_tl_duplicate, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = (global::tl_edit == null_);
				list_item_add(text_get({ /*"toolbareditdelete"*/ STR(1613) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DELETE))->keybind), null_, icons_DELETE, null_, ID_action_tl_remove);
				ObjType(obj_list_item, global::list_item_last)->disabled = (global::tl_edit == null_);
				list_item_add(text_get({ /*"toolbaredithide"*/ STR(1614) }), true, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_HIDE))->keybind), null_, icons_HIDDEN, null_, ID_action_tl_hide_select, true);
				ObjType(obj_list_item, global::list_item_last)->disabled = (global::tl_edit == null_);
				list_item_add(text_get({ /*"toolbareditshowhidden"*/ STR(1615) }), false, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SHOW_HIDDEN))->keybind), null_, icons_VISIBLE, null_, ID_action_tl_hide_select);
				ObjType(obj_list_item, global::list_item_last)->disabled = (global::tl_edit == null_);
				list_item_add(text_get({ /*"toolbareditpreferences"*/ STR(1616) }), sInt(settings), /*""*/ STR(0), null_, icons_SETTINGS, null_, (ObjType(obj_tab, sInt(settings))->show > 0) ? ID_tab_close : ID_tab_show, true);
				ObjType(obj_list_item, global::list_item_last)->toggled = ObjType(obj_tab, sInt(settings))->show;
				break;
			}
			
			case 1617: // toolbarrender
			{
				list_item_add(text_get({ /*"toolbarrenderimage"*/ STR(1618) }), null_, /*""*/ STR(0), null_, icons_IMAGE_EXPORT, null_, ID_action_toolbar_export_image);
				list_item_add(text_get({ /*"toolbarrenderanimation"*/ STR(1619) }), null_, /*""*/ STR(0), null_, icons_MOVIE_EXPORT, null_, ID_action_toolbar_export_movie);
				break;
			}
			
			case 1620: // toolbarview
			{
				if (sStr(window_state) == /*""*/ STR(0))
				{
					list_item_add(text_get({ /*"toolbarviewreset"*/ STR(1621) }), null_, /*""*/ STR(0), null_, icons_CAMERA, null_, ID_camera_work_reset);
					list_item_add(text_get({ /*"toolbarviewsecondaryview"*/ STR(1622) }), null_, text_control_name(ObjType(obj_keybind, global::keybinds.Value(e_keybind_SECONDARY_VIEW))->keybind), null_, icons_VIEWPORT_SECONDARY, null_, ID_action_setting_secondary_view);
					ObjType(obj_list_item, global::list_item_last)->toggled = ObjType(obj_view, sInt(view_second))->show;
					list_item_add(text_get({ /*"toolbarviewtimelineshowmarkers"*/ STR(1623) }), null_, /*""*/ STR(0), null_, icons_MARKER, null_, ID_action_setting_timeline_show_markers);
					ObjType(obj_list_item, global::list_item_last)->toggled = sBool(setting_timeline_show_markers);
					ObjType(obj_list_item, global::list_item_last)->divider = true;
					list_item_add(text_get({ /*"toolbarviewtimelineplayback"*/ STR(1624) }), null_, /*""*/ STR(0), null_, icons_CLOCK, icons_CHEVRON_RIGHT_TINY, null_);
					ObjType(obj_list_item, global::list_item_last)->context_menu_name = /*"toolbarviewtimelineplayback"*/ STR(1624);
				}
				list_item_add(text_get({ /*"toolbarviewshortcutsbar"*/ STR(1625) }), null_, /*""*/ STR(0), null_, icons_KEYBOARD, null_, ID_action_setting_shortcuts_bar, true);
				ObjType(obj_list_item, global::list_item_last)->toggled = sBool(setting_show_shortcuts_bar);
				list_item_add(text_get({ /*"toolbarviewhome"*/ STR(1626) }), null_, /*""*/ STR(0), null_, icons_HOME, null_, ID_action_setting_home_screen, true);
				break;
			}
			
			case 1624: // toolbarviewtimelineplayback
			{
				list_item_add(text_get({ /*"toolbarviewtimelineplaybacktimeseconds"*/ STR(1627) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_setting_timeline_display_time);
				ObjType(obj_list_item, global::list_item_last)->toggled = !(sReal(timeline_show_frames) > 0);
				ObjType(obj_list_item, global::list_item_last)->divider = true;
				list_item_add(text_get({ /*"toolbarviewtimelineplaybacktimeframes"*/ STR(1628) }), null_, /*""*/ STR(0), null_, null_, null_, ID_action_setting_timeline_display_frames);
				ObjType(obj_list_item, global::list_item_last)->toggled = sReal(timeline_show_frames);
				break;
			}
			
			case 1629: // toolbarhelp
			{
				list_item_add(text_get({ /*"toolbarhelpabout"*/ STR(1630) }), sInt(popup_about), /*""*/ STR(0), null_, icons_INFO, null_, ID_popup_show);
				if (global::trial_version > 0)
					list_item_add(text_get({ /*"toolbarhelpupgrade"*/ STR(1631) }), sInt(popup_upgrade), /*""*/ STR(0), null_, icons_KEY, null_, ID_popup_show);
				list_item_add(text_get({ /*"toolbarhelptutorials"*/ STR(1632) }), link_tutorials, /*""*/ STR(0), null_, icons_TUTORIALS, null_, ID_popup_open_url);
				list_item_add(text_get({ /*"toolbarhelpreport"*/ STR(1633) }), link_forums_bugs, /*""*/ STR(0), null_, icons_BUG, null_, ID_popup_open_url, true);
				list_item_add(text_get({ /*"toolbarhelpforums"*/ STR(1634) }), link_forums, /*""*/ STR(0), null_, icons_COMMENTS, null_, ID_popup_open_url);
				break;
			}
			
			case 1109: // keybind
			{
				list_item_add(text_get({ /*"contextmenurestorekeybind"*/ STR(1635) }), sVar(context_menu_value), /*""*/ STR(0), null_, icons_RESET, null_, ID_keybind_restore);
				break;
			}
			
		}
		
		return list_init_end(self);
	}
	
	IntType list_init_end(ScopeAny self)
	{
		IntType list = global::list_edit;
		StringType name = /*""*/ STR(0);
		if (sVar(menu_filter) != /*""*/ STR(0))
		{
			BoolType filter = false;
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
			{
				name = string_lower(ObjType(obj_list_item, DsList(ObjType(obj_list, list)->item).Value(i))->name);
				if (string_contains(name, string_lower(sVar(menu_filter))))
				{
					filter = true;
					break;
				}
			}
			if (filter)
			{
				for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
				{
					name = string_lower(ObjType(obj_list_item, DsList(ObjType(obj_list, list)->item).Value(i))->name);
					name = string_replace_all(name, /*"normal"*/ STR(630), string_lower(sVar(menu_filter_normal)));
					if (!string_contains(name, string_lower(sVar(menu_filter))))
					{
						instance_destroy(self, { DsList(ObjType(obj_list, list)->item).Value(i) });
						ds_list_delete(ObjType(obj_list, list)->item, i);
						i--;
					}
				}
			}
		}
		if (sVar(menu_search) != /*""*/ STR(0))
		{
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
			{
				name = string_lower(ObjType(obj_list_item, DsList(ObjType(obj_list, list)->item).Value(i))->name);
				if (!string_contains(name, string_lower(sVar(menu_search))))
				{
					instance_destroy(self, { DsList(ObjType(obj_list, list)->item).Value(i) });
					ds_list_delete(ObjType(obj_list, list)->item, i);
					i--;
				}
			}
		}
		list_update_width(self, list);
		if (ds_list_size(ObjType(obj_list, list)->item) > IntType(0) && ObjType(obj_list_item, DsList(ObjType(obj_list, list)->item).Value(IntType(0)))->divider)
			ObjType(obj_list_item, DsList(ObjType(obj_list, list)->item)[IntType(0)])->divider = false;
		global::list_edit = null_;
		return list;
	}
	
	void list_init_start()
	{
		global::list_edit = list_new();
	}
	
	IntType list_item_add(VarType name, VarType value, VarType caption, VarType thumbnail, VarType lefticon, IntType righticon, VarType script, BoolType divider, BoolType interact)
	{
		IntType item = (new obj_list_item)->id;
		ObjType(obj_list_item, item)->name = name;
		ObjType(obj_list_item, item)->value = value;
		ObjType(obj_list_item, item)->caption = caption;
		ObjType(obj_list_item, item)->thumbnail = thumbnail;
		ObjType(obj_list_item, item)->thumbnail_backdrop = true;
		ObjType(obj_list_item, item)->thumbnail_blend = c_white;
		ObjType(obj_list_item, item)->thumbnail_alpha = IntType(1);
		ObjType(obj_list_item, item)->icon_left = lefticon;
		ObjType(obj_list_item, item)->actions_left = null_;
		ObjType(obj_list_item, item)->icon_right = righticon;
		ObjType(obj_list_item, item)->actions_right = null_;
		ObjType(obj_list_item, item)->script = script;
		ObjType(obj_list_item, item)->hover = false;
		ObjType(obj_list_item, item)->divider = divider;
		ObjType(obj_list_item, item)->disabled = false;
		ObjType(obj_list_item, item)->hovertime = IntType(0);
		ObjType(obj_list_item, item)->context_menu_name = /*""*/ STR(0);
		ObjType(obj_list_item, item)->context_menu_active = false;
		ObjType(obj_list_item, item)->context_menu_script = null_;
		ObjType(obj_list_item, item)->context_menu_width = IntType(0);
		ObjType(obj_list_item, item)->context_menu_height = IntType(0);
		ObjType(obj_list_item, item)->draw_x = IntType(0);
		ObjType(obj_list_item, item)->draw_y = IntType(0);
		ObjType(obj_list_item, item)->interact = interact;
		ObjType(obj_list_item, item)->indent = IntType(0);
		ObjType(obj_list_item, item)->toggled = false;
		if (global::list_edit != null_)
		{
			ds_list_add({ ObjType(obj_list, global::list_edit)->item, item });
			ObjType(obj_list_item, item)->list = global::list_edit;
		}
		else
			ObjType(obj_list_item, item)->list = null_;
		
		global::list_item_last = item;
		return item;
	}
	
	void list_item_add_action(IntType item, StringType name, IntType script, VarType active, VarType value, IntType icon, StringType side, VarType tip, IntType sprite)
	{
		if (is_undefined(tip))
			tip = name;
		IntType list;
		withOne (obj_list_item, item, noone)
		{
			if (side == /*"right"*/ STR(204))
			{
				if (self->actions_right == null_)
					self->actions_right = ds_list_create();
				list = self->actions_right;
			}
			else
			{
				if (self->actions_left == null_)
					self->actions_left = ds_list_create();
				list = self->actions_left;
			}
			
		}
		
		ds_list_add({ list, name });
		ds_list_add({ list, active });
		ds_list_add({ list, value });
		ds_list_add({ list, icon });
		ds_list_add({ list, script });
		ds_list_add({ list, tip });
		ds_list_add({ list, sprite });
	}
	
	RealType list_item_draw(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType item, xx, yy, width, height, toggled, margin, xoffset, animation, name;
		IntType components;
		VarType leftp, rightp, middley;
		BoolType mousehover, hover;
		item = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		width = argument[IntType(3)];
		height = argument[IntType(4)];
		toggled = false;
		margin = IntType(0);
		xoffset = IntType(0);
		components = IntType(0);
		animation = true;
		if (idInt(item, list) != null_ && idBool(idInt(item, list), get_name))
			name = text_get({ idVar(item, name) });
		else
			name = idVar(item, name);
		
		if (argument_count > IntType(5))
			toggled = argument[IntType(5)];
		if (idReal(item, toggled) > 0)
			toggled = true;
		if (argument_count > IntType(6))
			if (argument[IntType(6)] != null_)
				margin = argument[IntType(6)];
		margin = IntType(0);
		if (argument_count > IntType(7))
			if (argument[IntType(7)] != null_)
				xoffset = argument[IntType(7)];
		if (argument_count > IntType(8))
			animation = argument[IntType(8)];
		if (xx + width < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + height < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		if (idInt(item, list) != null_ && idBool(idInt(item, list), update))
			return IntType(0);
		idVar(item, draw_x) = xx;
		idVar(item, draw_y) = yy;
		if (idBool(item, divider))
			draw_divide(xx + IntType(4), yy - IntType(4), width - IntType(8));
		VarType textcolor, iconcolor, focus;
		RealType textalpha, iconalpha, backalpha;
		IntType backcolor;
		if (animation > 0)
		{
			microani_set(string(item), /*""*/ STR(0), idVar(item, hover), idVar(item, hover) > 0 && sBool(mouse_left) && idBool(item, interact), toggled > 0 && idBool(item, interact), idBool(item, disabled));
			microani_update({ idVar(item, hover), idVar(item, hover) > 0 && sBool(mouse_left) && idBool(item, interact), toggled > 0 && idBool(item, interact), idBool(item, disabled) });
			focus = max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) });
			textcolor = merge_color((IntType)(global::c_text_main), (IntType)(global::c_accent), focus);
			textcolor = merge_color((IntType)(textcolor), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			textalpha = lerp(global::a_text_main, global::a_accent, focus);
			textalpha = lerp(textalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			iconcolor = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_accent), focus);
			iconcolor = merge_color((IntType)(iconcolor), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			iconalpha = lerp(global::a_text_tertiary, global::a_accent, focus);
			iconalpha = lerp(iconalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			backcolor = merge_color(global::c_overlay, (IntType)(global::c_accent_overlay), focus);
			backalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
			backalpha = lerp(backalpha, global::a_accent_overlay, focus);
			draw_box(xx, yy, width, height, false, backcolor, backalpha);
			BoolType clip_state = clip_is_active();
			if (clip_state)
				clip_end();
			draw_box_hover({ xx, yy, width, height, global::microani_arr.Value(e_microani_PRESS) });
			if (clip_state)
				clip_begin(global::shader_clip_x, global::shader_clip_y, global::shader_clip_width, global::shader_clip_height);
		}
		else
		{
			textcolor = global::c_text_main;
			textalpha = global::a_text_main;
			if (idBool(item, disabled))
				textalpha = global::a_text_tertiary;
			iconcolor = global::c_text_tertiary;
			iconalpha = global::a_text_tertiary;
			backcolor = c_black;
			backalpha = IntType(0);
		}
		
		leftp = margin;
		rightp = margin;
		middley = yy + (RealType)height / 2.0;
		mousehover = app_mouse_box(self, xx, yy, width, height) && !idBool(item, disabled) && sBool(content_mouseon);
		hover = mousehover;
		leftp += (idReal(item, indent) + xoffset);
		RealType imgsize, iconsize;
		imgsize = height - IntType(8);
		iconsize = max({ imgsize, IntType(24) });
		if (idVar(item, thumbnail) > 0)
		{
			leftp += IntType(4);
			if (idBool(item, thumbnail_backdrop))
				draw_box(xx + leftp, middley - imgsize / 2.0, imgsize, imgsize, false, global::c_level_bottom, IntType(1));
			if (texture_height(idVar(item, thumbnail)) > imgsize)
				gpu_set_texfilter(true);
			draw_image({ idVar(item, thumbnail), IntType(0), xx + leftp, middley - imgsize / 2.0, imgsize / texture_width(idVar(item, thumbnail)), imgsize / texture_height(idVar(item, thumbnail)), idVar(item, thumbnail_blend), idVar(item, thumbnail_alpha) });
			gpu_set_texfilter(false);
			if (height > IntType(24))
				leftp += imgsize - IntType(4);
			else
				leftp += imgsize;
			
			components++;
		}
		if (idInt(item, actions_left) != null_)
		{
			for (IntType i = IntType(0); i < ds_list_size(idInt(item, actions_left)); i += IntType(7))
			{
				leftp += IntType(4) * (components > IntType(0));
				if (draw_button_icon(self, { DsList(idInt(item, actions_left)).Value(i), xx + leftp, middley - IntType(10), IntType(20), IntType(20), DsList(idInt(item, actions_left)).Value(i + IntType(1)), DsList(idInt(item, actions_left)).Value(i + IntType(3)), null_, false, DsList(idInt(item, actions_left)).Value(i + IntType(5)), DsList(idInt(item, actions_left)).Value(i + IntType(6)) }))
					script_execute(self, { DsList(idInt(item, actions_left)).Value(i + IntType(4)), DsList(idInt(item, actions_left)).Value(i + IntType(2)) });
				hover = (hover && !app_mouse_box(self, xx + leftp, middley - IntType(10), IntType(20), IntType(20)));
				leftp += IntType(20);
				components++;
			}
		}
		if (idVar(item, icon_left) != null_ && idVar(item, icon_left) != -IntType(1))
		{
			leftp += IntType(4);
			draw_image({ ID_spr_icons, idVar(item, icon_left), xx + leftp + iconsize / 2.0, middley, IntType(1), IntType(1), iconcolor, iconalpha });
			leftp += (iconsize - IntType(4));
			components++;
		}
		if (idInt(item, actions_right) != null_)
		{
			for (IntType i = IntType(0); i < ds_list_size(idInt(item, actions_right)); i += IntType(7))
			{
				rightp += IntType(4);
				if (draw_button_icon(self, { DsList(idInt(item, actions_right)).Value(i), (xx + width - rightp) - IntType(20), middley - IntType(10), IntType(20), IntType(20), DsList(idInt(item, actions_right)).Value(i + IntType(1)), DsList(idInt(item, actions_right)).Value(i + IntType(3)), null_, false, DsList(idInt(item, actions_right)).Value(i + IntType(5)), DsList(idInt(item, actions_right)).Value(i + IntType(6)) }))
					script_execute(self, { DsList(idInt(item, actions_right)).Value(i + IntType(4)), DsList(idInt(item, actions_right)).Value(i + IntType(2)) });
				hover = (hover && !app_mouse_box(self, (xx + width - rightp) - IntType(20), middley - IntType(10), IntType(20), IntType(20)));
				rightp += IntType(16);
				components++;
			}
		}
		if (idInt(item, icon_right) != null_)
		{
			rightp += IntType(4);
			if (idInt(item, icon_right) != -IntType(1))
				draw_image({ ID_spr_icons, idInt(item, icon_right), (xx + width - rightp) - iconsize / 2.0, middley, IntType(1), IntType(1), iconcolor, iconalpha });
			rightp += IntType(24);
			components++;
		}
		if (idInt(item, list) != null_ && idBool(idInt(item, list), show_ticks) && (idReal(item, toggled) > 0 || toggled > 0))
		{
			rightp += IntType(4);
			if (toggled > 0)
				draw_image({ ID_spr_icons, icons_TICK, (xx + width - rightp) - iconsize / 2.0, middley, IntType(1), IntType(1), iconcolor, iconalpha });
			rightp += IntType(24);
			components++;
		}
		if (idVar(item, caption) != /*""*/ STR(0))
		{
			rightp += IntType(8);
			draw_set_font(sInt(font_caption));
			draw_label(self, { idVar(item, caption), xx + width - rightp, middley, fa_right, fa_middle, global::c_text_tertiary, global::a_text_tertiary });
			rightp += string_width(idVar(item, caption));
		}
		leftp += IntType(8) + (IntType(4) * (IntType)(height > IntType(24) && (idVar(item, thumbnail) > 0 || (idVar(item, icon_left) != null_))));
		draw_set_font(sInt(font_value));
		RealType textwidth = width - (leftp + rightp) - IntType(8);
		draw_label(self, { string_limit(name, textwidth), xx + leftp, middley, fa_left, fa_middle, textcolor, textalpha });
		idVar(item, hover) = hover;
		if (hover && idBool(item, interact))
			sInt(mouse_cursor) = cr_handpoint;
		if (idVar(item, script) > 0 && hover && sBool(mouse_left_released))
		{
			global::list_item_script = idVar(item, script);
			global::list_item_script_value = idVar(item, value);
			global::list_item_value = sVar(context_menu_value);
			return true;
		}
		return 0.0;
	}
	
	void list_item_event_destroy(Scope<obj_list_item> self)
	{
		if (self->actions_left != null_)
			ds_list_destroy(self->actions_left);
		if (self->actions_right != null_)
			ds_list_destroy(self->actions_right);
		if (ds_map_exists(global::microanis, string(self->id)))
			ds_list_add({ global::microani_delete_list, DsMap(global::microanis).Value(string(self->id)) });
	}
	
	IntType list_new()
	{
		IntType list = (new obj_list)->id;
		ObjType(obj_list, list)->item = ds_list_create();
		ObjType(obj_list, list)->width = IntType(0);
		ObjType(obj_list, list)->update = false;
		ObjType(obj_list, list)->get_name = false;
		ObjType(obj_list, list)->toggled = false;
		ObjType(obj_list, list)->show_ticks = true;
		return list;
	}
	
	void list_update_width(ScopeAny self, IntType list)
	{
		IntType maxwidthleft, maxwidthright, width, item;
		RealType togglewid;
		maxwidthleft = IntType(0);
		maxwidthright = IntType(0);
		width = IntType(0);
		item = null_;
		togglewid = IntType(0);
		ObjType(obj_list, list)->toggled = false;
		draw_set_font(sInt(font_value));
		for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
		{
			item = DsList(ObjType(obj_list, list)->item).Value(i);
			width = IntType(4) + ObjType(obj_list_item, item)->indent;
			if (ObjType(obj_list_item, item)->thumbnail > 0)
				width += IntType(24);
			if (ObjType(obj_list_item, item)->actions_left != null_)
			{
				for (RealType j = IntType(0); j < ds_list_size(ObjType(obj_list_item, item)->actions_left); j += IntType(6))
					width += IntType(20);
			}
			if (ObjType(obj_list_item, item)->icon_left > 0)
				width += IntType(24) + IntType(4);
			width += string_width(ObjType(obj_list_item, item)->name) + IntType(8);
			maxwidthleft = max({ width, maxwidthleft });
		}
		draw_set_font(sInt(font_caption));
		for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
		{
			item = DsList(ObjType(obj_list, list)->item).Value(i);
			width = IntType(0);
			if (ObjType(obj_list_item, item)->actions_right != null_)
			{
				for (RealType j = IntType(0); j < ds_list_size(ObjType(obj_list_item, item)->actions_right); j += IntType(6))
					width += IntType(20);
			}
			if (ObjType(obj_list_item, item)->icon_right > 0)
				width += IntType(24) + IntType(4);
			if (ObjType(obj_list_item, item)->toggled > 0)
			{
				width += IntType(24) + IntType(4);
				ObjType(obj_list, list)->toggled = true;
			}
			if (ObjType(obj_list_item, item)->caption != /*""*/ STR(0))
				width += string_width(ObjType(obj_list_item, item)->caption) + IntType(8);
			maxwidthright = max({ width, maxwidthright });
		}
		ObjType(obj_list, list)->width = (maxwidthleft + maxwidthright + togglewid);
	}
	
	void list_value_filter(ScopeAny self, IntType list)
	{
		IntType valuelist = ds_list_create();
		for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
		{
			IntType item = DsList(ObjType(obj_list, list)->item).Value(i);
			if (ds_list_find_index(valuelist, ObjType(obj_list_item, item)->value) == -IntType(1))
				ds_list_add({ valuelist, ObjType(obj_list_item, item)->value });
			else
			{
				instance_destroy(self, { item });
				ds_list_delete(ObjType(obj_list, list)->item, i);
				i--;
				continue;
			}
			
			if (ObjType(obj_list_item, item)->script != null_ || ObjType(obj_list_item, item)->value == e_option_BROWSE || ObjType(obj_list_item, item)->value == e_option_IMPORT_WORLD || ObjType(obj_list_item, item)->value == e_option_DOWNLOAD_SKIN || ObjType(obj_list_item, item)->value == e_option_DOWNLOAD_SKIN_DONE || ObjType(obj_list_item, item)->value == e_option_IMPORT_ITEM_SHEET_DONE)
			{
				instance_destroy(self, { item });
				ds_list_delete(ObjType(obj_list, list)->item, i);
				i--;
			}
		}
		ds_list_destroy(valuelist);
	}
	
	void load_next(ScopeAny self)
	{
		ds_priority_delete_max(global::load_queue);
		if (ds_priority_size(global::load_queue) > IntType(0))
			load_start(self, ds_priority_find_max(global::load_queue), ID_res_load_start);
		else
		{
			ObjType(obj_popup, sInt(popup_loading))->load_object = null_;
			ObjType(obj_popup, sInt(popup_loading))->load_script = null_;
			popup_close(self);
			ObjType(obj_preview, sInt(lib_preview))->update = true;
			ObjType(obj_preview, sInt(res_preview))->update = true;
			ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
		}
		
	}
	
	void load_start(ScopeAny self, IntType object, IntType script)
	{
		if (sInt(popup) != sInt(popup_loading))
		{
			sInt(popup) = sInt(popup_loading);
			sVar(popup_ani) = IntType(0);
			sStr(popup_ani_type) = /*"show"*/ STR(752);
		}
		if (sInt(popup) == sInt(popup_loading) && sVar(popup_ani) != IntType(1))
			idReal(sInt(popup), load_amount) = ds_priority_size(global::load_queue);
		withOne (obj_popup, sInt(popup_loading), self->id)
		{
			self->caption = /*""*/ STR(0);
			self->progress = IntType(0);
			self->load_object = object;
			self->load_script = script;
		}
		
		sVar(window_busy) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
	}
	
	RealType log(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		StringType cap, valstr;
		cap = string(argument[IntType(0)]);
		valstr = /*""*/ STR(0);
		if (argument_count > IntType(1))
		{
			valstr = /*": "*/ STR(1056);
			for (IntType a = IntType(1); a < argument_count; a++)
			{
				valstr += string(argument[a]);
				if (a < argument_count - IntType(1))
					valstr += /*", "*/ STR(1057);
			}
		}
		log_message(cap + valstr);
		return IntType(1);
	}
	
	void marker_editor_draw(ScopeAny self)
	{
		ObjType(obj_textbox, idInt(sVar(timeline), tbx_marker_name))->text = idVar(sVar(timeline_marker_edit), name);
		tab_control_textfield(self);
		if (draw_textfield(self, /*"timelinemarkerlabel"*/ STR(1709), sVar(dx), sVar(dy), sVar(settings_menu_w) - IntType(24), IntType(24), idInt(sVar(timeline), tbx_marker_name), null_))
			action_tl_marker_edit(self, ObjType(obj_textbox, idInt(sVar(timeline), tbx_marker_name))->text, idVar(sVar(timeline_marker_edit), color));
		tab_next(self);
		VarType text, color;
		text = text_get({ /*"timelinemarkercolor"*/ STR(1508) + string(idVar(sVar(timeline_marker_edit), color)) });
		color = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(sVar(timeline_marker_edit), color));
		tab_control_menu(self);
		draw_button_menu(self, { /*"timelinemarkercolor"*/ STR(1508), e_menu_LIST, sVar(dx), sVar(dy), sVar(settings_menu_w) - IntType(24), IntType(24), idVar(sVar(timeline_marker_edit), color), text, ID_action_tl_marker_color, false, ID_spr_16, null_, /*""*/ STR(0), color, IntType(1) });
		tab_next(self);
		sVar(settings_menu_w) = IntType(216);
	}
	
	void marker_event_create(Scope<obj_marker> self)
	{
		self->pos = round(global::_app->timeline_marker);
		self->color = IntType(0);
		self->name = text_get({ /*"timelinemarkernew"*/ STR(51) });
		self->edit_pos = null_;
		self->save_id = /*""*/ STR(0);
		self->save_id = save_id_create();
		self->loaded = false;
	}
	
	void marker_event_destroy(Scope<obj_marker> self)
	{
		ds_list_delete_value(global::_app->timeline_marker_list, self->id);
	}
	
	void marker_list_sort(ScopeAny self)
	{
		IntType newlist = ds_list_create();
		for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
			ds_list_add({ newlist, idVar(DsList(sInt(timeline_marker_list)).Value(i), pos) });
		ds_list_sort(newlist, true);
		for (IntType i = IntType(0); i < ds_list_size(newlist); i++)
		{
			for (IntType j = IntType(0); j < ds_list_size(sInt(timeline_marker_list)); j++)
			{
				if (DsList(newlist).Value(i) == idVar(DsList(sInt(timeline_marker_list)).Value(j), pos))
				{
					DsList(newlist)[i] = DsList(sInt(timeline_marker_list)).Value(j);
					ds_list_delete(sInt(timeline_marker_list), j);
					break;
				}
			}
		}
		ds_list_copy(sInt(timeline_marker_list), newlist);
		ds_list_destroy(newlist);
		tl_update_marker_length();
	}
	
	void math_lib_startup(StringType path)
	{
		log({ /*"External library"*/ STR(1315), path });
		global::lib_math_simplex1d = external_define({ path, /*"simplex1D"*/ STR(1710), dll_cdecl, ty_real, IntType(1), ty_real });
		global::lib_math_simplex2d = external_define({ path, /*"simplex2D"*/ STR(1711), dll_cdecl, ty_real, IntType(2), ty_real, ty_real });
		global::lib_math_simplex3d = external_define({ path, /*"simplex3D"*/ STR(1712), dll_cdecl, ty_real, IntType(3), ty_real, ty_real, ty_real });
		global::lib_math_simplex4d = external_define({ path, /*"simplex4D"*/ STR(1713), dll_cdecl, ty_real, IntType(4), ty_real, ty_real, ty_real, ty_real });
	}
	
	ArrType matrix_create_axis_angle(VecType axis, RealType angle)
	{
		VecType sq, angles;
		RealType angle1, xy, yz, zx, s;
		ArrType mat;
		sq = vec3_mul(axis, axis);
		angle1 = IntType(1) - angle;
		xy = axis.Real(X_) * axis.Real(Y_) * angle1;
		yz = axis.Real(Y_) * axis.Real(Z_) * angle1;
		zx = axis.Real(X_) * axis.Real(Z_) * angle1;
		s = sqrt(max({ IntType(0), IntType(1) - power(angle, 2.0) }));
		angles.Real(X_) = axis.Real(X_) * s;
		angles.Real(Y_) = axis.Real(Y_) * s;
		angles.Real(Z_) = axis.Real(Z_) * s;
		mat = ArrType::From({ (sq.Real(X_) + (IntType(1) - sq.Real(X_)) * angle), xy + angles.Real(Z_), zx - angles.Real(Y_), IntType(0), xy - angles.Real(Z_), (sq.Real(Y_) + (IntType(1) - sq.Real(Y_)) * angle), yz + angles.Real(X_), IntType(0), zx + angles.Real(Y_), yz - angles.Real(X_), (sq.Real(Z_) + (IntType(1) - sq.Real(Z_)) * angle), IntType(0), IntType(0), IntType(0), IntType(0), IntType(1) });
		return mat;
	}
	
	ArrType matrix_create_lookat(VarType from, VecType to, VecType up)
	{
		VarType forward;
		VecType right;
		forward = vec3_direction(from, to);
		right = vec3_normalize(vec3_cross(up, forward));
		up = vec3_normalize(vec3_cross(forward, right));
		return ArrType::From({ right.Real(X_), up.Real(X_), forward.Value(X_), IntType(0), right.Real(Y_), up.Real(Y_), forward.Value(Y_), IntType(0), right.Real(Z_), up.Real(Z_), forward.Value(Z_), IntType(0), -vec3_dot(right, from), -vec3_dot(up, from), -vec3_dot(forward, from), IntType(1) });
	}
	
	ArrType matrix_create_rotate_to(VarType tangent, VarType normal)
	{
		VecType binormal = vec3_normalize(vec3_cross(tangent, normal));
		return ArrType::From({ binormal.Real(X_), binormal.Real(Y_), binormal.Real(Z_), IntType(0), tangent.Value(X_), tangent.Value(Y_), tangent.Value(Z_), IntType(0), normal.Value(X_), normal.Value(Y_), normal.Value(Z_), IntType(0), IntType(0), IntType(0), IntType(0), IntType(1) });
	}
	
	BoolType matrix_equals(ArrType a, MatrixType b)
	{
		for (IntType i = IntType(0); i < IntType(16); i++)
			if (abs(a.Value(i) - b.Real(i)) > 0.001)
				return false;
		return true;
	}
	
	VecType matrix_rotation(MatrixType m)
	{
		VecType rot;
		RealType t1, c2, t2, s1, c1, t3;
		t1 = arctan2(m.Real(MAT_21), m.Real(MAT_22));
		c2 = sqrt(m.Real(MAT_00) * m.Real(MAT_00) + m.Real(MAT_10) * m.Real(MAT_10));
		t2 = arctan2(-m.Real(MAT_20), c2);
		s1 = sin(t1);
		c1 = cos(t1);
		t3 = arctan2(s1 * m.Real(MAT_02) - c1 * m.Real(MAT_01), c1 * m.Real(MAT_11) - s1 * m.Real(MAT_12));
		rot = vec3_mul(ArrType::From({ t2, t1, t3 }), 180.0 / pi_);
		m = matrix_create(vec3(IntType(0)), rot, vec3(IntType(1)));
		t1 = arctan2(m.Real(MAT_21), m.Real(MAT_22));
		c2 = sqrt(m.Real(MAT_00) * m.Real(MAT_00) + m.Real(MAT_10) * m.Real(MAT_10));
		t2 = arctan2(-m.Real(MAT_20), c2);
		s1 = sin(t1);
		c1 = cos(t1);
		t3 = arctan2(s1 * m.Real(MAT_02) - c1 * m.Real(MAT_01), c1 * m.Real(MAT_11) - s1 * m.Real(MAT_12));
		rot = vec3_mul(ArrType::From({ t2, t1, t3 }), 180.0 / pi_);
		return rot;
	}
	
	void matrix_world_multiply_post(MatrixType mat)
	{
		matrix_set(matrix_world, matrix_multiply(matrix_get(matrix_world), mat));
	}
	
	void matrix_world_multiply_pre(MatrixType mat)
	{
		matrix_set(matrix_world, matrix_multiply(mat, matrix_get(matrix_world)));
	}
	
	void matrix_world_reset()
	{
		matrix_set(matrix_world, MAT_IDENTITY);
	}
	
	void menu_add_item(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType value, text, tex, icon, script;
		value = argument[IntType(0)];
		text = string_remove_newline(argument[IntType(1)]);
		if (argument_count > IntType(2))
			tex = argument[IntType(2)];
		else
			tex = null_;
		
		if (argument_count > IntType(3))
			icon = argument[IntType(3)];
		else
			icon = null_;
		
		if (argument_count > IntType(4))
			script = argument[IntType(4)];
		else
			script = null_;
		
		list_item_add(text, value, /*""*/ STR(0), tex, icon, null_, script);
	}
	
	RealType menu_add_timeline(ScopeAny self, VarType tl, VarType root, RealType level, VarType menu)
	{
		if (tl == global::tl_edit && !ObjType(obj_menu, menu)->menu_include_tl_edit)
			return IntType(0);
		if (tl == null_)
			list_item_add(text_get({ /*"timelinenone"*/ STR(1714) }), tl);
		else
		{
			VarType caption = /*""*/ STR(0);
			if (sBool(menu_expose) && idVar(tl, parent) != global::_app->id)
			{
				caption = idVar(root, display_name);
				if (idVar(tl, part_of) != null_)
				{
					if (idVar(idVar(tl, part_of), parent) != global::_app->id)
					{
						if (idVar(idVar(tl, part_of), parent) == root)
							caption += /*"/"*/ STR(20) + idVar(idVar(tl, part_of), display_name);
						else
							caption += /*"/.../"*/ STR(1715) + idVar(idVar(tl, part_of), display_name);
						
					}
					else
						caption = idVar(idVar(tl, part_of), display_name);
					
				}
				else
					if (root != idVar(tl, parent))
						caption += /*"/.../"*/ STR(1715) + idVar(idVar(tl, parent), display_name);
				
			}
			list_item_add(string_remove_newline(idVar(tl, display_name)), tl, caption);
			if (ds_list_size(idInt(tl, tree_list)) && !sBool(menu_expose))
				list_item_add_action(global::list_item_last, string(tl) + /*"extend"*/ STR(1716), ID_menu_item_set_extend, idVar(tl, tree_extend), tl, null_, /*"left"*/ STR(203), (idVar(tl, tree_extend) > 0) ? /*"tooltiptlcollapse"*/ STR(1717) : /*"tooltiptlexpand"*/ STR(1718), ID_spr_chevron_ani);
		}
		
		if (!sBool(menu_expose))
			ObjType(obj_list_item, global::list_item_last)->indent = max({ IntType(0), level * IntType(32) });
		if (tl != null_ && !(idVar(tl, tree_extend) > 0) && !sBool(menu_expose))
			return IntType(0);
		if (tl == null_)
			tl = global::_app->id;
		for (IntType t = IntType(0); t < ds_list_size(idInt(tl, tree_list)); t++)
			menu_add_timeline(self, DsList(idInt(tl, tree_list)).Value(t), (tl == global::_app->id) ? DsList(idInt(tl, tree_list)).Value(t) : root, level + IntType(1), menu);
		return 0.0;
	}
	
	IntType menu_biome_init(ScopeAny self, VarType menu)
	{
		list_init_start();
		IntType selectedbiome;
		VarType biome;
		selectedbiome = find_biome(ObjType(obj_menu, menu)->menu_value);
		if (!sBool(menu_expose) && ObjType(obj_biome, selectedbiome)->biome_base != null_ && ObjType(obj_menu, menu)->menu_ani == IntType(0))
			ObjType(obj_biome, ObjType(obj_biome, selectedbiome)->biome_base)->variants_extend = true;
		for (IntType b = IntType(0); b < ds_list_size(global::biome_list); b++)
		{
			biome = DsList(global::biome_list).Value(b);
			if (!(sBool(menu_expose) && ObjType(obj_biome, biome)->group > 0))
				menu_add_item({ ObjType(obj_biome, biome)->name, minecraft_asset_get_name(/*"biome"*/ STR(1719), ObjType(obj_biome, biome)->name) });
			if (ObjType(obj_biome, biome)->biome_variants != null_ && ds_list_size(ObjType(obj_biome, biome)->biome_variants) > IntType(0))
			{
				if (!sBool(menu_expose))
					list_item_add_action(global::list_item_last, string(biome) + /*"extend"*/ STR(1716), ID_menu_item_set_extend, ObjType(obj_biome, biome)->variants_extend, biome, null_, /*"left"*/ STR(203), (ObjType(obj_biome, biome)->variants_extend > 0) ? /*"tooltiptlcollapse"*/ STR(1717) : /*"tooltiptlexpand"*/ STR(1718), ID_spr_chevron_ani);
				if (ObjType(obj_biome, biome)->variants_extend > 0 || sBool(menu_expose))
				{
					for (IntType v = IntType(0); v < ds_list_size(ObjType(obj_biome, biome)->biome_variants); v++)
					{
						if (ObjType(obj_biome, DsList(ObjType(obj_biome, biome)->biome_variants).Value(v))->name == /*"normal"*/ STR(630) && !sBool(menu_expose))
							continue;
						menu_add_item({ ObjType(obj_biome, DsList(ObjType(obj_biome, biome)->biome_variants).Value(v))->name, minecraft_asset_get_name(/*"biome"*/ STR(1719), ObjType(obj_biome, DsList(ObjType(obj_biome, biome)->biome_variants).Value(v))->name) });
						if (!sBool(menu_expose))
							ObjType(obj_list_item, global::list_item_last)->indent = IntType(32);
					}
				}
			}
			else
				if (!sBool(menu_expose))
					ObjType(obj_list_item, global::list_item_last)->indent = IntType(20);
			
		}
		return list_init_end(self);
	}
	
}
