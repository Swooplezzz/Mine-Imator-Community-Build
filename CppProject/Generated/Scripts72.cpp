/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.25 00:08:42 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType view_shape_cube_draw(VarType mat, VecType position, RealType size)
	{
		VecType top1, top2, top3, top4;
		VecType bottom1, bottom2, bottom3, bottom4;
		VecType top1mat, top2mat, top3mat, top4mat;
		VecType bottom1mat, bottom2mat, bottom3mat, bottom4mat;
		top1 = point3D_add(point3D(-size, size, size), position);
		top2 = point3D_add(point3D(size, size, size), position);
		top3 = point3D_add(point3D(-size, -size, size), position);
		top4 = point3D_add(point3D(size, -size, size), position);
		top1mat = point3D_mul_matrix(top1, mat);
		top2mat = point3D_mul_matrix(top2, mat);
		top3mat = point3D_mul_matrix(top3, mat);
		top4mat = point3D_mul_matrix(top4, mat);
		bottom1 = point3D_add(point3D(-size, size, -size), position);
		bottom2 = point3D_add(point3D(size, size, -size), position);
		bottom3 = point3D_add(point3D(-size, -size, -size), position);
		bottom4 = point3D_add(point3D(size, -size, -size), position);
		bottom1mat = point3D_mul_matrix(bottom1, mat);
		bottom2mat = point3D_mul_matrix(bottom2, mat);
		bottom3mat = point3D_mul_matrix(bottom3, mat);
		bottom4mat = point3D_mul_matrix(bottom4, mat);
		ArrType top12D, top22D, top32D, top42D;
		ArrType bottom12D, bottom22D, bottom32D, bottom42D;
		top12D = view_shape_project(top1mat);
		if (global::point3D_project_error)
			return IntType(0);
		top22D = view_shape_project(top2mat);
		if (global::point3D_project_error)
			return IntType(0);
		top32D = view_shape_project(top3mat);
		if (global::point3D_project_error)
			return IntType(0);
		top42D = view_shape_project(top4mat);
		if (global::point3D_project_error)
			return IntType(0);
		bottom12D = view_shape_project(bottom1mat);
		if (global::point3D_project_error)
			return IntType(0);
		bottom22D = view_shape_project(bottom2mat);
		if (global::point3D_project_error)
			return IntType(0);
		bottom32D = view_shape_project(bottom3mat);
		if (global::point3D_project_error)
			return IntType(0);
		bottom42D = view_shape_project(bottom4mat);
		if (global::point3D_project_error)
			return IntType(0);
		render_set_culling(false);
		draw_primitive_begin(pr_trianglelist);
		view_shape_triangle_draw(top12D, top22D, top32D);
		view_shape_triangle_draw(top22D, top32D, top42D);
		view_shape_triangle_draw(bottom12D, bottom22D, bottom32D);
		view_shape_triangle_draw(bottom22D, bottom32D, bottom42D);
		view_shape_triangle_draw(top12D, top22D, bottom12D);
		view_shape_triangle_draw(top22D, bottom12D, bottom22D);
		view_shape_triangle_draw(top32D, top42D, bottom32D);
		view_shape_triangle_draw(top42D, bottom32D, bottom42D);
		view_shape_triangle_draw(top12D, top32D, bottom12D);
		view_shape_triangle_draw(top32D, bottom12D, bottom32D);
		draw_primitive_end();
		render_set_culling(true);
		return 0.0;
	}
	
	void view_shape_draw(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType points;
		points = argument[IntType(0)];
		if (argument_count > IntType(1))
		{
			ArrType mat = array_copy_1d(argument[IntType(1)]);
			matrix_remove_scale(VarType::CreateRef(mat));
			for (IntType p = IntType(0); p < IntType(8); p++)
				points[p] = point3D_mul_matrix(points.Value(p), mat);
		}
		view_shape_line(points.Value(IntType(0)), points.Value(IntType(1)));
		view_shape_line(points.Value(IntType(0)), points.Value(IntType(2)));
		view_shape_line(points.Value(IntType(0)), points.Value(IntType(4)));
		view_shape_line(points.Value(IntType(1)), points.Value(IntType(3)));
		view_shape_line(points.Value(IntType(1)), points.Value(IntType(5)));
		view_shape_line(points.Value(IntType(2)), points.Value(IntType(3)));
		view_shape_line(points.Value(IntType(2)), points.Value(IntType(6)));
		view_shape_line(points.Value(IntType(3)), points.Value(IntType(7)));
		view_shape_line(points.Value(IntType(4)), points.Value(IntType(5)));
		view_shape_line(points.Value(IntType(4)), points.Value(IntType(6)));
		view_shape_line(points.Value(IntType(5)), points.Value(IntType(7)));
		view_shape_line(points.Value(IntType(6)), points.Value(IntType(7)));
	}
	
	RealType view_shape_line(VecType p1, VecType p2)
	{
		ArrType p1_2d, p2_2d;
		BoolType p1error, p2error;
		p1_2d = view_shape_project(p1);
		p1error = global::point3D_project_error;
		p2_2d = view_shape_project(p2);
		p2error = global::point3D_project_error;
		if (p1error && p2error)
			return IntType(0);
		VarType camdir, dir;
		if (p1error)
		{
			camdir = vec3_direction(global::cam_from, global::cam_to);
			dir = vec3_direction(p1, p2);
			p1 = point3D_plane_intersect(point3D_add(global::cam_from, vec3_mul(camdir, global::cam_near)), camdir, p2, dir);
			p1_2d = view_shape_project(p1);
			if (array_equals(VarType::CreateRef(dir), VarType::CreateRef(vec3_direction(p1, p2))))
				p1error = false;
		}
		else
			if (p2error)
			{
				camdir = vec3_direction(global::cam_from, global::cam_to);
				dir = vec3_direction(p2, p1);
				p2 = point3D_plane_intersect(point3D_add(global::cam_from, vec3_mul(camdir, global::cam_near)), camdir, p1, dir);
				p2_2d = view_shape_project(p2);
				if (array_equals(VarType::CreateRef(dir), VarType::CreateRef(vec3_direction(p2, p1))))
					p2error = false;
			}
		
		if (p1error || p2error)
			return IntType(0);
		view_shape_line_draw(p1_2d, p2_2d);
		return 0.0;
	}
	
	void view_shape_line_draw(VecType point1, VecType point2)
	{
		render_set_culling(false);
		draw_line_width((IntType)(point1.Real(X_)), (IntType)(point1.Real(Y_)), (IntType)(point2.Real(X_)), (IntType)(point2.Real(Y_)), IntType(2));
		render_set_culling(true);
	}
	
	void view_shape_particles(IntType tl)
	{
		VarType temp = ObjType(obj_timeline, tl)->temp;
		view_shape_box({ point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3(-IntType(3))), point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3(IntType(3))) });
		if (temp == global::temp_edit && ObjType(obj_tab, global::_app->template_editor)->show > 0)
		{
			if (idVar(temp, pc_spawn_region_use) > 0)
			{
				if (idVar(temp, pc_bounding_box_type) == /*"spawn"*/ STR(1334))
					draw_set_color(c_red);
				switch (StringType(idVar(temp, pc_spawn_region_type)).id)
				{
					case 528: // sphere
					{
						view_shape_circle({ ObjType(obj_timeline, tl)->world_pos, idVar(temp, pc_spawn_region_sphere_radius) });
						break;
					}
					case 3: // cube
					{
						view_shape_box({ point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3((RealType)-idVar(temp, pc_spawn_region_cube_size) / 2.0)), point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3((RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0)) });
						break;
					}
					case 1328: // box
					{
						view_shape_box({ point3D(ObjType(obj_timeline, tl)->world_pos.Value(X_) - idVar(temp, pc_spawn_region_box_size).Value(X_) / 2.0, ObjType(obj_timeline, tl)->world_pos.Value(Y_) - idVar(temp, pc_spawn_region_box_size).Value(Y_) / 2.0, ObjType(obj_timeline, tl)->world_pos.Value(Z_) - idVar(temp, pc_spawn_region_box_size).Value(Z_) / 2.0), point3D(ObjType(obj_timeline, tl)->world_pos.Value(X_) + idVar(temp, pc_spawn_region_box_size).Value(X_) / 2.0, ObjType(obj_timeline, tl)->world_pos.Value(Y_) + idVar(temp, pc_spawn_region_box_size).Value(Y_) / 2.0, ObjType(obj_timeline, tl)->world_pos.Value(Z_) + idVar(temp, pc_spawn_region_box_size).Value(Z_) / 2.0) });
						break;
					}
				}
				
			}
			if (idVar(temp, pc_bounding_box_type) == /*"custom"*/ STR(599))
			{
				draw_set_color(c_red);
				view_shape_box({ point3D(ObjType(obj_timeline, tl)->world_pos.Value(X_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_start).Value(X_), ObjType(obj_timeline, tl)->world_pos.Value(Y_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_start).Value(Y_), ObjType(obj_timeline, tl)->world_pos.Value(Z_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_start).Value(Z_)), point3D(ObjType(obj_timeline, tl)->world_pos.Value(X_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_end).Value(X_), ObjType(obj_timeline, tl)->world_pos.Value(Y_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_end).Value(Y_), ObjType(obj_timeline, tl)->world_pos.Value(Z_) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_end).Value(Z_)) });
			}
			draw_set_color(c_white);
		}
	}
	
	RealType view_shape_path(ScopeAny self, IntType view, IntType tl)
	{
		if (array_length(VarType::CreateRef(ObjType(obj_timeline, tl)->path_table)) < IntType(2))
			return IntType(0);
		RealType showpoints = ObjType(obj_timeline, tl)->selected;
		for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_timeline, tl)->tree_list); i++)
		{
			VarType pointtl = DsList(ObjType(obj_timeline, tl)->tree_list).Value(i);
			if (ObjType(obj_timeline, pointtl)->selected > 0 && ObjType(obj_timeline, pointtl)->type == e_tl_type_PATH_POINT)
			{
				showpoints = true;
				continue;
			}
		}
		VarType prevcoord, nextcoord;
		VecType prevcoord2d, nextcoord2d;
		BoolType prevcoord2derror, nextcoord2derror;
		IntType points;
		if (showpoints > 0)
		{
			draw_set_color(c_controls);
			prevcoord = point3D_mul_matrix(DsList(ObjType(obj_timeline, tl)->path_points_list).Value(IntType(0)), ObjType(obj_timeline, tl)->matrix);
			prevcoord2d = view_shape_project(prevcoord);
			prevcoord2derror = global::point3D_project_error;
			points = ds_list_size(ObjType(obj_timeline, tl)->path_points_list);
			if (!(ObjType(obj_timeline, tl)->path_closed > 0))
				points--;
			for (IntType i = IntType(1); i <= points; i++)
			{
				nextcoord = point3D_mul_matrix(DsList(ObjType(obj_timeline, tl)->path_points_list).Value((mod(i, ds_list_size(ObjType(obj_timeline, tl)->path_points_list)))), ObjType(obj_timeline, tl)->matrix);
				nextcoord2d = view_shape_project(nextcoord);
				nextcoord2derror = global::point3D_project_error;
				if (!prevcoord2derror && !nextcoord2derror)
					view_shape_line_draw(prevcoord2d, nextcoord2d);
				prevcoord = nextcoord;
				prevcoord2d = nextcoord2d;
				prevcoord2derror = nextcoord2derror;
			}
			draw_set_color(c_white);
		}
		prevcoord = ObjType(obj_timeline, tl)->path_table_matrix.Value(IntType(0));
		prevcoord2d = view_shape_project(prevcoord);
		prevcoord2derror = global::point3D_project_error;
		for (IntType i = IntType(1); i < array_length(VarType::CreateRef(ObjType(obj_timeline, tl)->path_table_matrix)); i++)
		{
			nextcoord = ObjType(obj_timeline, tl)->path_table_matrix.Value(i);
			nextcoord2d = view_shape_project(nextcoord);
			nextcoord2derror = global::point3D_project_error;
			if (!prevcoord2derror && !nextcoord2derror)
				view_shape_line_draw(prevcoord2d, nextcoord2d);
			prevcoord = nextcoord;
			prevcoord2d = nextcoord2d;
			prevcoord2derror = nextcoord2derror;
		}
		if (showpoints > 0)
		{
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_timeline, tl)->tree_list); i++)
			{
				VarType pointtl = DsList(ObjType(obj_timeline, tl)->tree_list).Value(i);
				if (ObjType(obj_timeline, pointtl)->selected > 0 || ObjType(obj_timeline, pointtl)->type != e_tl_type_PATH_POINT)
					continue;
				nextcoord = point3D_mul_matrix(DsList(ObjType(obj_timeline, tl)->path_points_list).Value(i), ObjType(obj_timeline, tl)->matrix);
				nextcoord2d = view_shape_project(nextcoord);
				nextcoord2derror = global::point3D_project_error;
				if (!nextcoord2derror)
				{
					draw_image({ ID_spr_circle_24, IntType(0), nextcoord2d.Real(X_), nextcoord2d.Real(Y_), IntType(1), IntType(1), global::c_level_top, IntType(1) });
					draw_image({ ID_spr_icons, icons_PATH_POINT, nextcoord2d.Real(X_), nextcoord2d.Real(Y_), IntType(1), IntType(1), global::c_text_secondary, global::a_text_secondary });
					if (app_mouse_box(self, sVar(content_x) + (nextcoord2d.Real(X_) - IntType(13)), sVar(content_y) + (nextcoord2d.Real(Y_) - IntType(13)), IntType(26), IntType(26)) && sBool(content_mouseon) && ObjType(obj_view, view)->control_mouseon_last == null_)
					{
						sInt(mouse_cursor) = cr_default;
						if (sBool(mouse_left_pressed))
						{
							action_tl_select(self, pointtl);
							if (sVar(setting_timeline_select_jump) > 0)
								tl_jump(pointtl);
							sVar(window_busy) = /*"viewpathpointclick"*/ STR(3858);
						}
					}
				}
			}
		}
		return 0.0;
	}
	
	void view_shape_pointlight(IntType tl)
	{
		view_shape_circle({ point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3(IntType(0), IntType(0), IntType(4))), IntType(4) });
		view_shape_box({ point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3(-1.5, -1.5, -IntType(4))), point3D_add(ObjType(obj_timeline, tl)->world_pos, vec3(1.5, 1.5, IntType(0))) });
	}
	
	ArrType view_shape_project(VarType point)
	{
		return point3D_project(point, global::view_proj_matrix, global::_app->content_width, global::_app->content_height);
	}
	
	void view_shape_spotlight(IntType tl)
	{
		ArrType points;
		view_shape_circle({ ObjType(obj_timeline, tl)->world_pos, IntType(2) });
		points = ArrType::From({ point3D(-IntType(2), -IntType(3), -IntType(2)), point3D(-IntType(2), -IntType(3), IntType(2)), point3D(IntType(2), -IntType(3), -IntType(2)), point3D(IntType(2), -IntType(3), IntType(2)), point3D(-IntType(4), IntType(6), -IntType(4)), point3D(-IntType(4), IntType(6), IntType(4)), point3D(IntType(4), IntType(6), -IntType(4)), point3D(IntType(4), IntType(6), IntType(4)) });
		view_shape_draw({ points, ObjType(obj_timeline, tl)->matrix });
	}
	
	RealType view_shape_tnb_frame(VarType pos, VarType tangent, VarType normal)
	{
		VecType binormal, veccoord;
		VarType poscoord;
		ArrType poscoord2d, veccoord2d;
		BoolType poscoord2derror, veccoord2derror;
		IntType col;
		binormal = vec3_normalize(vec3_cross(tangent, normal));
		poscoord = pos;
		poscoord2d = view_shape_project(poscoord);
		poscoord2derror = global::point3D_project_error;
		if (poscoord2derror)
			return IntType(0);
		col = draw_get_color();
		veccoord = vec3_add(poscoord, vec3_mul(normal, IntType(2)));
		veccoord2d = view_shape_project(veccoord);
		veccoord2derror = global::point3D_project_error;
		draw_set_color(global::c_control_blue);
		if (!veccoord2derror)
			view_shape_line_draw(poscoord2d, veccoord2d);
		veccoord = vec3_add(poscoord, vec3_mul(tangent, IntType(2)));
		veccoord2d = view_shape_project(veccoord);
		veccoord2derror = global::point3D_project_error;
		draw_set_color(global::c_control_red);
		if (!veccoord2derror)
			view_shape_line_draw(poscoord2d, veccoord2d);
		veccoord = vec3_add(poscoord, vec3_mul(binormal, IntType(2)));
		veccoord2d = view_shape_project(veccoord);
		veccoord2derror = global::point3D_project_error;
		draw_set_color(global::c_control_green);
		if (!veccoord2derror)
			view_shape_line_draw(poscoord2d, veccoord2d);
		draw_set_color(col);
		return 0.0;
	}
	
	void view_shape_triangle_draw(VecType p1, VecType p2, VecType p3)
	{
		IntType color;
		RealType alpha;
		color = draw_get_color();
		alpha = draw_get_alpha();
		draw_vertex_color((IntType)(p1.Real(X_)), (IntType)(p1.Real(Y_)), color, alpha);
		draw_vertex_color((IntType)(p2.Real(X_)), (IntType)(p2.Real(Y_)), color, alpha);
		draw_vertex_color((IntType)(p3.Real(X_)), (IntType)(p3.Real(Y_)), color, alpha);
	}
	
	RealType view_toggle_render()
	{
		if (ObjType(obj_view, global::_app->view_second)->show > 0)
		{
			if (ObjType(obj_view, global::_app->view_second)->quality == e_view_mode_RENDER)
			{
				ObjType(obj_view, global::_app->view_second)->quality = e_view_mode_SHADED;
				render_free();
				return IntType(0);
			}
			else
				ObjType(obj_view, global::_app->view_second)->quality = e_view_mode_RENDER;
			
			if (ObjType(obj_view, global::_app->view_main)->quality == e_view_mode_RENDER)
				ObjType(obj_view, global::_app->view_main)->quality = e_view_mode_SHADED;
		}
		else
		{
			if (ObjType(obj_view, global::_app->view_main)->quality == e_view_mode_RENDER)
			{
				ObjType(obj_view, global::_app->view_main)->quality = e_view_mode_SHADED;
				render_free();
				return IntType(0);
			}
			else
				ObjType(obj_view, global::_app->view_main)->quality = e_view_mode_RENDER;
			
		}
		
		return 0.0;
	}
	
	RealType view_toolbar_draw(ScopeAny self, IntType view, RealType xx, RealType yy)
	{
		RealType width, height, starty, padding;
		width = IntType(32);
		height = ObjType(obj_view, view)->toolbar_height;
		starty = yy;
		padding = IntType(4);
		if (yy + height > sVar(content_y) + sVar(content_height))
		{
			ObjType(obj_view, view)->toolbar_mouseon = sBool(bench_button_hover);
			return IntType(0);
		}
		global::microani_prefix = string(view);
		if ((app_mouse_box(self, xx, yy, width, height) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon) && !(ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_second))->mouseon)) || sBool(bench_button_hover))
			ObjType(obj_view, view)->toolbar_mouseon = true;
		else
			ObjType(obj_view, view)->toolbar_mouseon = false;
		
		if (ObjType(obj_view, view)->toolbar_mouseon)
			sBool(content_mouseon) = true;
		if (app_mouse_box(self, xx - IntType(64), yy - IntType(64), width + IntType(128), height + IntType(128)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon) && !(ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_second))->mouseon))
			ObjType(obj_view, view)->toolbar_alpha_goal = IntType(1);
		else
			ObjType(obj_view, view)->toolbar_alpha_goal = .8;
		
		if (sVar(window_busy) == /*"bench"*/ STR(736))
			ObjType(obj_view, view)->toolbar_alpha_goal = .8;
		draw_set_alpha(ObjType(obj_view, view)->toolbar_alpha);
		draw_dropshadow(self, xx, yy, width, height, c_black, IntType(1));
		draw_box(xx, yy, width, height, false, global::c_level_top, IntType(1));
		draw_outline(xx, yy, width, height, IntType(1), global::c_border, global::a_border, true);
		xx += IntType(4);
		yy += IntType(4);
		sBool(tip_force_right) = true;
		if (sVar(setting_separate_tool_modes) > 0)
		{
			tip_set_keybind(self, e_keybind_TOOL_SELECT);
			if (draw_button_icon(self, { /*"viewtoolselect"*/ STR(3859), xx, yy, IntType(24), IntType(24), sBool(setting_tool_select), icons_SELECT, null_, false, /*"viewtoolselecttip"*/ STR(3860) }))
			{
				action_tools_disable_all(self);
				sBool(setting_tool_select) = true;
			}
			yy += IntType(24) + padding;
		}
		tip_set_keybind(self, e_keybind_TOOL_MOVE);
		if (draw_button_icon(self, { /*"viewtoolmove"*/ STR(3861), xx, yy, IntType(24), IntType(24), sVar(setting_tool_move), icons_MOVE, null_, false, /*"viewtoolmovetip"*/ STR(3862) }))
		{
			if (sVar(setting_separate_tool_modes) > 0)
			{
				action_tools_disable_all(self);
				sVar(setting_tool_move) = true;
			}
			else
			{
				sVar(setting_tool_move) = !(sVar(setting_tool_move) > 0);
				sBool(setting_tool_scale) = false;
			}
			
		}
		yy += IntType(24) + padding;
		tip_set_keybind(self, e_keybind_TOOL_ROTATE);
		if (draw_button_icon(self, { /*"viewtoolrotate"*/ STR(3863), xx, yy, IntType(24), IntType(24), sBool(setting_tool_rotate), icons_ROTATE, null_, false, /*"viewtoolrotatetip"*/ STR(3864) }))
		{
			if (sVar(setting_separate_tool_modes) > 0)
			{
				action_tools_disable_all(self);
				sBool(setting_tool_rotate) = true;
			}
			else
			{
				sBool(setting_tool_rotate) = !sBool(setting_tool_rotate);
				sBool(setting_tool_scale) = false;
			}
			
		}
		yy += IntType(24) + padding;
		if (sVar(setting_separate_tool_modes) > 0)
		{
			tip_set_keybind(self, e_keybind_TOOL_SCALE);
			if (draw_button_icon(self, { /*"viewtoolscale"*/ STR(3865), xx, yy, IntType(24), IntType(24), sBool(setting_tool_scale), icons_SCALE, null_, false, /*"viewtoolscaletip"*/ STR(3866) }))
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_scale) = true;
				}
				else
				{
					sBool(setting_tool_scale) = !sBool(setting_tool_scale);
					if (sBool(setting_tool_scale))
					{
						sVar(setting_tool_move) = false;
						sBool(setting_tool_rotate) = false;
						sBool(setting_tool_bend) = false;
					}
				}
				
			}
			yy += IntType(24) + padding;
		}
		tip_set_keybind(self, e_keybind_TOOL_BEND);
		if (draw_button_icon(self, { /*"viewtoolbend"*/ STR(3867), xx, yy, IntType(24), IntType(24), sBool(setting_tool_bend), icons_BEND, null_, false, /*"viewtoolbendtip"*/ STR(3868) }))
		{
			if (sVar(setting_separate_tool_modes) > 0)
			{
				action_tools_disable_all(self);
				sBool(setting_tool_bend) = true;
			}
			else
			{
				sBool(setting_tool_bend) = !sBool(setting_tool_bend);
				sBool(setting_tool_scale) = false;
			}
			
		}
		yy += IntType(24) + padding;
		if (sVar(setting_separate_tool_modes) > 0)
		{
			tip_set_keybind(self, e_keybind_TOOL_TRANSFORM);
			if (draw_button_icon(self, { /*"viewtooltransform"*/ STR(3869), xx, yy, IntType(24), IntType(24), sBool(setting_tool_transform), icons_MULTITRANSFORM, null_, false, /*"viewtooltransformtip"*/ STR(3870) }))
			{
				action_tools_disable_all(self);
				sBool(setting_tool_transform) = true;
			}
			yy += IntType(24) + padding;
		}
		if (!(sVar(setting_separate_tool_modes) > 0))
		{
			draw_divide(xx, yy, IntType(24));
			yy += IntType(1) + padding;
			tip_set_keybind(self, e_keybind_TOOL_SCALE);
			if (draw_button_icon(self, { /*"viewtoolscale"*/ STR(3865), xx, yy, IntType(24), IntType(24), sBool(setting_tool_scale), icons_SCALE, null_, false, /*"viewtoolscaletip"*/ STR(3866) }))
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_scale) = true;
				}
				else
				{
					sBool(setting_tool_scale) = !sBool(setting_tool_scale);
					if (sBool(setting_tool_scale))
					{
						sVar(setting_tool_move) = false;
						sBool(setting_tool_rotate) = false;
						sBool(setting_tool_bend) = false;
					}
				}
				
			}
			yy += IntType(24) + padding;
		}
		sBool(tip_force_right) = false;
		ObjType(obj_view, view)->toolbar_height = yy - starty;
		global::microani_prefix = /*""*/ STR(0);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	void view_update(ScopeAny self, IntType view, VarType cam)
	{
		BoolType editcamobj = false;
		if (cam > 0)
			editcamobj = (sInt(place_tl) == null_ && !(idVar(cam, lock) > 0));
		view_update_surface(self, view, cam);
		if (sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == /*"place"*/ STR(113)))
		{
			sInt(place_view_mouse) = view;
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed))
			{
				sVar(window_busy) = /*"viewclick"*/ STR(3871);
				sVar(window_focus) = string(view);
			}
			if ((!(cam > 0) || editcamobj) && sBool(mouse_right_pressed))
			{
				sInt(view_click_x) = display_mouse_get_x();
				sInt(view_click_y) = display_mouse_get_y();
				sVar(window_busy) = /*"viewmovecamera"*/ STR(3872);
				sVar(window_focus) = string(view);
				if (cam > 0)
					action_tl_select_single(self, { cam });
			}
		}
		if ((sVar(window_busy) == /*""*/ STR(0) && sBool(content_mouseon)) && global::tl_edit != null_ && global::tl_edit != cam && !(cam > 0) && ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_VIEW_TIMELINE))->pressed)
		{
			sVar(cam_work_focus) = idVar(global::tl_edit, world_pos);
			sVec(cam_work_focus_last) = point3D_copy(sVar(cam_work_focus));
			camera_work_set_angle();
			sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
			sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
			sVar(cam_work_zoom_goal) = IntType(100);
			camera_work_set_from(self);
			sBool(cam_work_jump) = true;
		}
		if (((((sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == /*"place"*/ STR(113)) && sBool(content_mouseon)) || (sVar(window_busy) == /*"viewrotatecamera"*/ STR(3873) && sVar(window_focus) == string(view)))) && sReal(mouse_wheel) != IntType(0))
		{
			if (!(cam > 0))
				sVar(cam_work_zoom_goal) = clamp(sVar(cam_work_zoom_goal) * (IntType(1) + 0.25 * sReal(mouse_wheel)), global::cam_near, global::cam_far);
			else
				if (idVar(cam, value).Value(e_value_CAM_ROTATE) > 0 && editcamobj)
				{
					action_tl_select_single(self, { cam });
					if (idVar(cam, cam_goalzoom) < IntType(0))
						idVar(cam, cam_goalzoom) = idVar(cam, value).Value(e_value_CAM_ROTATE_DISTANCE);
					idVar(cam, cam_goalzoom) = max({ IntType(1), idVar(cam, cam_goalzoom) * (IntType(1) + 0.25 * sReal(mouse_wheel)) });
				}
			
		}
		if (sVar(window_focus) == string(view))
		{
			if (sVar(window_busy) == /*"viewclick"*/ STR(3871))
			{
				sInt(mouse_cursor) = cr_handpoint;
				if ((!(cam > 0) || editcamobj) && sReal(mouse_move) > IntType(5))
				{
					if (keyboard_check(vk_shift))
					{
						sVar(window_busy) = /*"viewpancamera"*/ STR(3874);
						sVar(window_focus) = string(view);
						if (cam > 0)
							action_tl_select_single(self, { cam });
					}
					else
					{
						sInt(view_click_x) = display_mouse_get_x();
						sInt(view_click_y) = display_mouse_get_y();
						sVar(window_busy) = /*"viewrotatecamera"*/ STR(3873);
						if (cam > 0)
							action_tl_select_single(self, { cam });
					}
					
				}
				if (!sBool(mouse_left))
				{
					if (sInt(place_tl) == null_)
					{
						view_click(self, view, cam);
						sVar(window_busy) = /*""*/ STR(0);
					}
					else
						app_stop_place();
					
				}
			}
			if (sVar(window_busy) == /*"viewrotatecamera"*/ STR(3873))
			{
				global::render_samples = -IntType(1);
				if (sVar(setting_camera_lock_mouse) > 0)
					sInt(mouse_cursor) = cr_none;
				if (!(cam > 0) || idVar(cam, value).Value(e_value_CAM_ROTATE) > 0)
					camera_control_rotate(self, cam, sInt(view_click_x), sInt(view_click_y));
				else
					camera_control_move(self, cam, sInt(view_click_x), sInt(view_click_y));
				
				if (!sBool(mouse_left))
					sVar(window_busy) = (sInt(place_tl) != null_ ? /*"place"*/ STR(113) : /*""*/ STR(0));
			}
			if (sVar(window_busy) == /*"viewmovecamera"*/ STR(3872))
			{
				global::render_samples = -IntType(1);
				if (cam == null_)
					sStr(shortcut_bar_state) = /*"cameramove"*/ STR(2869);
				else
					sStr(shortcut_bar_state) = /*"tlcameramove"*/ STR(2870);
				
				if (sVar(setting_camera_lock_mouse) > 0)
					sInt(mouse_cursor) = cr_none;
				camera_control_move(self, cam, sInt(view_click_x), sInt(view_click_y));
				if (!sBool(mouse_right))
				{
					camera_work_set_focus();
					sVar(window_busy) = (sInt(place_tl) != null_ ? /*"place"*/ STR(113) : /*""*/ STR(0));
				}
			}
			if (sVar(window_busy) == /*"viewpancamera"*/ STR(3874))
			{
				camera_control_pan(self, cam);
				if (!sBool(mouse_left))
				{
					camera_work_set_focus();
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
		}
		if (sVar(window_busy) == /*"viewpathpointclick"*/ STR(3858))
			sVar(window_busy) = /*""*/ STR(0);
	}
	
	void view_update_surface(ScopeAny self, IntType view, VarType cam)
	{
		global::render_view_current = view;
		global::render_lights = (ObjType(obj_view, view)->quality != e_view_mode_FLAT);
		global::render_particles = ObjType(obj_view, view)->particles;
		global::render_effects = ObjType(obj_view, view)->effects;
		global::render_quality = ObjType(obj_view, view)->quality;
		global::render_watermark = (ObjType(obj_tab, sInt(settings))->show > 0 && ObjType(obj_category, ObjType(obj_tab, sInt(settings))->program)->show > 0 && sVar(setting_watermark_custom) > 0 && DsMap(global::collapse_map).Value(/*"watermark"*/ STR(29)) > 0);
		render_start({ ObjType(obj_view, view)->surface, cam, sVar(content_width), sVar(content_height) });
		if (ObjType(obj_view, view)->quality == e_view_mode_RENDER)
			render_high(self);
		else
			render_low(self);
		
		if (ObjType(obj_view, view)->gizmos > 0)
		{
			if (global::tl_edit_amount > IntType(0))
				ObjType(obj_view, view)->surface_select = render_select(self, e_render_mode_SELECT, ObjType(obj_view, view)->surface_select);
			if (surface_exists((IntType)(global::render_target)))
			{
				surface_set_target((IntType)(global::render_target));
			{
				withAll (obj_timeline, global::_app->id)
				{
					withOne (app, global::_app->id, self->id)
					{
						IntType tl = self.otherId;
						if (ObjType(obj_timeline, tl)->hide > 0 || !ObjType(obj_timeline, tl)->value_inherit.Value(e_value_VISIBLE))
							continue;
						draw_set_color((ObjType(obj_timeline, tl)->selected > 0 || ObjType(obj_timeline, tl)->parent_is_selected) ? c_white : c_controls);
						if (ObjType(obj_timeline, tl)->type == e_tl_type_SPOT_LIGHT)
							view_shape_spotlight(tl);
						else
							if (ObjType(obj_timeline, tl)->type == e_tl_type_POINT_LIGHT)
								view_shape_pointlight(tl);
							else
								if (ObjType(obj_timeline, tl)->type == e_tl_type_CAMERA && tl != cam)
									view_shape_camera(tl);
								else
									if (ObjType(obj_timeline, tl)->type == e_temp_type_PARTICLE_SPAWNER)
										view_shape_particles(tl);
									else
										if (ObjType(obj_timeline, tl)->type == e_tl_type_PATH)
											view_shape_path(ScopeAny(self), view, tl);
								
							
						
						
						if (dev_mode_show_bones && ObjType(obj_timeline, tl)->selected > 0 && ObjType(obj_timeline, tl)->type == e_tl_type_BODYPART && array_length(VarType::CreateRef(ObjType(obj_timeline, tl)->part_joints_pos)) > IntType(0))
						{
							for (IntType i = IntType(0); i < IntType(2); i++)
								view_shape_bone(ObjType(obj_timeline, tl)->part_joints_pos.Value(i), point3D_distance(ObjType(obj_timeline, tl)->part_joints_pos.Value(i), ObjType(obj_timeline, tl)->part_joints_pos.Value(i + IntType(1))), ObjType(obj_timeline, tl)->part_joints_bone_matrix.Value(i));
						}
					}
					
				}
				
				if (global::tl_edit != null_ && global::tl_edit != cam && ObjType(obj_view, view)->gizmos > 0)
				{
					BoolType vis = idBool(global::tl_edit, render_visible);
					idVec(global::tl_edit, world_pos_2d) = view_shape_project(idVar(global::tl_edit, world_pos));
					idBool(global::tl_edit, world_pos_2d_error) = (global::point3D_project_error || idVec(global::tl_edit, world_pos_2d).Real(X_) < IntType(0) || idVec(global::tl_edit, world_pos_2d).Real(Y_) < IntType(0) || idVec(global::tl_edit, world_pos_2d).Real(X_) >= sVar(content_width) || idVec(global::tl_edit, world_pos_2d).Real(Y_) >= sVar(content_height));
					if (vis)
					{
						sReal(view_control_ratio) = IntType(1);
						if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_SCA) && (sBool(setting_tool_scale) || sBool(setting_tool_transform)))
							view_control_scale(self, view);
						if (idArr(global::tl_edit, value_type).Value(e_value_type_CAMERA) && idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE) > 0)
							view_control_camera(self, view);
						if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_POS) && (sVar(setting_tool_move) > 0 || sBool(setting_tool_transform)))
							view_control_move(self, view);
						if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_ROT) && (sBool(setting_tool_rotate) || sBool(setting_tool_transform)))
							view_control_rotate(self, view);
						if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_BEND) && sBool(setting_tool_bend))
							view_control_bend(self, view);
						ObjType(obj_view, view)->control_mouseon_last = ObjType(obj_view, view)->control_mouseon;
						ObjType(obj_view, view)->control_mouseon = null_;
						if (sVar(window_busy) == /*"rendercontrol"*/ STR(31) && sInt(view_control_edit_view) == view)
							app_mouse_wrap(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
						if (!idBool(global::tl_edit, world_pos_2d_error) && idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_POS))
							draw_circle_ext(idVec(global::tl_edit, world_pos_2d).Real(X_) + IntType(1), idVec(global::tl_edit, world_pos_2d).Real(Y_) + IntType(1), IntType(6), false, IntType(64), c_white, IntType(1));
					}
				}
				gpu_set_blendmode_ext(bm_src_color, bm_one);
				draw_box(IntType(0), IntType(0), global::render_width, global::render_height, false, c_black, IntType(1));
				gpu_set_blendmode(bm_normal);
			}
				surface_reset_target();
			}
		}
		if (sInt(place_tl) != null_)
			ObjType(obj_view, view)->surface_select = render_select(self, e_render_mode_PLACE, ObjType(obj_view, view)->surface_select);
		ObjType(obj_view, view)->surface = render_done();
		global::render_lights = true;
		global::render_particles = true;
	}
	
	RealType window_draw(ScopeAny self)
	{
		switch ((IntType)window_get_current())
		{
			case e_window_MAIN:
			{
				if (sStr(window_state) == /*"load_assets"*/ STR(79))
				{
					window_draw_load_assets(self);
					return IntType(0);
				}
				if (sStr(window_state) == /*"new_assets"*/ STR(78))
				{
					window_draw_new_assets(self);
					return IntType(0);
				}
				if (sStr(window_state) == /*"export_movie"*/ STR(49) || sStr(window_state) == /*"export_image"*/ STR(56))
				{
					window_draw_export(self);
					return IntType(0);
				}
				if (sStr(window_state) == /*"startup"*/ STR(25))
				{
					window_draw_startup(self);
					window_draw_cover();
				}
				else
					if (sStr(window_state) == /*"world_import"*/ STR(2680))
					{
						window_draw_world_import(self);
						toolbar_draw(self);
						shortcut_bar_draw(self);
						if (sInt(menu_popup) == null_ && sInt(popup) > 0)
							menu_draw(self);
						window_draw_cover();
					}
					else
					{
						panel_area_draw(self);
						toolbar_draw(self);
						shortcut_bar_draw(self);
						bench_draw(self);
						if (sInt(menu_popup) == null_ && sInt(popup) > 0)
							menu_draw(self);
						window_draw_cover();
						window_draw_timeline_move(self);
					}
				
				
				window_draw_toasts(self);
				popup_draw(self);
				break;
			}
			
			case e_window_VIEW_SECOND:
			{
				view_draw(self, sInt(view_second));
				if (sInt(menu_popup) == null_ && sInt(popup) > 0)
					menu_draw(self);
				window_set_caption(ObjType(obj_view, sInt(view_second))->title + /*" - Mine-imator"*/ STR(689));
				break;
			}
			
			case e_window_TIMELINE:
			{
				idArr(sInt(panel_window_obj), tab_list)[IntType(0)] = sVar(timeline);
				idInt(sInt(panel_window_obj), tab_list_amount) = IntType(1);
				panel_draw(self, sInt(panel_window_obj));
				if (sInt(menu_popup) == null_ && sInt(popup) > 0)
					menu_draw(self);
				window_set_caption(text_get({ /*"tabtimeline"*/ STR(3148) }) + /*" - Mine-imator"*/ STR(689));
				break;
			}
			
		}
		
		menu_settings_draw(self);
		if (!(sInt(menu_popup) == null_ && sInt(popup) > 0))
			menu_draw(self);
		context_menu_draw(self);
		tip_draw(self);
		debug_info_draw(self);
		return 0.0;
	}
	
	void window_draw_cover()
	{
		if (global::_app->popup_block_ani > IntType(0))
			draw_box(IntType(0), IntType(0), global::_app->window_width, global::_app->window_height, false, c_black, ease(global::_app->popup_block_ani_ease, global::_app->popup_block_ani) * 0.45);
	}
	
	RealType window_draw_export(ScopeAny self)
	{
		VarType totalframes, totalsamples;
		RealType usesamples, perc;
		RealType framex, framey;
		VarType framew, frameh;
		RealType timeleftsecs, timeleftmins, timelefthours;
		VarType timeleftstr;
		if (!export_update(self))
			return IntType(0);
		if (sStr(window_state) == /*"export_movie"*/ STR(49))
		{
			usesamples = ObjType(obj_popup, sInt(popup_exportmovie))->high_quality;
			totalframes = ceil(((sVar(exportmovie_marker_end) - sVar(exportmovie_marker_start)) / sVar(project_tempo)) * ObjType(obj_popup, sInt(popup_exportmovie))->framespersecond);
			if (usesamples > 0)
				totalsamples = totalframes * sVar(project_render_samples);
			else
				totalsamples = totalframes;
			
		}
		else
		{
			usesamples = ObjType(obj_popup, sInt(popup_exportimage))->high_quality;
			if (usesamples > 0)
				totalframes = sVar(project_render_samples);
			else
				totalframes = IntType(1);
			
			totalsamples = totalframes;
		}
		
		perc = sReal(export_sample) / totalsamples;
		sVar(content_width) = floor(sReal(window_width) * 0.5);
		sVar(content_height) = min({ IntType(500), floor(sReal(window_height) * 0.5) });
		sVar(content_x) = floor(sReal(window_width) / 2.0 - (RealType)sVar(content_width) / 2.0);
		sVar(content_y) = floor(sReal(window_height) / 2.0 - (RealType)sVar(content_height) / 2.0);
		draw_clear(global::c_level_middle);
		draw_pattern(IntType(0), IntType(0), sReal(window_width), sReal(window_height));
		framew = sVar(content_width);
		frameh = sVar(content_height);
		framex = floor(sReal(window_width) / 2.0 - (RealType)framew / 2.0);
		framey = floor(sReal(window_height) / 2.0 - (RealType)frameh / 2.0);
		gpu_set_tex_filter(true);
		draw_surface_box_center(sVar(export_surface), framex, framey, framew, frameh);
		gpu_set_tex_filter(false);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = sReal(window_height);
		timeleftsecs = max({ IntType(0), ceil((RealType)(sVar(exportmovie_start) + (current_time() - sVar(exportmovie_start)) / perc - current_time()) / 1000.0) });
		timeleftmins = (IntType)(timeleftsecs / IntType(60));
		timelefthours = (IntType)(timeleftmins / IntType(60));
		timeleftsecs = mod(timeleftsecs, IntType(60));
		timeleftmins = mod(timeleftmins, IntType(60));
		timeleftstr = /*""*/ STR(0);
		if (timelefthours > IntType(0))
			timeleftstr += text_get({ ((timelefthours == IntType(1)) ? /*"exporttimelefthour"*/ STR(3875) : /*"exporttimelefthours"*/ STR(3876)), string(timelefthours) }) + /*", "*/ STR(1026);
		if (timeleftmins > IntType(0))
			timeleftstr += text_get({ ((timeleftmins == IntType(1)) ? /*"exporttimeleftminute"*/ STR(3877) : /*"exporttimeleftminutes"*/ STR(3878)), string(timeleftmins) }) + /*" "*/ STR(17) + text_get({ /*"exporttimeleftand"*/ STR(3879) }) + /*" "*/ STR(17);
		timeleftstr += text_get({ ((timeleftsecs == IntType(1)) ? /*"exporttimeleftsecond"*/ STR(3880) : /*"exporttimeleftseconds"*/ STR(3881)), string(timeleftsecs) });
		draw_label(self, { text_get({ /*"exporttimeleft"*/ STR(3882), timeleftstr }), framex + (RealType)framew / 2.0, framey + frameh + IntType(33), fa_center, fa_bottom, global::c_text_secondary, global::a_text_secondary, sVar(font_label_big) });
		VarType loadtext, loadw;
		RealType sw, sh;
		loadtext = text_get({ /*"exportloading"*/ STR(3883), string(floor(perc * IntType(100))) });
		loadw = framew;
		sw = surface_get_width((IntType)(sVar(export_surface)));
		sh = surface_get_height((IntType)(sVar(export_surface)));
		if (sw / sh < (RealType)framew / frameh)
		{
			RealType scale = (RealType)frameh / sh;
			loadw = floor(sw * scale);
		}
		VarType samplecount = /*""*/ STR(0);
		if (usesamples > 0)
			samplecount = text_get({ /*"exportsamples"*/ STR(3884), string(max({ global::render_samples, IntType(1) })), string(sVar(project_render_samples)) });
		VarType text = /*""*/ STR(0);
		if (sStr(window_state) == /*"export_movie"*/ STR(49))
			text = text_get({ /*"exportframe"*/ STR(3885), string(sReal(exportmovie_frame)), string(totalframes) }) + ((usesamples > 0) ? (/*" ("*/ STR(1113) + samplecount + /*")"*/ STR(1089)) : /*""*/ STR(0));
		else
			if (usesamples > 0)
				text = samplecount;
		
		draw_loading_bar(self, (framex + (RealType)framew / 2.0) - (RealType)loadw / 2.0, framey + frameh + IntType(40), loadw, IntType(8), perc, text, /*""*/ STR(0));
		window_set_caption(loadtext + /*" - Mine-imator"*/ STR(689));
		draw_label(self, { sStr(window_state) == /*"export_movie"*/ STR(49) ? text_get({ /*"exportmovietitle"*/ STR(3886) }) : text_get({ /*"exportimagetitle"*/ STR(3887) }), framex + (RealType)framew / 2.0, framey - IntType(35), fa_center, fa_bottom, global::c_accent, IntType(1), sInt(font_heading_big) });
		draw_label(self, { text_get({ /*"exportstop"*/ STR(3888) }), framex + (RealType)framew / 2.0, framey - IntType(16), fa_center, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_caption) });
		return 0.0;
	}
	
	RealType window_draw_load_assets(ScopeAny self)
	{
		if (!minecraft_assets_load())
		{
			error(/*"errorloadassets"*/ STR(97));
			game_end();
			return IntType(0);
		}
		draw_clear(global::c_level_top);
		if (global::load_assets_stage == /*"done"*/ STR(1715))
		{
			global::load_assets_stage = /*"exit"*/ STR(3889);
			return IntType(0);
		}
		else
			if (global::load_assets_stage == /*"exit"*/ STR(3889))
			{
				sStr(window_state) = /*"startup"*/ STR(25);
				app_startup_interface(self);
				instance_deactivate_object(ID_obj_deactivate);
				return IntType(0);
			}
		
		RealType xoff, yoff;
		xoff = floor((sReal(window_width) / 2.0) - (740.0 / 2.0));
		yoff = floor((sReal(window_height) / 2.0) - (450.0 / 2.0));
		sVar(content_x) = IntType(28);
		sVar(content_y) = IntType(28);
		sVar(content_width) = sReal(window_width) - IntType(56);
		sVar(content_height) = sReal(window_height) - IntType(56);
		draw_box(xoff, yoff, IntType(740), IntType(450), false, global::c_level_middle, IntType(1));
		IntType pattern = (sInt(setting_theme) == global::theme_light ? IntType(0) : IntType(1));
		draw_sprite_ext(ID_spr_pattern_left, pattern, (IntType)(xoff), (IntType)(yoff), 138.0 / sprite_get_width(ID_spr_pattern_left), 450.0 / sprite_get_height(ID_spr_pattern_left), 0.0, c_white, 1.0);
		draw_sprite(ID_spr_load_assets, IntType(0), (IntType)(xoff + IntType(95)), (IntType)(yoff + IntType(207)));
		draw_label(self, { /*"Mine-imator "*/ STR(3890) + string(mineimator_version), xoff + IntType(95), yoff + IntType(289), fa_middle, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_heading) });
		draw_label(self, { string(string_upper(mineimator_version_sub)), xoff + IntType(95), yoff + IntType(289) + IntType(12), fa_middle, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_subheading) });
		draw_label(self, { string(string_upper(mineimator_version_extra)), xoff + IntType(95), yoff + IntType(289) + IntType(26), fa_middle, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		draw_label(self, { text_get({ /*"startuploadingassets"*/ STR(3891), global::_app->setting_minecraft_assets_version, floor(global::load_assets_progress * IntType(100)) }), xoff + IntType(95), yoff + IntType(437), fa_middle, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_caption) });
		if (global::load_assets_splash != null_)
			draw_sprite(global::load_assets_splash, IntType(0), (IntType)(xoff + IntType(190)), (IntType)(yoff));
		else
			draw_box(xoff + IntType(190), yoff, IntType(550), IntType(450), false, global::c_level_bottom, IntType(1));
		
		if (global::load_assets_splash == null_ || sprite_get_width(global::load_assets_splash) == IntType(550))
			draw_gradient(xoff + IntType(190), yoff, shadow_size, IntType(450), c_black, shadow_alpha, IntType(0), IntType(0), shadow_alpha);
		if (global::load_assets_credits != /*""*/ STR(0))
			draw_label(self, { global::load_assets_credits, xoff + IntType(95), yoff + IntType(289) + IntType(31), fa_middle, fa_top, global::c_text_tertiary, global::a_text_tertiary, sVar(font_credits) });
		draw_box(xoff, yoff + IntType(450) - IntType(8), IntType(740), IntType(8), false, global::c_level_top, .8);
		draw_box(xoff, yoff + IntType(450) - IntType(8), IntType(740) * global::load_assets_progress, IntType(8), false, global::c_accent, IntType(1));
		draw_outline(xoff, yoff, IntType(740), IntType(450), IntType(1), global::c_border, global::a_border, true);
		draw_dropshadow(self, xoff, yoff, IntType(740), IntType(450), c_black, IntType(1));
		global::current_step++;
		return 0.0;
	}
	
	RealType window_draw_new_assets(ScopeAny self)
	{
		draw_clear(global::c_level_top);
		sVar(content_width) = IntType(540);
		sVar(content_height) = IntType(480);
		sVar(content_x) = floor((sReal(window_width) / 2.0) - (RealType)sVar(content_width) / 2.0);
		sVar(content_y) = floor((sReal(window_height) / 2.0) - (RealType)sVar(content_height) / 2.0);
		sBool(content_mouseon) = true;
		sVar(dx) = sVar(content_x);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = sVar(content_height);
		draw_outline(sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), global::c_border, global::a_border, true);
		draw_dropshadow(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh), c_black, IntType(1));
		if (sInt(new_assets_image_texture) != null_)
		{
			clip_begin(sVar(dx), sVar(dy), sVar(dw), IntType(200));
			RealType scale = ((RealType)sVar(dw) / sprite_get_width(sInt(new_assets_image_texture)));
			gpu_set_tex_filter(true);
			draw_sprite_ext(sInt(new_assets_image_texture), IntType(0), (IntType)(sVar(dx)), (IntType)(sVar(dy)), scale, scale, 0.0, c_white, 1.0);
			gpu_set_tex_filter(false);
			clip_end();
		}
		draw_label(self, { text_get({ /*"newassetstitle"*/ STR(3892), sStr(new_assets_version) }), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy) + IntType(227), fa_center, fa_bottom, global::c_accent, IntType(1), sInt(font_heading) });
		draw_label(self, { text_get({ /*"newassetssubtitle"*/ STR(3893) }), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy) + IntType(244), fa_center, fa_bottom, global::c_text_main, global::a_text_main, sInt(font_value) });
		sVar(dy) += IntType(264);
		sVar(dx) += IntType(12);
		sVar(dw) -= 24.0;
		if (sStr(new_assets_stage) == /*"download"*/ STR(104))
		{
			tab_control_loading(self);
			draw_loading_bar(self, sVar(dx), sVar(dy), sVar(dw), IntType(8), sReal(new_assets_download_progress), text_get({ /*"newassetsdownloading"*/ STR(3894) }));
			tab_next(self);
		}
		else
		{
			draw_set_font(sInt(font_button));
			IntType capwid = string_width(text_get({ /*"newassetsdownload"*/ STR(3895) })) + button_padding;
			if (draw_button_label(self, /*"newassetsdownload"*/ STR(3895), sVar(dx) + sVar(dw), (sVar(content_y) + sVar(content_height)) - IntType(44), null_, null_, e_button_PRIMARY, null_, fa_right))
			{
				if (sVar(new_assets_format) > minecraft_assets_format)
				{
					if (question(text_get({ /*"questionassetsnewer"*/ STR(3896) })))
					{
						open_url(link_download);
						game_end();
						return IntType(0);
					}
				}
				else
				{
					sStr(new_assets_stage) = /*"download"*/ STR(104);
					sInt(http_download_assets_file) = http_get_file(link_assets + sStr(new_assets_version) + /*".midata"*/ STR(96), mc_file_directory + sStr(new_assets_version) + /*".midata"*/ STR(96));
				}
				
			}
			if (draw_button_label(self, /*"newassetslater"*/ STR(3897), (sVar(dx) + sVar(dw)) - (capwid + IntType(8)), (sVar(content_y) + sVar(content_height)) - IntType(44), null_, null_, e_button_SECONDARY, null_, fa_right))
			{
				sBool(tip_show) = false;
				if (!minecraft_assets_load_startup(self))
				{
					error(/*"errorloadassets"*/ STR(97));
					game_end();
					return false;
				}
			}
			VarType scrolly = sVar(dy);
			sVar(dh) = ((sVar(content_y) + sVar(content_height)) - IntType(60)) - sVar(dy);
			sVar(dy_start) = sVar(dy);
			draw_outline(sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), global::c_border, global::a_border, true);
			clip_begin(sVar(dx) + IntType(1), sVar(dy) + IntType(1), sVar(dw) - IntType(2), sVar(dh) - IntType(2));
			sVar(dx) += IntType(8);
			sVar(dw) -= 16.0;
			sVar(dy) -= ObjType(obj_scrollbar, sInt(new_assets_scroll))->value;
			sVar(dy_start) = sVar(dy);
			sVar(dy) += IntType(16);
			draw_label(self, { text_get({ /*"newassetschangelog"*/ STR(3898) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
			sVar(dy) += IntType(20);
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(new_assets_changes_lines))); i++)
			{
				VarType text = sArr(new_assets_changes_lines).Value(i);
				if (string_copy(text, IntType(1), IntType(2)) == /*"- "*/ STR(3899))
				{
					text = string_delete(text, IntType(1), IntType(2));
					draw_label(self, { text, sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
					sVar(dy) += IntType(20);
				}
				else
				{
					if (string_copy(text, IntType(1), IntType(2)) == /*"* "*/ STR(3900))
						text = /*"• "*/ STR(3901) + string_delete(text, IntType(1), IntType(2));
					draw_label(self, { text, sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_main, global::a_text_main, sInt(font_value) });
					sVar(dy) += IntType(17);
				}
				
			}
			clip_end();
			sStr(window_scroll_focus) = string(sInt(new_assets_scroll));
			scrollbar_draw(self, sInt(new_assets_scroll), e_scroll_VERTICAL, sVar(dx) + sVar(dw) - IntType(8), scrolly + IntType(8), sVar(dh) - IntType(16), (sVar(dy) - sVar(dy_start) - IntType(21)));
		}
		
		return 0.0;
	}
	
}
