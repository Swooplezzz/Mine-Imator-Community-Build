/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.07.28 11:53:44 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	BoolType builder_read_schematic(Scope<obj_builder> self, VarType map)
	{
		if (!ds_map_valid(map))
		{
			log({ /*"Schematic error"*/ STR(976), /*"Not a schematic file"*/ STR(977) });
			return false;
		}
		self->builder_scenery_legacy = is_undefined(DsMap(map).Value(/*"Palette"*/ STR(978)));
		self->build_size_x = DsMap(map).Value(/*"Width"*/ STR(979));
		self->build_size_y = DsMap(map).Value(/*"Length"*/ STR(980));
		self->build_size_z = DsMap(map).Value(/*"Height"*/ STR(981));
		log({ /*"Size"*/ STR(55), string(self->build_size_x) + /*" x "*/ STR(982) + string(self->build_size_y) + /*" x "*/ STR(982) + string(self->build_size_z) });
		if (is_undefined(self->build_size_x) || is_undefined(self->build_size_y) || is_undefined(self->build_size_z))
		{
			log({ /*"Schematic error"*/ STR(976), /*"Size not fully defined"*/ STR(983) });
			return false;
		}
		if (self->build_size_x <= IntType(0) || self->build_size_y <= IntType(0) || self->build_size_z <= IntType(0))
		{
			log({ /*"Schematic error"*/ STR(976), /*"Size cannot be 0"*/ STR(984) });
			return false;
		}
		if (!self->builder_scenery_legacy)
		{
			VarType version = DsMap(map).Value(/*"Version"*/ STR(985));
			if (is_undefined(version))
			{
				log({ /*"Schematic error"*/ STR(976), /*"Version not available"*/ STR(986) });
				return false;
			}
			log({ /*"Version"*/ STR(985), DsMap(map).Value(/*"Version"*/ STR(985)) });
			if (version > IntType(1))
			{
				log({ /*"Schematic error"*/ STR(976), /*"Unsupported format, version too high"*/ STR(987) });
				return false;
			}
			VarType palettemap = DsMap(map).Value(/*"Palette"*/ STR(978));
			if (!ds_map_valid(palettemap))
			{
				log({ /*"Schematic error"*/ STR(976), /*"Palette not found"*/ STR(988) });
				return false;
			}
			for (IntType i = IntType(0); i < ds_map_size((IntType)(palettemap)); i++)
			{
				self->sch_palette_blocks[i] = null_;
				self->sch_palette_stateids[i] = null_;
				self->sch_palette_waterlogged[i] = false;
			}
			VarType key = ds_map_find_first((IntType)(palettemap));
			while (!is_undefined(key))
			{
				if (!string_contains(key, /*"_NBT_"*/ STR(989)))
				{
					VarType index;
					IntType bracketindex;
					index = DsMap(palettemap).Value(key);
					bracketindex = string_pos(/*"["*/ STR(990), key);
					if (bracketindex > IntType(0))
					{
						StringType mcid = string_copy(key, IntType(1), (IntType)(bracketindex - IntType(1)));
						StringType varstr = string_copy(key, bracketindex + IntType(1), (IntType)(string_length(key) - IntType(1) - bracketindex));
						VarType block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(mcid);
						if (!is_undefined(block))
						{
							ArrType vars = ArrType();
							if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid)))
								state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid));
							state_vars_add(VarType::CreateRef(vars), string_get_state_vars(varstr));
							self->sch_palette_blocks[index] = block;
							self->sch_palette_stateids[index] = block_get_state_id(block, vars);
							if (state_vars_get_value(vars, /*"waterlogged"*/ STR(830)) != /*"false"*/ STR(773))
								if (ObjType(obj_block, block)->waterlogged > 0 || state_vars_get_value(vars, /*"waterlogged"*/ STR(830)) == /*"true"*/ STR(772))
									self->sch_palette_waterlogged[index] = true;
						}
					}
					else
						if (!is_undefined(DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(key)))
						{
							VarType block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(key);
							self->sch_palette_blocks[index] = block;
							if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(key)))
								self->sch_palette_stateids[index] = block_get_state_id(block, DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(key));
							else
								self->sch_palette_stateids[index] = IntType(0);
							
							self->sch_palette_waterlogged[index] = ObjType(obj_block, block)->waterlogged;
						}
					
				}
				key = ds_map_find_next((IntType)(palettemap), key);
			}
			
			self->sch_blockdata_array = DsMap(map).Value(/*"BlockData"*/ STR(991));
			if (is_undefined(self->sch_blockdata_array))
			{
				log({ /*"Schematic error"*/ STR(976), /*"BlockData array not found"*/ STR(992) });
				return false;
			}
			self->sch_blockdata_ints = (DsMap(map).Value(/*"BlockData_NBT_type"*/ STR(993)) == e_nbt_TAG_INT_ARRAY);
			debug({ /*"blockdataints"*/ STR(994), self->sch_blockdata_ints });
			VarType metadata = DsMap(map).Value(/*"Metadata"*/ STR(995));
			if (ds_map_valid(metadata))
				self->file_map = DsMap(metadata).Value(/*"FromMap"*/ STR(996));
		}
		else
		{
			self->sch_legacy_blocksarray = DsMap(map).Value(/*"Blocks"*/ STR(997));
			if (is_undefined(self->sch_legacy_blocksarray))
			{
				log({ /*"Schematic error"*/ STR(976), /*"Blocks array not found"*/ STR(998) });
				return false;
			}
			self->sch_legacy_dataarray = DsMap(map).Value(/*"Data"*/ STR(999));
			if (is_undefined(self->sch_legacy_dataarray))
			{
				log({ /*"Schematic error"*/ STR(976), /*"Data array not found"*/ STR(1000) });
				return false;
			}
			self->file_map = DsMap(map).Value(/*"FromMap"*/ STR(996));
		}
		
		if (is_undefined(self->file_map))
			self->file_map = /*""*/ STR(0);
		self->sch_tileentity_list = DsMap(map).Value(/*"TileEntities"*/ STR(1001));
		return true;
	}
	
	BoolType builder_read_schematic_nbt(ScopeAny self, VarType structuremap)
	{
		VarType structureversion, sizemap;
		sBool(scenery_structure) = true;
		structureversion = IntType(1);
		if (!is_undefined(DsMap(structuremap).Value(/*"DataVersion"*/ STR(1002))))
			structureversion = DsMap(structuremap).Value(/*"DataVersion"*/ STR(1002));
		if (structureversion < IntType(2000))
		{
			log({ /*"Structure error"*/ STR(1003), /*"Unsupported format, version too low"*/ STR(1004) });
			return false;
		}
		sizemap = DsMap(structuremap).Value(/*"size"*/ STR(1005));
		ObjType(obj_builder, global::mc_builder)->build_size_x = DsList(sizemap).Value(X_);
		ObjType(obj_builder, global::mc_builder)->build_size_y = DsList(sizemap).Value(Z_);
		ObjType(obj_builder, global::mc_builder)->build_size_z = DsList(sizemap).Value(Y_);
		log({ /*"Size"*/ STR(55), ArrType::From({ ObjType(obj_builder, global::mc_builder)->build_size_x, ObjType(obj_builder, global::mc_builder)->build_size_y, ObjType(obj_builder, global::mc_builder)->build_size_z }) });
		if (ObjType(obj_builder, global::mc_builder)->build_size_x <= IntType(0) || ObjType(obj_builder, global::mc_builder)->build_size_y <= IntType(0) || ObjType(obj_builder, global::mc_builder)->build_size_z <= IntType(0))
		{
			log({ /*"Structure error"*/ STR(1003), /*"Size cannot be 0"*/ STR(984) });
			return false;
		}
		VarType paletteslist, palettelist;
		paletteslist = DsMap(structuremap).Value(/*"palettes"*/ STR(1006));
		if (ds_list_valid(paletteslist))
		{
			sInt(scenery_palette_size) = ds_list_size((IntType)(paletteslist));
			palettelist = DsList(paletteslist).Value(mod(sVar(scenery_palette), sInt(scenery_palette_size)));
		}
		else
		{
			palettelist = DsMap(structuremap).Value(/*"palette"*/ STR(1007));
			if (!ds_list_valid(palettelist))
			{
				log({ /*"Structure error"*/ STR(1003), /*"Palette not found"*/ STR(988) });
				return false;
			}
		}
		
		ArrType paletteblocks, palettestateids, palettewaterlogged;
		for (IntType i = IntType(0); i < ds_list_size((IntType)(palettelist)); i++)
		{
			paletteblocks[i] = null_;
			palettestateids[i] = null_;
			palettewaterlogged[i] = false;
		}
		for (IntType i = IntType(0); i < ds_list_size((IntType)(palettelist)); i++)
		{
			VarType block, blockmap, mcid, propertiesmap, propertiesarr, key;
			blockmap = DsList(palettelist).Value(i);
			mcid = DsMap(blockmap).Value(/*"Name"*/ STR(1008));
			block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(mcid);
			propertiesarr = null_;
			if (!is_undefined(block))
			{
				ArrType vars = ArrType();
				if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid)))
					state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid));
				propertiesmap = DsMap(blockmap).Value(/*"Properties"*/ STR(972));
				if (!is_undefined(propertiesmap))
				{
					key = ds_map_find_first((IntType)(propertiesmap));
					IntType index = IntType(0);
					for (IntType j = IntType(0); j < ds_map_size((IntType)(propertiesmap)); j++)
					{
						if (!string_contains(key, /*"_NBT_"*/ STR(989)))
						{
							propertiesarr[index * IntType(2)] = key;
							propertiesarr[index * IntType(2) + IntType(1)] = DsMap(propertiesmap).Value(key);
							index++;
						}
						key = ds_map_find_next((IntType)(propertiesmap), key);
					}
				}
				state_vars_add(VarType::CreateRef(vars), propertiesarr);
				paletteblocks[i] = block;
				palettestateids[i] = block_get_state_id(block, vars);
				if (state_vars_get_value(vars, /*"waterlogged"*/ STR(830)) != /*"false"*/ STR(773))
					if (ObjType(obj_block, block)->waterlogged > 0 || state_vars_get_value(vars, /*"waterlogged"*/ STR(830)) == /*"true"*/ STR(772))
						palettewaterlogged[i] = true;
			}
		}
		VarType blocklist = DsMap(structuremap).Value(/*"blocks"*/ STR(1009));
		if (!ds_list_valid(blocklist))
		{
			log({ /*"Structure error"*/ STR(1003), /*"Block list not found"*/ STR(1010) });
			return false;
		}
		withOne (obj_builder, global::mc_builder, self->id)
		{
			debug_timer_start();
			builder_start(self);
			for (IntType i = IntType(0); i < ds_list_size((IntType)(blocklist)); i++)
			{
				VarType blockmap, pos, state, block, stateid, entity, blocknbt;
				RealType index;
				IntType waterlogged;
				blockmap = DsList(blocklist).Value(i);
				pos = DsMap(blockmap).Value(/*"pos"*/ STR(1011));
				state = DsMap(blockmap).Value(/*"state"*/ STR(1012));
				index = DsList(pos).Value(Y_) * DsList(sizemap).Value(X_) * DsList(sizemap).Value(Z_) + DsList(pos).Value(Z_) * DsList(sizemap).Value(X_) + DsList(pos).Value(X_);
				block = paletteblocks.Value(state);
				stateid = palettestateids.Value(state);
				waterlogged = palettewaterlogged.Value(state);
				entity = null_;
				random_set_seed((IntType)(index));
				if (idVar(self.otherId, scenery_integrity_invert) > 0)
				{
					if (random(1.0) < idVar(self.otherId, scenery_integrity))
						continue;
				}
				else
				{
					if (random(1.0) > idVar(self.otherId, scenery_integrity))
						continue;
				}
				
				blocknbt = DsMap(blockmap).Value(/*"nbt"*/ STR(1013));
				if (!is_undefined(blocknbt))
				{
					VarType finalstate, script;
					finalstate = DsMap(blocknbt).Value(/*"final_state"*/ STR(1014));
					if (!is_undefined(finalstate))
					{
						block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(finalstate);
						if (is_undefined(block))
							continue;
						ArrType vars = ArrType();
						if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(finalstate)))
							state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(finalstate));
						stateid = block_get_state_id(block, vars);
					}
					else
						entity = DsMap(blocknbt).Value(/*"id"*/ STR(82));
					
				}
				if (block != null_)
				{
					buffer_poke(self->block_obj, (IntType)(index * IntType(2)), buffer_u16, ObjType(obj_block, block)->block_id);
					buffer_poke(self->block_state_id, (IntType)(index * IntType(2)), buffer_u16, (IntType)(stateid));
					buffer_poke(self->block_waterlogged, (IntType)(index), buffer_u8, waterlogged);
				}
				if (entity != null_)
				{
					self->script = asset_get_index(/*"block_tile_entity_"*/ STR(1015) + string_replace(string_lower(entity), /*"minecraft:"*/ STR(833), /*""*/ STR(0)));
					if (self->script > -IntType(1))
					{
						self->build_pos_x = DsList(pos).Value(X_);
						self->build_pos_y = DsList(pos).Value(Z_);
						self->build_pos_z = DsList(pos).Value(Y_);
						self->build_pos = self->build_pos_z * self->build_size_xy + self->build_pos_y * self->build_size_x + self->build_pos_x;
						self->block_current = builder_get_block(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
						self->block_state_id_current = builder_get_state_id(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
						script_execute(ScopeAny(self), { self->script, blocknbt });
					}
				}
			}
		}
		
		debug_timer_stop(/*"res_load_scenery, Parse blocks"*/ STR(1016));
		return true;
	}
	
	void builder_read_schematic_tile_entities(Scope<obj_builder> self)
	{
		if (ds_list_valid(self->sch_tileentity_list))
		{
			builder_spawn_threads(self, IntType(1));
			withOne (obj_builder_thread, DsList(self->thread_list).Value(IntType(0)), self->id)
			{
				debug_timer_start();
				for (IntType i = IntType(0); i < ds_list_size((IntType)(ObjType(obj_builder, self.otherId)->sch_tileentity_list)); i++)
				{
					VarType entity, eid, ex, ey, ez;
					entity = DsList(ObjType(obj_builder, self.otherId)->sch_tileentity_list).Value(i);
					if (!self->builder_scenery_legacy)
					{
						eid = DsMap(entity).Value(/*"Id"*/ STR(971));
						VarType poslist = DsMap(entity).Value(/*"Pos"*/ STR(1018));
						buffer_seek(global::buffer_current, buffer_seek_start, (IntType)(poslist));
						ex = buffer_read_int_be();
						ez = buffer_read_int_be();
						ey = buffer_read_int_be();
					}
					else
					{
						eid = DsMap(entity).Value(/*"id"*/ STR(82));
						ex = DsMap(entity).Value(/*"x"*/ STR(845));
						ey = DsMap(entity).Value(/*"z"*/ STR(846));
						ez = DsMap(entity).Value(/*"y"*/ STR(828));
					}
					
					if (is_string(eid))
					{
						VarType script = asset_get_index(/*"block_tile_entity_"*/ STR(1015) + string_replace(string_lower(eid), /*"minecraft:"*/ STR(833), /*""*/ STR(0)));
						if (script > -IntType(1))
						{
							self->build_pos_x = ex;
							self->build_pos_y = ey;
							self->build_pos_z = ez;
							self->build_pos = self->build_pos_z * self->build_size_xy + self->build_pos_y * self->build_size_x + self->build_pos_x;
							self->block_current = builder_get_block(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
							self->block_state_id_current = builder_get_state_id(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
							script_execute(ScopeAny(self), { script, entity });
						}
					}
				}
				debug_timer_stop(/*"Parse Tile Entities"*/ STR(1019));
			}
			
			builder_combine_threads(self);
		}
	}
	
	VarType builder_set_model(ScopeAny self, BoolType ongeneration)
	{
		sInt(block_current) = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		if (sInt(block_current) == null_)
			return IntType(0);
		sReal(block_state_id_current) = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		VarType model, ret;
		model = null_;
		ret = IntType(0);
		if (idInt(sInt(block_current), set_script) > -IntType(1))
		{
			if (!(idVar(sInt(block_current), require_models) > 0) || ongeneration)
			{
				sBool(build_edge_xp) = (sInt(build_pos_x) == sInt(build_size_x) - IntType(1));
				sBool(build_edge_xn) = (sInt(build_pos_x) == IntType(0));
				sBool(build_edge_yp) = (sInt(build_pos_y) == sInt(build_size_y) - IntType(1));
				sBool(build_edge_yn) = (sInt(build_pos_y) == IntType(0));
				sBool(build_edge_zp) = (sInt(build_pos_z) == sInt(build_size_z) - IntType(1));
				sBool(build_edge_zn) = (sInt(build_pos_z) == IntType(0));
				ret = script_execute(self, { idInt(sInt(block_current), set_script) });
				if (ret != IntType(0))
					model = ret;
			}
			else
				ret = null_;
			
		}
		BoolType tlvalid = (ObjType(obj_builder, global::mc_builder)->block_tl_add == null_ || ObjType(obj_builder, global::mc_builder)->block_tl_add > 0) && idVar(sInt(block_current), timeline) > 0 && sInt(block_tl_map) != null_ && ret != null_;
		if (tlvalid && !(idVar(sInt(block_current), model_double) > 0))
			DsMap(sInt(block_tl_map))[sInt(build_pos)] = ArrType::From({ sInt(block_current), sReal(block_state_id_current) });
		else
		{
			if (tlvalid && idVar(sInt(block_current), model_double) > 0)
				DsMap(sInt(block_tl_map))[sInt(build_pos)] = ArrType::From({ sInt(block_current), sReal(block_state_id_current) });
			if (ret == IntType(0) && idVar(sInt(block_current), state_id_model_obj) != null_)
			{
				VarType modelobj = idVar(sInt(block_current), state_id_model_obj).Value(sReal(block_state_id_current));
				if (modelobj != null_ && !is_undefined(modelobj))
				{
					VarType brightness, offset, offsetxy;
					brightness = idVar(sInt(block_current), state_id_emissive).Value(sReal(block_state_id_current));
					offset = idVar(sInt(block_current), state_id_random_offset).Value(sReal(block_state_id_current));
					offsetxy = idVar(sInt(block_current), state_id_random_offset_xy).Value(sReal(block_state_id_current));
					if (is_array(modelobj))
					{
						model = ArrType();
						for (IntType i = IntType(0); i < array_length(VarType::CreateRef(modelobj)); i++)
							array_add(VarType::CreateRef(model), block_get_render_model(modelobj.Value(i), brightness, offset, offsetxy));
					}
					else
						model = block_get_render_model(modelobj, brightness, offset, offsetxy);
					
				}
			}
			if (is_array(model))
				DsMap(sInt(block_render_model_multipart_map))[sInt(build_pos)] = model;
			else
				if (model != null_)
					builder_set_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z), model);
			
		}
		
		return model;
	}
	
	void builder_spawn_threads(Scope<obj_builder> self, IntType number)
	{
		for (IntType t = IntType(0); t < number; t++)
		{
			IntType thread = (new obj_builder_thread)->id;
			ObjType(obj_builder_thread, thread)->threadid = t;
			ObjType(obj_builder_thread, thread)->block_obj = self->block_obj;
			ObjType(obj_builder_thread, thread)->block_state_id = self->block_state_id;
			ObjType(obj_builder_thread, thread)->block_waterlogged = self->block_waterlogged;
			ObjType(obj_builder_thread, thread)->build_size_x = self->build_size_x;
			ObjType(obj_builder_thread, thread)->build_size_y = self->build_size_y;
			ObjType(obj_builder_thread, thread)->build_size_z = self->build_size_z;
			ObjType(obj_builder_thread, thread)->build_size_xy = self->build_size_xy;
			ObjType(obj_builder_thread, thread)->build_size_total = self->build_size_total;
			ObjType(obj_builder_thread, thread)->build_size_sqrt = self->build_size_sqrt;
			ObjType(obj_builder_thread, thread)->block_render_model = self->block_render_model;
			ObjType(obj_builder_thread, thread)->block_render_model_multipart_map = ds_int_map_create();
			ObjType(obj_builder_thread, thread)->block_multithreaded_skip = false;
			ObjType(obj_builder_thread, thread)->builder_scenery = self->builder_scenery;
			ObjType(obj_builder_thread, thread)->builder_scenery_legacy = self->builder_scenery_legacy;
			if (self->block_tl_list != null_)
				ObjType(obj_builder_thread, thread)->block_tl_map = ds_int_map_create();
			ds_list_add({ self->thread_list, thread });
		}
		if (number > IntType(1))
			thread_task_begin();
	}
	
	void builder_start(Scope<obj_builder> self)
	{
		self->build_pos = IntType(0);
		self->build_size_xy = self->build_size_x * self->build_size_y;
		self->build_size_total = self->build_size_xy * self->build_size_z;
		self->build_edges = !(global::_app->setting_scenery_remove_edges > 0 && (self->build_size_x > IntType(300) && self->build_size_y > IntType(300)) && self->build_single_block == null_);
		self->block_tl_add = false;
		self->block_multithreaded_skip = false;
		ds_map_clear(self->block_text_map);
		ds_map_clear(self->block_text_color_map);
		ds_map_clear(self->block_text_glowing_map);
		ds_map_clear(self->block_banner_color_map);
		ds_map_clear(self->block_banner_patterns_map);
		ds_map_clear(self->block_banner_pattern_colors_map);
		ds_map_clear(self->block_skull_map);
		ds_map_clear(self->block_skull_res_map);
		ds_map_clear(self->block_skull_texture_map);
		builder_create_buffers(self);
	}
	
	void builder_thread_event_create(Scope<obj_builder_thread> self)
	{
		self->threadid = IntType(0);
		self->build_size_x = IntType(0);
		self->build_size_y = IntType(0);
		self->build_size_z = IntType(0);
		self->build_size_total = IntType(0);
		self->build_size_sqrt = IntType(0);
		self->build_pos = IntType(0);
		self->build_pos_x = IntType(0);
		self->build_pos_y = IntType(0);
		self->build_pos_z = IntType(0);
		self->build_edge_xp = false;
		self->build_edge_xn = false;
		self->build_edge_yp = false;
		self->build_edge_yn = false;
		self->build_edge_zp = false;
		self->build_edge_zn = false;
		self->builder_scenery = false;
		self->builder_scenery_legacy = false;
		self->block_pos_x = IntType(0);
		self->block_pos_y = IntType(0);
		self->block_pos_z = IntType(0);
		self->block_color = null_;
		self->block_face_min_depth_xp = null_;
		self->block_face_min_depth_xn = null_;
		self->block_face_min_depth_yp = null_;
		self->block_face_min_depth_yn = null_;
		self->block_face_min_depth_zp = null_;
		self->block_face_min_depth_zn = null_;
		self->block_obj = null_;
		self->block_waterlogged = null_;
		self->block_current = IntType(0);
		self->block_state_id = null_;
		self->block_state_id_current = IntType(0);
		self->block_render_model = null_;
		self->block_render_model_multipart_map = null_;
		self->block_tl_map = null_;
		self->block_vbuffer_current = null_;
		self->block_vertex_wave = e_vertex_wave_NONE;
		self->block_vertex_wave_zmin = null_;
		self->block_vertex_wave_zmax = null_;
		self->block_vertex_emissive = IntType(0);
		self->block_vertex_subsurface = IntType(0);
		self->block_vertex_rgb = c_white;
		self->block_vertex_alpha = IntType(1);
	}
	
	void camera_control_move(ScopeAny self, VarType cam, IntType lockx, IntType locky)
	{
		RealType mx, my;
		mx = -((display_mouse_get_x() - lockx) / 8.0) * sReal(setting_look_sensitivity);
		my = -((display_mouse_get_y() - locky) / 8.0) * sReal(setting_look_sensitivity);
		display_mouse_set(lockx, locky);
		if (!(cam > 0))
		{
			RealType move, spd, spdm, xd, yd, zd;
			sVar(cam_work_angle_look_xy) += mx;
			sVar(cam_work_angle_look_z) += my;
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			if (!(sInt(cam_work_focus_tl) > 0) && (mx != IntType(0) || my != IntType(0)))
			{
				camera_work_set_focus();
				camera_work_set_angle();
			}
			move = IntType(4) * sReal(setting_move_speed) * global::delta;
			spd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			spdm = IntType(1);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->active > 0)
				spdm = sReal(setting_fast_modifier);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->active > 0)
				spdm = sReal(setting_slow_modifier);
			xd = IntType(0);
			yd = IntType(0);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->active > 0)
			{
				xd += -sin(degtorad(sVar(cam_work_angle_look_xy))) * move;
				yd += -cos(degtorad(sVar(cam_work_angle_look_xy))) * move;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->active > 0)
			{
				xd += sin(degtorad(sVar(cam_work_angle_look_xy))) * move;
				yd += cos(degtorad(sVar(cam_work_angle_look_xy))) * move;
			}
			xd += -lengthdir_x(spd, sVar(cam_work_angle_look_xy));
			yd += -lengthdir_y(spd, sVar(cam_work_angle_look_xy));
			zd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->active) * move;
			zd += (dsin(sVar(cam_work_angle_look_z))) * (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			sVec(cam_work_from).Real(X_) += xd * spdm;
			sVec(cam_work_from).Real(Y_) += yd * spdm;
			sVec(cam_work_from).Real(Z_) += zd * spdm;
			if (!(sInt(cam_work_focus_tl) > 0))
			{
				sVar(cam_work_focus)[X_] += xd * spdm;
				sVar(cam_work_focus)[Y_] += yd * spdm;
				sVar(cam_work_focus)[Z_] += zd * spdm;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->pressed)
				camera_work_reset(self);
			if (xd != IntType(0) || yd != IntType(0) || zd != IntType(0) || mx != IntType(0) || my != IntType(0))
				camera_work_set_angle();
		}
		else
		{
			RealType move, roll, spd, spdm, xd, yd, zd;
			move = IntType(4) * sReal(setting_move_speed) * global::delta;
			spd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			spdm = IntType(1);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->active > 0)
				spdm = sReal(setting_fast_modifier);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->active > 0)
				spdm = sReal(setting_slow_modifier);
			xd = IntType(0);
			yd = IntType(0);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->active > 0)
			{
				xd += -sin(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
				yd += -cos(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->active > 0)
			{
				xd += sin(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
				yd += cos(degtorad(idVar(cam, value).Value(e_value_ROT_Z) + 90.0)) * move;
			}
			xd += -lengthdir_x(spd, idVar(cam, value).Value(e_value_ROT_Z) + 90.0);
			yd += -lengthdir_y(spd, idVar(cam, value).Value(e_value_ROT_Z) + 90.0);
			zd = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->active) * move;
			zd += (-dsin(idVar(cam, value).Value(e_value_ROT_X))) * (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->active) * move;
			roll = (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_FORWARD))->active - ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_BACK))->active) * IntType(4) * spdm * global::delta;
			tl_value_set_start(self, ID_camera_control_move, true);
			tl_value_set(self, { e_value_POS_X, xd * spdm, true });
			tl_value_set(self, { e_value_POS_Y, yd * spdm, true });
			tl_value_set(self, { e_value_POS_Z, zd * spdm, true });
			tl_value_set(self, { e_value_ROT_X, -my, true });
			tl_value_set(self, { e_value_ROT_Y, roll, true });
			tl_value_set(self, { e_value_ROT_Z, mx, true });
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_RESET))->active > 0)
				tl_value_set(self, { e_value_ROT_Y, IntType(0), false });
			tl_value_set_done();
		}
		
	}
	
	void camera_control_pan(ScopeAny self, VarType cam)
	{
		RealType mx, my, move;
		MatrixType mat;
		VecType vert;
		mx = -((gmlGlobal::mouse_x - sVar(mouse_previous_x)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		my = ((gmlGlobal::mouse_y - sVar(mouse_previous_y)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		move = IntType(4) * sReal(setting_move_speed);
		app_mouse_wrap(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		if (!(cam > 0))
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(sVar(cam_work_angle_look_z), IntType(0), sVar(cam_work_angle_look_xy) + IntType(90)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			sVec(cam_work_from).Real(X_) += vert.Real(X_);
			sVec(cam_work_from).Real(Y_) += vert.Real(Y_);
			sVec(cam_work_from).Real(Z_) += vert.Real(Z_);
			camera_work_set_angle();
		}
		else
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(-idVar(cam, value).Value(e_value_ROT_X), IntType(0), idVar(cam, value).Value(e_value_ROT_Z) + IntType(180)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			tl_value_set_start(self, ID_camera_control_pan, true);
			tl_value_set(self, { e_value_POS_X, vert.Real(X_), true });
			tl_value_set(self, { e_value_POS_Y, vert.Real(Y_), true });
			tl_value_set(self, { e_value_POS_Z, vert.Real(Z_), true });
			tl_value_set_done();
		}
		
	}
	
	void camera_control_rotate(ScopeAny self, VarType cam, IntType lockx, IntType locky)
	{
		RealType mx, my;
		mx = -((display_mouse_get_x() - lockx) / 4.0);
		my = ((display_mouse_get_y() - locky) / 4.0);
		display_mouse_set(lockx, locky);
		if (!(cam > 0))
		{
			sVar(cam_work_angle_xy) += mx;
			sVar(cam_work_angle_z) += my;
			sVar(cam_work_angle_z) = clamp(sVar(cam_work_angle_z), -89.9, 89.9);
			sVar(cam_work_angle_look_xy) += mx;
			sVar(cam_work_angle_look_z) -= my;
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			camera_work_set_from(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->pressed)
				camera_work_reset(self);
		}
		else
		{
			tl_value_set_start(self, ID_camera_control_rotate, true);
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_XY, mx, true });
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_Z, my, true });
			if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
			{
				tl_value_set(self, { e_value_ROT_Z, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
				tl_value_set(self, { e_value_ROT_X, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
			}
			tl_value_set_done();
		}
		
	}
	
	void camera_startup(ScopeAny self)
	{
		global::cam_from = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_to = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_window = camera_create();
		global::cam_render = camera_create();
		global::cam_frustum = (new frustum())->id;
		camera_set_view_mat(global::cam_window, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_window, MAT_IDENTITY);
		camera_set_view_mat(global::cam_render, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_render, MAT_IDENTITY);
		view_set_camera(IntType(0), global::cam_window);
		camera_work_reset(self);
	}
	
	void camera_work_reset(ScopeAny self)
	{
		sVar(cam_work_focus) = point3D(IntType(0), IntType(0), IntType(16));
		sVec(cam_work_focus_last) = point3D(IntType(0), IntType(0), IntType(6));
		sInt(cam_work_focus_tl) = null_;
		sBool(cam_work_jump) = false;
		sVar(cam_work_angle_xy) = IntType(315);
		sVar(cam_work_angle_goal_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_z) = IntType(5);
		sVar(cam_work_angle_goal_z) = sVar(cam_work_angle_z);
		sVar(cam_work_roll) = IntType(0);
		sVar(cam_work_zoom) = IntType(100);
		sVar(cam_work_zoom_goal) = sVar(cam_work_zoom);
		sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
		sReal(cam_work_angle_look_off_xy) = IntType(0);
		sReal(cam_work_angle_look_off_z) = IntType(0);
		camera_work_set_from(self);
	}
	
	void camera_work_set_angle()
	{
		global::_app->cam_work_angle_xy = point_direction(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_));
		global::_app->cam_work_angle_z = point_zdirection(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_focus.Value(Z_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_), global::_app->cam_work_from.Real(Z_));
		global::_app->cam_work_angle_z = clamp(global::_app->cam_work_angle_z, -89.9, 89.9);
		global::_app->cam_work_zoom = point3D_distance(global::_app->cam_work_focus, global::_app->cam_work_from);
		global::_app->cam_work_zoom_goal = global::_app->cam_work_zoom;
	}
	
	void camera_work_set_focus()
	{
		global::_app->cam_work_focus[X_] = global::_app->cam_work_from.Real(X_) + lengthdir_x(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Y_] = global::_app->cam_work_from.Real(Y_) + lengthdir_y(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Z_] = global::_app->cam_work_from.Real(Z_) + lengthdir_z(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_z);
		if (vec3_equals(global::_app->cam_work_from, global::_app->cam_work_focus))
			global::_app->cam_work_focus = vec3_add(global::_app->cam_work_focus, 0.0001);
	}
	
	void camera_work_set_from(ScopeAny self)
	{
		sVec(cam_work_from).Real(X_) = sVar(cam_work_focus).Value(X_) + lengthdir_x(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Y_) = sVar(cam_work_focus).Value(Y_) + lengthdir_y(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Z_) = sVar(cam_work_focus).Value(Z_) + lengthdir_z(sVar(cam_work_zoom), sVar(cam_work_angle_z));
	}
	
	void collapse_event_create(ScopeAny self)
	{
		sVar(name) = /*""*/ STR(0);
		sVar(collapse_id) = null_;
		sVar(open) = false;
	}
	
	void collapse_register(StringType name)
	{
		DsMap(global::collapse_map)[name] = false;
	}
	
	void colorpicker_blue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->blue * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_brightness(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_draw(ScopeAny self)
	{
		VarType bx, by;
		RealType bw, bh;
		bx = sVar(dx) - IntType(12);
		by = sVar(dy) - IntType(12);
		bw = IntType(192);
		bh = IntType(192);
		if (app_mouse_box(self, bx, by, bw, bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickersatbripick"*/ STR(1021);
		}
		if (sVar(window_busy) == /*"colorpickersatbripick"*/ STR(1021))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sVar(window_focus) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor((clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1))) * IntType(255));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor((clamp(IntType(1) - (gmlGlobal::mouse_y - by) / bh, IntType(0), IntType(1))) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_sprite_general(ID_spr_colorpicker, IntType(0), IntType(0), IntType(0), IntType(192), IntType(192), (IntType)(bx), (IntType)(by), 1.0, 1.0, 0.0, c_white, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), c_white, draw_get_alpha());
		draw_image({ ID_spr_colorpicker_cursor, IntType(0), bx + (bw * ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->saturation / 255.0)), by + (bh * (IntType(1) - ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->brightness / 255.0))), IntType(1), IntType(1), c_white, IntType(1) });
		sVar(dy) = by + IntType(192) + IntType(8);
		sVar(dx) -= 4.0;
		sVar(dw) = IntType(176);
		bx = sVar(dx) + IntType(8);
		by = sVar(dy);
		bw = IntType(176) - IntType(16);
		bh = IntType(16);
		if (app_mouse_box(self, bx - IntType(8), by, bw + IntType(16), bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickerhuepick"*/ STR(1022);
		}
		if (sVar(window_busy) == /*"colorpickerhuepick"*/ STR(1022))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1)) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_image({ ID_spr_colorpicker_hue, IntType(0), sVar(dx), by, IntType(1), IntType(1), c_white, IntType(1) });
		draw_outline(sVar(dx), by, IntType(176), IntType(16), IntType(1), global::c_border, global::a_border, true);
		draw_image({ ID_spr_colorpicker_cursor, IntType(1), bx + (((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->hue / 255.0) * bw), by + IntType(8), IntType(1), IntType(1) });
		sVar(dy) += IntType(16) + IntType(8);
		tab_control(self, sReal(ui_large_height));
		togglebutton_add(self, { /*"colorpickerrgb"*/ STR(1023), null_, /*"rgb"*/ STR(1024), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1024), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhsv"*/ STR(1025), null_, /*"hsv"*/ STR(1026), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1026), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhex"*/ STR(1027), null_, /*"hex"*/ STR(1028), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1028), ID_colorpicker_set_mode });
		draw_togglebutton(self, /*"colorpickermode"*/ STR(1029), sVar(dx), sVar(dy), true, false);
		tab_next(self);
		if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1024))
		{
			textfield_group_add(self, { /*"colorpickerr"*/ STR(1030), color_get_red((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_red(ObjType(obj_colorpicker, sInt(colorpicker))->def), ID_colorpicker_red, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red });
			textfield_group_add(self, { /*"colorpickerg"*/ STR(1031), color_get_green((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_green(ObjType(obj_colorpicker, sInt(colorpicker))->def), ID_colorpicker_green, Y_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green });
			textfield_group_add(self, { /*"colorpickerb"*/ STR(1032), color_get_blue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_blue(ObjType(obj_colorpicker, sInt(colorpicker))->def), ID_colorpicker_blue, Z_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue });
			if (draw_textfield_group(self, /*"colorpickerrgb"*/ STR(1023), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(3), true, false))
			{
				ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text, IntType(0)) });
				colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
			}
		}
		else
			if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1026))
			{
				textfield_group_add(self, { /*"colorpickerh"*/ STR(1033), floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_hue(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_hue, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue });
				textfield_group_add(self, { /*"colorpickers"*/ STR(1034), floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_saturation(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_saturation, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation });
				textfield_group_add(self, { /*"colorpickerv"*/ STR(1035), floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_value(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_brightness, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness });
				VarType update = draw_textfield_group(self, /*"colorpickerhsv"*/ STR(1025), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(0), true, false);
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
			}
			else
				if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1028))
				{
					if (draw_inputbox(self, { /*"colorpickerhex"*/ STR(1027), sVar(dx), sVar(dy), IntType(176), IntType(24), color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->def), ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, null_ }))
						colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) ? ObjType(obj_colorpicker, sInt(colorpicker))->def : hex_to_color(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text), true);
					if (ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) && sVar(window_focus) == /*""*/ STR(0))
						ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = /*"000000"*/ STR(685);
				}
		
		
		sVar(dy) += sReal(ui_small_height) + IntType(4);
		sVar(settings_menu_w) = IntType(192);
	}
	
	void colorpicker_green(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->green * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_hue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_red(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->red * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_saturation(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_set_mode(ScopeAny self, VarType mode)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->mode = mode.Str();
	}
	
	void colorpicker_show(ScopeAny self, VarType name, VarType color, IntType def, IntType script, VarType xx, VarType yy, VarType width, RealType height)
	{
		if (sStr(settings_menu_name) == /*"colorpicker"*/ STR(705) && ObjType(obj_colorpicker, sInt(colorpicker))->value_script == script)
			popup_close(self);
		else
		{
			sVar(settings_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"settingsmenu"*/ STR(1036);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			sInt(settings_menu_window) = window_get_current();
			sStr(settings_menu_name) = /*"colorpicker"*/ STR(705);
			sVar(settings_menu_ani) = IntType(0);
			sStr(settings_menu_ani_type) = /*"show"*/ STR(747);
			sBool(settings_menu_primary) = false;
			sVar(settings_menu_x) = xx;
			sVar(settings_menu_y) = yy;
			if (sVar(settings_menu_x) < IntType(0))
				sVar(settings_menu_x) = xx + width + IntType(8);
			if (sVar(settings_menu_x) + IntType(192) > sReal(window_width))
				sVar(settings_menu_x) = sReal(window_width) - IntType(192);
			sVar(settings_menu_h_max) = null_;
			sReal(settings_menu_button_h) = height;
			sBool(settings_menu_above) = false;
			sInt(settings_menu_steps) = IntType(0);
			sInt(settings_menu_script) = ID_colorpicker_draw;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_name = name;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_script = script;
			ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"rgb"*/ STR(1024);
			ObjType(obj_colorpicker, sInt(colorpicker))->def = def;
			ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = color_get_hue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = color_get_saturation((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = color_get_value((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(color);
		}
		
	}
	
	void colorpicker_startup()
	{
		global::_app->colorpicker = (new obj_colorpicker)->id;
		withOne (obj_colorpicker, global::_app->colorpicker, global::_app->id)
		{
			self->value_name = /*""*/ STR(0);
			self->value_script = null_;
			self->color = null_;
			self->def = null_;
			self->hue = IntType(0);
			self->saturation = IntType(0);
			self->value = IntType(0);
			self->tbx_red = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_green = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_blue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_hue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_saturation = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_brightness = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1037));
			self->tbx_hexadecimal = new_textbox_hex();
			self->mode = /*"rgb"*/ STR(1024);
		}
		
	}
	
	void colorpicker_update(ScopeAny self, IntType control, IntType color, BoolType gethsb)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
		if (gethsb)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
		}
		else
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue }));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation }));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness }));
		}
		
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red(color);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green(color);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue(color);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->hue);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->saturation);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->brightness);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->color);
		script_execute(self, { ObjType(obj_colorpicker, sInt(colorpicker))->value_script, ObjType(obj_colorpicker, sInt(colorpicker))->color });
	}
	
}
