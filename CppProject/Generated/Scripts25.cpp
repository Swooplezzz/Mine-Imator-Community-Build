/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.04 17:45:23 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	IntType color_add(VarType color1, VarType color2)
	{
		return make_color_rgb(min({ IntType(255), color_get_red((IntType)(color1)) + color_get_red((IntType)(color2)) }), min({ IntType(255), color_get_green((IntType)(color1)) + color_get_green((IntType)(color2)) }), min({ IntType(255), color_get_blue((IntType)(color1)) + color_get_blue((IntType)(color2)) }));
	}
	
	IntType color_multiply(VarType color1, VarType color2)
	{
		return make_color_rgb((IntType)(((RealType)color_get_red((IntType)(color1)) / 255.0) * ((RealType)color_get_red((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_green((IntType)(color1)) / 255.0) * ((RealType)color_get_green((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_blue((IntType)(color1)) / 255.0) * ((RealType)color_get_blue((IntType)(color2)) / 255.0) * IntType(255)));
	}
	
	StringType color_to_hex(VarType color)
	{
		IntType r, g, b;
		StringType hex;
		r = color_get_red((IntType)(color));
		g = color_get_green((IntType)(color));
		b = color_get_blue((IntType)(color));
		hex = /*"0123456789ABCDEF"*/ STR(1023);
		return string_char_at(hex, (IntType)(((IntType)(r / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(r, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(g / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(g, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(b / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(b, IntType(16))) + IntType(1)));
	}
	
	IntType context_menu_add_level(ScopeAny self, VarType name, VarType xx, VarType yy, IntType item)
	{
		IntType script, level;
		if (item != null_)
			script = ObjType(obj_list_item, item)->context_menu_script;
		else
			script = null_;
		
		level = (new obj_context_menu_level)->id;
		ObjType(obj_context_menu_level, level)->name = name;
		ObjType(obj_context_menu_level, level)->level_x = xx;
		ObjType(obj_context_menu_level, level)->level_y = yy;
		ObjType(obj_context_menu_level, level)->level = sInt(context_menu_level_amount);
		ObjType(obj_context_menu_level, level)->ani = IntType(0);
		ObjType(obj_context_menu_level, level)->flip = false;
		sInt(context_menu_window) = window_get_current();
		if (script == null_)
		{
			ObjType(obj_context_menu_level, level)->level_list = list_init_context_menu(self, name);
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->width + IntType(8);
			ObjType(obj_context_menu_level, level)->level_height = (ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item) * IntType(24)) + IntType(8);
			ObjType(obj_context_menu_level, level)->script = null_;
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				if (ObjType(obj_list_item, DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i))->divider > 0)
					ObjType(obj_context_menu_level, level)->level_height += IntType(8);
			}
		}
		else
		{
			ObjType(obj_context_menu_level, level)->level_list = null_;
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list_item, item)->context_menu_width;
			ObjType(obj_context_menu_level, level)->level_height = ObjType(obj_list_item, item)->context_menu_height;
			ObjType(obj_context_menu_level, level)->level_script = script;
			ObjType(obj_context_menu_level, level)->level_y -= ObjType(obj_context_menu_level, level)->level_height / 2.0;
		}
		
		if (sInt(context_menu_level_amount) > IntType(0))
		{
			if ((ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width + ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width) < sReal(window_width))
				ObjType(obj_context_menu_level, level)->level_x += (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width);
			else
				ObjType(obj_context_menu_level, level)->level_x -= (ObjType(obj_context_menu_level, level)->level_width + 1.0);
			
			ObjType(obj_context_menu_level, level)->level_y -= 4.0;
		}
		if (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width > sReal(window_width))
			ObjType(obj_context_menu_level, level)->level_x += sReal(window_width) - (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width);
		if (ObjType(obj_context_menu_level, level)->level_y + ObjType(obj_context_menu_level, level)->level_height > sReal(window_height))
		{
			ObjType(obj_context_menu_level, level)->level_y -= ObjType(obj_context_menu_level, level)->level_height;
			ObjType(obj_context_menu_level, level)->flip = true;
		}
		ds_list_add({ sInt(context_menu_level), level });
		sInt(context_menu_level_amount)++;
		return level;
	}
	
	RealType context_menu_area(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, wid, hei, name;
		IntType font;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		wid = argument[IntType(2)];
		hei = argument[IntType(3)];
		name = argument[IntType(4)];
		if (app_mouse_box(self, xx, yy, wid, hei) && sBool(mouse_right_released))
		{
			if (keyboard_check(vk_shift) && argument_count > IntType(5))
			{
				if (argument[IntType(6)] == e_context_type_TIME || argument[IntType(6)] == e_context_type_NUMBER)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)], false });
				if (argument[IntType(6)] == e_context_type_COLOR)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)] });
				return IntType(0);
			}
			context_menu_close(self);
			app_mouse_clear(self);
			sVar(context_menu_name) = name;
			sVar(context_menu_copy_axis_edit) = global::axis_edit;
			sVar(context_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"contextmenu"*/ STR(1024);
			sInt(context_menu_group) = sInt(context_menu_group_temp);
			font = draw_get_font();
			if (argument_count > IntType(5))
			{
				sVar(context_menu_value) = argument[IntType(5)];
				sVar(context_menu_value_type) = argument[IntType(6)];
				sVar(context_menu_value_script) = argument[IntType(7)];
				sVar(context_menu_value_default) = argument[IntType(8)];
			}
			context_menu_add_level(self, name, gmlGlobal::mouse_x + IntType(1), gmlGlobal::mouse_y);
			if (font != draw_get_font())
				draw_set_font(font);
			return true;
		}
		return 0.0;
	}
	
	RealType context_menu_close(ScopeAny self)
	{
		if (sVar(context_menu_name) == /*""*/ STR(0))
			return IntType(0);
		sBool(toolbar_menu_active) = false;
		sVar(context_menu_name) = /*""*/ STR(0);
		sVar(context_menu_value) = null_;
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_level_amount) = IntType(0);
		sInt(context_menu_mouseon_level) = IntType(0);
		ds_list_clear(sInt(context_menu_level));
		withAll (obj_context_menu_level, self->id)
		{
			list_destroy(ScopeAny(self), self->level_list);
			instance_destroy(ScopeAny(self));
		}
		
		sBool(mouse_left) = false;
		sBool(mouse_left_pressed) = false;
		sBool(mouse_left_double_pressed) = false;
		sInt(mouse_click_count) = IntType(0);
		sVar(context_menu_min_x) = IntType(0);
		sVar(context_menu_min_y) = IntType(0);
		sVar(context_menu_max_x) = IntType(0);
		sVar(context_menu_max_y) = IntType(0);
		return 0.0;
	}
	
	RealType context_menu_draw(ScopeAny self)
	{
		if (sInt(context_menu_level_amount) == IntType(0) || sInt(context_menu_window) != window_get_current())
			return IntType(0);
		if (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->ani == IntType(0) && sStr(context_menu_ani) == /*"hide"*/ STR(733))
		{
			sStr(context_menu_ani) = /*""*/ STR(0);
			context_menu_close(self);
			return IntType(0);
		}
		if (sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*""*/ STR(0);
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_mouseon_item) = null_;
		global::axis_edit = sVar(context_menu_copy_axis_edit);
		sVar(context_menu_min_x) = no_limit;
		sVar(context_menu_min_y) = no_limit;
		sVar(context_menu_max_x) = -no_limit;
		sVar(context_menu_max_y) = -no_limit;
		if (sBool(context_menu_mouseon_reset))
		{
			sInt(context_menu_mouseon_level) = IntType(0);
			sBool(context_menu_mouseon_reset) = false;
		}
		for (IntType i = IntType(0); i < sInt(context_menu_level_amount); i++)
			context_menu_draw_level(self, i);
		withAll (obj_list_item, global::_app->id)
		{
			if (self->disabled > 0 || (self->context_menu_name == /*""*/ STR(0) && self->context_menu_script == null_) || (global::_app->context_menu_mouseon_level > IntType(0) && (ObjType(obj_context_menu_level, DsList(global::_app->context_menu_level).Value(IntType(1)))->name == self->context_menu_name)))
				continue;
			if (self->id == global::_app->context_menu_mouseon_item)
				self->hovertime += test_reduced_motion(IntType(15), (60.0 / gmlGlobal::room_speed));
			else
				self->hovertime -= test_reduced_motion(IntType(15), (60.0 / gmlGlobal::room_speed));
			
			self->hovertime = clamp(self->hovertime, IntType(0), IntType(15));
			if (!self->context_menu_active && self->hovertime == IntType(15))
			{
				self->context_menu_active = true;
				withOne (app, global::_app->id, self->id)
					context_menu_add_level(ScopeAny(self), ObjType(obj_list_item, self.otherId)->context_menu_name, ObjType(obj_list_item, self.otherId)->draw_x, ObjType(obj_list_item, self.otherId)->draw_y, self.otherId);
				
			}
			if (self->context_menu_active && self->hovertime == IntType(0))
			{
				self->context_menu_active = false;
				global::_app->context_menu_mouseon_level = IntType(0);
				withAll (obj_context_menu_level, self->id)
				{
					if (self->level > IntType(0) && self->name == ObjType(obj_list_item, self.otherId)->context_menu_name)
					{
						ds_list_delete_value(global::_app->context_menu_level, self->id);
						global::_app->context_menu_level_amount--;
						list_destroy(ScopeAny(self), self->level_list);
						instance_destroy(ScopeAny(self));
					}
				}
				
			}
		}
		
		if (((sBool(mouse_left_pressed) || sBool(mouse_right_pressed)) && !sBool(context_menu_mouseon)) || (sBool(mouse_left_released) && (!sBool(context_menu_mouseon) || (sInt(context_menu_mouseon_item) != null_ && !(idVar(sInt(context_menu_mouseon_item), disabled) > 0) && idVar(sInt(context_menu_mouseon_item), context_menu_name) == /*""*/ STR(0)))))
			sStr(context_menu_ani) = /*"hide"*/ STR(733);
		if ((gmlGlobal::mouse_x < sVar(context_menu_min_x) - IntType(64)) || (gmlGlobal::mouse_y < sVar(context_menu_min_y) - IntType(64)) || (gmlGlobal::mouse_x > sVar(context_menu_max_x) + IntType(64)) || (gmlGlobal::mouse_y > sVar(context_menu_max_y) + IntType(64)))
			sStr(context_menu_ani) = /*"hide"*/ STR(733);
		if (sVar(window_busy) == /*""*/ STR(0) && sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*"contextmenu"*/ STR(1024);
		return 0.0;
	}
	
	RealType context_menu_draw_level(ScopeAny self, IntType argument0)
	{
		IntType levelindex, level;
		VarType alphaease, aniease;
		levelindex = argument0;
		level = DsList(sInt(context_menu_level)).Value(levelindex);
		if (sStr(context_menu_ani) == /*""*/ STR(0) || sStr(context_menu_ani) == /*"open"*/ STR(904))
		{
			ObjType(obj_context_menu_level, level)->ani += test_reduced_motion(IntType(1), (0.07 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani >= IntType(1))
				ObjType(obj_context_menu_level, level)->ani = IntType(1);
		}
		else
		{
			ObjType(obj_context_menu_level, level)->ani -= test_reduced_motion(IntType(1), (0.125 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani <= IntType(0))
				ObjType(obj_context_menu_level, level)->ani = IntType(0);
		}
		
		aniease = ease(/*"easeoutexpo"*/ STR(568), ObjType(obj_context_menu_level, level)->ani);
		alphaease = aniease;
		aniease = IntType(1);
		sVar(dw) = ObjType(obj_context_menu_level, level)->level_width;
		sVar(dh) = ObjType(obj_context_menu_level, level)->level_height * aniease;
		sVar(dx) = ObjType(obj_context_menu_level, level)->level_x;
		sVar(dy) = (ObjType(obj_context_menu_level, level)->flip > 0) ? (ObjType(obj_context_menu_level, level)->level_y + (ObjType(obj_context_menu_level, level)->level_height - sVar(dh))) : ObjType(obj_context_menu_level, level)->level_y;
		sVar(dy) = max({ IntType(0), sVar(dy) });
		sVar(content_x) = sVar(dx);
		sVar(content_y) = sVar(dy);
		sVar(content_width) = sVar(dw);
		sVar(content_height) = sVar(dh);
		sBool(content_mouseon) = app_mouse_box(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh)) && (levelindex >= sInt(context_menu_mouseon_level));
		sVar(context_menu_min_x) = min({ sVar(dx), sVar(context_menu_min_x) });
		sVar(context_menu_min_y) = min({ sVar(dy), sVar(context_menu_min_y) });
		sVar(context_menu_max_x) = max({ sVar(dx) + sVar(dw), sVar(context_menu_max_x) });
		sVar(context_menu_max_y) = max({ sVar(dy) + sVar(dh), sVar(context_menu_max_y) });
		if (sBool(content_mouseon))
			sBool(context_menu_mouseon) = true;
		if (sBool(content_mouseon) && levelindex > sInt(context_menu_mouseon_level))
			sInt(context_menu_mouseon_level) = levelindex;
		if (!sBool(content_mouseon) && (levelindex >= sInt(context_menu_mouseon_level)))
			sBool(context_menu_mouseon_reset) = true;
		draw_set_alpha(alphaease);
		draw_dropshadow(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh), c_black, IntType(1));
		draw_box({ sVar(dx), sVar(dy), sVar(dw), sVar(dh), false, global::c_level_top, IntType(1) });
		draw_outline({ sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), global::c_border, global::a_border, true });
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_begin(sVar(dx), sVar(dy), sVar(dw), sVar(dh));
		sVar(dy) = ((ObjType(obj_context_menu_level, level)->flip > 0) ? sVar(dy) : (ObjType(obj_context_menu_level, level)->level_y - ((IntType(1) - aniease) * ObjType(obj_context_menu_level, level)->level_height)));
		sVar(dy) = max({ IntType(0), sVar(dy) });
		if (ObjType(obj_context_menu_level, level)->level_list != null_)
		{
			sVar(dy) += IntType(4);
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				IntType item = DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i);
				if (ObjType(obj_list_item, item)->divider > 0)
					sVar(dy) += IntType(8);
				list_item_draw(self, { item, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24), false });
				if (ObjType(obj_list_item, item)->context_menu_active)
					ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
				if (app_mouse_box(self, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24)))
					sInt(context_menu_mouseon_item) = item;
			}
		}
		else
		{
			if (script_execute(self, { ObjType(obj_context_menu_level, level)->level_script, sVar(dx), sVar(dy), sVar(dw), sVar(dh) }))
			{
				draw_set_alpha(1.0);
				return IntType(0);
			}
		}
		
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_end();
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	VarType debug(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		StringType cap, valstr;
		if (!dev_mode)
			return argument[argument_count - IntType(1)];
		cap = string_repeat(/*"\t"*/ STR(1025), global::debug_indent) + string(argument[IntType(0)]);
		valstr = /*""*/ STR(0);
		if (argument_count > IntType(1))
		{
			valstr = /*": "*/ STR(1026);
			for (IntType a = IntType(1); a < argument_count; a++)
			{
				valstr += string(argument[a]);
				if (a < argument_count - IntType(1))
					valstr += /*", "*/ STR(1027);
			}
		}
		show_debug_message(cap + valstr);
		return argument[argument_count - IntType(1)];
	}
	
	void debug_ds_list(VarType argument0)
	{
		IntType list = argument0;
		debug({ /*"Elements"*/ STR(1028), ds_list_size((IntType)(list)) });
		for (IntType i = IntType(0); i < ds_list_size(list); i++)
			debug({ /*"    "*/ STR(1029) + string(DsList(list).Value(i)) });
	}
	
	void debug_ds_map(IntType map)
	{
		IntType keylist;
		VarType key;
		keylist = ds_list_create();
		key = ds_map_find_first((IntType)(map));
		while (!is_undefined(key))
		{
			ds_list_add({ keylist, key });
			key = ds_map_find_next((IntType)(map), key);
		}
		
		ds_list_sort(keylist, true);
		debug({ /*"Elements"*/ STR(1028), ds_list_size(keylist) });
		for (IntType i = IntType(0); i < ds_list_size(keylist); i++)
			debug({ /*"   "*/ STR(1030) + string(DsList(keylist).Value(i)) + /*" => "*/ STR(1031) + string(DsMap(map).Value(DsList(keylist).Value(i))) });
		ds_list_destroy(keylist);
	}
	
	RealType debug_info_draw(ScopeAny self)
	{
		if (!sBool(debug_info))
			return IntType(0);
		StringType str = /*"DEBUG INFO:\n"*/ STR(1032);
		str += /*"fps: "*/ STR(1033) + string(gmlGlobal::fps) + /*" \n"*/ STR(1034);
		str += /*"fps_real: "*/ STR(1035) + string(gmlGlobal::fps_real) + /*" \n"*/ STR(1034);
		str += /*"delta: "*/ STR(1036) + string(global::delta) + /*" \n"*/ STR(1034);
		str += /*"DPI: "*/ STR(1037) + string(display_get_dpi_x()) + /*","*/ STR(1038) + string(display_get_dpi_y()) + /*" \n"*/ STR(1034);
		str += /*"instance_count: "*/ STR(1039) + string(gmlGlobal::instance_count) + /*" \n"*/ STR(1034);
		str += /*"render_world() calls: "*/ STR(1040) + string(global::render_world_count) + /*" \n"*/ STR(1034);
		str += /*"Vertex buffer triangles: "*/ STR(1041) + string(get_vertex_buffer_triangles()) + /*" \n"*/ STR(1034);
		str += /*"Vertex buffer render calls: "*/ STR(1042) + string(get_vertex_buffer_render_calls()) + /*" \n"*/ STR(1034);
		str += /*"Primitive lines: "*/ STR(1043) + string(get_primitive_lines()) + /*" \n"*/ STR(1034);
		str += /*"Primitive triangles: "*/ STR(1044) + string(get_primitive_triangles()) + /*" \n"*/ STR(1034);
		str += /*"Primitive render calls: "*/ STR(1045) + string(get_primitive_render_calls()) + /*" \n"*/ STR(1034);
		str += /*"[F12 to disable]"*/ STR(1046);
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = sReal(window_height);
		draw_label(self, { str, sReal(window_width) - IntType(7), sReal(window_height) - IntType(7), fa_right, fa_bottom, c_black, IntType(1), sInt(font_value) });
		draw_label(self, { str, sReal(window_width) - IntType(8), sReal(window_height) - IntType(8), fa_right, fa_bottom, c_yellow, IntType(1), sInt(font_value) });
		return 0.0;
	}
	
	void debug_timer_start()
	{
		global::debug_timer = current_time();
	}
	
	void debug_timer_stop(StringType str)
	{
		debug({ str, string(current_time() - global::debug_timer) + /*" msec"*/ STR(1047) });
	}
	
	StringType dec_to_hex(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType dec, len;
		StringType hex, h, hi, lo;
		RealType byte;
		dec = argument[IntType(0)];
		if (argument_count > IntType(0))
			len = argument[IntType(1)];
		else
			len = IntType(0);
		
		if (!(dec > 0))
			return /*"0"*/ STR(1048);
		h = /*"0123456789ABCDEF"*/ STR(1023);
		hex = /*""*/ STR(0);
		while (dec > 0)
		{
			byte = (IntType)dec & (IntType)IntType(255);
			hi = string_char_at(h, (IntType)((IntType)(byte / IntType(16)) + IntType(1)));
			lo = string_char_at(h, (IntType)(mod(byte, IntType(16)) + IntType(1)));
			hex = hi + lo + hex;
			dec = (IntType)dec >> (IntType)IntType(8);
		}
		
		for (IntType _it = 0, _it_max = max({ IntType(0), len - string_length(hex) }); _it < _it_max; _it++)
			hex = /*"0"*/ STR(1048) + hex;
		return hex;
	}
	
	VarType directory_create_lib(VarType dir)
	{
		return lib_directory_create(dir);
	}
	
	VarType directory_delete_lib(VarType dir)
	{
		return lib_directory_delete(dir);
	}
	
	RealType directory_exists_lib(VarType dir)
	{
		if (dir == /*""*/ STR(0))
			return IntType(0);
		return lib_directory_exists(dir);
	}
	
	StringType directory_name(StringType dir)
	{
		return filename_name(filename_dir(dir + /*".ext"*/ STR(1049))) + /*"/"*/ STR(16);
	}
	
	StringType dir_get_string(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return /*"east"*/ STR(879);
			}
			case e_dir_WEST:
			{
				return /*"west"*/ STR(880);
			}
			case e_dir_SOUTH:
			{
				return /*"south"*/ STR(881);
			}
			case e_dir_NORTH:
			{
				return /*"north"*/ STR(882);
			}
			case e_dir_UP:
			{
				return /*"up"*/ STR(898);
			}
			case e_dir_DOWN:
			{
				return /*"down"*/ STR(899);
			}
		}
		
		return /*""*/ STR(0);
	}
	
	VecType dir_get_vec3(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return vec3(IntType(1), IntType(0), IntType(0));
			}
			case e_dir_WEST:
			{
				return vec3(-IntType(1), IntType(0), IntType(0));
			}
			case e_dir_SOUTH:
			{
				return vec3(IntType(0), IntType(1), IntType(0));
			}
			case e_dir_NORTH:
			{
				return vec3(IntType(0), -IntType(1), IntType(0));
			}
			case e_dir_UP:
			{
				return vec3(IntType(0), IntType(0), IntType(1));
			}
			case e_dir_DOWN:
			{
				return vec3(IntType(0), IntType(0), -IntType(1));
			}
		}
		
		return vec3(IntType(0), IntType(0), IntType(0));
	}
	
	void draw_bezier_curve(ArrType p1, ArrType p2, ArrType p3, ArrType p4, RealType w, VarType color, RealType alpha)
	{
		IntType prevcolor;
		RealType prevalpha;
		VecType p, prevp;
		prevcolor = draw_get_color();
		prevalpha = draw_get_alpha();
		draw_set_color((IntType)(color));
		draw_set_alpha(alpha);
		p = ArrType::From({ IntType(0), IntType(0) });
		for (RealType i = IntType(0); i < IntType(64); i++)
		{
			prevp = p;
			p = bezier_curve_cubic(p1, p2, p3, p4, i / 64.0);
			if (i == IntType(0))
				continue;
			draw_image({ ID_spr_handle, IntType(0), prevp.Real(X_), prevp.Real(Y_), .75, point_distance(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)), color, alpha, point_direction(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)) - IntType(90) });
		}
		draw_set_color(prevcolor);
		draw_set_alpha(prevalpha);
	}
	
	void draw_bezier_graph(ScopeAny self, VarType xx, VarType yy, RealType wid, VarType hei, ArrType points, BoolType sync)
	{
		RealType vertical, boxw, boxh;
		VarType boxx, boxy;
		BoolType update;
		vertical = (hei > wid);
		boxx = xx;
		boxy = yy + (RealType)hei / 6.0;
		boxw = wid;
		boxh = (RealType)hei / 1.5;
		update = false;
		draw_box({ xx, yy, wid, hei, false, global::c_level_bottom, IntType(1) });
		draw_box({ boxx, boxy, boxw, boxh, false, global::c_level_top, IntType(1) });
		draw_outline({ xx, yy, wid, hei, IntType(1), global::c_border, global::a_border, true });
		VarType easeinxpos, easeoutxpos, colorin, colorout;
		RealType easeinypos, easeoutypos;
		easeinxpos = boxx + boxw * points.Value(IntType(0));
		easeinypos = (boxy + boxh) - boxh * points.Value(IntType(1));
		easeoutxpos = boxx + boxw * points.Value(IntType(2));
		easeoutypos = (boxy + boxh) - boxh * points.Value(IntType(3));
		gpu_set_cullmode((IntType)(false));
		clip_begin(xx, yy, wid, hei);
		gpu_set_tex_filter(true);
		draw_bezier_curve(ArrType::From({ boxx, boxy + boxh }), ArrType::From({ easeinxpos, easeinypos }), ArrType::From({ easeoutxpos, easeoutypos }), ArrType::From({ boxx + boxw, boxy }), IntType(2), global::c_text_secondary, global::a_text_secondary);
		if (global::tl_edit != null_)
			draw_box({ xx + wid * idReal(global::tl_edit, keyframe_progress), yy, IntType(2), hei, false, c_red, .30 });
		draw_image({ ID_spr_handle, IntType(0), boxx, boxy + boxh, .75, point_distance(boxx, boxy + boxh, easeinxpos, easeinypos), global::c_accent, IntType(1), point_direction(boxx, boxy + boxh, easeinxpos, easeinypos) - IntType(90) });
		draw_image({ ID_spr_handle, IntType(0), boxx + boxw, boxy, .75, point_distance(boxx + boxw, boxy, easeoutxpos, easeoutypos), global::c_accent, IntType(1), point_direction(boxx + boxw, boxy, easeoutxpos, easeoutypos) - IntType(90) });
		gpu_set_tex_filter(false);
		clip_end();
		colorin = (easeinypos < yy || easeinypos > yy + hei ? global::c_error : global::c_accent);
		easeinxpos = clamp(easeinxpos, boxx, boxx + boxw);
		easeinypos = clamp(easeinypos, yy, yy + hei);
		colorout = (easeoutypos < yy || easeoutypos > yy + hei ? global::c_error : global::c_accent);
		easeoutxpos = clamp(easeoutxpos, boxx, boxx + boxw);
		easeoutypos = clamp(easeoutypos, yy, yy + hei);
		draw_box({ easeinxpos - IntType(6), easeinypos - IntType(6), IntType(12), IntType(12), false, colorin, IntType(1) });
		draw_box({ easeinxpos - IntType(3), easeinypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1) });
		draw_box({ easeoutxpos - IntType(6), easeoutypos - IntType(6), IntType(12), IntType(12), false, colorout, IntType(1) });
		draw_box({ easeoutxpos - IntType(3), easeoutypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1) });
		if (app_mouse_box(self, easeinxpos - IntType(5), easeinypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereasein"*/ STR(1050);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeinxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeinypos;
			}
		}
		if (app_mouse_box(self, easeoutxpos - IntType(5), easeoutypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
			sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereaseout"*/ STR(1051);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			}
		}
		points[IntType(0)] *= 100.0;
		points[IntType(1)] *= 100.0;
		points[IntType(2)] *= 100.0;
		points[IntType(3)] *= 100.0;
		if (sVar(window_busy) == /*"beziereasein"*/ STR(1050))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(0)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(1)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(2)] = IntType(100) - points.Value(IntType(0));
					points[IntType(3)] = IntType(100) - points.Value(IntType(1));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"beziereaseout"*/ STR(1051))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(2)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(3)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(0)] = IntType(100) - points.Value(IntType(2));
					points[IntType(1)] = IntType(100) - points.Value(IntType(3));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (update)
		{
			points[IntType(0)] /= 100.0;
			points[IntType(1)] /= 100.0;
			points[IntType(2)] /= 100.0;
			points[IntType(3)] /= 100.0;
			if (sync)
				action_tl_frame_ease_all(self, points, false);
			else
				if (sVar(window_busy) == /*"beziereasein"*/ STR(1050))
					action_tl_frame_ease_in(self, points, false);
				else
					action_tl_frame_ease_out(self, ArrType::From({ points.Value(IntType(2)), points.Value(IntType(3)) }), false);
			
			
		}
	}
	
	void draw_blank(RealType xx, RealType yy, VarType w, VarType h)
	{
		draw_primitive_begin(pr_trianglestrip);
		draw_vertex_texture((IntType)(xx), (IntType)(yy), 0.0, 0.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy), 1.0, 0.0);
		draw_vertex_texture((IntType)(xx), (IntType)(yy + h), 0.0, 1.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy + h), 1.0, 1.0);
		draw_primitive_end();
	}
	
	RealType draw_box(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, ww, hh, outline, color;
		RealType alpha;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		ww = argument[IntType(2)];
		hh = argument[IntType(3)];
		outline = argument[IntType(4)];
		color = draw_get_color();
		alpha = draw_get_alpha();
		if (argument_count > IntType(5))
		{
			color = argument[IntType(5)];
			alpha *= argument[IntType(6)];
		}
		if (alpha == IntType(0) || ww <= IntType(0) || hh <= IntType(0))
			return IntType(0);
		draw_primitive_begin((outline > 0) ? pr_linestrip : pr_trianglefan);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + ww), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + ww), (IntType)(yy + hh), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy + hh), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_primitive_end();
		return 0.0;
	}
	
	void draw_box_bevel(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, width, height, alpha, light;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		width = argument[IntType(2)];
		height = argument[IntType(3)];
		alpha = argument[IntType(4)];
		light = false;
		if (argument_count > IntType(5))
			light = argument[IntType(5)];
		if (light > 0)
		{
			draw_box({ xx, yy, IntType(3), height, false, c_white, .6 * alpha });
			draw_box({ xx + width - IntType(3), yy, IntType(3), height, false, c_black, .05 * alpha });
			draw_box({ xx, yy + height - IntType(3), width, IntType(3), false, c_black, .1 * alpha });
			draw_box({ xx, yy, width, IntType(3), false, c_white, .8 * alpha });
		}
		else
		{
			draw_box({ xx, yy, IntType(3), height, false, c_white, .15 * alpha });
			draw_box({ xx + width - IntType(3), yy, IntType(3), height, false, c_black, .1 * alpha });
			draw_box({ xx, yy + height - IntType(3), width, IntType(3), false, c_black, .2 * alpha });
			draw_box({ xx, yy, width, IntType(3), false, c_white, .3 * alpha });
		}
		
	}
	
	RealType draw_box_hover(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, width, height, color;
		RealType size, alpha;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		width = argument[IntType(2)];
		height = argument[IntType(3)];
		size = IntType(2);
		color = global::c_hover;
		alpha = global::a_hover * argument[IntType(4)];
		if (alpha == IntType(0))
			return IntType(0);
		RealType t = percent(argument[IntType(4)], IntType(0), .75);
		draw_outline({ xx, yy, width, height, IntType(1), color, alpha * t });
		t = percent(argument[IntType(4)], .25, IntType(1));
		draw_outline({ xx - IntType(1), yy - IntType(1), width + IntType(2), height + IntType(2), IntType(1), color, alpha * t });
		return 0.0;
	}
	
	void draw_box_rounded(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, w, h;
		VarType roundlefttop, roundrighttop, roundrightbottom, roundleftbottom;
		VarType roundsize, roundsprite;
		IntType oldcolor;
		RealType oldalpha;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		w = argument[IntType(2)];
		h = argument[IntType(3)];
		if (argument_count > IntType(4))
		{
			oldcolor = draw_get_color();
			oldalpha = draw_get_alpha();
			draw_set_color((IntType)(argument[IntType(4)]));
			draw_set_alpha(oldalpha * argument[IntType(5)]);
		}
		if (argument_count > IntType(6))
		{
			roundlefttop = argument[IntType(6)];
			roundrighttop = argument[IntType(7)];
			roundrightbottom = argument[IntType(8)];
			roundleftbottom = argument[IntType(9)];
		}
		else
		{
			roundlefttop = true;
			roundrighttop = true;
			roundrightbottom = true;
			roundleftbottom = true;
		}
		
		if (argument_count > IntType(10))
		{
			roundsize = argument[IntType(10)];
			roundsprite = argument[IntType(11)];
		}
		else
		{
			roundsize = IntType(2);
			roundsprite = ID_spr_rounded_2;
		}
		
		draw_primitive_begin(pr_trianglefan);
		draw_vertex((IntType)(xx + (RealType)w / 2.0), (IntType)(yy + (RealType)h / 2.0));
		if (roundlefttop > 0)
		{
			draw_vertex((IntType)(xx), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy));
		
		if (roundrighttop > 0)
		{
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + w), (IntType)(yy + roundsize));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy));
		
		if (roundrightbottom > 0)
		{
			draw_vertex((IntType)(xx + w), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy + h));
		
		if (roundleftbottom > 0)
		{
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx), (IntType)(yy + h - roundsize));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy + h));
		
		draw_vertex((IntType)(xx), (IntType)(yy + roundsize * roundlefttop));
		draw_primitive_end();
		if (roundlefttop > 0)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1) });
		if (roundrighttop > 0)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(90) });
		if (roundrightbottom > 0)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(180) });
		if (roundleftbottom > 0)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(270) });
		if (argument_count > IntType(4))
		{
			draw_set_color(oldcolor);
			draw_set_alpha(oldalpha);
		}
	}
	
	void draw_box_selection(RealType xx, RealType yy, RealType ww, RealType hh)
	{
		clip_begin(xx, yy, ww, hh);
		render_set_culling(false);
		draw_box({ xx, yy, ww, hh, false, global::c_accent_overlay, global::a_accent_overlay });
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + (IntType(64) * i)), yy + IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(90) });
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + ww - (IntType(64) * i)), yy + hh - IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), -IntType(90) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx + ww, yy + (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(180) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx, yy + hh - (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1) });
		render_set_culling(true);
		clip_end();
	}
	
	RealType draw_button_accent(ScopeAny self, VarType xx, VarType yy, RealType width, RealType height, IntType index)
	{
		BoolType mouseon, mouseclick;
		VarType accent;
		width = floor(width);
		height = floor(height);
		if (xx + width < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + height < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		mouseon = app_mouse_box(self, xx, yy, width, height) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (index < IntType(9))
			accent = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(index);
		else
			accent = null_;
		
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		microani_set(/*"accentlistitem"*/ STR(1052) + string(index), null_, mouseon, mouseclick, sInt(setting_accent) == index, 0.5);
		microani_update({ mouseon, mouseclick, sInt(setting_accent) == index });
		if (accent != null_)
		{
			draw_box({ xx, yy, width, height, false, accent, IntType(1) });
			draw_image({ ID_spr_icons, icons_TICK, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE) });
		}
		else
		{
			draw_outline({ xx + IntType(1), yy + IntType(1), width - IntType(2), height - IntType(2), IntType(1), global::c_border, global::a_border });
			draw_box({ xx, yy, width, height, false, sVar(setting_accent_custom), global::microani_arr.Value(e_microani_ACTIVE) });
			draw_image({ ID_spr_icons, icons_PICKER, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), merge_color((IntType)(global::c_text_secondary), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE)), lerp(global::a_text_secondary, 1.0, global::microani_arr.Value(e_microani_ACTIVE)) });
			tip_set(self, { text_get({ /*"tooltipcustomaccentcolor"*/ STR(1053) }), xx, yy, width, height });
		}
		
		IntType buttoncolor;
		RealType buttonalpha;
		buttoncolor = merge_color(c_white, c_black, global::microani_arr.Value(e_microani_PRESS));
		buttonalpha = lerp(0.0, .17, global::microani_arr.Value(e_microani_HOVER) * (IntType(1) - global::microani_arr.Value(e_microani_PRESS)));
		buttonalpha = lerp(buttonalpha, .20, global::microani_arr.Value(e_microani_PRESS));
		draw_box({ xx, yy, width, height, false, buttoncolor, buttonalpha });
		draw_box_hover({ xx, yy, width, height, global::microani_arr.Value(e_microani_HOVER) });
		if (mouseon && sBool(mouse_left_released))
		{
			sInt(setting_accent) = index;
			sVar(update_interface_timeout) = current_time() + IntType(10000);
			sBool(update_interface_wait) = true;
			return true;
		}
		return 0.0;
	}
	
	RealType draw_button_collapse(ScopeAny self, StringType name, VarType open, IntType script, VarType active, StringType caption, StringType tip)
	{
		draw_set_font(sInt(font_label));
		RealType xx;
		VarType yy;
		IntType wid;
		BoolType mouseon, mousepress, mouseclick;
		xx = sVar(dx) - IntType(8);
		yy = sVar(dy) + ((RealType)sVar(tab_control_h) / 2.0) - IntType(10);
		wid = string_width(text_get({ caption })) + IntType(26);
		mouseon = app_mouse_box(self, xx, sVar(dy), wid, IntType(24)) && sBool(content_mouseon) && active > 0;
		mousepress = mouseon && sBool(mouse_left);
		mouseclick = mouseon && sBool(mouse_left_released);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || sVar(dy) + IntType(24) < sVar(content_y) || sVar(dy) > sVar(content_y) + sVar(content_height))
			return IntType(0);
		draw_button_icon(self, { name + /*"collapse"*/ STR(1054), xx, yy, IntType(20), IntType(20), open > 0 && active > 0, null_, null_, !(active > 0), /*""*/ STR(0), ID_spr_chevron_ani });
		microani_update({ mouseon, mousepress, open > 0 && active > 0 });
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		sVar(dx) += IntType(16);
		sVar(dw) -= 16.0;
		sBool(tab_collapse) = true;
		global::collapse_ani = test_reduced_motion(open, global::microani_arr.Value(e_microani_ACTIVE));
		if (script > 0)
			draw_switch(self, { caption, sVar(dx), sVar(dy), active, script, tip });
		else
		{
			draw_label(self, { text_get({ caption }), sVar(dx), sVar(dy) + (RealType)sVar(tab_control_h) / 2.0, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			draw_help_circle(self, tip, sVar(dx) + string_width(text_get({ caption })) + IntType(4), sVar(dy) + IntType(2), false);
		}
		
		if (mouseclick && ds_map_exists(global::collapse_map, name))
			action_collapse(name, !(DsMap(global::collapse_map).Value(name) > 0));
		return mouseclick;
	}
	
	void draw_button_color(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, VarType color, IntType def, BoolType hsvmode, IntType script)
	{
		VarType textx, textw, buttonx, buttonw;
		RealType h;
		BoolType mouseon, mouseclick, active;
		textx = xx;
		h = sReal(ui_small_height);
		if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
		{
			buttonx = xx;
			buttonw = w;
			textw = w;
			yy += (label_height + IntType(8));
		}
		else
		{
			buttonx = xx + floor((RealType)w / 2.0);
			buttonw = floor((RealType)w / 2.0);
			textw = floor((RealType)w / 2.0) - IntType(8);
		}
		
		active = (sStr(settings_menu_name) == /*"colorpicker"*/ STR(692) && ObjType(obj_colorpicker, sInt(colorpicker))->value_name == name);
		mouseon = app_mouse_box(self, buttonx, yy, buttonw, h) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		context_menu_area(self, { xx, yy, w, h, /*"contextmenuvalue"*/ STR(1055), color, e_context_type_COLOR, script, def });
		microani_set(name, script, mouseon, mouseclick, active, false, IntType(1), true);
		IntType col, labelcolor;
		RealType alpha, labelalpha;
		col = merge_color(IntType(0), global::c_overlay, global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box({ buttonx, yy, buttonw, h, false, global::c_level_top, IntType(1) });
		draw_box({ buttonx, yy, buttonw, h, false, col, alpha });
		col = merge_color((IntType)(global::c_border), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(global::a_border, global::a_text_tertiary, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_outline({ buttonx, yy, buttonw, h, IntType(1), col, alpha, true });
		draw_box({ buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), false, color, IntType(1) });
		draw_outline({ buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), IntType(1), global::c_border, global::a_border, IntType(1) });
		draw_box_hover({ buttonx, yy, buttonw, h, global::microani_arr.Value(e_microani_PRESS) });
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_set_font(sInt(font_label));
		if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
			draw_label(self, { string_limit({ text_get({ name }), textw - IntType(8) }), xx, yy - (label_height + IntType(8)), fa_left, fa_top, labelcolor, labelalpha });
		else
			draw_label(self, { string_limit({ text_get({ name }), textw - IntType(8) }), xx, yy + h / 2.0, fa_left, fa_center, labelcolor, labelalpha });
		
		microani_update({ mouseon, mouseclick, active || (mouseon && sBool(mouse_left)), false });
		if (mouseon && sBool(mouse_left_released))
		{
			colorpicker_show(self, name, color, def, script, xx, yy, w, h);
			if (hsvmode)
				ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"hsv"*/ STR(1011);
		}
	}
	
}
