/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.17 00:48:08 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType block_tile_entity_skull(Scope<obj_builder_thread> self, VarType map)
	{
		StringType mapname, ownerid, texvalue, texurl;
		VarType texlist;
		mapname = /*"Owner"*/ STR(981);
		if (!ds_map_valid(DsMap(map).Value(mapname)))
		{
			mapname = /*"SkullOwner"*/ STR(982);
			if (!ds_map_valid(DsMap(map).Value(mapname)))
				return IntType(0);
		}
		map = DsMap(map).Value(mapname);
		ownerid = string(DsMap(map).Value(/*"Id"*/ STR(983)));
		map = DsMap(map).Value(/*"Properties"*/ STR(984));
		if (!ds_map_valid(map))
			return IntType(0);
		texlist = DsMap(map).Value(/*"textures"*/ STR(840));
		if (!ds_list_valid(texlist))
			return IntType(0);
		map = DsList(texlist).Value(IntType(0));
		texvalue = base64_decode(DsMap(map).Value(/*"Value"*/ STR(985)));
		map = json_decode(texvalue);
		if (!ds_map_valid(map))
			return IntType(0);
		if (!ds_map_valid(DsMap(map).Value(/*"textures"*/ STR(840))))
			return IntType(0);
		map = DsMap(map).Value(/*"textures"*/ STR(840));
		map = DsMap(map).Value(/*"SKIN"*/ STR(986));
		texurl = DsMap(map).Value(/*"url"*/ STR(987)).Str();
		ownerid = filename_change_ext(filename_name(texurl), /*""*/ STR(0));
		DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_map)[self->build_pos] = ownerid;
		if (ds_map_find_value(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map, ownerid) == VarType())
			DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map)[ownerid] = texurl;
		return 0.0;
	}
	
	void block_vbuffer_destroy(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
	}
	
	void block_vbuffer_done(ScopeAny self)
	{
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				vertex_end((IntType)(sVar(block_vbuffer)[d][vb]));
				sVar(block_vbuffer)[d][vb] = vbuffer_generate_tangents(sVar(block_vbuffer)[d][vb]);
				vertex_freeze((IntType)(sVar(block_vbuffer)[d][vb]));
			}
		}
	}
	
	void block_vbuffer_start(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				sVar(block_vbuffer)[d][vb] = vbuffer_start();
				vertex_buffer_set_save_data(sVar(block_vbuffer)[d][vb], true);
				ObjType(obj_builder, global::mc_builder)->vbuffer[d][vb] = sVar(block_vbuffer)[d][vb];
			}
		}
	}
	
	RealType bool_to_float(VarType val)
	{
		if (val > 0)
			return IntType(1);
		return IntType(0);
	}
	
	RealType buffer_is_eof()
	{
		return (buffer_tell(global::buffer_current) >= buffer_get_size(global::buffer_current));
	}
	
	IntType buffer_load_lib(VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			file_copy_lib(fn, temp_file);
			return buffer_load(temp_file);
		}
		else
			return buffer_load(fn);
		
		return IntType(0);
	}
	
	RealType buffer_read_alpha(RealType xx, RealType yy, RealType wid)
	{
		return real((RealType)buffer_peek(global::buffer_current, (IntType)((xx + yy * wid) * IntType(4) + IntType(3)), buffer_u8) / 255.0);
	}
	
	IntType buffer_read_byte()
	{
		return real(buffer_read(global::buffer_current, buffer_u8));
	}
	
	IntType buffer_read_color(RealType xx, RealType yy, RealType wid)
	{
		RealType off;
		IntType r, g, b;
		off = (xx + yy * wid) * IntType(4);
		r = real(buffer_peek(global::buffer_current, (IntType)(off), buffer_u8));
		g = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(1)), buffer_u8));
		b = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(2)), buffer_u8));
		return make_color_rgb(r, g, b);
	}
	
	RealType buffer_read_double()
	{
		return real(buffer_read(global::buffer_current, buffer_f64));
	}
	
	RealType buffer_read_double_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(8); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(8), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(8); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(7) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f64));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_float()
	{
		return real(buffer_read(global::buffer_current, buffer_f32));
	}
	
	RealType buffer_read_float_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(4); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(4), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(4); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(3) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f32));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_int()
	{
		return real(buffer_read(global::buffer_current, buffer_s32));
	}
	
	RealType buffer_read_int_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		byte[IntType(2)] = buffer_read_byte();
		byte[IntType(3)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(16777216) + byte.Value(IntType(1)) * IntType(65536) + byte.Value(IntType(2)) * IntType(256) + byte.Value(IntType(3));
	}
	
	IntType buffer_read_int_uns()
	{
		return buffer_read(global::buffer_current, buffer_u32);
	}
	
	RealType buffer_read_long_be()
	{
		RealType i1, i2;
		i1 = buffer_read_int_be();
		i2 = buffer_read_int_be();
		return i1 * IntType(4294967296) + i2;
	}
	
	RealType buffer_read_short()
	{
		return real(buffer_read(global::buffer_current, buffer_s16));
	}
	
	RealType buffer_read_short_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(256) + byte.Value(IntType(1));
	}
	
	StringType buffer_read_string_int()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = real(buffer_read_int()); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	StringType buffer_read_string_short_be()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = buffer_read_short_be(); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	void buffer_save_lib(IntType buffer, VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			buffer_save(buffer, temp_file);
			file_copy_lib(temp_file, fn);
		}
		else
			buffer_save(buffer, fn);
		
	}
	
	void buffer_skip(RealType bytes)
	{
		buffer_seek(global::buffer_current, buffer_seek_relative, (IntType)(bytes));
	}
	
	void buffer_write_byte(VarType val)
	{
		buffer_write(global::buffer_current, buffer_u8, val);
	}
	
	void buffer_write_double(VarType val)
	{
		buffer_write(global::buffer_current, buffer_f64, val);
	}
	
	void buffer_write_double_be(VarType val)
	{
		IntType tmpbuf;
		ArrType byte;
		tmpbuf = buffer_create(IntType(8), buffer_fixed, IntType(1));
		buffer_write(tmpbuf, buffer_f64, val);
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		for (IntType b = IntType(0); b < IntType(8); b++)
			byte[b] = buffer_read(tmpbuf, buffer_s8);
		buffer_delete(tmpbuf);
		for (IntType b = IntType(0); b < IntType(8); b++)
			buffer_write_byte(byte.Value(IntType(7) - b));
	}
	
	void buffer_write_float_be(VarType val)
	{
		IntType tmpbuf;
		ArrType byte;
		tmpbuf = buffer_create(IntType(4), buffer_fixed, IntType(1));
		buffer_write(tmpbuf, buffer_f32, val);
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		for (IntType b = IntType(0); b < IntType(4); b++)
			byte[b] = buffer_read(tmpbuf, buffer_s8);
		buffer_delete(tmpbuf);
		for (IntType b = IntType(0); b < IntType(4); b++)
			buffer_write_byte(byte.Value(IntType(3) - b));
	}
	
	void buffer_write_int(IntType val)
	{
		buffer_write(global::buffer_current, buffer_s32, val);
	}
	
	void buffer_write_short(VarType val)
	{
		buffer_write(global::buffer_current, buffer_u16, val);
	}
	
	void buffer_write_string_int(StringType str)
	{
		IntType len = string_length(str);
		buffer_write_int(len);
		for (IntType p = IntType(0); p < len; p++)
			buffer_write_byte(ord(string_char_at(str, p + IntType(1))));
	}
	
	void builder_combine_threads(Scope<obj_builder> self)
	{
		for (IntType t = IntType(0); t < ds_list_size(self->thread_list); t++)
		{
			withOne (obj_builder_thread, DsList(self->thread_list).Value(t), self->id)
			{
				if (self->block_multithreaded_skip)
					ObjType(obj_builder, self.otherId)->block_multithreaded_skip = true;
				if (self->block_tl_map != null_)
				{
					VarType key = ds_map_find_first(self->block_tl_map);
					while (!is_undefined(key))
					{
						VarType arr = DsMap(self->block_tl_map).Value(key);
						builder_thread_set_pos(self, key);
						ds_list_add({ ObjType(obj_builder, self.otherId)->block_tl_list, block_get_timeline(self, arr.Value(IntType(0)), arr.Value(IntType(1))) });
						key = ds_map_find_next(self->block_tl_map, key);
					}
					
					ds_map_destroy(self->block_tl_map);
				}
				VarType key = ds_map_find_first(self->block_render_model_multipart_map);
				while (!is_undefined(key))
				{
					builder_thread_set_pos(self, key);
					builder_add_render_model_multi_part(self, self->build_pos_x, self->build_pos_y, self->build_pos_z, DsMap(self->block_render_model_multipart_map).Value(key));
					key = ds_map_find_next(self->block_render_model_multipart_map, key);
				}
				
				ds_map_destroy(self->block_render_model_multipart_map);
				instance_destroy(ScopeAny(self));
			}
			
		}
		if (ds_list_size(self->thread_list) > IntType(1))
			thread_task_end();
		ds_list_clear(self->thread_list);
	}
	
	void builder_event_create(Scope<obj_builder> self)
	{
		self->sch_palette_blocks = null_;
		self->sch_palette_stateids = null_;
		self->sch_palette_waterlogged = null_;
		self->sch_blockdata_array = null_;
		self->sch_blockdata_ints = false;
		self->sch_legacy_blocksarray = null_;
		self->sch_legacy_dataarray = null_;
		self->sch_timeline_amount = IntType(0);
		self->sch_tileentity_list = null_;
		self->build_size = vec3(IntType(0), IntType(0), IntType(0));
		self->build_size_x = IntType(0);
		self->build_size_y = IntType(0);
		self->build_size_xy = IntType(0);
		self->build_size_z = IntType(0);
		self->build_size_total = IntType(0);
		self->build_size_sqrt = IntType(0);
		self->build_pos_x = IntType(0);
		self->build_pos_y = IntType(0);
		self->build_pos_z = IntType(0);
		self->build_edge_xp = false;
		self->build_edge_xn = false;
		self->build_edge_yp = false;
		self->build_edge_yn = false;
		self->build_edge_zp = false;
		self->build_edge_zn = false;
		self->build_edges = true;
		self->build_single_block = null_;
		self->build_single_stateid = IntType(0);
		self->build_multithreaded = null_;
		self->build_randomize = false;
		self->block_obj = null_;
		self->block_waterlogged = null_;
		self->block_current = IntType(0);
		self->block_state_id = null_;
		self->block_state_id_current = IntType(0);
		self->block_render_model = null_;
		self->block_text_front_map = ds_int_map_create();
		self->block_text_front_color_map = ds_int_map_create();
		self->block_text_front_glow_color_map = ds_int_map_create();
		self->block_text_front_glowing_map = ds_int_map_create();
		self->block_text_back_map = ds_int_map_create();
		self->block_text_back_color_map = ds_int_map_create();
		self->block_text_back_glow_color_map = ds_int_map_create();
		self->block_text_back_glowing_map = ds_int_map_create();
		self->block_banner_color_map = ds_int_map_create();
		self->block_banner_patterns_map = ds_int_map_create();
		self->block_banner_pattern_colors_map = ds_int_map_create();
		self->block_skull_map = ds_int_map_create();
		self->block_skull_res_map = ds_map_create();
		self->block_skull_texture_map = ds_string_map_create();
		self->block_skull_texture_fail = false;
		self->block_skull_texture_name = /*""*/ STR(0);
		self->block_skull_texture = null_;
		self->block_skull_download_time = IntType(0);
		self->block_skull_download_wait = false;
		self->block_skull_texture_count = IntType(0);
		self->block_skull_finish_count = IntType(0);
		self->block_skull_fail_count = IntType(0);
		self->block_decorated_pot_sherds_map = ds_int_map_create();
		self->block_multithreaded_skip = false;
		self->block_tl_add = false;
		self->block_tl_list = null_;
		self->block_color = null_;
		self->file_map = /*""*/ STR(0);
		self->builder_scenery = false;
		self->builder_scenery_legacy = false;
		self->thread_list = ds_list_create();
	}
	
	RealType builder_generate(ScopeAny self)
	{
		sInt(block_current) = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		if (sInt(block_current) == null_)
			return IntType(0);
		if (ObjType(obj_builder, global::mc_builder)->build_multithreaded != null_)
		{
			if (idVar(sInt(block_current), multithreaded) != ObjType(obj_builder, global::mc_builder)->build_multithreaded)
			{
				sBool(block_multithreaded_skip) = true;
				return IntType(0);
			}
		}
		sBool(build_edge_xp) = (sInt(build_pos_x) == sInt(build_size_x) - IntType(1));
		sBool(build_edge_xn) = (sInt(build_pos_x) == IntType(0));
		sBool(build_edge_yp) = (sInt(build_pos_y) == sInt(build_size_y) - IntType(1));
		sBool(build_edge_yn) = (sInt(build_pos_y) == IntType(0));
		sBool(build_edge_zp) = (sInt(build_pos_z) == sInt(build_size_z) - IntType(1));
		sBool(build_edge_zn) = (sInt(build_pos_z) == IntType(0));
		sBool(block_face_full_xp) = false;
		sInt(block_face_min_depth_xp) = null_;
		if (sBool(build_edge_xp))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_xp) = true;
				sInt(block_face_min_depth_xp) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_xp) = idBool(othermodel, face_full_xn);
				sVar(block_face_min_xp) = idVar(othermodel, face_min_xn);
				sVar(block_face_max_xp) = idVar(othermodel, face_max_xn);
				sInt(block_face_min_depth_xp) = idInt(othermodel, face_min_depth_xn);
			}
		}
		
		sBool(block_face_full_xn) = false;
		sInt(block_face_min_depth_xn) = null_;
		if (sBool(build_edge_xn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_xn) = true;
				sInt(block_face_min_depth_xn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_xn) = idBool(othermodel, face_full_xp);
				sVar(block_face_min_xn) = idVar(othermodel, face_min_xp);
				sVar(block_face_max_xn) = idVar(othermodel, face_max_xp);
				sInt(block_face_min_depth_xn) = idInt(othermodel, face_min_depth_xp);
			}
		}
		
		sBool(block_face_full_yp) = false;
		sInt(block_face_min_depth_yp) = null_;
		if (sBool(build_edge_yp))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_yp) = true;
				sInt(block_face_min_depth_yp) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_yp) = idBool(othermodel, face_full_yn);
				sVar(block_face_min_yp) = idVar(othermodel, face_min_yn);
				sVar(block_face_max_yp) = idVar(othermodel, face_max_yn);
				sInt(block_face_min_depth_yp) = idInt(othermodel, face_min_depth_yn);
			}
		}
		
		sBool(block_face_full_yn) = false;
		sInt(block_face_min_depth_yn) = null_;
		if (sBool(build_edge_yn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_yn) = true;
				sInt(block_face_min_depth_yn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (othermodel != null_)
			{
				sBool(block_face_full_yn) = idBool(othermodel, face_full_yp);
				sVar(block_face_min_yn) = idVar(othermodel, face_min_yp);
				sVar(block_face_max_yn) = idVar(othermodel, face_max_yp);
				sInt(block_face_min_depth_yn) = idInt(othermodel, face_min_depth_yp);
			}
		}
		
		sBool(block_face_full_zp) = false;
		sInt(block_face_min_depth_zp) = null_;
		if (!sBool(build_edge_zp))
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (othermodel != null_)
			{
				sBool(block_face_full_zp) = idBool(othermodel, face_full_zn);
				sVar(block_face_min_zp) = idVar(othermodel, face_min_zn);
				sVar(block_face_max_zp) = idVar(othermodel, face_max_zn);
				sInt(block_face_min_depth_zp) = idInt(othermodel, face_min_depth_zn);
			}
		}
		sBool(block_face_full_zn) = false;
		sInt(block_face_min_depth_zn) = null_;
		if (sBool(build_edge_zn))
		{
			if (!ObjType(obj_builder, global::mc_builder)->build_edges)
			{
				sBool(block_face_full_zn) = true;
				sInt(block_face_min_depth_zn) = e_block_depth_DEPTH0;
			}
		}
		else
		{
			IntType othermodel = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (othermodel != null_)
			{
				sBool(block_face_full_zn) = idBool(othermodel, face_full_zp);
				sVar(block_face_min_zn) = idVar(othermodel, face_min_zp);
				sVar(block_face_max_zn) = idVar(othermodel, face_max_zp);
				sInt(block_face_min_depth_zn) = idInt(othermodel, face_min_depth_zp);
			}
		}
		
		if (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp) && sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn) && sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp) && sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn) && sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp) && sInt(block_face_min_depth_zn) == e_block_depth_DEPTH0 && sBool(block_face_full_zn))
			return IntType(0);
		sReal(block_state_id_current) = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		sInt(block_pos_x) = sInt(build_pos_x) * block_size_;
		sInt(block_pos_y) = sInt(build_pos_y) * block_size_;
		sInt(block_pos_z) = sInt(build_pos_z) * block_size_;
		sInt(block_color) = null_;
		if (idInt(sInt(block_current), generate_script) > -IntType(1))
			script_execute(self, { idInt(sInt(block_current), generate_script) });
		else
		{
			VarType model = null_;
			if (idVar(sInt(block_current), require_models) > 0)
				model = builder_set_model(self, true);
			else
			{
				IntType modelindex = builder_get_render_model_index(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
				if (modelindex > IntType(0))
					model = modelindex;
				else
					if (modelindex < IntType(0))
						model = builder_get_render_model_multipart(sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z), -modelindex);
				
			}
			
			IntType singlemodel = null_;
			if (is_array(model))
				singlemodel = global::block_rendermodels.Value(model.Value(IntType(0)));
			else
				if (model > IntType(0))
					singlemodel = global::block_rendermodels.Value(model);
			
			if (singlemodel != null_)
			{
				if ((ObjType(obj_block_render_model, singlemodel)->random_offset > 0 && (sInt(build_size_total) > IntType(1))) || (ObjType(obj_block_render_model, singlemodel)->random_offset_xy > 0 && (sInt(build_size_xy) > IntType(1))))
				{
					if (ObjType(obj_block_render_model, singlemodel)->random_offset > 0)
					{
						random_set_seed((IntType)(sInt(build_pos_x) * sInt(build_size_y) * sInt(build_size_z) + sInt(build_pos_y) * sInt(build_size_z) + sInt(build_pos_z)));
						sInt(block_pos_z) += irandom_range(-IntType(3), IntType(0));
					}
					else
						random_set_seed(sInt(build_pos_x) + sInt(build_size_x) * sInt(build_pos_y));
					
					sInt(block_pos_x) += irandom_range(-IntType(4), IntType(4));
					sInt(block_pos_y) += irandom_range(-IntType(4), IntType(4));
				}
			}
			sVar(block_vertex_emissive) = null_;
			sInt(block_vertex_wave) = idInt(sInt(block_current), wind_axis);
			if (idVar(sInt(block_current), wind_zmin) != null_)
				sInt(block_vertex_wave_zmin) = sInt(block_pos_z) + idVar(sInt(block_current), wind_zmin);
			sVar(block_vertex_subsurface) = idVar(sInt(block_current), subsurface);
			if (is_array(model))
			{
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(model)); i++)
					block_render_model_generate(Scope<obj_builder_thread>(self), global::block_rendermodels.Value(model.Value(i)));
			}
			else
				if (model > IntType(0))
					block_render_model_generate(Scope<obj_builder_thread>(self), global::block_rendermodels.Value(model));
			
		}
		
		sInt(block_vertex_wave) = e_vertex_wave_NONE;
		sInt(block_vertex_wave_zmin) = null_;
		sInt(block_vertex_wave_zmax) = null_;
		sVar(block_vertex_emissive) = IntType(0);
		sVar(block_vertex_subsurface) = IntType(0);
		if (builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z)))
		{
			sInt(block_pos_x) = sInt(build_pos_x) * block_size_;
			sInt(block_pos_y) = sInt(build_pos_y) * block_size_;
			sInt(block_pos_z) = sInt(build_pos_z) * block_size_;
			sInt(block_current) = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(/*"water"*/ STR(815));
			block_generate_liquid(self, true);
			sInt(block_vertex_wave) = e_vertex_wave_NONE;
			sInt(block_vertex_wave_zmin) = null_;
			sInt(block_vertex_wave_zmax) = null_;
			sVar(block_vertex_emissive) = IntType(0);
			sVar(block_vertex_subsurface) = IntType(0);
		}
		return 0.0;
	}
	
	BoolType builder_read_schematic(Scope<obj_builder> self, VarType map)
	{
		if (!ds_map_valid(map))
		{
			log({ /*"Schematic error"*/ STR(988), /*"Not a schematic file"*/ STR(989) });
			return false;
		}
		self->builder_scenery_legacy = is_undefined(DsMap(map).Value(/*"Palette"*/ STR(990)));
		self->build_size_x = DsMap(map).Value(/*"Width"*/ STR(991));
		self->build_size_y = DsMap(map).Value(/*"Length"*/ STR(992));
		self->build_size_z = DsMap(map).Value(/*"Height"*/ STR(993));
		log({ /*"Size"*/ STR(59), string(self->build_size_x) + /*" x "*/ STR(994) + string(self->build_size_y) + /*" x "*/ STR(994) + string(self->build_size_z) });
		if (is_undefined(self->build_size_x) || is_undefined(self->build_size_y) || is_undefined(self->build_size_z))
		{
			log({ /*"Schematic error"*/ STR(988), /*"Size not fully defined"*/ STR(995) });
			return false;
		}
		if (self->build_size_x <= IntType(0) || self->build_size_y <= IntType(0) || self->build_size_z <= IntType(0))
		{
			log({ /*"Schematic error"*/ STR(988), /*"Size cannot be 0"*/ STR(996) });
			return false;
		}
		if (!self->builder_scenery_legacy)
		{
			VarType version = DsMap(map).Value(/*"Version"*/ STR(997));
			if (is_undefined(version))
			{
				log({ /*"Schematic error"*/ STR(988), /*"Version not available"*/ STR(998) });
				return false;
			}
			log({ /*"Version"*/ STR(997), DsMap(map).Value(/*"Version"*/ STR(997)) });
			if (version > IntType(1))
			{
				log({ /*"Schematic error"*/ STR(988), /*"Unsupported format, version too high"*/ STR(999) });
				return false;
			}
			VarType palettemap = DsMap(map).Value(/*"Palette"*/ STR(990));
			if (!ds_map_valid(palettemap))
			{
				log({ /*"Schematic error"*/ STR(988), /*"Palette not found"*/ STR(1000) });
				return false;
			}
			for (IntType i = IntType(0); i < ds_map_size((IntType)(palettemap)); i++)
			{
				self->sch_palette_blocks[i] = null_;
				self->sch_palette_stateids[i] = null_;
				self->sch_palette_waterlogged[i] = false;
			}
			VarType key = ds_map_find_first((IntType)(palettemap));
			while (!is_undefined(key))
			{
				if (!string_contains(key, /*"_NBT_"*/ STR(1001)))
				{
					VarType index;
					IntType bracketindex;
					index = DsMap(palettemap).Value(key);
					bracketindex = string_pos(/*"["*/ STR(1002), key);
					if (bracketindex > IntType(0))
					{
						StringType mcid = string_copy(key, IntType(1), (IntType)(bracketindex - IntType(1)));
						StringType varstr = string_copy(key, bracketindex + IntType(1), (IntType)(string_length(key) - IntType(1) - bracketindex));
						VarType block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(mcid);
						if (!is_undefined(block))
						{
							ArrType vars = ArrType();
							if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid)))
								state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid));
							state_vars_add(VarType::CreateRef(vars), string_get_state_vars(varstr));
							self->sch_palette_blocks[index] = block;
							self->sch_palette_stateids[index] = block_get_state_id(block, vars);
							if (state_vars_get_value(vars, /*"waterlogged"*/ STR(833)) != /*"false"*/ STR(775))
								if (ObjType(obj_block, block)->waterlogged > 0 || state_vars_get_value(vars, /*"waterlogged"*/ STR(833)) == /*"true"*/ STR(774))
									self->sch_palette_waterlogged[index] = true;
						}
					}
					else
						if (!is_undefined(DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(key)))
						{
							VarType block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(key);
							self->sch_palette_blocks[index] = block;
							if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(key)))
								self->sch_palette_stateids[index] = block_get_state_id(block, DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(key));
							else
								self->sch_palette_stateids[index] = IntType(0);
							
							self->sch_palette_waterlogged[index] = ObjType(obj_block, block)->waterlogged;
						}
					
				}
				key = ds_map_find_next((IntType)(palettemap), key);
			}
			
			self->sch_blockdata_array = DsMap(map).Value(/*"BlockData"*/ STR(1003));
			if (is_undefined(self->sch_blockdata_array))
			{
				log({ /*"Schematic error"*/ STR(988), /*"BlockData array not found"*/ STR(1004) });
				return false;
			}
			self->sch_blockdata_ints = (DsMap(map).Value(/*"BlockData_NBT_type"*/ STR(1005)) == e_nbt_TAG_INT_ARRAY);
			debug({ /*"blockdataints"*/ STR(1006), self->sch_blockdata_ints });
			VarType metadata = DsMap(map).Value(/*"Metadata"*/ STR(1007));
			if (ds_map_valid(metadata))
				self->file_map = DsMap(metadata).Value(/*"FromMap"*/ STR(1008));
		}
		else
		{
			self->sch_legacy_blocksarray = DsMap(map).Value(/*"Blocks"*/ STR(1009));
			if (is_undefined(self->sch_legacy_blocksarray))
			{
				log({ /*"Schematic error"*/ STR(988), /*"Blocks array not found"*/ STR(1010) });
				return false;
			}
			self->sch_legacy_dataarray = DsMap(map).Value(/*"Data"*/ STR(1011));
			if (is_undefined(self->sch_legacy_dataarray))
			{
				log({ /*"Schematic error"*/ STR(988), /*"Data array not found"*/ STR(1012) });
				return false;
			}
			self->file_map = DsMap(map).Value(/*"FromMap"*/ STR(1008));
		}
		
		if (is_undefined(self->file_map))
			self->file_map = /*""*/ STR(0);
		self->sch_tileentity_list = DsMap(map).Value(/*"TileEntities"*/ STR(1013));
		return true;
	}
	
	BoolType builder_read_schematic_nbt(ScopeAny self, VarType structuremap)
	{
		VarType structureversion, sizemap;
		sBool(scenery_structure) = true;
		structureversion = IntType(1);
		if (!is_undefined(DsMap(structuremap).Value(/*"DataVersion"*/ STR(1014))))
			structureversion = DsMap(structuremap).Value(/*"DataVersion"*/ STR(1014));
		if (structureversion < IntType(2000))
		{
			log({ /*"Structure error"*/ STR(1015), /*"Unsupported format, version too low"*/ STR(1016) });
			return false;
		}
		sizemap = DsMap(structuremap).Value(/*"size"*/ STR(1017));
		ObjType(obj_builder, global::mc_builder)->build_size_x = DsList(sizemap).Value(X_);
		ObjType(obj_builder, global::mc_builder)->build_size_y = DsList(sizemap).Value(Z_);
		ObjType(obj_builder, global::mc_builder)->build_size_z = DsList(sizemap).Value(Y_);
		log({ /*"Size"*/ STR(59), ArrType::From({ ObjType(obj_builder, global::mc_builder)->build_size_x, ObjType(obj_builder, global::mc_builder)->build_size_y, ObjType(obj_builder, global::mc_builder)->build_size_z }) });
		if (ObjType(obj_builder, global::mc_builder)->build_size_x <= IntType(0) || ObjType(obj_builder, global::mc_builder)->build_size_y <= IntType(0) || ObjType(obj_builder, global::mc_builder)->build_size_z <= IntType(0))
		{
			log({ /*"Structure error"*/ STR(1015), /*"Size cannot be 0"*/ STR(996) });
			return false;
		}
		VarType paletteslist, palettelist;
		paletteslist = DsMap(structuremap).Value(/*"palettes"*/ STR(1018));
		if (ds_list_valid(paletteslist))
		{
			sInt(scenery_palette_size) = ds_list_size((IntType)(paletteslist));
			palettelist = DsList(paletteslist).Value(mod(sVar(scenery_palette), sInt(scenery_palette_size)));
		}
		else
		{
			palettelist = DsMap(structuremap).Value(/*"palette"*/ STR(1019));
			if (!ds_list_valid(palettelist))
			{
				log({ /*"Structure error"*/ STR(1015), /*"Palette not found"*/ STR(1000) });
				return false;
			}
		}
		
		ArrType paletteblocks, palettestateids, palettewaterlogged;
		for (IntType i = IntType(0); i < ds_list_size((IntType)(palettelist)); i++)
		{
			paletteblocks[i] = null_;
			palettestateids[i] = null_;
			palettewaterlogged[i] = false;
		}
		for (IntType i = IntType(0); i < ds_list_size((IntType)(palettelist)); i++)
		{
			VarType block, blockmap, mcid, propertiesmap, propertiesarr, key;
			blockmap = DsList(palettelist).Value(i);
			mcid = DsMap(blockmap).Value(/*"Name"*/ STR(1020));
			block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(mcid);
			propertiesarr = null_;
			if (!is_undefined(block))
			{
				ArrType vars = ArrType();
				if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid)))
					state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(mcid));
				propertiesmap = DsMap(blockmap).Value(/*"Properties"*/ STR(984));
				if (!is_undefined(propertiesmap))
				{
					key = ds_map_find_first((IntType)(propertiesmap));
					IntType index = IntType(0);
					for (IntType j = IntType(0); j < ds_map_size((IntType)(propertiesmap)); j++)
					{
						if (!string_contains(key, /*"_NBT_"*/ STR(1001)))
						{
							propertiesarr[index * IntType(2)] = key;
							propertiesarr[index * IntType(2) + IntType(1)] = DsMap(propertiesmap).Value(key);
							index++;
						}
						key = ds_map_find_next((IntType)(propertiesmap), key);
					}
				}
				state_vars_add(VarType::CreateRef(vars), propertiesarr);
				paletteblocks[i] = block;
				palettestateids[i] = block_get_state_id(block, vars);
				if (state_vars_get_value(vars, /*"waterlogged"*/ STR(833)) != /*"false"*/ STR(775))
					if (ObjType(obj_block, block)->waterlogged > 0 || state_vars_get_value(vars, /*"waterlogged"*/ STR(833)) == /*"true"*/ STR(774))
						palettewaterlogged[i] = true;
			}
		}
		VarType blocklist = DsMap(structuremap).Value(/*"blocks"*/ STR(1021));
		if (!ds_list_valid(blocklist))
		{
			log({ /*"Structure error"*/ STR(1015), /*"Block list not found"*/ STR(1022) });
			return false;
		}
		withOne (obj_builder, global::mc_builder, self->id)
		{
			debug_timer_start();
			builder_start(self);
			for (IntType i = IntType(0); i < ds_list_size((IntType)(blocklist)); i++)
			{
				VarType blockmap, pos, state, block, stateid, entity, blocknbt;
				RealType index;
				IntType waterlogged;
				blockmap = DsList(blocklist).Value(i);
				pos = DsMap(blockmap).Value(/*"pos"*/ STR(1023));
				state = DsMap(blockmap).Value(/*"state"*/ STR(1024));
				index = DsList(pos).Value(Y_) * DsList(sizemap).Value(X_) * DsList(sizemap).Value(Z_) + DsList(pos).Value(Z_) * DsList(sizemap).Value(X_) + DsList(pos).Value(X_);
				block = paletteblocks.Value(state);
				stateid = palettestateids.Value(state);
				waterlogged = palettewaterlogged.Value(state);
				entity = null_;
				random_set_seed((IntType)(index));
				if (idVar(self.otherId, scenery_integrity_invert) > 0)
				{
					if (random(1.0) < idVar(self.otherId, scenery_integrity))
						continue;
				}
				else
				{
					if (random(1.0) > idVar(self.otherId, scenery_integrity))
						continue;
				}
				
				blocknbt = DsMap(blockmap).Value(/*"nbt"*/ STR(1025));
				if (!is_undefined(blocknbt))
				{
					VarType finalstate, script;
					finalstate = DsMap(blocknbt).Value(/*"final_state"*/ STR(1026));
					if (!is_undefined(finalstate))
					{
						block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_id_map).Value(finalstate);
						if (is_undefined(block))
							continue;
						ArrType vars = ArrType();
						if (ObjType(obj_block, block)->id_state_vars_map != null_ && is_array(DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(finalstate)))
							state_vars_add(VarType::CreateRef(vars), DsMap(ObjType(obj_block, block)->id_state_vars_map).Value(finalstate));
						stateid = block_get_state_id(block, vars);
					}
					else
						entity = DsMap(blocknbt).Value(/*"id"*/ STR(86));
					
				}
				if (block != null_)
				{
					buffer_poke(self->block_obj, (IntType)(index * IntType(2)), buffer_u16, ObjType(obj_block, block)->block_id);
					buffer_poke(self->block_state_id, (IntType)(index * IntType(2)), buffer_u16, (IntType)(stateid));
					buffer_poke(self->block_waterlogged, (IntType)(index), buffer_u8, waterlogged);
				}
				if (entity != null_)
				{
					self->script = asset_get_index(/*"block_tile_entity_"*/ STR(1027) + string_replace(string_lower(entity), /*"minecraft:"*/ STR(836), /*""*/ STR(0)));
					if (self->script > -IntType(1))
					{
						self->build_pos_x = DsList(pos).Value(X_);
						self->build_pos_y = DsList(pos).Value(Z_);
						self->build_pos_z = DsList(pos).Value(Y_);
						self->build_pos = self->build_pos_z * self->build_size_xy + self->build_pos_y * self->build_size_x + self->build_pos_x;
						self->block_current = builder_get_block(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
						self->block_state_id_current = builder_get_state_id(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
						script_execute(ScopeAny(self), { self->script, blocknbt });
					}
				}
			}
		}
		
		debug_timer_stop(/*"res_load_scenery, Parse blocks"*/ STR(1028));
		return true;
	}
	
	void builder_read_schematic_tile_entities(Scope<obj_builder> self)
	{
		if (ds_list_valid(self->sch_tileentity_list))
		{
			builder_spawn_threads(self, IntType(1));
			withOne (obj_builder_thread, DsList(self->thread_list).Value(IntType(0)), self->id)
			{
				debug_timer_start();
				for (IntType i = IntType(0); i < ds_list_size((IntType)(ObjType(obj_builder, self.otherId)->sch_tileentity_list)); i++)
				{
					VarType entity, eid, ex, ey, ez;
					entity = DsList(ObjType(obj_builder, self.otherId)->sch_tileentity_list).Value(i);
					if (!self->builder_scenery_legacy)
					{
						eid = DsMap(entity).Value(/*"Id"*/ STR(983));
						VarType poslist = DsMap(entity).Value(/*"Pos"*/ STR(1030));
						buffer_seek(global::buffer_current, buffer_seek_start, (IntType)(poslist));
						ex = buffer_read_int_be();
						ez = buffer_read_int_be();
						ey = buffer_read_int_be();
					}
					else
					{
						eid = DsMap(entity).Value(/*"id"*/ STR(86));
						ex = DsMap(entity).Value(/*"x"*/ STR(848));
						ey = DsMap(entity).Value(/*"z"*/ STR(849));
						ez = DsMap(entity).Value(/*"y"*/ STR(831));
					}
					
					if (is_string(eid))
					{
						VarType script = asset_get_index(/*"block_tile_entity_"*/ STR(1027) + string_replace(string_lower(eid), /*"minecraft:"*/ STR(836), /*""*/ STR(0)));
						if (script > -IntType(1))
						{
							self->build_pos_x = ex;
							self->build_pos_y = ey;
							self->build_pos_z = ez;
							self->build_pos = self->build_pos_z * self->build_size_xy + self->build_pos_y * self->build_size_x + self->build_pos_x;
							self->block_current = builder_get_block(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
							self->block_state_id_current = builder_get_state_id(ScopeAny(self), self->build_pos_x, self->build_pos_y, self->build_pos_z);
							script_execute(ScopeAny(self), { script, entity });
						}
					}
				}
				debug_timer_stop(/*"Parse Tile Entities"*/ STR(1031));
			}
			
			builder_combine_threads(self);
		}
	}
	
	VarType builder_set_model(ScopeAny self, BoolType ongeneration)
	{
		sInt(block_current) = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		if (sInt(block_current) == null_)
			return IntType(0);
		sReal(block_state_id_current) = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z));
		VarType model, ret;
		model = null_;
		ret = IntType(0);
		if (idInt(sInt(block_current), set_script) > -IntType(1))
		{
			if (!(idVar(sInt(block_current), require_models) > 0) || ongeneration)
			{
				sBool(build_edge_xp) = (sInt(build_pos_x) == sInt(build_size_x) - IntType(1));
				sBool(build_edge_xn) = (sInt(build_pos_x) == IntType(0));
				sBool(build_edge_yp) = (sInt(build_pos_y) == sInt(build_size_y) - IntType(1));
				sBool(build_edge_yn) = (sInt(build_pos_y) == IntType(0));
				sBool(build_edge_zp) = (sInt(build_pos_z) == sInt(build_size_z) - IntType(1));
				sBool(build_edge_zn) = (sInt(build_pos_z) == IntType(0));
				ret = script_execute(self, { idInt(sInt(block_current), set_script) });
				if (ret != IntType(0))
					model = ret;
			}
			else
				ret = null_;
			
		}
		BoolType tlvalid = (ObjType(obj_builder, global::mc_builder)->block_tl_add == null_ || ObjType(obj_builder, global::mc_builder)->block_tl_add > 0) && idVar(sInt(block_current), timeline) > 0 && sInt(block_tl_map) != null_ && ret != null_;
		if (tlvalid && !(idVar(sInt(block_current), model_double) > 0))
			DsMap(sInt(block_tl_map))[sInt(build_pos)] = ArrType::From({ sInt(block_current), sReal(block_state_id_current) });
		else
		{
			if (tlvalid && idVar(sInt(block_current), model_double) > 0)
				DsMap(sInt(block_tl_map))[sInt(build_pos)] = ArrType::From({ sInt(block_current), sReal(block_state_id_current) });
			if (ret == IntType(0) && idVar(sInt(block_current), state_id_model_obj) != null_)
			{
				VarType modelobj = idVar(sInt(block_current), state_id_model_obj).Value(sReal(block_state_id_current));
				if (modelobj != null_ && !is_undefined(modelobj))
				{
					VarType brightness, offset, offsetxy;
					brightness = idVar(sInt(block_current), state_id_emissive).Value(sReal(block_state_id_current));
					offset = idVar(sInt(block_current), state_id_random_offset).Value(sReal(block_state_id_current));
					offsetxy = idVar(sInt(block_current), state_id_random_offset_xy).Value(sReal(block_state_id_current));
					if (is_array(modelobj))
					{
						model = ArrType();
						for (IntType i = IntType(0); i < array_length(VarType::CreateRef(modelobj)); i++)
							array_add(VarType::CreateRef(model), block_get_render_model(modelobj.Value(i), brightness, offset, offsetxy));
					}
					else
						model = block_get_render_model(modelobj, brightness, offset, offsetxy);
					
				}
			}
			if (is_array(model))
				DsMap(sInt(block_render_model_multipart_map))[sInt(build_pos)] = model;
			else
				if (model != null_)
					builder_set_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z), model);
			
		}
		
		return model;
	}
	
}
