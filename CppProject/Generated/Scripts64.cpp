/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.16 10:06:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void tab_timeline_editor_appearance(ScopeAny self)
	{
		if (idVar(global::tl_edit, type) != e_tl_type_POINT_LIGHT && idVar(global::tl_edit, type) != e_tl_type_SPOT_LIGHT)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"tl_glint"*/ STR(172), DsMap(global::collapse_map).Value(/*"tl_glint"*/ STR(172)), null_, true, /*"timelineeditorglint"*/ STR(3814));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"tl_glint"*/ STR(172)) > 0)
			{
				tab_collapse_start(self);
				VarType tex;
				if (idVar(idVar(global::tl_edit, glint_tex), type) == e_res_type_PACK)
				{
					if (idVar(global::tl_edit, glint_mode) == e_glint_ENTITY)
						tex = idInt(idVar(global::tl_edit, glint_tex), glint_entity_texture);
					else
						tex = idInt(idVar(global::tl_edit, glint_tex), glint_item_texture);
					
				}
				else
					tex = idVar(idVar(global::tl_edit, glint_tex), texture);
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"timelineeditorglinttex"*/ STR(1542), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, glint_tex), idVar(idVar(global::tl_edit, glint_tex), display_name), ID_action_tl_glint_tex, false, tex });
				tab_next(self);
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"timelineeditorglintmodenone"*/ STR(3815), null_, e_glint_NONE, idVar(global::tl_edit, glint_mode) == e_glint_NONE, ID_action_tl_glint_mode });
				togglebutton_add(self, { /*"timelineeditorglintmodeitem"*/ STR(3816), null_, e_glint_ITEM, idVar(global::tl_edit, glint_mode) == e_glint_ITEM, ID_action_tl_glint_mode });
				togglebutton_add(self, { /*"timelineeditorglintmodeentity"*/ STR(3817), null_, e_glint_ENTITY, idVar(global::tl_edit, glint_mode) == e_glint_ENTITY, ID_action_tl_glint_mode });
				draw_togglebutton(self, /*"timelineeditorglintmode"*/ STR(3818), sVar(dx), sVar(dy));
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"timelineeditorglintscale"*/ STR(3819), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, glint_scale) * IntType(100)), idVar(global::tl_edit, glint_scale), IntType(1), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), appearance))->tbx_glint_scale, ID_action_tl_glint_scale);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"timelineeditorglintspeed"*/ STR(3820), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, glint_speed) * IntType(100)), idVar(global::tl_edit, glint_speed), IntType(1), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), appearance))->tbx_glint_speed, ID_action_tl_glint_speed);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"timelineeditorglintstrength"*/ STR(3821), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, glint_strength) * IntType(100)), idVar(global::tl_edit, glint_strength), IntType(1), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), appearance))->tbx_glint_strength, ID_action_tl_glint_strength);
				tab_next(self);
				tab_collapse_end(self);
			}
			sVar(dy) += IntType(8);
			tab_control_menu(self);
			draw_button_menu(self, { /*"timelineeditorblendmode"*/ STR(1503), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, blend_mode), text_get({ /*"timelineeditorblendmode"*/ STR(1503) + idVar(global::tl_edit, blend_mode) }), ID_action_tl_blend_mode });
			tab_next(self);
			VarType text;
			if (idVar(global::tl_edit, alpha_mode) == e_alpha_mode_BLEND)
				text = text_get({ /*"renderalphamodeblend"*/ STR(1526) });
			else
				if (idVar(global::tl_edit, alpha_mode) == e_alpha_mode_HASHED)
					text = text_get({ /*"renderalphamodehashed"*/ STR(1525) });
				else
					text = text_get({ /*"renderalphamodedefault"*/ STR(1524) });
			
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"timelineeditoralphamode"*/ STR(1523), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, alpha_mode), text, ID_action_tl_alpha_mode });
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"timelineeditordepth"*/ STR(3822), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, depth), 0.1, -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), appearance))->tbx_depth, ID_action_tl_depth);
			tab_next(self);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditortextureblur"*/ STR(3823), sVar(dx), sVar(dy), idVar(global::tl_edit, texture_blur), ID_action_tl_texture_blur);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditortexturefiltering"*/ STR(3824), sVar(dx), sVar(dy), idVar(global::tl_edit, texture_filtering), ID_action_tl_texture_filtering);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorshadows"*/ STR(3825), sVar(dx), sVar(dy), idVar(global::tl_edit, shadows), ID_action_tl_shadows);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorssao"*/ STR(3826), sVar(dx), sVar(dy), idVar(global::tl_edit, ssao), ID_action_tl_ssao);
			tab_next(self);
			if (type_has_wind(idVar(global::tl_edit, type)))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorwind"*/ STR(3827), sVar(dx), sVar(dy), idVar(global::tl_edit, wind), ID_action_tl_wind);
				tab_next(self);
				if (idVar(global::tl_edit, type) != e_temp_type_TEXT && !type_is_shape(idVar(global::tl_edit, type)))
				{
					tab_control_checkbox(self);
					draw_checkbox(self, /*"timelineeditorwindterrain"*/ STR(3828), sVar(dx), sVar(dy), idVar(global::tl_edit, wind_terrain), ID_action_tl_wind_terrain);
					tab_next(self);
				}
			}
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorglow"*/ STR(3829), sVar(dx), sVar(dy), idVar(global::tl_edit, glow), ID_action_tl_glow);
			tab_next(self);
			if (idVar(global::tl_edit, glow) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorglowtexture"*/ STR(3830), sVar(dx), sVar(dy), idVar(global::tl_edit, glow_texture), ID_action_tl_glow_texture);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditoronlyrenderglow"*/ STR(3831), sVar(dx), sVar(dy), idVar(global::tl_edit, only_render_glow), ID_action_tl_only_render_glow);
				tab_next(self);
			}
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorfog"*/ STR(3832), sVar(dx), sVar(dy), idVar(global::tl_edit, fog), ID_action_tl_fog);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorbackfaces"*/ STR(3833), sVar(dx), sVar(dy), idVar(global::tl_edit, backfaces), ID_action_tl_backfaces);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorhqhiding"*/ STR(3834), sVar(dx), sVar(dy), idVar(global::tl_edit, hq_hiding), ID_action_tl_hq_hiding);
			tab_next(self);
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorlqhiding"*/ STR(3835), sVar(dx), sVar(dy), idVar(global::tl_edit, lq_hiding), ID_action_tl_lq_hiding);
			tab_next(self);
			tab_set_collumns(self, { false });
		}
		else
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorrendershadows"*/ STR(3836), sVar(dx), sVar(dy), idVar(global::tl_edit, shadows), ID_action_tl_shadows);
			tab_next(self);
		}
		
	}
	
	void tab_timeline_editor_audio(ScopeAny self)
	{
		tab_control_button_label(self);
		draw_button_label(self, /*"timelineeditoraudioadd"*/ STR(3837), floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy), null_, null_, e_button_PRIMARY, ID_action_tl_add_sound, e_anchor_CENTER);
		tab_next(self);
	}
	
	RealType tab_timeline_editor_hierarchy(ScopeAny self)
	{
		VarType par = idVar(global::tl_edit, parent);
		if (par == sInt(timeline_move_obj))
			par = idVar(global::tl_edit, move_parent);
		if (idVar(global::tl_edit, part_of) == null_)
		{
			VarType text;
			if (par == global::_app->id)
				text = text_get({ /*"timelinenone"*/ STR(1715) });
			else
				text = string_remove_newline(idVar(par, display_name));
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"timelineeditorparent"*/ STR(1103), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), par, text, ID_action_tl_parent });
			tab_next(self);
			if (!idArr(global::tl_edit, value_type).Value(e_value_type_HIERARCHY))
				return IntType(0);
			if (par != global::_app->id && idVar(par, type) == e_temp_type_BODYPART && idVar(par, model_part) != null_ && idInt(idVar(par, model_part), bend_part) != null_)
			{
				ArrType partname = ArrType::From({ /*"right"*/ STR(204), /*"left"*/ STR(203), /*"front"*/ STR(890), /*"back"*/ STR(892), /*"upper"*/ STR(924), /*"lower"*/ STR(1881) });
				tab_control_switch(self);
				draw_switch(self, /*"timelineeditorlockbend"*/ STR(3838) + partname.Value(idInt(idVar(par, model_part), bend_part)), sVar(dx), sVar(dy), idVar(global::tl_edit, lock_bend), ID_action_tl_lock_bend);
				tab_next(self);
			}
		}
		if (par != global::_app->id)
		{
			sVar(dy) += IntType(20);
			draw_label(self, { text_get({ /*"timelineeditorinherit"*/ STR(3839) }) + /*":"*/ STR(790), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorinheritposition"*/ STR(3840), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_position), ID_action_tl_inherit_position);
			tab_next(self);
			if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_ROT))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritrotation"*/ STR(3841), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_rotation), ID_action_tl_inherit_rotation);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_ROT_POINT) && sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritrotpoint"*/ STR(3842), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_rot_point), ID_action_tl_inherit_rot_point);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_SCA))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritscale"*/ STR(3843), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_scale), ID_action_tl_inherit_scale);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_COLOR))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritopacity"*/ STR(3844), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_alpha), ID_action_tl_inherit_alpha);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritcolor"*/ STR(3845), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_color), ID_action_tl_inherit_color);
				tab_next(self);
			}
			tab_control_checkbox(self);
			draw_checkbox(self, /*"timelineeditorinheritvisibility"*/ STR(3846), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_visibility), ID_action_tl_inherit_visibility);
			tab_next(self);
			if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_BEND) && sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritbend"*/ STR(3847), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_bend), ID_action_tl_inherit_bend);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinherittexture"*/ STR(3848), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_texture), ID_action_tl_inherit_texture);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL) && sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritsurface"*/ STR(3849), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_surface), ID_action_tl_inherit_surface);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL) && sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritsubsurface"*/ STR(3850), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_subsurface), ID_action_tl_inherit_subsurface);
				tab_next(self);
			}
			if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL) && !idArr(global::tl_edit, value_type).Value(e_value_type_CAMERA) && sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritglowcolor"*/ STR(3851), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_glow_color), ID_action_tl_inherit_glow_color);
				tab_next(self);
			}
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritselect"*/ STR(3852), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_select), ID_action_tl_inherit_select);
				tab_next(self);
			}
			if ((idVar(global::tl_edit, type) == e_tl_type_CHARACTER || idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_MODEL) && (idVar(par, type) == e_tl_type_CHARACTER || idVar(par, type) == e_tl_type_SPECIAL_BLOCK || idVar(par, type) == e_tl_type_MODEL))
			{
				tab_control_checkbox(self);
				draw_checkbox(self, /*"timelineeditorinheritpose"*/ STR(3853), sVar(dx), sVar(dy), idVar(global::tl_edit, inherit_pose), ID_action_tl_inherit_pose, /*"timelineeditorinheritposehelp"*/ STR(3854));
				tab_next(self);
			}
			tab_set_collumns(self, { false });
			if (idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_SCA) && idVar(global::tl_edit, inherit_scale) > 0 && sReal(setting_advanced_mode) > 0)
			{
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"timelineeditorscalemoderesize"*/ STR(3855), null_, IntType(1), idVar(global::tl_edit, scale_resize) == IntType(1), ID_action_tl_scale_resize });
				togglebutton_add(self, { /*"timelineeditorscalemodestretch"*/ STR(3856), null_, IntType(0), idVar(global::tl_edit, scale_resize) == IntType(0), ID_action_tl_scale_resize });
				draw_togglebutton(self, /*"timelineeditorscalemode"*/ STR(3857), sVar(dx), sVar(dy));
				tab_next(self);
			}
		}
		return 0.0;
	}
	
	void tab_timeline_editor_info(ScopeAny self)
	{
		tab_control_textfield(self);
		ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), info))->tbx_name)->text = idVar(global::tl_edit, name);
		draw_textfield(self, /*"timelineeditorname"*/ STR(3858), sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_category, idInt(sVar(tab), info))->tbx_name, ID_action_tl_name, string_remove_newline(idVar(global::tl_edit, display_name)), /*"top"*/ STR(202));
		tab_next(self);
		if (idVar(global::tl_edit, type) == e_temp_type_TEXT)
		{
			tab_control_textfield(self, true, IntType(76));
			ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), info))->tbx_text)->text = idVar(global::tl_edit, text);
			draw_textfield(self, /*"timelineeditortext"*/ STR(3269), sVar(dx), sVar(dy), sVar(dw), IntType(76), ObjType(obj_category, idInt(sVar(tab), info))->tbx_text, ID_action_tl_text, /*""*/ STR(0), /*"top"*/ STR(202));
			tab_next(self);
		}
		tab_control(self, sReal(ui_small_height));
		draw_label_value(self, sVar(dx), sVar(dy), sVar(dw), sReal(ui_small_height), text_get({ /*"timelineeditortype"*/ STR(3859) }), string_remove_newline(idVar(global::tl_edit, type_name)));
		tab_next(self);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_ROT_POINT) && sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"timelineeditorrotpointcustom"*/ STR(3860), sVar(dx), sVar(dy), idVar(global::tl_edit, rot_point_custom), ID_action_tl_rotpoint_custom);
			tab_next(self);
			if (idVar(global::tl_edit, rot_point_custom) > 0)
			{
				RealType snapval, mul;
				VarType def;
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_position) : snap_min);
				mul = max({ IntType(1), point3D_distance(idVar(global::tl_edit, world_pos), global::cam_from) }) / 500.0;
				if (idVar(global::tl_edit, part_of) == null_ && idVar(global::tl_edit, temp) != null_)
					def = idVar(idVar(global::tl_edit, temp), rot_point);
				else
					def = point3D(IntType(0), IntType(0), IntType(0));
				
				global::axis_edit = X_;
				textfield_group_add(self, { /*"timelineeditorrotpointx"*/ STR(3861), idVar(global::tl_edit, rot_point).Value(global::axis_edit), def.Value(global::axis_edit), ID_action_tl_rotpoint, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), info))->tbx_rot_point_x });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
				textfield_group_add(self, { /*"timelineeditorrotpointy"*/ STR(3862), idVar(global::tl_edit, rot_point).Value(global::axis_edit), def.Value(global::axis_edit), ID_action_tl_rotpoint, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), info))->tbx_rot_point_y });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
				textfield_group_add(self, { /*"timelineeditorrotpointz"*/ STR(3863), idVar(global::tl_edit, rot_point).Value(global::axis_edit), def.Value(global::axis_edit), ID_action_tl_rotpoint, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), info))->tbx_rot_point_z });
				sInt(context_menu_group_temp) = e_context_group_ROT_POINT;
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"timelineeditorrotpoint"*/ STR(3864), sVar(dx), sVar(dy), sVar(dw), mul, -no_limit, no_limit, snapval, false, true, IntType(1));
				tab_next(self);
				sInt(context_menu_group_temp) = null_;
			}
		}
	}
	
	void tab_timeline_editor_path(ScopeAny self)
	{
		tab_control_button_label(self);
		draw_button_label(self, /*"timelineeditorpathpointadd"*/ STR(3865), floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy), null_, icons_PATH_POINT, e_button_PRIMARY, ID_action_tl_path_point_add, fa_middle);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"timelineeditorpathclosed"*/ STR(3866), sVar(dx), sVar(dy), idVar(global::tl_edit, path_closed), ID_action_tl_path_closed);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"timelineeditorpathsmooth"*/ STR(3867), sVar(dx), sVar(dy), idVar(global::tl_edit, path_smooth), ID_action_tl_path_smooth);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"timelineeditorpathdetail"*/ STR(3868), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, path_detail), 1.0 / 4.0, IntType(1), no_limit, IntType(6), IntType(1), ObjType(obj_category, idInt(sVar(tab), path))->tbx_detail, ID_action_tl_path_detail, null_, true, false, /*"timelineeditorpathdetailtip"*/ STR(3869));
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"path_shape"*/ STR(153), DsMap(global::collapse_map).Value(/*"path_shape"*/ STR(153)), ID_action_tl_path_shape_generate, idVar(global::tl_edit, path_shape_generate), /*"timelineeditorpathshape"*/ STR(3870));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"path_shape"*/ STR(153)) > 0 && idVar(global::tl_edit, path_shape_generate) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"timelineeditorpathshaperadius"*/ STR(3871), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, path_shape_radius), 0.1, 0.01, no_limit, IntType(8), 0.01, ObjType(obj_category, idInt(sVar(tab), path))->tbx_radius, ID_action_tl_path_shape_radius);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"timelineeditorpathshapetexlength"*/ STR(3872), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, path_shape_tex_length), 0.1, 0.01, no_limit, IntType(16), 0.01, ObjType(obj_category, idInt(sVar(tab), path))->tbx_tex_length, ID_action_tl_path_shape_tex_length, null_, true, false, /*"timelineeditorpathshapetexlengthtip"*/ STR(3873));
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"timelineeditorpathshapeinvert"*/ STR(3874), sVar(dx), sVar(dy), idVar(global::tl_edit, path_shape_invert), ID_action_tl_path_shape_invert);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"timelineeditorpathshapesmoothsegments"*/ STR(3875), sVar(dx), sVar(dy), idVar(global::tl_edit, path_shape_smooth_segments), ID_action_tl_path_shape_smooth_segments, /*"timelineeditorpathshapesmoothsegmentstip"*/ STR(3876));
			tab_next(self);
			tab_control_switch(self);
			draw_button_collapse(self, /*"path_shape_tube"*/ STR(154), DsMap(global::collapse_map).Value(/*"path_shape_tube"*/ STR(154)), ID_action_tl_path_shape_tube, idVar(global::tl_edit, path_shape_tube), /*"timelineeditorpathshapetube"*/ STR(3877));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"path_shape_tube"*/ STR(154)) > 0 && idVar(global::tl_edit, path_shape_tube) > 0)
			{
				tab_collapse_start(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"timelineeditorpathshapedetail"*/ STR(3878), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, path_shape_detail), 1.0 / 4.0, IntType(3), no_limit, IntType(6), IntType(1), ObjType(obj_category, idInt(sVar(tab), path))->tbx_shape_detail, ID_action_tl_path_shape_detail);
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"timelineeditorpathshapesmoothring"*/ STR(3879), sVar(dx), sVar(dy), idVar(global::tl_edit, path_shape_smooth_ring), ID_action_tl_path_shape_smooth_ring, /*"timelineeditorpathshapesmoothringtip"*/ STR(3880));
				tab_next(self);
				tab_collapse_end(self);
			}
			tab_control_button_label(self);
			if (draw_button_label(self, /*"timelineeditorpathshapesavemap"*/ STR(3881), sVar(dx), sVar(dy), sVar(dw), icons_TEXTURE_EXPORT, e_button_SECONDARY))
			{
				StringType fn = file_dialog_save_image(/*"path"*/ STR(562));
				if (fn != /*""*/ STR(0))
					sprite_save_lib(ID_spr_map_cylinder, IntType(0), fn);
			}
			tab_next(self);
			tab_collapse_end(self);
		}
	}
	
	void tab_toggle(ScopeAny self, IntType tab)
	{
		if (ObjType(obj_tab, tab)->show > 0)
			tab_close(self, tab);
		else
			tab_show(self, tab);
		
	}
	
	IntType temp_animate(ScopeAny self)
	{
		sInt(count)++;
		withOne (obj_timeline, (new obj_timeline)->id, self->id)
		{
			self->type = idVar(self.otherId, type);
			self->temp = self.otherId;
			tl_set_parent_root(ScopeAny(self));
			switch ((IntType)self->type)
			{
				case e_temp_type_CHARACTER:
				case e_temp_type_SPECIAL_BLOCK:
				case e_temp_type_MODEL:
				{
					self->part_list = ds_list_create();
					if (idVar(self->temp, model_file) != null_)
					{
						for (IntType p = IntType(0); p < ds_list_size(idInt(idVar(self->temp, model_file), file_part_list)); p++)
						{
							VarType part = DsList(idInt(idVar(self->temp, model_file), file_part_list)).Value(p);
							if (idInt(self->temp, model_hide_list) == null_ || ds_list_find_index(idInt(self->temp, model_hide_list), ObjType(obj_model_part, part)->name) == -IntType(1))
								ds_list_add({ self->part_list, tl_new_part(self, part) });
						}
						tl_update_part_list(ScopeAny(self), idVar(self->temp, model_file), self->id);
					}
					break;
				}
				
				case e_temp_type_BLOCK:
				{
					self->texture_filtering = true;
					break;
				}
				case e_temp_type_SCENERY:
				{
					self->texture_filtering = true;
					if (idVar(self->temp, scenery) != null_)
					{
						if (idBool(idVar(self->temp, scenery), ready))
							tl_animate_scenery(self);
						else
							self->scenery_animate = true;
						
					}
					break;
				}
				
				case e_temp_type_BODYPART:
				{
					self->model_part = idVar(self->temp, model_part);
					if (self->model_part != null_)
						self->model_part_name = idVar(self->model_part, name);
					else
						self->model_part_name = /*""*/ STR(0);
					
					break;
				}
				
				case e_temp_type_SURFACE:
				{
					self->backfaces = true;
					break;
				}
			}
			
			tl_update(ScopeAny(self));
			tl_value_spawn(ScopeAny(self));
			return self->id;
		}
		
		return IntType(0);
	}
	
	void temp_copy(ScopeAny self, IntType to)
	{
		if (self->id == global::_app->bench_settings && sVar(type) == e_tl_type_SHAPE)
			idVar(to, type) = e_temp_type_CUBE + sReal(shape_type);
		else
			idVar(to, type) = sVar(type);
		
		idVar(to, name) = sVar(name);
		idVar(to, model) = sVar(model);
		idVar(to, model_file) = sVar(model_file);
		idVar(to, model_tex) = sVar(model_tex);
		idVar(to, model_tex_material) = sVar(model_tex_material);
		idVar(to, model_tex_normal) = sVar(model_tex_normal);
		idVar(to, model_name) = sVar(model_name);
		idVar(to, model_state) = array_copy_1d(sVar(model_state));
		idVar(to, model_part_name) = sVar(model_part_name);
		idVar(to, model_use_blend_color) = sVar(model_use_blend_color);
		idVar(to, model_blend_color) = sVar(model_blend_color);
		idVar(to, model_blend_color_default) = sVar(model_blend_color_default);
		idVar(to, pattern_base_color) = sVar(pattern_base_color);
		idVar(to, pattern_pattern_list) = array_copy_1d(sVar(pattern_pattern_list));
		idVar(to, pattern_color_list) = array_copy_1d(sVar(pattern_color_list));
		idInt(to, pattern_skin) = sprite_duplicate(sInt(pattern_skin));
		idArr(to, armor_array) = array_copy_1d(sArr(armor_array));
		for (IntType i = IntType(0); i < IntType(4); i++)
		{
			if (sprite_exists(sArr(armor_skin_array).Value(i)))
				idArr(to, armor_skin_array)[i] = texture_duplicate(sArr(armor_skin_array).Value(i));
			else
				idArr(to, armor_skin_array)[i] = null_;
			
		}
		idVar(to, item_tex) = sVar(item_tex);
		idVar(to, item_tex_material) = sVar(item_tex_material);
		idVar(to, item_tex_normal) = sVar(item_tex_normal);
		idVar(to, item_slot) = sVar(item_slot);
		idVar(to, item_3d) = sVar(item_3d);
		idVar(to, item_face_camera) = sVar(item_face_camera);
		idVar(to, item_bounce) = sVar(item_bounce);
		idVar(to, item_spin) = sVar(item_spin);
		idVar(to, block_name) = sVar(block_name);
		idArr(to, block_state) = array_copy_1d(sArr(block_state));
		idVar(to, block_tex) = sVar(block_tex);
		idVar(to, block_tex_material) = sVar(block_tex_material);
		idVar(to, block_tex_normal) = sVar(block_tex_normal);
		idVar(to, scenery) = sVar(scenery);
		idVar(to, block_repeat_enable) = sVar(block_repeat_enable);
		idVar(to, block_repeat) = array_copy_1d(sVar(block_repeat));
		idVar(to, block_randomize) = sVar(block_randomize);
		idVar(to, shape_tex) = sVar(shape_tex);
		idVar(to, shape_tex_material) = sVar(shape_tex_material);
		idVar(to, shape_tex_normal) = sVar(shape_tex_normal);
		idVar(to, shape_tex_mapped) = sVar(shape_tex_mapped);
		idVar(to, shape_tex_hoffset) = sVar(shape_tex_hoffset);
		idVar(to, shape_tex_voffset) = sVar(shape_tex_voffset);
		idVar(to, shape_tex_hrepeat) = sVar(shape_tex_hrepeat);
		idVar(to, shape_tex_vrepeat) = sVar(shape_tex_vrepeat);
		idVar(to, shape_tex_hmirror) = sVar(shape_tex_hmirror);
		idVar(to, shape_tex_vmirror) = sVar(shape_tex_vmirror);
		idVar(to, shape_closed) = sVar(shape_closed);
		idVar(to, shape_invert) = sVar(shape_invert);
		idVar(to, shape_detail) = sVar(shape_detail);
		idVar(to, shape_face_camera) = sVar(shape_face_camera);
		idVar(to, text_font) = sVar(text_font);
		idVar(to, text_3d) = sVar(text_3d);
		idVar(to, text_face_camera) = sVar(text_face_camera);
		if (sVar(type) == e_temp_type_PARTICLE_SPAWNER)
			temp_particles_copy(self, to);
	}
	
	IntType temp_duplicate(ScopeAny self)
	{
		IntType temp, copy;
		temp = (new obj_template)->id;
		temp_copy(self, temp);
		copy = self->id;
		withOne (obj_template, temp, self->id)
		{
			if (self->model != null_)
				idInt(self->model, count)++;
			if (self->model_tex != null_)
				idInt(self->model_tex, count)++;
			if (self->model_tex_material != null_)
				idInt(self->model_tex_material, count)++;
			if (self->model_tex_normal != null_)
				idInt(self->model_tex_normal, count)++;
			if (self->item_tex != null_)
				idInt(self->item_tex, count)++;
			if (self->item_tex_material != null_)
				idInt(self->item_tex_material, count)++;
			if (self->item_tex_normal != null_)
				idInt(self->item_tex_normal, count)++;
			if (self->block_tex != null_)
				idInt(self->block_tex, count)++;
			if (self->block_tex_material != null_)
				idInt(self->block_tex_material, count)++;
			if (self->block_tex_normal != null_)
				idInt(self->block_tex_normal, count)++;
			if (self->scenery != null_)
				idInt(self->scenery, count)++;
			if (self->shape_tex != null_ && idVar(self->shape_tex, type) != e_tl_type_CAMERA)
				idInt(self->shape_tex, count)++;
			if (self->shape_tex_material != null_)
				idInt(self->shape_tex_material, count)++;
			if (self->shape_tex_normal != null_)
				idInt(self->shape_tex_normal, count)++;
			if (self->text_font != null_)
				idInt(self->text_font, count)++;
			temp_update(ScopeAny(self), true);
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
			{
				self->pc_type_list = ds_list_create();
				for (IntType t = IntType(0); t < ds_list_size(idInt(self.otherId, pc_type_list)); t++)
				{
					withOne (obj_particle_type, DsList(idInt(self.otherId, pc_type_list)).Value(t), self->id)
					{
						IntType ptype = (new obj_particle_type)->id;
						ptype_copy(ScopeAny(self), ptype);
						ObjType(obj_particle_type, ptype)->creator = temp;
						idInt(ObjType(obj_particle_type, ptype)->sprite_tex, count)++;
						idInt(ObjType(obj_particle_type, ptype)->sprite_template_tex, count)++;
						withOne (obj_particle_type, ptype, self->id)
							ptype_update_sprite_vbuffers(ScopeAny(self));
						
						ds_list_add({ ObjType(obj_template, temp)->pc_type_list, ptype });
					}
					
				}
			}
			return self->id;
		}
		
		return IntType(0);
	}
	
	void temp_event_create(ScopeAny self)
	{
		sVar(save_id) = /*""*/ STR(0);
		sVar(save_id) = save_id_create();
		sBool(loaded) = false;
		sVar(creator) = global::temp_creator;
		sVar(type) = null_;
		sVar(name) = /*""*/ STR(0);
		sVar(display_name) = /*""*/ STR(0);
		sInt(count) = IntType(0);
		sVar(rot_point) = point3D(IntType(0), IntType(0), IntType(0));
		sVar(model) = null_;
		sVar(model_name) = default_model;
		sVar(model_tex) = null_;
		sVar(model_tex_material) = null_;
		sVar(model_tex_normal) = null_;
		sInt(model_texture_name_map) = null_;
		sInt(model_texture_material_name_map) = null_;
		sInt(model_tex_normal_name_map) = null_;
		sInt(model_shape_texture_name_map) = null_;
		sInt(model_shape_texture_material_name_map) = null_;
		sInt(model_shape_tex_normal_name_map) = null_;
		sInt(model_color_name_map) = null_;
		sInt(model_color_map) = null_;
		sInt(model_shape_vbuffer_map) = null_;
		sInt(model_shape_alpha_map) = null_;
		sInt(model_hide_list) = null_;
		sInt(model_shape_hide_list) = null_;
		sVar(model_file) = null_;
		sVar(model_state) = ArrType();
		sVar(model_part_name) = /*""*/ STR(0);
		sVar(model_part) = null_;
		sVar(model_use_blend_color) = false;
		sVar(model_blend_color) = c_white;
		sVar(model_blend_color_default) = sVar(model_blend_color);
		sBool(load_update_tree) = false;
		sVar(pattern_type) = /*""*/ STR(0);
		sVar(pattern_base_color) = minecraft_get_color(/*"dye:white"*/ STR(3882));
		sVar(pattern_pattern_list) = ArrType();
		sVar(pattern_color_list) = ArrType();
		sInt(pattern_skin) = null_;
		sArr(armor_array) = ArrType::From({});
		array_add(VarType::CreateRef(sArr(armor_array)), ArrType::From({ /*"none"*/ STR(910), minecraft_get_color(/*"other:leather"*/ STR(2044)), /*"none"*/ STR(910), DsList(global::minecraft_armor_trim_material_list).Value(IntType(0)) }));
		array_add(VarType::CreateRef(sArr(armor_array)), ArrType::From({ /*"none"*/ STR(910), minecraft_get_color(/*"other:leather"*/ STR(2044)), /*"none"*/ STR(910), DsList(global::minecraft_armor_trim_material_list).Value(IntType(0)) }));
		array_add(VarType::CreateRef(sArr(armor_array)), ArrType::From({ /*"none"*/ STR(910), minecraft_get_color(/*"other:leather"*/ STR(2044)), /*"none"*/ STR(910), DsList(global::minecraft_armor_trim_material_list).Value(IntType(0)) }));
		array_add(VarType::CreateRef(sArr(armor_array)), ArrType::From({ /*"none"*/ STR(910), minecraft_get_color(/*"other:leather"*/ STR(2044)), /*"none"*/ STR(910), DsList(global::minecraft_armor_trim_material_list).Value(IntType(0)) }));
		sArr(armor_skin_array) = ArrType::From({ null_, null_, null_, null_ });
		sVar(item_tex) = null_;
		sVar(item_tex_material) = null_;
		sVar(item_tex_normal) = null_;
		sVar(item_slot) = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list), default_item);
		sVar(item_vbuffer) = null_;
		sVar(item_3d) = true;
		sVar(item_face_camera) = false;
		sVar(item_bounce) = false;
		sVar(item_spin) = false;
		sInt(legacy_item_sheet) = true;
		sVar(block_name) = default_block;
		sArr(block_state) = ArrType();
		sVar(block_tex) = null_;
		sVar(block_tex_material) = null_;
		sVar(block_tex_normal) = null_;
		sVar(block_vbuffer) = null_;
		sVar(block_repeat_enable) = false;
		sVar(block_repeat) = vec3(IntType(1));
		sVar(block_randomize) = true;
		sVar(scenery) = null_;
		sVar(shape_vbuffer) = null_;
		sVar(shape_tex) = null_;
		sVar(shape_tex_material) = null_;
		sVar(shape_tex_normal) = null_;
		sVar(shape_tex_mapped) = false;
		sVar(shape_tex_hoffset) = IntType(0);
		sVar(shape_tex_voffset) = IntType(0);
		sVar(shape_tex_hrepeat) = IntType(1);
		sVar(shape_tex_vrepeat) = IntType(1);
		sVar(shape_tex_hmirror) = IntType(0);
		sVar(shape_tex_vmirror) = IntType(0);
		sVar(shape_closed) = true;
		sVar(shape_invert) = false;
		sVar(shape_detail) = IntType(32);
		sVar(shape_face_camera) = false;
		sVar(text_font) = null_;
		sVar(text_3d) = false;
		sVar(text_face_camera) = false;
	}
	
	void temp_event_destroy(ScopeAny self)
	{
		if (sInt(model_texture_name_map) != null_)
			ds_map_destroy(sInt(model_texture_name_map));
		if (sInt(model_texture_material_name_map) != null_)
			ds_map_destroy(sInt(model_texture_material_name_map));
		if (sInt(model_tex_normal_name_map) != null_)
			ds_map_destroy(sInt(model_tex_normal_name_map));
		if (sInt(model_shape_texture_name_map) != null_)
			ds_map_destroy(sInt(model_shape_texture_name_map));
		if (sInt(model_shape_texture_material_name_map) != null_)
			ds_map_destroy(sInt(model_shape_texture_material_name_map));
		if (sInt(model_shape_tex_normal_name_map) != null_)
			ds_map_destroy(sInt(model_shape_tex_normal_name_map));
		if (sInt(model_hide_list) != null_)
			ds_list_destroy(sInt(model_hide_list));
		if (sInt(model_shape_hide_list) != null_)
			ds_list_destroy(sInt(model_shape_hide_list));
		if (sInt(model_shape_vbuffer_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_shape_vbuffer_map));
			while (!is_undefined(key))
			{
				if (instance_exists(key) && idVar(key, vbuffer_default) != DsMap(sInt(model_shape_vbuffer_map)).Value(key))
					vbuffer_destroy(DsMap(sInt(model_shape_vbuffer_map)).Value(key));
				key = ds_map_find_next(sInt(model_shape_vbuffer_map), key);
			}
			
			ds_map_destroy(sInt(model_shape_vbuffer_map));
		}
		if (sInt(model_shape_alpha_map) != null_)
			ds_map_destroy(sInt(model_shape_alpha_map));
		if (global::temp_creator != global::_app->bench_settings)
		{
			if (sVar(model_tex) != null_)
				idInt(sVar(model_tex), count)--;
			if (sVar(model_tex_material) != null_)
				idInt(sVar(model_tex_material), count)--;
			if (sVar(model_tex_normal) != null_)
				idInt(sVar(model_tex_normal), count)--;
			if (sVar(item_tex) != null_)
				idInt(sVar(item_tex), count)--;
			if (sVar(item_tex_material) != null_)
				idInt(sVar(item_tex_material), count)--;
			if (sVar(item_tex_normal) != null_)
				idInt(sVar(item_tex_normal), count)--;
			if (sVar(block_tex) != null_)
				idInt(sVar(block_tex), count)--;
			if (sVar(block_tex_material) != null_)
				idInt(sVar(block_tex_material), count)--;
			if (sVar(block_tex_normal) != null_)
				idInt(sVar(block_tex_normal), count)--;
			if (sVar(scenery) > IntType(0))
				idInt(sVar(scenery), count)--;
			if (sVar(shape_tex) != null_ && idVar(sVar(shape_tex), type) != e_tl_type_CAMERA)
				idInt(sVar(shape_tex), count)--;
			if (sVar(shape_tex_material) != null_)
				idInt(sVar(shape_tex_material), count)--;
			if (sVar(shape_tex_normal) != null_)
				idInt(sVar(shape_tex_normal), count)--;
			if (sVar(text_font) != null_)
				idInt(sVar(text_font), count)--;
		}
		if (sVar(item_vbuffer) != null_)
			vbuffer_destroy(sVar(item_vbuffer));
		if (sVar(type) == e_temp_type_BLOCK || sVar(type) == e_temp_type_SCENERY)
			block_vbuffer_destroy(self);
		if (sVar(type) == e_temp_type_PARTICLE_SPAWNER)
			temp_particles_type_clear(self);
		withAll (obj_timeline, self->id)
			if (self->temp == self.otherId && self->part_of == null_ && !self->delete_ready)
				tl_remove_clean(ScopeAny(self));
		
		withAll (obj_timeline, self->id)
			if (self->delete_ready)
				instance_destroy(ScopeAny(self));
		
		withAll (obj_particle_type, self->id)
			if (self->temp == self.otherId)
				instance_destroy(ScopeAny(self));
		
		for (IntType i = IntType(0); i < IntType(4); i++)
			texture_free(sArr(armor_skin_array).Value(i));
		global::temp_edit = sortlist_remove(global::_app->lib_list, self->id);
	}
	
	void temp_find_save_ids(ScopeAny self)
	{
		sVar(model) = save_id_find(sVar(model));
		sVar(model_tex) = save_id_find(sVar(model_tex));
		sVar(model_tex_material) = save_id_find(sVar(model_tex_material));
		sVar(model_tex_normal) = save_id_find(sVar(model_tex_normal));
		sVar(item_tex) = save_id_find(sVar(item_tex));
		sVar(item_tex_material) = save_id_find(sVar(item_tex_material));
		sVar(item_tex_normal) = save_id_find(sVar(item_tex_normal));
		sVar(block_tex) = save_id_find(sVar(block_tex));
		sVar(block_tex_material) = save_id_find(sVar(block_tex_material));
		sVar(block_tex_normal) = save_id_find(sVar(block_tex_normal));
		sVar(scenery) = save_id_find(sVar(scenery));
		sVar(shape_tex) = save_id_find(sVar(shape_tex));
		sVar(shape_tex_material) = save_id_find(sVar(shape_tex_material));
		sVar(shape_tex_normal) = save_id_find(sVar(shape_tex_normal));
		sVar(text_font) = save_id_find(sVar(text_font));
	}
	
	VarType temp_get_block_texobj(ScopeAny self, VarType val)
	{
		if (val == null_ || idVar(val, type) == e_tl_type_CAMERA || idInt(val, block_sheet_texture) == null_)
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(idVar(sVar(temp), block_tex), type) == e_res_type_PACK || idVar(idVar(sVar(temp), block_tex), type) == e_res_type_BLOCK_SHEET)
							return idVar(sVar(temp), block_tex);
					}
					
				}
			}
			else
				return sVar(block_tex);
			
		}
		return val;
	}
	
	VarType temp_get_block_tex_material_obj(ScopeAny self, VarType val)
	{
		if (val == null_ || idVar(val, type) == e_tl_type_CAMERA || idInt(val, block_sheet_texture_material) == null_)
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(sVar(temp), block_tex_material) > 0)
							if (idVar(idVar(sVar(temp), block_tex_material), type) == e_res_type_PACK || idVar(idVar(sVar(temp), block_tex_material), type) == e_res_type_BLOCK_SHEET)
								return idVar(sVar(temp), block_tex_material);
					}
					
				}
			}
			else
				return sVar(block_tex_material);
			
		}
		return val;
	}
	
	VarType temp_get_block_tex_normal_obj(ScopeAny self, VarType val)
	{
		if (val == null_ || idVar(val, type) == e_tl_type_CAMERA || idInt(val, block_sheet_tex_normal) == null_)
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(sVar(temp), block_tex_normal) > 0)
							if (idVar(idVar(sVar(temp), block_tex_normal), type) == e_res_type_PACK || idVar(idVar(sVar(temp), block_tex_normal), type) == e_res_type_BLOCK_SHEET)
								return idVar(sVar(temp), block_tex_normal);
					}
					
				}
			}
			else
				return sVar(block_tex_normal);
			
		}
		return val;
	}
	
	VarType temp_get_model_texobj(ScopeAny self, VarType texobj)
	{
		if (texobj == null_ || texobj == IntType(0) || idVar(texobj, type) == e_tl_type_CAMERA || (idInt(texobj, model_texture) == null_ && idInt(texobj, model_texture_map) == null_))
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_SPECIAL_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(sVar(temp), block_tex) > 0 && idVar(idVar(sVar(temp), block_tex), type) == e_res_type_PACK)
							texobj = idVar(sVar(temp), block_tex);
						else
							texobj = global::mc_res;
						
					}
					
				}
			}
			else
				texobj = sVar(model_tex);
			
		}
		if (texobj == null_)
		{
			texobj = sVar(model);
			if (texobj != null_)
			{
				if (idInt(texobj, model_format) == e_model_format_BLOCK)
				{
					if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, block_sheet_texture) == null_)
						texobj = global::mc_res;
				}
				else
				{
					if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
						texobj = global::mc_res;
				}
				
			}
		}
		return texobj;
	}
	
	VarType temp_get_model_tex_material_obj(ScopeAny self, VarType texobj)
	{
		if (texobj == null_ || texobj == IntType(0) || idVar(texobj, type) == e_tl_type_CAMERA || (idInt(texobj, model_texture) == null_ && idInt(texobj, model_texture_material_map) == null_))
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_SPECIAL_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(sVar(temp), block_tex_material) > 0 && idVar(idVar(sVar(temp), block_tex_material), type) == e_res_type_PACK)
							texobj = idVar(sVar(temp), block_tex_material);
						else
							texobj = global::mc_res;
						
					}
					
				}
			}
			else
				texobj = sVar(model_tex_material);
			
		}
		if (texobj == null_)
		{
			texobj = sVar(model);
			if (texobj != null_ && idInt(texobj, model_texture_material_map) == null_)
				texobj = null_;
		}
		return texobj;
	}
	
	VarType temp_get_model_tex_material_preview(ScopeAny self, VarType texobj, VarType part)
	{
		if (texobj == null_)
			return null_;
		if (self->subAssetId != ID_obj_timeline && sVar(model) != null_ && idInt(sVar(model), model_format) == e_model_format_BLOCK)
			return idInt(texobj, block_preview_texture);
		withOne (Object, texobj, self->id)
			return res_get_model_texture_material(self, model_part_get_texture_material_name(part, idInt(self.otherId, model_texture_material_name_map)));
		
		return VarType();
	}
	
	VarType temp_get_model_tex_normal_obj(ScopeAny self, VarType texobj)
	{
		if (texobj == null_ || texobj == IntType(0) || idVar(texobj, type) == e_tl_type_CAMERA || (idInt(texobj, model_texture) == null_ && idInt(texobj, model_tex_normal_map) == null_))
		{
			if (self->subAssetId == ID_obj_timeline && sVar(type) == e_tl_type_SPECIAL_BLOCK)
			{
				if (idVar(sVar(part_of), type) == e_tl_type_SCENERY)
				{
					withOne (Object, sVar(part_of), self->id)
					{
						if (idVar(sVar(temp), block_tex_normal) > 0 && idVar(idVar(sVar(temp), block_tex_normal), type) == e_res_type_PACK)
							texobj = idVar(sVar(temp), block_tex_normal);
						else
							texobj = global::mc_res;
						
					}
					
				}
			}
			else
				texobj = sVar(model_tex_normal);
			
		}
		if (texobj == null_)
		{
			texobj = sVar(model);
			if (texobj != null_ && idInt(texobj, model_tex_normal_map) == null_)
				texobj = null_;
		}
		return texobj;
	}
	
	VarType temp_get_model_tex_normal_preview(ScopeAny self, VarType texobj, VarType part)
	{
		if (texobj == null_)
			return null_;
		if (self->subAssetId != ID_obj_timeline && sVar(model) != null_ && idInt(sVar(model), model_format) == e_model_format_BLOCK)
			return idInt(texobj, block_preview_texture);
		withOne (Object, texobj, self->id)
			return res_get_model_tex_normal(self, model_part_get_tex_normal_name(part, idInt(self.otherId, model_tex_normal_name_map)));
		
		return VarType();
	}
	
	VarType temp_get_model_tex_preview(ScopeAny self, VarType texobj, VarType part)
	{
		if (texobj == null_)
			return null_;
		if (self->subAssetId != ID_obj_timeline && sVar(model) != null_ && idInt(sVar(model), model_format) == e_model_format_BLOCK)
			return idInt(texobj, block_preview_texture);
		withOne (Object, texobj, self->id)
			return res_get_model_texture(self, model_part_get_texture_name(part, idInt(self.otherId, model_texture_name_map)));
		
		return VarType();
	}
	
	void temp_get_save_ids(Scope<obj_history_save> self)
	{
		self->model = save_id_get(self->model);
		self->model_tex = save_id_get(self->model_tex);
		self->model_tex_material = save_id_get(self->model_tex_material);
		self->model_tex_normal = save_id_get(self->model_tex_normal);
		self->item_tex = save_id_get(self->item_tex);
		self->item_tex_material = save_id_get(self->item_tex_material);
		self->item_tex_normal = save_id_get(self->item_tex_normal);
		self->block_tex = save_id_get(self->block_tex);
		self->block_tex_material = save_id_get(self->block_tex_material);
		self->block_tex_normal = save_id_get(self->block_tex_normal);
		self->scenery = save_id_get(self->scenery);
		self->shape_tex = save_id_get(self->shape_tex);
		self->shape_tex_material = save_id_get(self->shape_tex_material);
		self->shape_tex_normal = save_id_get(self->shape_tex_normal);
		self->text_font = save_id_get(self->text_font);
	}
	
}
