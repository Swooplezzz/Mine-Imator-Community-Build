/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.19 13:05:31 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	BoolType tl_value_is_bool(VarType vid)
	{
		return (vid == e_value_SPAWN || vid == e_value_FREEZE || vid == e_value_CLEAR || vid == e_value_CUSTOM_SEED || vid == e_value_BG_IMAGE_SHOW || vid == e_value_BG_SKY_CLOUDS_SHOW || vid == e_value_BG_GROUND_SHOW || vid == e_value_BG_FOG_SHOW || vid == e_value_BG_WIND || vid == e_value_CAM_LIGHT_MANAGEMENT || vid == e_value_CAM_ROTATE || vid == e_value_CAM_DOF || vid == e_value_CAM_DOF_FRINGE || vid == e_value_CAM_SHAKE || vid == e_value_CAM_BLOOM || vid == e_value_CAM_COLOR_CORRECTION || vid == e_value_CAM_GRAIN || vid == e_value_CAM_VIGNETTE || vid == e_value_CAM_CA || vid == e_value_CAM_CA_DISTORT_CHANNELS || vid == e_value_CAM_DISTORT || vid == e_value_CAM_DISTORT_REPEAT || vid == e_value_CAM_SIZE_USE_PROJECT || vid == e_value_CAM_SIZE_KEEP_ASPECT_RATIO || vid == e_value_TEXT_AA || vid == e_value_TEXT_OUTLINE || vid == e_value_VISIBLE);
	}
	
	BoolType tl_value_is_color(VarType vid)
	{
		return (vid == e_value_RGB_ADD || vid == e_value_RGB_SUB || vid == e_value_RGB_MUL || vid == e_value_HSB_ADD || vid == e_value_HSB_SUB || vid == e_value_HSB_MUL || vid == e_value_MIX_COLOR || vid == e_value_GLOW_COLOR || vid == e_value_SUBSURFACE_COLOR || vid == e_value_LIGHT_COLOR || vid == e_value_CAM_BLOOM_BLEND || vid == e_value_CAM_COLOR_BURN || vid == e_value_CAM_VIGNETTE_COLOR || vid == e_value_BG_SKY_COLOR || vid == e_value_BG_SKY_CLOUDS_COLOR || vid == e_value_BG_SUNLIGHT_COLOR || vid == e_value_BG_AMBIENT_COLOR || vid == e_value_BG_NIGHT_COLOR || vid == e_value_BG_GRASS_COLOR || vid == e_value_BG_FOLIAGE_COLOR || vid == e_value_BG_WATER_COLOR || vid == e_value_BG_LEAVES_OAK_COLOR || vid == e_value_BG_LEAVES_SPRUCE_COLOR || vid == e_value_BG_LEAVES_BIRCH_COLOR || vid == e_value_BG_LEAVES_JUNGLE_COLOR || vid == e_value_BG_LEAVES_ACACIA_COLOR || vid == e_value_BG_LEAVES_DARK_OAK_COLOR || vid == e_value_BG_LEAVES_MANGROVE_COLOR || vid == e_value_BG_FOG_COLOR || vid == e_value_TEXT_OUTLINE_COLOR);
	}
	
	BoolType tl_value_is_obj(VarType vid)
	{
		return (vid == e_value_TEXT_FONT || vid == e_value_SOUND_OBJ || vid == e_value_PATH_OBJ || vid == e_value_IK_TARGET || vid == e_value_ROT_TARGET || vid == e_value_POS_TARGET || vid == e_value_SCALE_TARGET || vid == e_value_BEND_IK_TARGET || vid == e_value_IK_TARGET_ANGLE);
	}
	
	BoolType tl_value_is_string(VarType vid)
	{
		return (vid == e_value_TEXT || vid == e_value_TEXT_HALIGN || vid == e_value_TEXT_VALIGN || vid == e_value_TRANSITION || vid == e_value_BG_BIOME);
	}
	
	BoolType tl_value_is_texture(VarType vid)
	{
		return (vid == e_value_TEXTURE_OBJ || vid == e_value_TEXTURE_MATERIAL_OBJ || vid == e_value_TEXTURE_NORMAL_OBJ);
	}
	
	RealType tl_value_set(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (sReal(history_undo) > 0)
		{
			for (IntType k = IntType(0); k < ObjType(obj_history, global::history_data)->kf_add_amount; k++)
				withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->kf_add_tl_save_id.Value(k)), self->id)
					withOne (obj_keyframe, DsList(sInt(keyframe_list)).Value(ObjType(obj_history, global::history_data)->kf_add_index.Value(k)), self->id)
						instance_destroy(ScopeAny(self));
				
			
			for (IntType k = IntType(0); k < ObjType(obj_history, global::history_data)->kf_set_amount; k++)
			{
				IntType kflist = idInt(save_id_find(ObjType(obj_history, global::history_data)->kf_set_tl_save_id.Value(k)), keyframe_list);
				IntType kfindex = ObjType(obj_history, global::history_data)->kf_set_index.Value(k);
				if (kfindex < ds_list_size(kflist))
				{
					withOne (obj_keyframe, DsList(kflist).Value(kfindex), self->id)
						for (IntType v = IntType(0); v < ObjType(obj_history, global::history_data)->par_set_amount; v++)
							self->value[ObjType(obj_history, global::history_data)->value.Value(v)] = tl_value_find_save_id(ObjType(obj_history, global::history_data)->value.Value(v), ObjType(obj_history, global::history_data)->kf_set_new_value[k][v], ObjType(obj_history, global::history_data)->kf_set_old_value[k][v]);
					
				}
			}
		}
		else
			if (sReal(history_redo) > 0)
			{
				for (IntType k = IntType(0); k < ObjType(obj_history, global::history_data)->kf_add_amount; k++)
					withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->kf_add_tl_save_id.Value(k)), self->id)
						tl_keyframe_add(self, ObjType(obj_history, global::history_data)->kf_add_pos.Value(k));
				
				for (IntType k = IntType(0); k < ObjType(obj_history, global::history_data)->kf_set_amount; k++)
					withOne (obj_keyframe, DsList(idInt(save_id_find(ObjType(obj_history, global::history_data)->kf_set_tl_save_id.Value(k)), keyframe_list)).Value(ObjType(obj_history, global::history_data)->kf_set_index.Value(k)), self->id)
						for (IntType v = IntType(0); v < ObjType(obj_history, global::history_data)->par_set_amount; v++)
							self->value[ObjType(obj_history, global::history_data)->value.Value(v)] = tl_value_find_save_id(ObjType(obj_history, global::history_data)->value.Value(v), ObjType(obj_history, global::history_data)->kf_set_old_value[k][v], ObjType(obj_history, global::history_data)->kf_set_new_value[k][v]);
				
			}
			else
			{
				VarType vid, val, add, mul;
				IntType tlcount;
				vid = argument[IntType(0)];
				val = argument[IntType(1)];
				add = argument[IntType(2)];
				mul = (argument_count > IntType(3) ? argument[IntType(3)] : VarType(false));
				tlcount = IntType(0);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					if (ObjType(obj_history, global::history_data)->scale_link_drag)
					{
						if (ObjType(obj_history, global::history_data)->par_set_n == ObjType(obj_history, global::history_data)->par_set_amount)
							ObjType(obj_history, global::history_data)->tl_set_old_value[tlcount][ObjType(obj_history, global::history_data)->par_set_n] = tl_value_get_save_id(vid, self->value.Value(vid));
						self->value[vid] = ObjType(obj_history, global::history_data)->tl_set_old_value[tlcount][ObjType(obj_history, global::history_data)->par_set_n];
					}
					if (vid == e_value_SOUND_OBJ && self->value.Value(e_value_SOUND_OBJ) != null_)
						idInt(self->value.Value(e_value_SOUND_OBJ), count)--;
					VarType nval;
					if (tl_value_is_string(vid) || tl_value_is_texture(vid) || tl_value_is_obj(vid))
						nval = val;
					else
						if (mul > 0)
							nval = self->value.Value(vid) * val;
						else
							nval = self->value.Value(vid) * add + val;
					
					
					if (self->value.Value(vid) != nval)
						self->update_matrix = true;
					self->value[vid] = tl_value_clamp(vid, nval);
					if (vid == e_value_SOUND_OBJ && self->value.Value(e_value_SOUND_OBJ) != null_)
						idInt(self->value.Value(e_value_SOUND_OBJ), count)++;
					tlcount++;
				}
				
				for (IntType k = IntType(0); k < ObjType(obj_history, global::history_data)->kf_set_amount; k++)
				{
					withOne (obj_keyframe, DsList(idInt(save_id_find(ObjType(obj_history, global::history_data)->kf_set_tl_save_id.Value(k)), keyframe_list)).Value(ObjType(obj_history, global::history_data)->kf_set_index.Value(k)), self->id)
					{
						if (ObjType(obj_history, global::history_data)->par_set_n == ObjType(obj_history, global::history_data)->par_set_amount)
							ObjType(obj_history, global::history_data)->kf_set_old_value[k][ObjType(obj_history, global::history_data)->par_set_n] = tl_value_get_save_id(vid, self->value.Value(vid));
						if (ObjType(obj_history, global::history_data)->scale_link_drag)
							self->value[vid] = ObjType(obj_history, global::history_data)->kf_set_old_value[k][ObjType(obj_history, global::history_data)->par_set_n];
						VarType nval;
						if (tl_value_is_string(vid) || tl_value_is_texture(vid) || tl_value_is_obj(vid))
							nval = val;
						else
							if (mul > 0)
								nval = self->value.Value(vid) * val;
							else
								nval = self->value.Value(vid) * add + val;
						
						
						self->value[vid] = tl_value_clamp(vid, nval);
						ObjType(obj_history, global::history_data)->kf_set_new_value[k][ObjType(obj_history, global::history_data)->par_set_n] = tl_value_get_save_id(vid, self->value.Value(vid));
					}
					
				}
				ObjType(obj_history, global::history_data)->value[ObjType(obj_history, global::history_data)->par_set_n] = vid;
				ObjType(obj_history, global::history_data)->par_set_n++;
				ObjType(obj_history, global::history_data)->par_set_amount = max({ ObjType(obj_history, global::history_data)->par_set_amount, ObjType(obj_history, global::history_data)->par_set_n });
				return IntType(0);
			}
		
		
		withAll (obj_timeline, self->id)
		{
			self->cam_goalzoom = null_;
			tl_update_values(ScopeAny(self));
		}
		
		withOne (app, global::_app->id, self->id)
		{
			tl_update_length();
			tl_update_matrix(ScopeAny(self));
			app_update_tl_edit(ScopeAny(self));
		}
		
		return 0.0;
	}
	
	void tl_value_set_done()
	{
		withOne (app, global::_app->id, noone)
			tl_update_matrix(ScopeAny(self));
		
	}
	
	void tl_value_set_start(ScopeAny self, IntType script, BoolType combine)
	{
		withOne (app, global::_app->id, self->id)
		{
			action_tl_play_break(ScopeAny(self));
			global::_app->timeline_marker = round(global::_app->timeline_marker);
		}
		
		withAll (obj_keyframe, self->id)
		{
			self->edit = self->selected;
			self->created = false;
		}
		
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0) || self->keyframe_select != null_)
				continue;
			if (self->keyframe_current > 0 && ObjType(obj_keyframe, self->keyframe_current)->position == global::_app->timeline_marker && !(ObjType(obj_keyframe, self->keyframe_current)->selected > 0))
				ObjType(obj_keyframe, self->keyframe_current)->edit = true;
			else
			{
				IntType newkf = tl_keyframe_add(ScopeAny(self), global::_app->timeline_marker);
				ObjType(obj_keyframe, newkf)->created = true;
				ObjType(obj_keyframe, newkf)->edit = true;
				combine = false;
			}
			
		}
		
		history_pop(self);
		if (combine && sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->par_script == script && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_axis_edit == global::axis_edit)
			global::history_data = sArr(history).Value(IntType(0));
		else
		{
			history_push(self);
			global::history_data = new_history(ID_tl_value_set);
			ObjType(obj_history, global::history_data)->par_script = script;
			ObjType(obj_history, global::history_data)->par_set_amount = IntType(0);
			ObjType(obj_history, global::history_data)->kf_add_amount = IntType(0);
			ObjType(obj_history, global::history_data)->kf_set_amount = IntType(0);
			withAll (obj_keyframe, self->id)
			{
				if (self->created)
				{
					ObjType(obj_history, global::history_data)->kf_add_tl_save_id[ObjType(obj_history, global::history_data)->kf_add_amount] = save_id_get(self->timeline);
					ObjType(obj_history, global::history_data)->kf_add_index[ObjType(obj_history, global::history_data)->kf_add_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history, global::history_data)->kf_add_pos[ObjType(obj_history, global::history_data)->kf_add_amount] = self->position;
					ObjType(obj_history, global::history_data)->kf_add_amount++;
				}
				if (self->edit > 0)
				{
					ObjType(obj_history, global::history_data)->kf_set_tl_save_id[ObjType(obj_history, global::history_data)->kf_set_amount] = save_id_get(self->timeline);
					ObjType(obj_history, global::history_data)->kf_set_index[ObjType(obj_history, global::history_data)->kf_set_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history, global::history_data)->kf_set_amount++;
				}
			}
			
			sArr(history)[IntType(0)] = global::history_data;
			log({ /*"Action"*/ STR(1239), script_get_name(script) });
		}
		
		ObjType(obj_history, global::history_data)->par_set_n = IntType(0);
		global::render_samples = -IntType(1);
		sBool(history_resource_update) = true;
	}
	
	RealType tl_value_spawn(ScopeAny self)
	{
		if (sVar(type) == e_tl_type_CAMERA)
		{
			if (!(global::_app->setting_spawn_cameras > 0))
				return IntType(0);
			sVar(value)[e_value_POS_X] = global::_app->cam_work_from.Real(X_);
			sVar(value)[e_value_POS_Y] = global::_app->cam_work_from.Real(Y_);
			sVar(value)[e_value_POS_Z] = global::_app->cam_work_from.Real(Z_);
			sVar(value)[e_value_ROT_X] = -global::_app->cam_work_angle_look_z;
			sVar(value)[e_value_ROT_Y] = global::_app->cam_work_roll;
			sVar(value)[e_value_ROT_Z] = global::_app->cam_work_angle_look_xy - IntType(90);
		}
		else
			if (sVar(type) == e_tl_type_BODYPART && sVar(model_part) != null_)
			{
				if (idInt(sVar(model_part), bend_part) != null_)
				{
					sVar(value)[e_value_BEND_ANGLE_X] = idVec(sVar(model_part), bend_default_angle).Real(X_);
					sVar(value)[e_value_BEND_ANGLE_Y] = idVec(sVar(model_part), bend_default_angle).Real(Y_);
					sVar(value)[e_value_BEND_ANGLE_Z] = idVec(sVar(model_part), bend_default_angle).Real(Z_);
					sVar(inherit_bend) = idVar(sVar(model_part), bend_inherit);
				}
				sVar(lock) = idVar(sVar(model_part), locked);
			}
			else
				if (sVar(type) == e_tl_type_BACKGROUND)
				{
					for (IntType v = e_value_BG_SKY_MOON_PHASE; v <= e_value_BG_TEXTURE_ANI_SPEED; v++)
						sVar(value)[v] = tl_value_default(v);
				}
		
		
		if (sVar(type) == e_tl_type_PARTICLE_SPAWNER)
			sVar(ssao) = false;
		if (sVar(temp) != null_)
		{
			sVar(rot_point) = idVar(sVar(temp), rot_point);
			tl_update_rot_point(self);
		}
		for (IntType v = IntType(0); v < e_value_amount; v++)
			sArr(value_default)[v] = sVar(value).Value(v);
		return 0.0;
	}
	
	void toasts_startup(ScopeAny self)
	{
		sInt(toast_list) = ds_list_create();
		sInt(toast_amount) = IntType(0);
		sVar(toast_script) = null_;
		sVar(toast_script_value) = null_;
		sBool(toast_mouseon) = false;
		sInt(toast_last) = null_;
		sInt(http_alert_news) = http_get(link_news);
	}
	
	void toast_add_action(ScopeAny self, VarType text, IntType script, VarType value)
	{
		ds_list_add({ ObjType(obj_toast, sInt(toast_last))->actions, text });
		ds_list_add({ ObjType(obj_toast, sInt(toast_last))->actions, script });
		ds_list_add({ ObjType(obj_toast, sInt(toast_last))->actions, value });
	}
	
	void toast_close(ScopeAny self, IntType toast)
	{
		if (ObjType(obj_toast, toast)->iid > IntType(0))
			ds_list_add({ sInt(closed_toast_list), ObjType(obj_toast, toast)->iid });
		ds_list_delete_value(sInt(toast_list), toast);
		if (ObjType(obj_toast, toast)->iid > IntType(0))
			settings_save(self);
		withOne (obj_toast, toast, global::_app->id)
			instance_destroy(ScopeAny(self));
		
	}
	
	void toast_draw(ScopeAny self, IntType toast)
	{
		IntType color, wid;
		RealType hei;
		color = ObjType(obj_theme, sInt(setting_theme))->toast_color.Value(ObjType(obj_toast, toast)->variant);
		wid = IntType(0);
		hei = IntType(0);
		global::microani_prefix = string(toast);
		sVar(content_x) = floor(sReal(window_width) / 2.0 - ObjType(obj_toast, toast)->toast_width / 2.0) + (IntType(32) * ease(/*"easeoutcirc"*/ STR(599), ObjType(obj_toast, toast)->remove_alpha));
		sVar(content_y) = ObjType(obj_toast, toast)->toast_y;
		sVar(content_width) = ObjType(obj_toast, toast)->toast_width;
		sVar(content_height) = ObjType(obj_toast, toast)->toast_height;
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && (ObjType(obj_toast, toast)->remove_alpha == IntType(1));
		if (!sBool(content_mouseon) && ObjType(obj_toast, toast)->mouseon)
			ObjType(obj_toast, toast)->time_created = current_time();
		if (sBool(content_mouseon))
			sBool(toast_mouseon) = true;
		ObjType(obj_toast, toast)->mouseon = sBool(content_mouseon);
		sVar(dx_start) = sVar(content_x);
		sVar(dy_start) = sVar(content_y);
		sVar(dx) = sVar(dx_start);
		sVar(dy) = sVar(dy_start);
		sVar(dw) = sVar(content_width);
		sVar(dh) = sVar(content_height);
		draw_box(sVar(dx), sVar(dy), sVar(dw), sVar(dh), false, global::c_level_top, IntType(1));
		draw_outline(sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), color, IntType(1), true);
		draw_dropshadow(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh), c_black, IntType(1));
		if (!ObjType(obj_toast, toast)->mouseon && ObjType(obj_toast, toast)->dismiss_time != no_limit)
			draw_box(sVar(dx), sVar(dy) + sVar(dh) - IntType(3), sVar(dw) * (IntType(1) - ((current_time() - ObjType(obj_toast, toast)->time_created) / (ObjType(obj_toast, toast)->dismiss_time * IntType(1000)))), IntType(2), false, color, IntType(1));
		sVar(dx) = sVar(dx_start) + IntType(8);
		sVar(dy) = sVar(dy_start) + IntType(8);
		wid = IntType(40);
		draw_image({ ID_spr_icons, ObjType(obj_toast, toast)->icon, sVar(dx) + IntType(12), sVar(content_y) + (RealType)sVar(content_height) / 2.0, IntType(1), IntType(1), color, IntType(1) });
		sVar(dx) += IntType(32);
		draw_set_font(sInt(font_value));
		draw_label(self, { ObjType(obj_toast, toast)->text, sVar(dx), sVar(content_y) + (RealType)sVar(content_height) / 2.0, fa_left, fa_middle, global::c_text_main, global::a_text_main });
		wid += string_width(ObjType(obj_toast, toast)->text) + IntType(16);
		sVar(dx) += string_width(ObjType(obj_toast, toast)->text) + IntType(16);
		if (ds_list_size(ObjType(obj_toast, toast)->actions) > IntType(0))
		{
			draw_set_font(sInt(font_label));
			RealType capwid, multiaction;
			VarType actiony;
			capwid = IntType(0);
			multiaction = ds_list_size(ObjType(obj_toast, toast)->actions) > IntType(4);
			actiony = sVar(content_y) + ((IntType)!(multiaction > 0) * IntType(4));
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_toast, toast)->actions); i += IntType(3))
				capwid = max({ capwid, IntType(24) + string_width(text_get({ DsList(ObjType(obj_toast, toast)->actions).Value(i) })) });
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_toast, toast)->actions); i += IntType(3))
			{
				if (draw_button_label(self, DsList(ObjType(obj_toast, toast)->actions).Value(i), sVar(dx), actiony, capwid, null_, e_button_TERTIARY, null_, e_anchor_LEFT))
				{
					sVar(toast_script) = DsList(ObjType(obj_toast, toast)->actions).Value(i + IntType(1));
					sVar(toast_script_value) = DsList(ObjType(obj_toast, toast)->actions).Value(i + IntType(2));
					ObjType(obj_toast, toast)->remove = true;
				}
				if (multiaction > 0 && i != IntType(0))
					draw_divide(sVar(dx), actiony, capwid);
				actiony += IntType(32);
			}
			if (multiaction > 0)
				draw_divide_vertical(sVar(dx), sVar(content_y) + IntType(1), sVar(content_height) - IntType(2));
			wid += capwid + (IntType(4) * (IntType)!(multiaction > 0));
			hei = (multiaction > 0) ? (((RealType)ds_list_size(ObjType(obj_toast, toast)->actions) / 3.0) * IntType(32)) : 40.0;
		}
		else
		{
			if (draw_button_icon(self, { string(toast) + /*"close"*/ STR(1127), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_CLOSE, null_, false }))
				ObjType(obj_toast, toast)->remove = true;
			hei = IntType(40);
			wid += IntType(32);
		}
		
		ObjType(obj_toast, toast)->toast_height = hei;
		ObjType(obj_toast, toast)->toast_width = wid;
		if (!ObjType(obj_toast, toast)->mouseon && ObjType(obj_toast, toast)->dismiss_time != no_limit && ((current_time() - ObjType(obj_toast, toast)->time_created) > (ObjType(obj_toast, toast)->dismiss_time * IntType(1000))))
			ObjType(obj_toast, toast)->remove = true;
		global::microani_prefix = /*""*/ STR(0);
	}
	
	void toast_event_create(Scope<obj_toast> self)
	{
		self->toast_y = global::_app->window_height + IntType(8);
		self->toast_goal_y = self->toast_y;
		self->toast_width = IntType(0);
		self->toast_height = IntType(0);
		self->remove = false;
		self->mouseon = false;
		self->text = /*""*/ STR(0);
		self->icon = /*""*/ STR(0);
		self->variant = e_toast_INFO;
		self->actions = ds_list_create();
		self->remove_alpha = IntType(1);
		self->time_created = current_time();
		self->dismiss_time = no_limit;
		self->iid = null_;
	}
	
	void toast_event_destroy(Scope<obj_toast> self)
	{
		ds_list_destroy(self->actions);
	}
	
	IntType toast_new(ScopeAny self, IntType variant, VarType text)
	{
		IntType toast;
		StringType type;
		toast = (new obj_toast)->id;
		ds_list_add({ sInt(toast_list), toast });
		sInt(toast_amount)++;
		switch ((IntType)variant)
		{
			case e_toast_INFO:
			{
				ObjType(obj_toast, toast)->icon = icons_INFO;
				type = /*"info"*/ STR(3941);
				break;
			}
			case e_toast_POSITIVE:
			{
				ObjType(obj_toast, toast)->icon = icons_TICK;
				type = /*"positive"*/ STR(3942);
				break;
			}
			case e_toast_WARNING:
			{
				ObjType(obj_toast, toast)->icon = icons_WARNING_TRIANGLE;
				type = /*"warning"*/ STR(3943);
				break;
			}
			case e_toast_NEGATIVE:
			{
				ObjType(obj_toast, toast)->icon = icons_WARNING_TRIANGLE;
				type = /*"negative"*/ STR(3944);
				break;
			}
			default:
				ObjType(obj_toast, toast)->icon = icons_HELP;
				type = /*"unknown"*/ STR(3945);
		}
		
		ObjType(obj_toast, toast)->variant = variant;
		ObjType(obj_toast, toast)->text = text;
		ObjType(obj_toast, toast)->dismiss_time = max({ IntType(2), (string_length(ObjType(obj_toast, toast)->text) * .1) });
		sInt(toast_last) = toast;
		log({ /*"New toast"*/ STR(3946), ObjType(obj_toast, toast)->text, type });
		return toast;
	}
	
	void toast_set_close(ScopeAny self, IntType toast)
	{
		idBool(toast, remove) = true;
	}
	
	void togglebutton_add(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		sVar(togglebutton_name) = array_add(VarType::CreateRef(sVar(togglebutton_name)), argument[IntType(0)]);
		sVar(togglebutton_icon) = array_add(VarType::CreateRef(sVar(togglebutton_icon)), argument[IntType(1)]);
		sVar(togglebutton_value) = array_add(VarType::CreateRef(sVar(togglebutton_value)), argument[IntType(2)]);
		sVar(togglebutton_active) = array_add(VarType::CreateRef(sVar(togglebutton_active)), argument[IntType(3)]);
		sVar(togglebutton_script) = array_add(VarType::CreateRef(sVar(togglebutton_script)), argument[IntType(4)]);
		sInt(togglebutton_amount) = array_length(VarType::CreateRef(sVar(togglebutton_name)));
		if (argument_count > IntType(5))
			sVar(togglebutton_axis) = array_add(VarType::CreateRef(sVar(togglebutton_axis)), argument[IntType(5)]);
		else
			sVar(togglebutton_axis) = array_add(VarType::CreateRef(sVar(togglebutton_axis)), X_);
		
	}
	
	void togglebutton_reset(ScopeAny self)
	{
		sVar(togglebutton_name) = null_;
		sVar(togglebutton_icon) = null_;
		sVar(togglebutton_value) = null_;
		sVar(togglebutton_active) = null_;
		sVar(togglebutton_script) = null_;
		sVar(togglebutton_axis) = null_;
		sInt(togglebutton_amount) = IntType(0);
	}
	
	void toolbar_draw(ScopeAny self)
	{
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = sReal(toolbar_size);
		sBool(content_mouseon) = (app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		sVar(dx) = sVar(content_x) + IntType(10);
		sVar(dy) = sVar(content_y);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_divide(sVar(content_x), sVar(content_y) + sVar(content_height), sVar(content_width));
		draw_gradient(sVar(content_x), sVar(content_y) + sVar(content_height), sVar(content_width), shadow_size, c_black, shadow_alpha, shadow_alpha, IntType(0), IntType(0));
		IntType capwid;
		RealType padding;
		padding = IntType(0);
		draw_set_font(sInt(font_value));
		capwid = string_width(text_get({ /*"toolbarfile"*/ STR(1600) })) + IntType(16);
		toolbar_draw_button(self, /*"toolbarfile"*/ STR(1600), sVar(dx), sVar(dy), capwid);
		sVar(dx) += capwid + padding;
		if (sStr(window_state) == /*""*/ STR(0))
		{
			capwid = string_width(text_get({ /*"toolbaredit"*/ STR(1609) })) + IntType(16);
			toolbar_draw_button(self, /*"toolbaredit"*/ STR(1609), sVar(dx), sVar(dy), capwid);
			sVar(dx) += capwid + padding;
			capwid = string_width(text_get({ /*"toolbarrender"*/ STR(1618) })) + IntType(16);
			toolbar_draw_button(self, /*"toolbarrender"*/ STR(1618), sVar(dx), sVar(dy), capwid);
			sVar(dx) += capwid + padding;
		}
		capwid = string_width(text_get({ /*"toolbarview"*/ STR(1621) })) + IntType(16);
		toolbar_draw_button(self, /*"toolbarview"*/ STR(1621), sVar(dx), sVar(dy), capwid);
		sVar(dx) += capwid + padding;
		capwid = string_width(text_get({ /*"toolbarhelp"*/ STR(1630) })) + IntType(16);
		toolbar_draw_button(self, /*"toolbarhelp"*/ STR(1630), sVar(dx), sVar(dy), capwid);
		sVar(dx) += capwid + padding;
		sVar(dx) += IntType(8);
		draw_label(self, { text_get({ /*"toolbarbackup"*/ STR(3947) }), sVar(dx), sVar(dy) + IntType(22), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary * clamp(sReal(backup_text_ani), IntType(0), IntType(1)), sInt(font_value) });
		if (!(sReal(setting_advanced_mode) > 0))
		{
			if (draw_button_label(self, /*"toolbarsimplemode"*/ STR(3948), sVar(content_x) + sVar(content_width) - IntType(10), sVar(dy), null_, null_, e_button_TOOLBAR, null_, fa_right))
			{
				if (global::trial_version > 0)
				{
					popup_show(self, sInt(popup_upgrade));
					ObjType(obj_popup, sInt(popup_upgrade))->page = IntType(1);
					ObjType(obj_popup, sInt(popup_upgrade))->open_advanced = true;
				}
				else
					popup_show(self, sInt(popup_advanced));
				
			}
		}
	}
	
	BoolType toolbar_draw_button(ScopeAny self, StringType name, VarType xx, VarType yy, IntType wid, BoolType hasmenu)
	{
		BoolType trigger, click;
		IntType font;
		trigger = false;
		click = false;
		if (sVar(window_busy) == /*"contextmenu"*/ STR(1055))
			sVar(window_busy) = /*""*/ STR(0);
		if (draw_button_label(self, name, xx, yy, wid, null_, e_button_TOOLBAR, null_))
		{
			click = true;
			trigger = true;
		}
		if (sVar(context_menu_name) != /*""*/ STR(0) && sVar(context_menu_name) != name && app_mouse_box(self, xx, yy, wid, IntType(28)) && sBool(toolbar_menu_active))
			trigger = true;
		if (trigger && hasmenu)
		{
			VarType prevani;
			if (sBool(toolbar_menu_active) == true && ds_list_size(sInt(context_menu_level)) > IntType(0))
				prevani = ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->ani;
			else
				prevani = IntType(0);
			
			context_menu_close(self);
			app_mouse_clear(self);
			sBool(toolbar_menu_active) = true;
			sVar(context_menu_name) = name;
			sVar(context_menu_copy_axis_edit) = global::axis_edit;
			sVar(context_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"contextmenu"*/ STR(1055);
			sInt(context_menu_group) = sInt(context_menu_group_temp);
			sStr(context_menu_ani) = /*""*/ STR(0);
			font = draw_get_font();
			IntType menu = context_menu_add_level(self, name, xx - IntType(1), yy + sReal(toolbar_size) - IntType(1));
			ObjType(obj_context_menu_level, menu)->ani = prevani;
			if (font != draw_get_font())
				draw_set_font(font);
		}
		if (sVar(context_menu_name) == name)
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->hover)->value = true;
		if (sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*"contextmenu"*/ STR(1055);
		return click;
	}
	
	void trial_startup()
	{
		global::trial_version = (dev_mode_full ? false : true);
		if (file_exists_lib(key_file))
		{
			log({ /*"Found key_file"*/ STR(3949), key_file });
			if (key_valid(file_text_contents(key_file)))
				global::trial_version = false;
		}
	}
	
	BoolType trial_upgrade(ScopeAny self, VarType argument0)
	{
		VarType key = argument0;
		if (!key_valid(key))
			return false;
		IntType f = file_text_open_write(temp_file);
		if (f > -IntType(1))
		{
			file_text_write_string(f, string(key));
			file_text_close(f);
		}
		file_copy_lib(temp_file, key_file);
		global::trial_version = false;
		ObjType(obj_popup, sInt(popup_exportimage))->watermark = false;
		ObjType(obj_popup, sInt(popup_exportmovie))->watermark = false;
		settings_save(self);
		toast_new(self, e_toast_POSITIVE, text_get({ /*"alertupgraded"*/ STR(3950) }));
		return true;
	}
	
	BoolType type_has_wind(VarType type)
	{
		return (type == e_temp_type_SCENERY || type == e_temp_type_BLOCK || type == e_temp_type_PARTICLE_SPAWNER || type == e_temp_type_TEXT || type_is_shape(type));
	}
	
	BoolType type_is_shape(VarType type)
	{
		return (type == e_temp_type_CUBE || type == e_temp_type_SPHERE || type == e_temp_type_CONE || type == e_temp_type_CYLINDER || type == e_temp_type_SURFACE);
	}
	
	BoolType type_is_timeline(VarType type)
	{
		return (type == e_tl_type_CAMERA || type == e_tl_type_POINT_LIGHT || type == e_tl_type_SPOT_LIGHT || type == e_tl_type_BACKGROUND || type == e_tl_type_FOLDER || type == e_tl_type_AUDIO || type == e_tl_type_LIGHT_SOURCE || type == e_tl_type_PATH || type == e_tl_type_PATH_POINT);
	}
	
	VarType unzip(VarType fn, StringType dir)
	{
		VarType ret = directory_delete_lib(dir);
		directory_create_lib(dir);
		log({ /*"Unzipping"*/ STR(3951), fn, dir });
		VarType num = lib_unzip(fn, dir);
		log({ string(num) + /*" files were extracted"*/ STR(3952) });
		return num;
	}
	
	StringType unzip_asset(VarType fn)
	{
		VarType name;
		StringType validfile;
		name = filename_new_ext(filename_name(fn), /*""*/ STR(0));
		unzip(fn);
		validfile = file_find_single(unzip_directory, /*"miproject;.mproj;.mani;"*/ STR(3953));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory + name + /*"/"*/ STR(20), /*"miproject;.mproj;.mani;"*/ STR(3953));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory, /*"miobject;miparticles;.object;.particles;.json;"*/ STR(3954));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory + name + /*"/"*/ STR(20), /*"miobject;miparticles;.object;.particles;.json;"*/ STR(3954));
		if (!file_exists_lib(validfile))
			return /*""*/ STR(0);
		return validfile;
	}
	
	StringType unzip_model(StringType fn)
	{
		VarType name;
		StringType validfile;
		name = filename_new_ext(filename_name(fn), /*""*/ STR(0));
		unzip(fn);
		validfile = file_find_single(unzip_directory, /*"json"*/ STR(3955));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory + name + /*"/"*/ STR(20), /*"json"*/ STR(3955));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory + /*"assets/minecraft/models/item/"*/ STR(3956), /*".json;"*/ STR(3957));
		if (!file_exists_lib(validfile))
			validfile = file_find_single(unzip_directory + /*"assets/minecraft/models/block/"*/ STR(3958), /*".json;"*/ STR(3957));
		if (!file_exists_lib(validfile))
			return /*""*/ STR(0);
		return validfile;
	}
	
	RealType window_drop_enter(ScopeAny self, ArrType files)
	{
		if (sVar(window_busy) != /*""*/ STR(0))
			return false;
		if (array_length(VarType::CreateRef(files)) > IntType(1))
			return false;
		return string_contains(asset_exts, /*"*"*/ STR(1135) + filename_ext(files.Value(IntType(0))) + /*";"*/ STR(3961));
	}
	
	void window_drop(ScopeAny self, ArrType files)
	{
		asset_load(self, { files.Value(IntType(0)) });
	}
	
	void window_event_closed(IntType window)
	{
		if (global::window_debug_current == window)
			global::window_debug_current = e_window_MAIN;
		if (window == e_window_VIEW_SECOND)
			ObjType(obj_view, global::_app->view_second)->show = false;
		if (window == e_window_TIMELINE)
			panel_tab_list_add(idInt(global::_app->timeline, panel_last), IntType(0), global::_app->timeline);
		ds_list_delete_value(global::window_list, window);
	}
	
	RealType window_exists(IntType window)
	{
		return (ds_list_find_index(global::window_list, window) >= IntType(0));
	}
	
	VecType uv_rotate(VarType uv, VarType angle, VecType offset)
	{
		MatrixType rotmat;
		VecType pnt;
		rotmat = matrix_create(point3D(-offset.Real(X_), -offset.Real(Y_), IntType(0)), vec3(IntType(0)), vec3(IntType(1)));
		rotmat = matrix_multiply(rotmat, matrix_create(point3D(offset.Real(X_), offset.Real(Y_), IntType(0)), vec3(IntType(0), IntType(0), angle), vec3(IntType(1))));
		pnt = point3D_mul_matrix(point3D(uv.Value(X_), uv.Value(Y_), IntType(0)), rotmat);
		return point2D(pnt.Real(X_), pnt.Real(Y_));
	}
	
	VarType value_get_array(VarType val, VarType def)
	{
		if (ds_list_valid(val))
			return ds_list_create_array(val);
		return def;
	}
	
	VarType value_get_color(VarType val, VarType def)
	{
		if (is_string(val))
			return hex_to_color(val);
		return def;
	}
	
	VarType value_get_point2D(VarType val, VarType def)
	{
		if (ds_list_valid(val) && ds_list_size((IntType)(val)) >= IntType(2))
			return point2D(DsList(val).Value(X_), DsList(val).Value(Y_));
		return def;
	}
	
	VarType value_get_point3D(VarType val, VarType def)
	{
		if (ds_list_valid(val) && ds_list_size((IntType)(val)) >= IntType(3))
			return point3D(DsList(val).Value(X_), DsList(val).Value(Z_), DsList(val).Value(Y_));
		return def;
	}
	
	VarType value_get_real(VarType val, VarType def)
	{
		if (is_int32(val) || is_int64(val) || is_real(val) || is_bool(val))
			return val;
		else
			if (is_string(val) && val == /*"null"*/ STR(1253))
				return null_;
		
		return def;
	}
	
	VarType value_get_save_id(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType val, def;
		val = argument[IntType(0)];
		def = /*""*/ STR(0);
		if (argument_count > IntType(1))
			def = save_id_get(argument[IntType(1)]);
		if (is_string(val))
		{
			if (val == /*"null"*/ STR(1253))
				return null_;
			return val;
		}
		return def;
	}
	
	ArrType value_get_state_vars(VarType map)
	{
		ArrType vars;
		IntType varslen;
		vars = ArrType();
		varslen = IntType(0);
		if (ds_map_valid(map))
		{
			VarType key = ds_map_find_first((IntType)(map));
			while (!is_undefined(key))
			{
				vars[varslen++] = key;
				vars[varslen++] = DsMap(map).Value(key);
				key = ds_map_find_next((IntType)(map), key);
			}
			
		}
		return vars;
	}
	
	VarType value_get_string(VarType val, VarType def)
	{
		if (is_string(val))
			return val;
		return def;
	}
	
	VarType value_random(VarType val, VarType israndom, VarType randommin, VarType randommax)
	{
		if (israndom > 0)
			return random_range(randommin, randommax);
		return val;
	}
	
	void vbuffer_add_pixels(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType alpha, pos, height, texpos, texsize, texpixelsize, scale;
		MatrixType mat;
		IntType samplesizex, samplesizey;
		alpha = argument[IntType(0)];
		pos = argument[IntType(1)];
		samplesizex = array_length(VarType::CreateRef(alpha));
		samplesizey = array_length(VarType::CreateRef(alpha[IntType(0)]));
		if (argument_count > IntType(2))
		{
			height = argument[IntType(2)];
			texpos = argument[IntType(3)];
			texsize = argument[IntType(4)];
			texpixelsize = argument[IntType(5)];
			scale = argument[IntType(6)];
		}
		else
		{
			height = samplesizey;
			texpos = vec2(IntType(0), IntType(0));
			texsize = vec2(samplesizex, samplesizey);
			texpixelsize = vec2_div(vec2(IntType(1), IntType(1)), texsize);
			scale = vec3(IntType(1));
		}
		
		mat = matrix_create(pos, vec3(IntType(0)), scale);
		RealType sizestartx, sizestarty, sizeendx, sizeendy;
		sizestartx = IntType(1) - frac(texpos.Value(X_));
		sizestarty = IntType(1) - frac(texpos.Value(Y_));
		sizeendx = frac(texpos.Value(X_) + texsize.Value(X_));
		sizeendy = frac(texpos.Value(Y_) + texsize.Value(Y_));
		RealType px = IntType(0);
		for (IntType xx = IntType(0); xx < samplesizex; xx++)
		{
			RealType pxs = IntType(1);
			if (xx == IntType(0) && sizestartx > IntType(0))
				pxs = sizestartx;
			else
				if (xx == samplesizex - IntType(1) && sizeendx > IntType(0))
					pxs = sizeendx;
			
			RealType pz = (RealType)height / scale.Value(Z_);
			for (IntType yy = IntType(0); yy < samplesizey; yy++)
			{
				RealType pzs = IntType(1);
				if (yy == IntType(0) && sizestarty > IntType(0))
					pzs = sizestarty;
				else
					if (yy == samplesizey - IntType(1) && sizeendy > IntType(0))
						pzs = sizeendy;
				
				if (alpha[xx][yy] < IntType(1))
				{
					pz -= pzs;
					continue;
				}
				BoolType wface, eface, aface, bface;
				wface = (xx == IntType(0) || alpha[xx - IntType(1)][yy] < IntType(1));
				eface = (xx == ceil(texsize.Value(X_)) - IntType(1) || alpha[xx + IntType(1)][yy] < IntType(1));
				aface = (yy == IntType(0) || alpha[xx][yy - IntType(1)] < IntType(1));
				bface = (yy == ceil(texsize.Value(Y_)) - IntType(1) || alpha[xx][yy + IntType(1)] < IntType(1));
				if (!eface && !wface && !aface && !bface)
				{
					pz -= pzs;
					continue;
				}
				VecType ptex, t1, t2, t3, t4;
				RealType pfix, psize;
				ptex = point2D(floor(texpos.Value(X_)) + xx, floor(texpos.Value(Y_)) + yy);
				pfix = 1.0 / 256.0;
				psize = IntType(1) - pfix;
				t1 = ptex;
				t2 = point2D(ptex.Real(X_) + psize, ptex.Real(Y_));
				t3 = point2D(ptex.Real(X_) + psize, ptex.Real(Y_) + psize);
				t4 = point2D(ptex.Real(X_), ptex.Real(Y_) + psize);
				t1 = point2D_mul(t1, texpixelsize);
				t2 = point2D_mul(t2, texpixelsize);
				t3 = point2D_mul(t3, texpixelsize);
				t4 = point2D_mul(t4, texpixelsize);
				VecType p1, p2, p3, p4;
				if (eface)
				{
					p1 = point3D(px + pxs, IntType(1), pz - pzs);
					p2 = point3D(px + pxs, IntType(1), pz);
					p3 = point3D(px + pxs, IntType(0), pz);
					p4 = point3D(px + pxs, IntType(0), pz - pzs);
					vbuffer_add_triangle({ p1, p2, p3, t1, t2, t3, null_, null_, null_, false, mat });
					vbuffer_add_triangle({ p3, p4, p1, t3, t4, t1, null_, null_, null_, false, mat });
				}
				if (wface)
				{
					p1 = point3D(px, IntType(0), pz - pzs);
					p2 = point3D(px, IntType(0), pz);
					p3 = point3D(px, IntType(1), pz);
					p4 = point3D(px, IntType(1), pz - pzs);
					vbuffer_add_triangle({ p1, p2, p3, t1, t2, t3, null_, null_, null_, false, mat });
					vbuffer_add_triangle({ p3, p4, p1, t3, t4, t1, null_, null_, null_, false, mat });
				}
				if (aface)
				{
					p1 = point3D(px, IntType(1), pz);
					p2 = point3D(px, IntType(0), pz);
					p3 = point3D(px + pxs, IntType(0), pz);
					p4 = point3D(px + pxs, IntType(1), pz);
					vbuffer_add_triangle({ p1, p2, p3, t1, t2, t3, null_, null_, null_, false, mat });
					vbuffer_add_triangle({ p3, p4, p1, t3, t4, t1, null_, null_, null_, false, mat });
				}
				if (bface)
				{
					p1 = point3D(px, IntType(0), pz - pzs);
					p2 = point3D(px, IntType(1), pz - pzs);
					p3 = point3D(px + pxs, IntType(1), pz - pzs);
					p4 = point3D(px + pxs, IntType(0), pz - pzs);
					vbuffer_add_triangle({ p1, p2, p3, t1, t2, t3, null_, null_, null_, false, mat });
					vbuffer_add_triangle({ p3, p4, p1, t3, t4, t1, null_, null_, null_, false, mat });
				}
				pz -= pzs;
			}
			px += pxs;
		}
	}
	
	void vbuffer_add_triangle(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count < IntType(15))
		{
			VarType pos1, pos2, pos3, tex1, tex2, tex3, normal1, normal2, normal3;
			pos1 = argument[IntType(0)];
			pos2 = argument[IntType(1)];
			pos3 = argument[IntType(2)];
			tex1 = argument[IntType(3)];
			tex2 = argument[IntType(4)];
			tex3 = argument[IntType(5)];
			if (argument_count > IntType(6) && is_array(argument[IntType(6)]))
			{
				normal1 = argument[IntType(6)];
				normal2 = argument[IntType(7)];
				normal3 = argument[IntType(8)];
			}
			else
			{
				normal1 = vec3_cross(point3D_sub(pos1, pos2), point3D_sub(pos2, pos3));
				normal2 = normal1;
				normal3 = normal1;
			}
			
			if (argument_count > IntType(10) && argument[IntType(10)] != null_)
			{
				VarType mat = argument[IntType(10)];
				pos1 = point3D_mul_matrix(pos1, mat);
				pos2 = point3D_mul_matrix(pos2, mat);
				pos3 = point3D_mul_matrix(pos3, mat);
				normal1 = vec3_normalize(vec3_mul_matrix(normal1, mat));
				if (argument[IntType(7)] != null_)
					normal2 = vec3_normalize(vec3_mul_matrix(normal2, mat));
				else
					normal2 = normal1;
				
				if (argument[IntType(8)] != null_)
					normal3 = vec3_normalize(vec3_mul_matrix(normal3, mat));
				else
					normal3 = normal1;
				
			}
			if (argument_count > IntType(9) && argument[IntType(9)])
			{
				VarType tmp = pos1;
				pos1 = pos2;
				pos2 = tmp;
				tmp = tex1;
				tex1 = tex2;
				tex2 = tmp;
				normal1 = vec3_mul(normal1, -IntType(1));
				normal2 = vec3_mul(normal2, -IntType(1));
				normal3 = vec3_mul(normal3, -IntType(1));
			}
			vertex_add({ pos1, normal1, tex1 });
			vertex_add({ pos2, normal2, tex2 });
			vertex_add({ pos3, normal3, tex3 });
		}
		else
		{
			VarType x1, y1, z1, x2, y2, z2, x3, y3, z3;
			VarType tx1, ty1, tx2, ty2, tx3, ty3;
			RealType nx, ny, nz;
			if (argument_count > IntType(16) && argument[IntType(16)] != null_)
			{
				VarType mat = argument[IntType(16)];
				x1 = mat.Value(IntType(0)) * argument[IntType(0)] + mat.Value(IntType(4)) * argument[IntType(1)] + mat.Value(IntType(8)) * argument[IntType(2)] + mat.Value(IntType(12));
				y1 = mat.Value(IntType(1)) * argument[IntType(0)] + mat.Value(IntType(5)) * argument[IntType(1)] + mat.Value(IntType(9)) * argument[IntType(2)] + mat.Value(IntType(13));
				z1 = mat.Value(IntType(2)) * argument[IntType(0)] + mat.Value(IntType(6)) * argument[IntType(1)] + mat.Value(IntType(10)) * argument[IntType(2)] + mat.Value(IntType(14));
				x2 = mat.Value(IntType(0)) * argument[IntType(3)] + mat.Value(IntType(4)) * argument[IntType(4)] + mat.Value(IntType(8)) * argument[IntType(5)] + mat.Value(IntType(12));
				y2 = mat.Value(IntType(1)) * argument[IntType(3)] + mat.Value(IntType(5)) * argument[IntType(4)] + mat.Value(IntType(9)) * argument[IntType(5)] + mat.Value(IntType(13));
				z2 = mat.Value(IntType(2)) * argument[IntType(3)] + mat.Value(IntType(6)) * argument[IntType(4)] + mat.Value(IntType(10)) * argument[IntType(5)] + mat.Value(IntType(14));
				x3 = mat.Value(IntType(0)) * argument[IntType(6)] + mat.Value(IntType(4)) * argument[IntType(7)] + mat.Value(IntType(8)) * argument[IntType(8)] + mat.Value(IntType(12));
				y3 = mat.Value(IntType(1)) * argument[IntType(6)] + mat.Value(IntType(5)) * argument[IntType(7)] + mat.Value(IntType(9)) * argument[IntType(8)] + mat.Value(IntType(13));
				z3 = mat.Value(IntType(2)) * argument[IntType(6)] + mat.Value(IntType(6)) * argument[IntType(7)] + mat.Value(IntType(10)) * argument[IntType(8)] + mat.Value(IntType(14));
			}
			else
			{
				x1 = argument[IntType(0)];
				y1 = argument[IntType(1)];
				z1 = argument[IntType(2)];
				x2 = argument[IntType(3)];
				y2 = argument[IntType(4)];
				z2 = argument[IntType(5)];
				x3 = argument[IntType(6)];
				y3 = argument[IntType(7)];
				z3 = argument[IntType(8)];
			}
			
			nx = (z1 - z2) * (y3 - y2) - (y1 - y2) * (z3 - z2);
			ny = (x1 - x2) * (z3 - z2) - (z1 - z2) * (x3 - x2);
			nz = (y1 - y2) * (x3 - x2) - (x1 - x2) * (y3 - y2);
			if (argument_count > IntType(15) && argument[IntType(15)])
			{
				VarType _tx1, _ty1, _tz1;
				_tx1 = x1;
				_ty1 = y1;
				_tz1 = z1;
				x1 = x2;
				y1 = y2;
				z1 = z2;
				x2 = _tx1;
				y2 = _ty1;
				z2 = _tz1;
				tx1 = argument[IntType(11)];
				ty1 = argument[IntType(12)];
				tx2 = argument[IntType(9)];
				ty2 = argument[IntType(10)];
				tx3 = argument[IntType(13)];
				ty3 = argument[IntType(14)];
				nx *= -1.0;
				ny *= -1.0;
				nz *= -1.0;
			}
			else
			{
				tx1 = argument[IntType(9)];
				ty1 = argument[IntType(10)];
				tx2 = argument[IntType(11)];
				ty2 = argument[IntType(12)];
				tx3 = argument[IntType(13)];
				ty3 = argument[IntType(14)];
			}
			
			vertex_add({ x1, y1, z1, nx, ny, nz, tx1, ty1 });
			vertex_add({ x2, y2, z2, nx, ny, nz, tx2, ty2 });
			vertex_add({ x3, y3, z3, nx, ny, nz, tx3, ty3 });
		}
		
	}
	
}
