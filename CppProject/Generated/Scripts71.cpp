/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.14 19:47:41 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType view_control_scale_all(ScopeAny self, IntType view, VarType mat, RealType radius)
	{
		VecType coord;
		RealType radius2D, alpha;
		radius2D = ((radius / point3D_distance(idVar(global::tl_edit, world_pos), global::cam_from)) * sVar(content_height)) / ((RealType)global::cam_fov / 60.0);
		coord = point3D_project(matrix_position(mat), global::view_proj_matrix, sVar(content_width), sVar(content_height));
		if (global::point3D_project_error)
			return IntType(0);
		coord.Real(X_) = round(coord.Real(X_));
		coord.Real(Y_) = round(coord.Real(Y_));
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(31))
		{
			if (sVar(view_control_edit) != e_view_control_SCA_XYZ || sVar(view_control_edit_view) != view)
				return IntType(0);
			coord = sVec(view_control_scale_coords);
			sReal(view_control_scale_amount) = point_distance((sInt(mouse_wrap_x) * sVar(content_width)) + gmlGlobal::mouse_x - sVar(content_x), (sInt(mouse_wrap_y) * sVar(content_height)) + gmlGlobal::mouse_y - sVar(content_y), sVec(view_control_scale_coords).Real(X_), sVec(view_control_scale_coords).Real(Y_)) / sReal(view_control_scale_start);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == e_view_control_SCA_XYZ)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(31);
					sVec(view_control_value_scale).Real(X_) = idVar(global::tl_edit, value).Value(e_value_SCA_X);
					sVec(view_control_value_scale).Real(Y_) = idVar(global::tl_edit, value).Value(e_value_SCA_Y);
					sVec(view_control_value_scale).Real(Z_) = idVar(global::tl_edit, value).Value(e_value_SCA_Z);
					sVar(view_control_edit) = e_view_control_SCA_XYZ;
					sVar(view_control_edit_view) = view;
					sReal(view_control_scale_start) = point_distance(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), coord.Real(X_), coord.Real(Y_));
					sReal(view_control_scale_amount) = IntType(1);
					sVec(view_control_scale_coords).Real(X_) = coord.Real(X_);
					sVec(view_control_scale_coords).Real(Y_) = coord.Real(Y_);
					sVar(view_control_matrix) = mat;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					global::axis_edit = X_;
					tl_value_set_start(self, ID_action_tl_frame_scale, true);
					for (IntType i = X_; i <= Z_; i++)
						tl_value_set(self, { e_value_SCA_X + i, tl_value_default(e_value_SCA_X + i), false });
					tl_value_set_done();
					app_mouse_clear(self);
				}
			}
		
		draw_set_color(global::c_control_white);
		if (ObjType(obj_view, view)->control_mouseon_last == e_view_control_SCA_XYZ)
			alpha = IntType(1);
		else
			alpha = 0.6;
		
		VecType drawcoord, mousecoord;
		drawcoord = coord;
		mousecoord = point2D((sInt(mouse_wrap_x) * sVar(content_width)) + gmlGlobal::mouse_x - sVar(content_x), (sInt(mouse_wrap_y) * sVar(content_height)) + gmlGlobal::mouse_y - sVar(content_y));
		if (sVar(view_control_edit) != e_view_control_SCA_XYZ)
		{
			draw_set_alpha(alpha);
			view_shape_circle({ idVar(global::tl_edit, world_pos), radius });
		}
		else
		{
			draw_circle_ext(mousecoord.Real(X_), mousecoord.Real(Y_), IntType(4), false, IntType(16), c_black, IntType(1));
			for (RealType i = IntType(1); i < ceil(sReal(view_control_scale_amount) * IntType(8)); i++)
			{
				RealType nx, ny, angle;
				nx = lerp(mousecoord.Real(X_), drawcoord.Real(X_), i / (sReal(view_control_scale_amount) * IntType(8)));
				ny = lerp(mousecoord.Real(Y_), drawcoord.Real(Y_), i / (sReal(view_control_scale_amount) * IntType(8)));
				if (nx > sVar(content_width) || ny > sVar(content_height) || nx < IntType(0) || ny < IntType(0))
					continue;
				angle = -radtodeg(arctan2(mousecoord.Real(Y_) - drawcoord.Real(Y_), mousecoord.Real(X_) - drawcoord.Real(X_)));
				draw_line_ext(nx, ny, nx + lengthdir_x(5.0, angle), ny + lengthdir_y(5.0, angle), c_black, IntType(1));
			}
		}
		
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && (abs(point_distance(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), coord.Real(X_), coord.Real(Y_)) - radius2D) < view_3d_control_width / 2.0))
			ObjType(obj_view, view)->control_mouseon = e_view_control_SCA_XYZ;
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	RealType view_control_scale_axis(ScopeAny self, IntType view, IntType control, IntType vid, IntType color, RealType start, RealType length, VarType mat, IntType axis, VecType rotation)
	{
		VecType s, e, center3D, start3D, end3D, start2D, end2D;
		ArrType axisarr, center2D;
		axisarr = ArrType::From({ axis == X_, axis == Y_, axis == Z_ });
		s = control_pos(start, length, axis, mat, true);
		e = control_pos(start, length, axis, mat, false);
		if (sArr(view_control_move_flip_axis).Value(axis))
			length *= -1.0;
		center3D = point3D_mul_matrix(vec3(IntType(0)), mat);
		start3D = s;
		end3D = e;
		center2D = view_shape_project(center3D);
		if (global::point3D_project_error)
			return IntType(0);
		start2D = view_shape_project(start3D);
		if (global::point3D_project_error)
			return IntType(0);
		end2D = view_shape_project(end3D);
		if (global::point3D_project_error)
			return IntType(0);
		RealType alpha = percent(abs(vec3_dot(vec3_normalize(vec3_sub(end3D, center3D)), vec3_normalize(vec3_sub(global::cam_from, center3D)))), .975, .95);
		if ((sVar(window_busy) == /*"rendercontrol"*/ STR(31) && sVar(view_control_edit) == control) || ObjType(obj_view, view)->control_mouseon_last == control || !(sVar(setting_fade_gizmos) > 0))
			alpha = IntType(1);
		if (alpha == IntType(0))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(31))
		{
			if (sVar(view_control_edit) != control || sVar(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			sVec(view_control_vec) = point2D_sub(end2D, center2D);
			draw_set_color(c_white);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(31);
					sVar(view_control_edit) = control;
					sVar(view_control_edit_view) = view;
					sVar(view_control_value) = idVar(global::tl_edit, value).Value(vid);
					sVec(view_control_vec) = point2D_sub(end2D, center2D);
					sVar(view_control_matrix) = mat;
					sVar(view_control_length) = length;
					sReal(view_control_move_distance) = IntType(0);
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					global::axis_edit = vid - e_value_SCA_X;
					action_tl_frame_scale(self, tl_value_default(vid), false);
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(start2D, end2D);
		RealType size = (point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size) * .035 * sReal(view_control_ratio);
		view_shape_cube_draw(mat, vec3_mul(axisarr, length), size);
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && (point_line_distance(start2D.Real(X_), start2D.Real(Y_), end2D.Real(X_), end2D.Real(Y_), gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y)) < view_3d_control_width))
			ObjType(obj_view, view)->control_mouseon = control;
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	RealType view_control_scale_plane(ScopeAny self, IntType view, IntType control, VecType axes, IntType color, VarType mat, VecType normal, VecType corner1, VecType corner2, VecType corner3, VecType corner4)
	{
		normal = vec3_mul_matrix(normal, mat);
		for (IntType i = X_; i <= Z_; i++)
		{
			if (sArr(view_control_move_flip_axis).Value(i))
			{
				corner1.Real(i) *= -1.0;
				corner2.Real(i) *= -1.0;
				corner3.Real(i) *= -1.0;
				corner4.Real(i) *= -1.0;
			}
		}
		VecType corner13D, corner12D;
		corner13D = point3D_mul_matrix(corner1, mat);
		corner12D = view_shape_project(corner13D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner23D, corner22D;
		corner23D = point3D_mul_matrix(corner2, mat);
		corner22D = view_shape_project(corner23D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner33D;
		ArrType corner32D;
		corner33D = point3D_mul_matrix(corner3, mat);
		corner32D = view_shape_project(corner33D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner43D, corner42D;
		corner43D = point3D_mul_matrix(corner4, mat);
		corner42D = view_shape_project(corner43D);
		if (global::point3D_project_error)
			return IntType(0);
		if (vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat)))) < IntType(0))
			normal = vec3_mul(normal, -IntType(1));
		RealType alpha = percent(abs(vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat))))), .1, .2);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(31) && sVar(view_control_edit) == control)
			alpha = IntType(1);
		if (alpha == IntType(0) || (sVar(window_busy) == /*"rendercontrol"*/ STR(31) && sVar(view_control_edit) != control))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(31))
		{
			if (sVar(view_control_edit) != control || sVar(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			view_control_plane_update();
			draw_set_color(c_white);
			if (sBool(mouse_left_released))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sVar(view_control_edit) = null_;
			}
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(31);
					sVar(view_control_edit) = control;
					sVar(view_control_edit_view) = view;
					view_control_plane_start(idVar(global::tl_edit, world_pos), normal);
					sVar(view_control_value) = point3D(idVar(global::tl_edit, value).Value(e_value_SCA_X), idVar(global::tl_edit, value).Value(e_value_SCA_Y), idVar(global::tl_edit, value).Value(e_value_SCA_Z));
					sBool(view_control_plane) = true;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					tl_value_set_start(self, ID_action_tl_frame_scale_xyz, true);
					for (IntType i = X_; i <= Z_; i++)
					{
						if (axes.Real(i))
							tl_value_set(self, { e_value_SCA_X + i, tl_value_default(e_value_SCA_X + i), false });
					}
					tl_value_set_done();
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(corner12D, corner22D);
		view_shape_line_draw(corner22D, corner42D);
		view_shape_line_draw(corner12D, corner42D);
		draw_set_alpha(.35);
		render_set_culling(false);
		draw_primitive_begin(pr_trianglelist);
		view_shape_triangle_draw(corner12D, corner22D, corner42D);
		draw_primitive_end();
		render_set_culling(true);
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		if (point_in_triangle(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), corner12D.Real(X_), corner12D.Real(Y_), corner22D.Real(X_), corner22D.Real(Y_), corner42D.Real(X_), corner42D.Real(Y_)) && sInt(place_tl) == null_ && sBool(content_mouseon))
			ObjType(obj_view, view)->control_mouseon = control;
		return 0.0;
	}
	
	RealType view_draw(ScopeAny self, IntType view)
	{
		VarType cam, camname;
		VarType captionx, captionw;
		RealType captiony, captionh;
		RealType boxx, boxy;
		VarType boxw, boxh;
		RealType padding, dx, dy;
		StringType location;
		RealType split;
		BoolType mouseonresizesplit, mouseonresizehor, mouseonresizever;
		mouseonresizesplit = false;
		mouseonresizehor = false;
		mouseonresizever = false;
		if (!(ObjType(obj_view, view)->show > 0))
			return IntType(0);
		if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER && ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
			ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		if (window_get_current() == e_window_VIEW_SECOND)
		{
			boxx = IntType(0);
			boxy = IntType(0);
			boxw = sReal(window_width);
			boxh = sReal(window_height);
			location = /*"full"*/ STR(2684);
			sBool(mouseon) = true;
		}
		else
		{
			if (view == sInt(view_second) && window_exists(e_window_VIEW_SECOND))
				return IntType(0);
			boxx = sReal(view_area_x);
			boxy = sReal(view_area_y);
			boxw = sReal(view_area_width);
			boxh = sReal(view_area_height);
			mouseonresizesplit = false;
			mouseonresizehor = false;
			mouseonresizever = false;
			location = ObjType(obj_view, view)->location;
			split = sReal(view_split);
			if (view == sInt(view_second))
				split = IntType(1) - split;
			else
				if (!(ObjType(obj_view, sInt(view_second))->show > 0) || window_exists(e_window_VIEW_SECOND))
					location = /*"full"*/ STR(2684);
			
			ObjType(obj_view, view)->location_last = location;
			switch (StringType(location).id)
			{
				case 190: // top
				{
					boxh -= sReal(view_area_height) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
				case 192: // right
				{
					boxx += sReal(view_area_width) * split;
					boxw -= sReal(view_area_width) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					break;
				}
				case 189: // bottom
				{
					boxy += sReal(view_area_height) * split;
					boxh -= sReal(view_area_height) * split;
					mouseonresizesplit = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 191: // left
				{
					boxw -= sReal(view_area_width) * split;
					mouseonresizesplit = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					break;
				}
				case 3801: // right_top
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxx += sReal(view_area_width) - boxw;
					mouseonresizehor = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
				case 2685: // right_bottom
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxx += sReal(view_area_width) - boxw;
					boxy += sReal(view_area_height) - boxh;
					mouseonresizehor = app_mouse_box(self, boxx, boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 3802: // left_bottom
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					boxy += sReal(view_area_height) - boxh;
					mouseonresizehor = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy, boxw, IntType(8));
					break;
				}
				case 3803: // left_top
				{
					boxw = min({ sReal(view_area_width), ObjType(obj_view, view)->width });
					boxh = min({ sReal(view_area_height), ObjType(obj_view, view)->height });
					mouseonresizehor = app_mouse_box(self, boxx + boxw - IntType(4), boxy, IntType(8), boxh);
					mouseonresizever = app_mouse_box(self, boxx, boxy + boxh - IntType(4), boxw, IntType(8));
					break;
				}
			}
			
			if (sBool(popup_mouseon))
			{
				mouseonresizehor = false;
				mouseonresizever = false;
				mouseonresizesplit = false;
			}
			boxx = floor(boxx);
			boxy = floor(boxy);
			boxw = ceil(boxw);
			boxh = ceil(boxh);
			if (boxw < IntType(1) || boxh < IntType(1))
				return IntType(0);
		}
		
		sVar(content_x) = boxx;
		sVar(content_y) = boxy;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh;
		sBool(content_mouseon) = (ObjType(obj_view, view)->mouseon && !sBool(popup_mouseon));
		if (sVar(window_busy) == /*"viewmove"*/ STR(3804) && view == sInt(view_second))
		{
			boxx = gmlGlobal::mouse_x - ((RealType)boxw / 2.0);
			boxy = gmlGlobal::mouse_y;
			sVar(content_x) = boxx;
			sVar(content_y) = boxy;
			draw_set_alpha(1.0);
		}
		if (view == sInt(view_second))
			draw_dropshadow(self, boxx, boxy, boxw, boxh, c_black, IntType(1));
		draw_box({ boxx, boxy, boxw, boxh, false, global::c_level_middle, IntType(1) });
		if (ObjType(obj_view, view)->camera != -IntType(4) && ObjType(obj_view, view)->camera != -IntType(5) && !instance_exists(ObjType(obj_view, view)->camera))
			ObjType(obj_view, view)->camera = -IntType(5);
		cam = ObjType(obj_view, view)->camera;
		if (cam == -IntType(5))
			cam = sInt(timeline_camera);
		padding = IntType(4);
		captionx = boxx + IntType(12);
		captiony = boxy + padding;
		captionw = boxw;
		captionh = IntType(32);
		clip_begin(boxx, boxy, boxw, IntType(32));
		sVar(dw) = IntType(24);
		sVar(dh) = IntType(24);
		dx = boxx + boxw - (sVar(dw) + padding);
		dy = boxy + padding;
		global::microani_prefix = string(view);
		if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->show > 0 && !window_exists(e_window_VIEW_SECOND) && sVar(window_busy) != /*"viewmove"*/ STR(3804))
		{
			if (ObjType(obj_view, sInt(view_second))->location == /*"left_top"*/ STR(3803))
				captionx += ObjType(obj_view, sInt(view_second))->width;
			if (ObjType(obj_view, sInt(view_second))->location == /*"right_top"*/ STR(3801))
				dx -= ObjType(obj_view, sInt(view_second))->width;
			if (ObjType(obj_view, sInt(view_second))->location == /*"left_top"*/ STR(3803) || ObjType(obj_view, sInt(view_second))->location == /*"right_top"*/ STR(3801))
				captionw -= ObjType(obj_view, sInt(view_second))->width;
		}
		if (view == sInt(view_second))
		{
			if (window_get_current() != e_window_VIEW_SECOND)
			{
				if (draw_button_icon(self, { /*"viewclose"*/ STR(3805), dx, dy, sVar(dw), sVar(dh), false, icons_CLOSE, null_, false, /*"viewclose"*/ STR(3805) }))
				{
					ObjType(obj_view, view)->show = false;
					sBool(view_render) = false;
				}
				dx -= sVar(dw) + padding;
				if (draw_button_icon(self, { /*"viewpopout"*/ STR(3806), dx, dy, sVar(dw), sVar(dh), false, icons_EXTERNAL, null_, false, /*"viewpopout"*/ STR(3806) }))
					window_create(e_window_VIEW_SECOND, boxx, boxy, boxw, boxh);
			}
			else
			{
				if (draw_button_icon(self, { /*"viewpopout"*/ STR(3806), dx, dy, sVar(dw), sVar(dh), false, icons_INTERNAL, null_, false, /*"viewpopin"*/ STR(3807) }))
				{
					window_close(e_window_VIEW_SECOND);
					ObjType(obj_view, view)->location = ObjType(obj_view, view)->location_last;
					ObjType(obj_view, view)->show = true;
				}
			}
			
		}
		else
		{
			tip_set_keybind(self, e_keybind_SECONDARY_VIEW);
			if (draw_button_icon(self, { /*"viewsecond"*/ STR(3808), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, sInt(view_second))->show, icons_VIEWPORT_SECONDARY, null_, false, (ObjType(obj_view, sInt(view_second))->show > 0) ? /*"viewseconddisable"*/ STR(3809) : /*"viewsecondenable"*/ STR(3810) }))
				action_setting_secondary_view(self);
		}
		
		dx -= (padding + 1.0);
		draw_divide_vertical(dx, dy, sVar(dh));
		dx -= 16.0 + padding;
		if (draw_button_icon(self, { /*"viewqualitysettings"*/ STR(3811), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewqualitysettings"*/ STR(3811)), icons_CHEVRON_DOWN_TINY }))
		{
			menu_settings_set(self, dx, dy, (string(view) + /*"viewqualitysettings"*/ STR(3811)), IntType(24));
			sInt(settings_menu_view) = view;
			sInt(settings_menu_script) = ID_menu_quality_settings;
		}
		if (sStr(settings_menu_name) == (string(view) + /*"viewqualitysettings"*/ STR(3811)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(733))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		dx -= sVar(dw);
		tip_set_keybind(self, e_keybind_RENDER_MODE);
		if (draw_button_icon(self, { /*"viewmoderender"*/ STR(3812), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_RENDER, ObjType(obj_theme, sInt(setting_theme))->dark ? icons_SPHERE_MATERIAL__DARK : icons_SPHERE_MATERIAL, null_, false, /*"viewmoderender"*/ STR(3812) }))
		{
			ObjType(obj_view, view)->quality = e_view_mode_RENDER;
			if (view == sInt(view_main) && ObjType(obj_view, sInt(view_second))->quality == e_view_mode_RENDER)
				ObjType(obj_view, sInt(view_second))->quality = e_view_mode_SHADED;
			if (view == sInt(view_second) && ObjType(obj_view, sInt(view_main))->quality == e_view_mode_RENDER)
				ObjType(obj_view, sInt(view_main))->quality = e_view_mode_SHADED;
		}
		dx -= sVar(dw) + padding;
		tip_set_keybind(self, e_keybind_RENDER_MODE);
		if (draw_button_icon(self, { /*"viewmodeshaded"*/ STR(3813), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_SHADED, ObjType(obj_theme, sInt(setting_theme))->dark ? icons_SPHERE_SHADING__DARK : icons_SPHERE_SHADING, null_, false, /*"viewmodeshaded"*/ STR(3813) }))
			ObjType(obj_view, view)->quality = e_view_mode_SHADED;
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewmodeflat"*/ STR(3814), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->quality == e_view_mode_FLAT, icons_SPHERE_FLAT, null_, false, /*"viewmodeflat"*/ STR(3814) }))
			ObjType(obj_view, view)->quality = e_view_mode_FLAT;
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewparticles"*/ STR(3815), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->particles, icons_FIREWORKS, null_, false, (ObjType(obj_view, view)->particles > 0) ? /*"viewparticlesdisable"*/ STR(3816) : /*"viewparticlesenable"*/ STR(3817) }))
			ObjType(obj_view, view)->particles = !(ObjType(obj_view, view)->particles > 0);
		if (cam != null_)
		{
			dx -= sVar(dw) + padding;
			if (draw_button_icon(self, { /*"vieweffects"*/ STR(3818), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->effects, icons_WAND, null_, false, (ObjType(obj_view, view)->effects > 0) ? /*"vieweffectsdisable"*/ STR(3819) : /*"vieweffectsenable"*/ STR(3820) }))
			{
				ObjType(obj_view, view)->effects = !(ObjType(obj_view, view)->effects > 0);
				global::render_samples = -IntType(1);
			}
		}
		dx -= (padding + 1.0);
		draw_divide_vertical(dx, dy, sVar(dh));
		dx -= 16.0 + padding;
		if (draw_button_icon(self, { /*"viewgridsettings"*/ STR(3821), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewgridsettings"*/ STR(3821)), icons_CHEVRON_DOWN_TINY }))
		{
			menu_settings_set(self, dx, dy, (string(view) + /*"viewgridsettings"*/ STR(3821)), IntType(24));
			sInt(settings_menu_view) = view;
			sInt(settings_menu_script) = ID_menu_grid_settings;
		}
		if (sStr(settings_menu_name) == (string(view) + /*"viewgridsettings"*/ STR(3821)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(733))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		dx -= sVar(dw);
		if (draw_button_icon(self, { /*"viewgrid"*/ STR(3822), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->grid, icons_GRID, null_, false, (ObjType(obj_view, view)->grid > 0) ? /*"viewgriddisable"*/ STR(3823) : /*"viewgridenable"*/ STR(3824) }))
			ObjType(obj_view, view)->grid = !(ObjType(obj_view, view)->grid > 0);
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewaspectratio"*/ STR(3825), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->aspect_ratio, icons_LETTERBOX, null_, false, (ObjType(obj_view, view)->aspect_ratio > 0) ? /*"viewaspectratiodisable"*/ STR(3826) : /*"viewaspectratioenable"*/ STR(3827) }))
			ObjType(obj_view, view)->aspect_ratio = !(ObjType(obj_view, view)->aspect_ratio > 0);
		dx -= sVar(dw) + padding;
		if (draw_button_icon(self, { /*"viewoverlays"*/ STR(3828), dx, dy, sVar(dw), sVar(dh), ObjType(obj_view, view)->gizmos, icons_OVERLAYS, null_, false, (ObjType(obj_view, view)->gizmos > 0) ? /*"viewoverlaysdisable"*/ STR(3829) : /*"viewoverlaysenable"*/ STR(3830) }))
			ObjType(obj_view, view)->gizmos = !(ObjType(obj_view, view)->gizmos > 0);
		if (view == sInt(view_main))
		{
			dx -= (padding + 1.0);
			draw_divide_vertical(dx, dy, sVar(dh));
			dx -= 16.0 + padding;
			if (draw_button_icon(self, { /*"viewsnapsettings"*/ STR(3831), dx, dy, IntType(16), IntType(24), sStr(settings_menu_name) == (string(view) + /*"viewsnapsettings"*/ STR(3831)), icons_CHEVRON_DOWN_TINY }))
			{
				menu_settings_set(self, dx, dy, (string(view) + /*"viewsnapsettings"*/ STR(3831)), IntType(24));
				sInt(settings_menu_view) = view;
				sInt(settings_menu_script) = ID_menu_snap_settings;
			}
			if (sStr(settings_menu_name) == (string(view) + /*"viewsnapsettings"*/ STR(3831)) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(733))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
			dx -= sVar(dw);
			tip_set_keybind(self, e_keybind_SNAP);
			if (draw_button_icon(self, { /*"viewsnap"*/ STR(3832), dx, dy, sVar(dw), sVar(dh), sReal(setting_snap), icons_MAGNET, null_, false, (sReal(setting_snap) > 0) ? /*"viewsnapdisable"*/ STR(3833) : /*"viewsnapenable"*/ STR(3834) }))
				sReal(setting_snap) = !(sReal(setting_snap) > 0);
		}
		StringType listname;
		BoolType menuactive;
		listname = (view == sInt(view_main) ? /*"viewcameramain"*/ STR(1469) : /*"viewcamerasecond"*/ STR(1470));
		menuactive = false;
		withAll (obj_menu, global::_app->id)
		{
			if (self->menu_name == listname)
			{
				menuactive = true;
				break;
			}
		}
		
		if (ObjType(obj_view, view)->camera == -IntType(4) && cam == -IntType(4))
			camname = text_get({ /*"viewworkcamera"*/ STR(3835) });
		else
			if (ObjType(obj_view, view)->camera == -IntType(5))
				camname = text_get({ /*"viewactivecamera"*/ STR(3836), (cam == -IntType(4) ? text_get({ /*"viewworkcamera"*/ STR(3835) }) : string_remove_newline(idVar(cam, display_name))) });
			else
				camname = idVar(cam, display_name);
		
		
		draw_set_font(sInt(font_value));
		if (draw_button_menu(self, { listname, e_menu_LIST_SEAMLESS, captionx - IntType(8), dy, min({ string_width(camname) + IntType(52), dx - captionx }), IntType(24), ObjType(obj_view, view)->camera, camname, ID_action_view_camera }))
			sInt(settings_menu_view) = view;
		ObjType(value_animation, ObjType(micro_animation, global::current_microani)->fade)->value = IntType(1);
		ObjType(obj_view, sInt(view_second))->title = camname;
		global::microani_prefix = /*""*/ STR(0);
		clip_end();
		sVar(content_x) = boxx;
		sVar(content_y) = boxy + captionh;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh - captionh;
		sBool(content_mouseon) = false;
		if (location != /*"full"*/ STR(2684) && location != /*"top"*/ STR(190) && location != /*"bottom"*/ STR(189))
		{
			if (!string_contains(location, /*"left"*/ STR(191)))
			{
				sVar(content_x) += IntType(3);
				sVar(content_width) -= 3.0;
			}
			if (!string_contains(location, /*"right"*/ STR(192)))
				sVar(content_width) -= 3.0;
			if (location == /*"right_top"*/ STR(3801) || location == /*"left_top"*/ STR(3803))
				sVar(content_height) -= 3.0;
		}
		if (sVar(content_width) > IntType(0) && sVar(content_height) > IntType(0))
		{
			draw_box({ sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, c_black, IntType(1) });
			draw_outline({ sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border, false });
			if (ObjType(obj_view, view)->aspect_ratio > 0)
			{
				VarType wid, hei;
				RealType scale;
				if (cam > 0 && !(idVar(cam, value).Value(e_value_CAM_SIZE_USE_PROJECT) > 0))
				{
					wid = idVar(cam, value).Value(e_value_CAM_WIDTH);
					hei = idVar(cam, value).Value(e_value_CAM_HEIGHT);
				}
				else
				{
					wid = sVar(project_video_width);
					hei = sVar(project_video_height);
				}
				
				if ((RealType)wid / hei < (RealType)sVar(content_width) / sVar(content_height))
				{
					scale = (RealType)sVar(content_height) / hei;
					sVar(content_x) += (sVar(content_width) - scale * wid) / 2.0;
					sVar(content_width) = wid * scale;
				}
				else
				{
					scale = (RealType)sVar(content_width) / wid;
					sVar(content_y) += (sVar(content_height) - scale * hei) / 2.0;
					sVar(content_height) = hei * scale;
				}
				
			}
			sVar(content_x) = floor(sVar(content_x));
			sVar(content_y) = floor(sVar(content_y));
			sVar(content_width) = ceil(sVar(content_width));
			sVar(content_height) = ceil(sVar(content_height));
			sBool(content_mouseon) = (app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), /*"place"*/ STR(113)) && ObjType(obj_view, view)->mouseon && !ObjType(obj_view, view)->toolbar_mouseon && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
			if (sBool(content_mouseon))
				sStr(shortcut_bar_state) = /*"viewport"*/ STR(118) + (cam == null_ ? /*""*/ STR(0) : /*"cam"*/ STR(3837));
			if (ObjType(obj_view, view)->quality != e_view_mode_RENDER || sBool(view_render_real_time))
				view_update(self, view, cam);
			else
				if (sVar(window_focus) == string(view) && !sBool(mouse_left) && !sBool(mouse_right))
					sVar(window_busy) = /*""*/ STR(0);
			
			draw_surface_size(ObjType(obj_view, view)->surface, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
			if (ObjType(obj_view, view)->grid > 0)
			{
				RealType cellwid, cellhei;
				cellwid = (RealType)sVar(content_width) / sVar(project_grid_rows);
				cellhei = (RealType)sVar(content_height) / sVar(project_grid_columns);
				for (IntType i = IntType(1); i < sVar(project_grid_rows); i++)
				{
					draw_line_ext(sVar(content_x) + cellwid * i - IntType(1), sVar(content_y), sVar(content_x) + cellwid * i - IntType(1), sVar(content_y) + sVar(content_height), c_white, IntType(1));
					draw_line_ext(sVar(content_x) + cellwid * i + IntType(1), sVar(content_y), sVar(content_x) + cellwid * i + IntType(1), sVar(content_y) + sVar(content_height), c_white, IntType(1));
				}
				for (IntType i = IntType(1); i < sVar(project_grid_columns); i++)
				{
					draw_line_ext(sVar(content_x), sVar(content_y) + cellhei * i - IntType(1), sVar(content_x) + sVar(content_width), sVar(content_y) + cellhei * i - IntType(1), c_white, IntType(1));
					draw_line_ext(sVar(content_x), sVar(content_y) + cellhei * i + IntType(1), sVar(content_x) + sVar(content_width), sVar(content_y) + cellhei * i + IntType(1), c_white, IntType(1));
				}
			}
			if (sVar(window_busy) == /*"place"*/ STR(113) && gmlGlobal::mouse_x >= sVar(content_x) && gmlGlobal::mouse_y >= sVar(content_y) && gmlGlobal::mouse_x < sVar(content_x) + sVar(content_width) && gmlGlobal::mouse_y < sVar(content_y) + sVar(content_height))
			{
				if (ObjType(obj_view, view)->update_depth)
				{
					surface_clear_depth_cache(ObjType(obj_view, view)->surface_depth);
					render_start({ ObjType(obj_view, view)->surface_depth, null_, sVar(content_width), sVar(content_height) });
					global::render_camera = cam;
					render_update_camera();
					sBool(place_tl_render) = false;
					global::render_target = surface_require(global::render_target, global::render_width, global::render_height);
					surface_set_target((IntType)(global::render_target));
				{
					draw_clear_alpha(c_black, 0.0);
					render_world_background();
					render_world_start();
					render_world_sky();
					render_world(self, e_render_mode_COLOR_FOG);
					render_world_done();
				}
					surface_reset_target();
					ObjType(obj_view, view)->surface_depth = render_done();
					ObjType(obj_view, view)->update_depth = false;
				}
				RealType mx = gmlGlobal::mouse_x - sVar(content_x);
				RealType my = gmlGlobal::mouse_y - sVar(content_y);
				RealType tx = mx / sVar(content_width);
				RealType ty = IntType(1) - my / sVar(content_height);
				RealType depthval = surface_get_depth(ObjType(obj_view, view)->surface_depth, mx, my);
				if (depthval < IntType(1))
					ObjType(obj_view, view)->surface_depth_value = depthval;
				VecType clipspace = vec4(tx * IntType(2) - IntType(1), ty * IntType(2) - IntType(1), min({ 0.99975, ObjType(obj_view, view)->surface_depth_value }) * IntType(2) - IntType(1), IntType(1));
				VecType viewspace = vec4_homogenize(vec4_mul_matrix(clipspace, matrix_inverse(global::proj_matrix)));
				sVar(place_view_pos) = point3D_mul_matrix(viewspace, matrix_inverse(global::view_matrix));
				sBool(place_tl_render) = true;
				global::render_samples = -IntType(1);
			}
		}
		sVar(content_x) = boxx;
		sVar(content_y) = boxy + captionh;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh - captionh;
		if (view == sInt(view_main))
		{
			RealType benchx, benchy, benchscale, benchrot;
			BoolType benchempty;
			benchx = boxx + IntType(3);
			benchy = boxy + captionh + IntType(8);
			benchscale = sReal(bench_click_ani);
			benchrot = sin(sReal(bench_rotate_ani) * pi_ * IntType(5)) * (IntType(1) - abs(sReal(bench_rotate_ani) * IntType(2) - IntType(1))) * IntType(10);
			benchempty = (instance_number(ID_obj_timeline) == IntType(0) && instance_number(ID_obj_template) == IntType(0));
			ObjType(obj_bench_settings, sInt(bench_settings))->posx = benchx + IntType(86) + IntType(8);
			ObjType(obj_bench_settings, sInt(bench_settings))->posy = benchy;
			if (benchrot != IntType(0) || benchscale < IntType(1))
				gpu_set_tex_filter(true);
			draw_image({ ID_spr_bench, IntType(0), benchx + IntType(43), benchy + IntType(43), benchscale, benchscale, null_, sReal(bench_hover_ani), benchrot });
			if (benchrot != IntType(0) || benchscale < IntType(1))
				gpu_set_tex_filter(false);
			if (sBool(bench_open))
			{
				sStr(bench_show_ani_type) = /*"show"*/ STR(734);
				sVar(window_busy) = /*"bench"*/ STR(735);
				sVar(bench_settings_ani) = IntType(1);
				sBool(bench_open) = false;
			}
			if (sReal(bench_rotate_ani) == IntType(0) && benchempty && sVar(bench_show_ani) == IntType(0) && sStr(bench_show_ani_type) == /*""*/ STR(0))
				sReal(bench_rotate_ani) = IntType(1);
			if (ObjType(obj_view, sInt(view_main))->mouseon && app_mouse_box(self, benchx, benchy, IntType(86), IntType(86)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon) && !(ObjType(obj_view, sInt(view_second))->show > 0 && ObjType(obj_view, sInt(view_second))->mouseon))
			{
				sInt(mouse_cursor) = cr_handpoint;
				sBool(bench_button_hover) = true;
				sReal(bench_hover_ani_goal) = IntType(1);
				if (sReal(bench_rotate_ani) == IntType(0))
					sReal(bench_rotate_ani) = IntType(1);
				if (sBool(mouse_left))
				{
					sReal(bench_click_ani_goal) = .9;
					sReal(bench_rotate_ani) = IntType(0);
					sReal(bench_hover_ani_goal) = .5;
				}
				else
					sReal(bench_click_ani_goal) = IntType(1);
				
				sBool(tip_force_right) = true;
				tip_set(self, { text_get({ /*"viewworkbenchtip"*/ STR(3838) }), benchx, benchy, IntType(86), IntType(86), false });
				sBool(tip_force_right) = false;
				if (sBool(mouse_left_pressed))
					sBool(bench_open) = true;
			}
			else
			{
				if (ObjType(obj_view, view)->toolbar_alpha_goal == IntType(1))
					sReal(bench_hover_ani_goal) = ObjType(obj_view, view)->toolbar_alpha_goal;
				else
					sReal(bench_hover_ani_goal) = .5;
				
				if (benchempty)
					sReal(bench_hover_ani_goal) = IntType(1);
				else
					sReal(bench_rotate_ani) = IntType(0);
				
				sReal(bench_click_ani_goal) = IntType(1);
				sBool(bench_button_hover) = false;
			}
			
			if (sVar(window_busy) == /*"bench"*/ STR(735) || sVar(bench_show_ani) == IntType(1))
			{
				sReal(bench_hover_ani_goal) = .5;
				sReal(bench_click_ani_goal) = .9;
			}
			sReal(bench_hover_ani) += (sReal(bench_hover_ani_goal) - sReal(bench_hover_ani)) / max({ IntType(1), 4.0 / global::delta });
			sReal(bench_click_ani) += (sReal(bench_click_ani_goal) - sReal(bench_click_ani)) / max({ IntType(1), 2.0 / global::delta });
			sReal(bench_rotate_ani) = max({ IntType(0), sReal(bench_rotate_ani) - 0.01 * global::delta });
			view_toolbar_draw(self, view, boxx + IntType(8), boxy + captionh + IntType(8) + IntType(86) + IntType(12));
		}
		if (view == sInt(view_second) && window_get_current() != e_window_VIEW_SECOND)
		{
			if (ObjType(obj_view, view)->mouseon && (sInt(mouse_cursor) == cr_default || sBool(content_mouseon)))
			{
				if (mouseonresizehor && mouseonresizever)
				{
					if (ObjType(obj_view, view)->location == /*"right_top"*/ STR(3801) || ObjType(obj_view, view)->location == /*"left_bottom"*/ STR(3802))
						sInt(mouse_cursor) = cr_size_nesw;
					else
						sInt(mouse_cursor) = cr_size_nwse;
					
					if (sBool(mouse_left_pressed))
					{
						sVar(window_busy) = /*"viewresizeboth"*/ STR(3797);
						sVar(view_resize_width) = ObjType(obj_view, view)->width;
						sVar(view_resize_height) = ObjType(obj_view, view)->height;
					}
				}
				else
					if (mouseonresizehor)
					{
						sInt(mouse_cursor) = cr_size_we;
						if (sBool(mouse_left_pressed))
						{
							sVar(window_busy) = /*"viewresizehor"*/ STR(3796);
							sVar(view_resize_width) = ObjType(obj_view, view)->width;
						}
					}
					else
						if (mouseonresizever)
						{
							sInt(mouse_cursor) = cr_size_ns;
							if (sBool(mouse_left_pressed))
							{
								sVar(window_busy) = /*"viewresizever"*/ STR(3798);
								sVar(view_resize_height) = ObjType(obj_view, view)->height;
							}
						}
						else
							if (app_mouse_box(self, boxx, boxy, boxw, captionh) && !sBool(popup_mouseon) && sBool(mouse_left_pressed))
								sVar(window_busy) = /*"viewclickcaption"*/ STR(3839);
					
				
				
			}
			if (sVar(window_busy) == /*"viewclickcaption"*/ STR(3839))
			{
				if (sReal(mouse_move) > IntType(10))
				{
					ObjType(obj_view, sInt(view_main))->location = /*"full"*/ STR(2684);
					sVar(window_busy) = /*"viewmove"*/ STR(3804);
					sVar(view_glow_ani) = IntType(0);
					sStr(view_glow_location_prev) = /*""*/ STR(0);
				}
				else
					if (!sBool(mouse_left))
						sVar(window_busy) = /*""*/ STR(0);
				
			}
			if (sVar(window_busy) == /*"viewmove"*/ STR(3804))
			{
				StringType mouselocation = /*""*/ STR(0);
				if (gmlGlobal::mouse_x < sReal(view_area_x) + sReal(view_area_width) * 0.3)
					mouselocation = /*"left"*/ STR(191);
				if (gmlGlobal::mouse_x > sReal(view_area_x) + sReal(view_area_width) * 0.7)
					mouselocation = /*"right"*/ STR(192);
				if (gmlGlobal::mouse_y < sReal(view_area_y) + sReal(view_area_height) * 0.3)
					mouselocation += /*"_top"*/ STR(1902);
				else
					if (gmlGlobal::mouse_y >= sReal(view_area_y) + sReal(view_area_height) * 0.7)
						mouselocation += /*"_bottom"*/ STR(1903);
				
				if (mouselocation == /*"_top"*/ STR(1902))
					mouselocation = /*"top"*/ STR(190);
				if (mouselocation == /*"_bottom"*/ STR(1903))
					mouselocation = /*"bottom"*/ STR(189);
				sBool(view_glow_left_top) = false;
				sBool(view_glow_top) = false;
				sBool(view_glow_right_top) = false;
				sBool(view_glow_right) = false;
				sBool(view_glow_right_bottom) = false;
				sBool(view_glow_bottom) = false;
				sBool(view_glow_left_bottom) = false;
				sBool(view_glow_left) = false;
				switch (StringType(mouselocation).id)
				{
					case 3803: // left_top
					{
						sBool(view_glow_left_top) = true;
						break;
					}
					case 190: // top
					{
						sBool(view_glow_top) = true;
						break;
					}
					case 3801: // right_top
					{
						sBool(view_glow_right_top) = true;
						break;
					}
					case 192: // right
					{
						sBool(view_glow_right) = true;
						break;
					}
					case 2685: // right_bottom
					{
						sBool(view_glow_right_bottom) = true;
						break;
					}
					case 189: // bottom
					{
						sBool(view_glow_bottom) = true;
						break;
					}
					case 3802: // left_bottom
					{
						sBool(view_glow_left_bottom) = true;
						break;
					}
					case 191: // left
					{
						sBool(view_glow_left) = true;
						break;
					}
				}
				
				if (sStr(view_glow_location_prev) != mouselocation)
					sVar(view_glow_ani) = IntType(0);
				sStr(view_glow_location_prev) = mouselocation;
				if (!sBool(mouse_left))
				{
					if (mouselocation != /*""*/ STR(0))
						ObjType(obj_view, view)->location = mouselocation;
					else
						window_create(e_window_VIEW_SECOND, boxx, boxy, boxw, boxh);
					
					switch (StringType(ObjType(obj_view, view)->location).id)
					{
						case 190: // top
						{
							ObjType(obj_view, sInt(view_main))->location = /*"bottom"*/ STR(189);
							break;
						}
						case 189: // bottom
						{
							ObjType(obj_view, sInt(view_main))->location = /*"top"*/ STR(190);
							break;
						}
						case 192: // right
						{
							ObjType(obj_view, sInt(view_main))->location = /*"left"*/ STR(191);
							break;
						}
						case 191: // left
						{
							ObjType(obj_view, sInt(view_main))->location = /*"right"*/ STR(192);
							break;
						}
						default:
							ObjType(obj_view, sInt(view_main))->location = /*"full"*/ STR(2684);
							break;
					}
					
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
		}
		else
			if (sVar(window_busy) == /*"viewmove"*/ STR(3804))
			{
				sVar(view_glow_ani) += test_reduced_motion(IntType(1), (0.035 * global::delta));
				sVar(view_glow_ani) = clamp(sVar(view_glow_ani), IntType(0), IntType(1));
				RealType ani = ceil((sVar(view_glow_ani) - IntType(16)) + (IntType(16) * ease(/*"easeoutcirc"*/ STR(571), sVar(view_glow_ani))));
				if (sBool(view_glow_left_top))
					draw_box({ sReal(view_area_x), sReal(view_area_y), ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + ani, false, global::c_accent, glow_alpha });
				if (sBool(view_glow_top))
					draw_box({ sReal(view_area_x), sReal(view_area_y), sReal(view_area_width), (sReal(view_area_height) * split) + ani, false, global::c_accent, glow_alpha });
				if (sBool(view_glow_right_top))
					draw_box({ sReal(view_area_x) + sReal(view_area_width) - (ObjType(obj_view, sInt(view_second))->width + ani), sReal(view_area_y), ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + ani, false, global::c_accent, glow_alpha });
				if (sBool(view_glow_right))
					draw_box({ sReal(view_area_x) + sReal(view_area_width) - (sReal(view_area_width) * split) - ani, sReal(view_area_y), (sReal(view_area_width) * split) + IntType(8), sReal(view_area_height), false, global::c_accent, glow_alpha });
				if (sBool(view_glow_right_bottom))
					draw_box({ sReal(view_area_x) + sReal(view_area_width) - ObjType(obj_view, sInt(view_second))->width - ani, sReal(view_area_y) + sReal(view_area_height) - ObjType(obj_view, sInt(view_second))->height - ani, ObjType(obj_view, sInt(view_second))->width + IntType(8), ObjType(obj_view, sInt(view_second))->height + IntType(8), false, global::c_accent, glow_alpha });
				if (sBool(view_glow_bottom))
					draw_box({ sReal(view_area_x), sReal(view_area_y) + sReal(view_area_height) - (sReal(view_area_height) * split) - ani, sReal(view_area_width), (sReal(view_area_height) * split) + IntType(8), false, global::c_accent, glow_alpha });
				if (sBool(view_glow_left_bottom))
					draw_box({ sReal(view_area_x), sReal(view_area_y) + sReal(view_area_height) - ObjType(obj_view, sInt(view_second))->height - ani, ObjType(obj_view, sInt(view_second))->width + ani, ObjType(obj_view, sInt(view_second))->height + IntType(8), false, global::c_accent, glow_alpha });
				if (sBool(view_glow_left))
					draw_box({ sReal(view_area_x), sReal(view_area_y), (sReal(view_area_width) * split) + ani, sReal(view_area_height), false, global::c_accent, glow_alpha });
			}
		
		if (mouseonresizesplit && (sInt(mouse_cursor) == cr_default || sBool(content_mouseon)))
		{
			StringType mouselocation = /*""*/ STR(0);
			if (ObjType(obj_view, view)->location == /*"right"*/ STR(192) || ObjType(obj_view, view)->location == /*"left"*/ STR(191))
			{
				sInt(mouse_cursor) = cr_size_we;
				mouselocation = /*"hor"*/ STR(3840);
			}
			else
			{
				sInt(mouse_cursor) = cr_size_ns;
				mouselocation = /*"ver"*/ STR(3841);
			}
			
			if (sBool(mouse_left_pressed))
				sVar(window_busy) = /*"viewresizesplit"*/ STR(3842) + mouselocation;
		}
		if (view == sInt(view_second))
		{
			BoolType linetop, linebottom, lineleft, lineright;
			linetop = false;
			linebottom = false;
			lineleft = false;
			lineright = false;
			if (location == /*"top"*/ STR(190) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplitver"*/ STR(3800)))
				linetop = true;
			if (location == /*"bottom"*/ STR(189) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplitver"*/ STR(3800)))
				linebottom = true;
			if (location == /*"left"*/ STR(191) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplithor"*/ STR(3799)))
				lineright = true;
			if (location == /*"right"*/ STR(192) && (mouseonresizesplit || sVar(window_busy) == /*"viewresizesplithor"*/ STR(3799)))
				lineleft = true;
			if ((mouseonresizever || mouseonresizehor) || (sVar(window_busy) == /*"viewresizeboth"*/ STR(3797) || sVar(window_busy) == /*"viewresizever"*/ STR(3798) || sVar(window_busy) == /*"viewresizehor"*/ STR(3796)))
			{
				if (location == /*"left_top"*/ STR(3803))
				{
					lineright = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3796) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
					linetop = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3798) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
				}
				if (location == /*"right_top"*/ STR(3801))
				{
					lineleft = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3796) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
					linetop = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3798) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
				}
				if (location == /*"left_bottom"*/ STR(3802))
				{
					lineright = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3796) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
					linebottom = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3798) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
				}
				if (location == /*"right_bottom"*/ STR(2685))
				{
					lineleft = (mouseonresizehor || sVar(window_busy) == /*"viewresizehor"*/ STR(3796) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
					linebottom = (mouseonresizever || sVar(window_busy) == /*"viewresizever"*/ STR(3798) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3797));
				}
			}
			if (linetop)
				draw_box({ boxx, boxy + boxh - IntType(2), boxw, IntType(4), false, global::c_hover, global::a_hover });
			if (linebottom)
				draw_box({ boxx, boxy - IntType(2), boxw, IntType(4), false, global::c_hover, global::a_hover });
			if (lineright)
				draw_box({ boxx + boxw - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover });
			if (lineleft)
				draw_box({ boxx - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover });
		}
		if (ObjType(obj_view, view)->quality == e_view_mode_RENDER)
		{
			VarType infotext;
			if (sBool(view_render_real_time))
				infotext = text_get({ /*"viewrenderfps"*/ STR(3843), string(gmlGlobal::fps), max({ IntType(1), global::render_samples }), sVar(project_render_samples) });
			else
				infotext = /*""*/ STR(0);
			
			draw_label(self, { infotext, sVar(content_x) + IntType(17), sVar(content_y) + sVar(content_height) - IntType(15), fa_left, fa_bottom, c_black, .75, sInt(font_caption) });
			draw_label(self, { infotext, sVar(content_x) + IntType(16), sVar(content_y) + sVar(content_height) - IntType(16), fa_left, fa_bottom, gmlGlobal::fps < IntType(25) ? ObjType(obj_theme, sInt(setting_theme))->toast_color.Value(e_toast_NEGATIVE) : VarType(c_white), IntType(1), sInt(font_caption) });
			if (sInt(project_render_pass) != e_render_pass_COMBINED)
			{
				infotext = text_get({ /*"viewrenderpass"*/ STR(3844), text_get({ /*"viewmodepass"*/ STR(1468) + DsList(global::render_pass_list).Value(sInt(project_render_pass)) }) });
				draw_label(self, { infotext, sVar(content_x) + IntType(17), sVar(content_y) + sVar(content_height) - IntType(31), fa_left, fa_bottom, c_black, .75, sInt(font_caption) });
				draw_label(self, { infotext, sVar(content_x) + IntType(16), sVar(content_y) + sVar(content_height) - IntType(32), fa_left, fa_bottom, c_white, IntType(1), sInt(font_caption) });
			}
		}
		if (sVar(window_busy) == /*"viewmove"*/ STR(3804) && view == sInt(view_second))
			draw_box({ sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_middle, .25 });
		ObjType(obj_view, view)->mouseon = app_mouse_box(self, boxx, boxy, boxw, boxh, /*"place"*/ STR(113));
		if (ObjType(obj_view, view)->mouseon && view == sInt(view_second))
			ObjType(obj_view, sInt(view_main))->mouseon = false;
		draw_set_alpha(1.0);
		return 0.0;
	}
	
}
