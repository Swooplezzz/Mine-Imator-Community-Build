/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void history_restore_tl_select(Scope<obj_history> self)
	{
		tl_deselect_all();
		for (IntType t = IntType(0); t < self->tl_sel_amount; t++)
		{
			withOne (Object, save_id_find(self->tl_sel_save_id.Value(t)), self->id)
			{
				tl_select(self);
				for (IntType k = IntType(0); k < ObjType(obj_history, self.otherId)->tl_sel_kf_amount.Value(t); k++)
					tl_keyframe_select(DsList(sInt(keyframe_list)).Value(ObjType(obj_history, self.otherId)->tl_sel_kf_index[t][k]));
			}
			
		}
	}
	
	void history_restore_tl_select_new(Scope<obj_history> self)
	{
		tl_deselect_all();
		for (IntType t = IntType(0); t < self->tl_sel_new_amount; t++)
		{
			withOne (Object, save_id_find(self->tl_sel_new_save_id.Value(t)), self->id)
			{
				tl_select(self);
				for (IntType k = IntType(0); k < ObjType(obj_history, self.otherId)->tl_sel_new_kf_amount.Value(t); k++)
					tl_keyframe_select(DsList(sInt(keyframe_list)).Value(ObjType(obj_history, self.otherId)->tl_sel_new_kf_index[t][k]));
			}
			
		}
	}
	
	IntType history_save_bench(ScopeAny self)
	{
		IntType save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
			temp_copy(ScopeAny(self), save);
		
		withOne (obj_history_save, save, self->id)
		{
			temp_get_save_ids(self);
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
			{
				ObjType(obj_history_save, save)->pc_type_amount = ds_list_size(ObjType(obj_bench_settings, global::_app->bench_settings)->pc_type_list);
				for (IntType p = IntType(0); p < ObjType(obj_history_save, save)->pc_type_amount; p++)
					withOne (Object, self.otherId, self->id)
						ObjType(obj_history_save, save)->pc_type_save_obj[p] = history_save_ptype(self, DsList(ObjType(obj_bench_settings, global::_app->bench_settings)->pc_type_list).Value(p));
				
			}
			self->temp_amount = IntType(0);
			withAll (obj_template, self->id)
			{
				if (self->creator != global::_app->bench_settings)
					continue;
				IntType tsave = (new obj_history_save)->id;
				ObjType(obj_history_save, tsave)->hobj = ObjType(obj_history_save, save)->hobj;
				temp_copy(ScopeAny(self), tsave);
				withOne (obj_history_save, tsave, self->id)
				{
					self->save_id = ObjType(obj_template, self.otherId)->save_id;
					temp_get_save_ids(self);
				}
				
				ObjType(obj_history_save, save)->temp_save_obj[ObjType(obj_history_save, save)->temp_amount] = tsave;
				ObjType(obj_history_save, save)->temp_amount++;
			}
			
		}
		
		return save;
	}
	
	void history_save_keyframes(Scope<obj_history> self)
	{
		self->save_kf_amount = IntType(0);
		withAll (obj_keyframe, self->id)
		{
			if (!(self->selected > 0))
				continue;
			ObjType(obj_history, self.otherId)->save_kf_tl_save_id[ObjType(obj_history, self.otherId)->save_kf_amount] = save_id_get(self->timeline);
			ObjType(obj_history, self.otherId)->save_kf_pos[ObjType(obj_history, self.otherId)->save_kf_amount] = self->position;
			for (IntType v = IntType(0); v < e_value_amount; v++)
				ObjType(obj_history, self.otherId)->save_kf_value[ObjType(obj_history, self.otherId)->save_kf_amount][v] = tl_value_get_save_id(v, self->value.Value(v));
			ObjType(obj_history, self.otherId)->save_kf_amount++;
		}
		
	}
	
	void history_save_loaded(Scope<obj_history> self)
	{
		self->loaded_amount = IntType(0);
		withAll (obj_template, self->id)
			if (self->loaded)
				ObjType(obj_history, self.otherId)->loaded_save_id[ObjType(obj_history, self.otherId)->loaded_amount++] = self->save_id;
		
		withAll (obj_timeline, self->id)
			if (self->loaded)
				ObjType(obj_history, self.otherId)->loaded_save_id[ObjType(obj_history, self.otherId)->loaded_amount++] = self->save_id;
		
		withAll (obj_resource, self->id)
			if (self->loaded)
				ObjType(obj_history, self.otherId)->loaded_save_id[ObjType(obj_history, self.otherId)->loaded_amount++] = self->save_id;
		
	}
	
	BoolType history_save_part_usage_tl(IntType tl, VarType hobj)
	{
		BoolType used = false;
		withAll (obj_timeline, noone)
		{
			if (self->value.Value(e_value_ATTRACTOR) == tl)
			{
				ObjType(obj_history, hobj)->usage_tl_attractor_save_id[ObjType(obj_history, hobj)->usage_tl_attractor_amount] = self->save_id;
				ObjType(obj_history, hobj)->usage_tl_attractor_part_save_id[ObjType(obj_history, hobj)->usage_tl_attractor_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_tl_attractor_amount++;
				used = true;
			}
			if (self->value.Value(e_value_IK_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_tl_ik_target_save_id[ObjType(obj_history, hobj)->usage_tl_ik_target_amount] = self->save_id;
				ObjType(obj_history, hobj)->usage_tl_ik_target_part_save_id[ObjType(obj_history, hobj)->usage_tl_ik_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_tl_ik_target_amount++;
				used = true;
			}
			if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
			{
				ObjType(obj_history, hobj)->usage_tl_ik_target_angle_save_id[ObjType(obj_history, hobj)->usage_tl_ik_target_angle_amount] = self->save_id;
				ObjType(obj_history, hobj)->usage_tl_ik_target_angle_part_save_id[ObjType(obj_history, hobj)->usage_tl_ik_target_angle_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_tl_ik_target_angle_amount++;
				used = true;
			}
			if (self->value.Value(e_value_ROT_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_tl_flw_rot_target_save_id[ObjType(obj_history, hobj)->usage_tl_flw_rot_target_amount] = self->save_id;
				ObjType(obj_history, hobj)->usage_tl_flw_rot_target_part_save_id[ObjType(obj_history, hobj)->usage_tl_flw_rot_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_tl_flw_rot_target_amount++;
				used = true;
			}
		}
		
		withAll (obj_keyframe, noone)
		{
			if (self->value.Value(e_value_IK_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_ik_target_tl_save_id[ObjType(obj_history, hobj)->usage_kf_ik_target_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_ik_target_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_ik_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_ik_target_index[ObjType(obj_history, hobj)->usage_kf_ik_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_ik_target_amount++;
				used = true;
			}
			if (self->value.Value(e_value_ROT_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_flw_rot_target_tl_save_id[ObjType(obj_history, hobj)->usage_kf_flw_rot_target_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_flw_rot_target_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_flw_rot_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_flw_rot_target_index[ObjType(obj_history, hobj)->usage_kf_flw_rot_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_flw_rot_target_amount++;
				used = true;
			}
			if (self->value.Value(e_value_POS_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_flw_pos_target_tl_save_id[ObjType(obj_history, hobj)->usage_kf_flw_pos_target_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_flw_pos_target_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_flw_pos_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_flw_pos_target_index[ObjType(obj_history, hobj)->usage_kf_flw_pos_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_flw_pos_target_amount++;
				used = true;
			}
			if (self->value.Value(e_value_SCALE_TARGET) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_flw_scale_target_tl_save_id[ObjType(obj_history, hobj)->usage_kf_flw_scale_target_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_flw_scale_target_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_flw_scale_target_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_flw_scale_target_index[ObjType(obj_history, hobj)->usage_kf_flw_scale_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_flw_scale_target_amount++;
				used = true;
			}
			if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_ik_target_angle_tl_save_id[ObjType(obj_history, hobj)->usage_kf_ik_target_angle_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_ik_target_angle_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_ik_target_angle_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_ik_target_angle_index[ObjType(obj_history, hobj)->usage_kf_ik_target_angle_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_ik_target_angle_amount++;
				used = true;
			}
			if (self->value.Value(e_value_ATTRACTOR) == tl)
			{
				ObjType(obj_history, hobj)->usage_kf_attractor_tl_save_id[ObjType(obj_history, hobj)->usage_kf_attractor_amount] = save_id_get(self->timeline);
				ObjType(obj_history, hobj)->usage_kf_attractor_tl_part_save_id[ObjType(obj_history, hobj)->usage_kf_attractor_amount] = idVar(tl, save_id);
				ObjType(obj_history, hobj)->usage_kf_attractor_index[ObjType(obj_history, hobj)->usage_kf_attractor_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history, hobj)->usage_kf_attractor_amount++;
				used = true;
			}
		}
		
		return used;
	}
	
	IntType history_save_ptype(ScopeAny self, VarType ptype)
	{
		IntType save;
		save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (Object, ptype, self->id)
			ptype_copy(self, save);
		
		withOne (obj_history_save, save, self->id)
		{
			self->save_id = idVar(ptype, save_id);
			ptype_get_save_ids(self);
		}
		
		return save;
	}
	
	IntType history_save_res(Scope<obj_history> self, VarType res)
	{
		IntType save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (Object, res, self->id)
			res_copy(self, save);
		
		withOne (obj_history_save, save, self->id)
		{
			self->save_id = idVar(res, save_id);
			self->usage_model_amount = IntType(0);
			self->usage_model_tex_amount = IntType(0);
			self->usage_model_tex_material_amount = IntType(0);
			self->usage_model_tex_normal_amount = IntType(0);
			self->usage_item_tex_amount = IntType(0);
			self->usage_item_tex_material_amount = IntType(0);
			self->usage_item_tex_normal_amount = IntType(0);
			self->usage_block_tex_amount = IntType(0);
			self->usage_block_tex_material_amount = IntType(0);
			self->usage_block_tex_normal_amount = IntType(0);
			self->usage_scenery_amount = IntType(0);
			self->usage_shape_tex_amount = IntType(0);
			self->usage_shape_tex_material_amount = IntType(0);
			self->usage_shape_tex_normal_amount = IntType(0);
			self->usage_text_font_amount = IntType(0);
			self->usage_sprite_tex_amount = IntType(0);
			self->usage_sprite_template_tex_amount = IntType(0);
			self->usage_kf_texture_amount = IntType(0);
			self->usage_tl_texture_amount = IntType(0);
			self->usage_kf_sound_amount = IntType(0);
			self->usage_tl_sound_amount = IntType(0);
			self->usage_kf_text_font_amount = IntType(0);
			self->usage_tl_text_font_amount = IntType(0);
			self->usage_tl_glint_tex_amount = IntType(0);
			self->usage_background_image = false;
			self->usage_background_sky_sun_tex = false;
			self->usage_background_sky_moon_tex = false;
			self->usage_background_sky_clouds_tex = false;
			self->usage_background_ground_tex = false;
			self->usage_background_ground_tex_material = false;
			self->usage_background_ground_tex_normal = false;
		}
		
		withAll (obj_template, self->id)
		{
			if (self->model == res)
			{
				ObjType(obj_history_save, save)->usage_model_save_id[ObjType(obj_history_save, save)->usage_model_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_model_amount++;
			}
			if (self->model_tex == res)
			{
				ObjType(obj_history_save, save)->usage_model_tex_save_id[ObjType(obj_history_save, save)->usage_model_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_model_tex_amount++;
			}
			if (self->model_tex_material == res)
			{
				ObjType(obj_history_save, save)->usage_model_tex_material_save_id[ObjType(obj_history_save, save)->usage_model_tex_material_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_model_tex_material_amount++;
			}
			if (self->model_tex_normal == res)
			{
				ObjType(obj_history_save, save)->usage_model_tex_normal_save_id[ObjType(obj_history_save, save)->usage_model_tex_normal_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_model_tex_normal_amount++;
			}
			if (self->item_tex == res)
			{
				ObjType(obj_history_save, save)->usage_item_tex_save_id[ObjType(obj_history_save, save)->usage_item_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_item_tex_amount++;
			}
			if (self->item_tex_material == res)
			{
				ObjType(obj_history_save, save)->usage_item_tex_material_save_id[ObjType(obj_history_save, save)->usage_item_tex_material_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_item_tex_material_amount++;
			}
			if (self->item_tex_normal == res)
			{
				ObjType(obj_history_save, save)->usage_item_tex_normal_save_id[ObjType(obj_history_save, save)->usage_item_tex_normal_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_item_tex_normal_amount++;
			}
			if (self->block_tex == res)
			{
				ObjType(obj_history_save, save)->usage_block_tex_save_id[ObjType(obj_history_save, save)->usage_block_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_block_tex_amount++;
			}
			if (self->block_tex_material == res)
			{
				ObjType(obj_history_save, save)->usage_block_tex_material_save_id[ObjType(obj_history_save, save)->usage_block_tex_material_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_block_tex_material_amount++;
			}
			if (self->block_tex_normal == res)
			{
				ObjType(obj_history_save, save)->usage_block_tex_normal_save_id[ObjType(obj_history_save, save)->usage_block_tex_normal_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_block_tex_normal_amount++;
			}
			if (self->scenery == res)
			{
				ObjType(obj_history_save, save)->usage_scenery_save_id[ObjType(obj_history_save, save)->usage_scenery_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_scenery_amount++;
			}
			if (self->shape_tex == res)
			{
				ObjType(obj_history_save, save)->usage_shape_tex_save_id[ObjType(obj_history_save, save)->usage_shape_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_shape_tex_amount++;
			}
			if (self->shape_tex_material == res)
			{
				ObjType(obj_history_save, save)->usage_shape_tex_material_save_id[ObjType(obj_history_save, save)->usage_shape_tex_material_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_shape_tex_material_amount++;
			}
			if (self->shape_tex_normal == res)
			{
				ObjType(obj_history_save, save)->usage_shape_tex_normal_save_id[ObjType(obj_history_save, save)->usage_shape_tex_normal_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_shape_tex_normal_amount++;
			}
			if (self->text_font == res)
			{
				ObjType(obj_history_save, save)->usage_text_font_save_id[ObjType(obj_history_save, save)->usage_text_font_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_text_font_amount++;
			}
		}
		
		withAll (obj_particle_type, self->id)
		{
			if (self->sprite_tex == res)
			{
				ObjType(obj_history_save, save)->usage_sprite_tex_save_id[ObjType(obj_history_save, save)->usage_sprite_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_sprite_tex_amount++;
			}
			if (self->sprite_template_tex == res)
			{
				ObjType(obj_history_save, save)->usage_sprite_template_tex_save_id[ObjType(obj_history_save, save)->usage_sprite_template_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_sprite_template_tex_amount++;
			}
		}
		
		withAll (obj_keyframe, self->id)
		{
			if (self->value.Value(e_value_TEXTURE_OBJ) == res)
			{
				ObjType(obj_history_save, save)->usage_kf_texture_tl_save_id[ObjType(obj_history_save, save)->usage_kf_texture_amount] = save_id_get(self->timeline);
				ObjType(obj_history_save, save)->usage_kf_texture_index[ObjType(obj_history_save, save)->usage_kf_texture_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history_save, save)->usage_kf_texture_amount++;
			}
			if (self->value.Value(e_value_SOUND_OBJ) == res)
			{
				ObjType(obj_history_save, save)->usage_kf_sound_tl_save_id[ObjType(obj_history_save, save)->usage_kf_sound_amount] = save_id_get(self->timeline);
				ObjType(obj_history_save, save)->usage_kf_sound_index[ObjType(obj_history_save, save)->usage_kf_sound_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history_save, save)->usage_kf_sound_amount++;
			}
			if (self->value.Value(e_value_TEXT_FONT) == res)
			{
				ObjType(obj_history_save, save)->usage_kf_text_font_tl_save_id[ObjType(obj_history_save, save)->usage_kf_text_font_amount] = save_id_get(self->timeline);
				ObjType(obj_history_save, save)->usage_kf_text_font_index[ObjType(obj_history_save, save)->usage_kf_text_font_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
				ObjType(obj_history_save, save)->usage_kf_text_font_amount++;
			}
		}
		
		withAll (obj_timeline, self->id)
		{
			if (self->value.Value(e_value_TEXTURE_OBJ) == res)
			{
				ObjType(obj_history_save, save)->usage_tl_texture_save_id[ObjType(obj_history_save, save)->usage_tl_texture_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_tl_texture_amount++;
			}
			if (self->value.Value(e_value_SOUND_OBJ) == res)
			{
				ObjType(obj_history_save, save)->usage_tl_sound_save_id[ObjType(obj_history_save, save)->usage_tl_sound_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_tl_sound_amount++;
			}
			if (self->value.Value(e_value_TEXT_FONT) == res)
			{
				ObjType(obj_history_save, save)->usage_tl_text_font_save_id[ObjType(obj_history_save, save)->usage_tl_text_font_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_tl_text_font_amount++;
			}
			if (self->glint_tex == res)
			{
				ObjType(obj_history_save, save)->usage_tl_glint_tex_save_id[ObjType(obj_history_save, save)->usage_tl_glint_tex_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_tl_glint_tex_amount++;
			}
		}
		
		withOne (app, global::_app->id, self->id)
		{
			if (global::_app->background_image == res)
				ObjType(obj_history_save, save)->usage_background_image = true;
			if (global::_app->background_sky_sun_tex == res)
				ObjType(obj_history_save, save)->usage_background_sky_sun_tex = true;
			if (global::_app->background_sky_moon_tex == res)
				ObjType(obj_history_save, save)->usage_background_sky_moon_tex = true;
			if (global::_app->background_sky_clouds_tex == res)
				ObjType(obj_history_save, save)->usage_background_sky_clouds_tex = true;
			if (global::_app->background_ground_tex == res)
				ObjType(obj_history_save, save)->usage_background_ground_tex = true;
			if (global::_app->background_ground_tex_material == res)
				ObjType(obj_history_save, save)->usage_background_ground_tex_material = true;
			if (global::_app->background_ground_tex_normal == res)
				ObjType(obj_history_save, save)->usage_background_ground_tex_normal = true;
		}
		
		return save;
	}
	
	IntType history_save_temp(ScopeAny self, VarType temp)
	{
		IntType save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (Object, temp, self->id)
			temp_copy(self, save);
		
		withOne (obj_history_save, save, self->id)
		{
			self->save_id = idVar(temp, save_id);
			temp_get_save_ids(self);
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
			{
				self->pc_type_amount = ds_list_size(idInt(temp, pc_type_list));
				for (IntType p = IntType(0); p < self->pc_type_amount; p++)
					withOne (obj_history, self.otherId, self->id)
						ObjType(obj_history_save, save)->pc_type_save_obj[p] = history_save_ptype(ScopeAny(self), DsList(idInt(temp, pc_type_list)).Value(p));
				
			}
			self->usage_ptype_temp_amount = IntType(0);
			withAll (obj_particle_type, self->id)
			{
				if (ObjType(obj_particle_type, self->id)->temp != temp)
					continue;
				ObjType(obj_history_save, save)->usage_ptype_temp_save_id[ObjType(obj_history_save, save)->usage_ptype_temp_amount] = self->save_id;
				ObjType(obj_history_save, save)->usage_ptype_temp_amount++;
			}
			
		}
		
		ObjType(obj_history_save, save)->usage_tl_amount = IntType(0);
		history_save_temp_usage_tl(self, temp, save, global::_app->id);
		return save;
	}
	
	void history_save_temp_usage_tl(ScopeAny self, VarType temp, IntType save, VarType treeobj)
	{
		for (IntType t = IntType(0); t < ds_list_size(idInt(treeobj, tree_list)); t++)
		{
			VarType tl = DsList(idInt(treeobj, tree_list)).Value(t);
			if (idVar(tl, temp) == temp)
			{
				ObjType(obj_history_save, save)->usage_tl_save_obj[ObjType(obj_history_save, save)->usage_tl_amount] = history_save_tl(self, tl);
				ObjType(obj_history_save, save)->usage_tl_amount++;
			}
			else
				history_save_temp_usage_tl(self, temp, save, tl);
			
		}
	}
	
	IntType history_save_tl(ScopeAny self, VarType tl)
	{
		IntType save = (new obj_history_save)->id;
		ObjType(obj_history_save, save)->hobj = self->id;
		withOne (Object, tl, self->id)
			tl_copy(self, save);
		
		withOne (obj_history_save, save, self->id)
		{
			self->save_id = idVar(tl, save_id);
			tl_get_save_ids(self);
			for (IntType v = IntType(0); v < e_value_amount; v++)
				self->value_default[v] = tl_value_get_save_id(v, idArr(tl, value_default).Value(v));
			self->kf_amount = ds_list_size(idInt(tl, keyframe_list));
			for (IntType k = IntType(0); k < self->kf_amount; k++)
			{
				withOne (obj_keyframe, DsList(idInt(tl, keyframe_list)).Value(k), self->id)
				{
					ObjType(obj_history_save, save)->kf_pos[k] = self->position;
					for (IntType v = IntType(0); v < e_value_amount; v++)
						ObjType(obj_history_save, save)->kf_value[k][v] = tl_value_get_save_id(v, self->value.Value(v));
				}
				
			}
			self->usage_temp_shape_tex_amount = IntType(0);
			self->usage_temp_path_amount = IntType(0);
			withAll (obj_template, self->id)
			{
				if (self->shape_tex == tl)
				{
					ObjType(obj_history_save, save)->usage_temp_shape_tex_save_id[ObjType(obj_history_save, save)->usage_temp_shape_tex_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_temp_shape_tex_amount++;
				}
				if (self->type == e_temp_type_PARTICLE_SPAWNER && self->pc_spawn_region_path == tl)
				{
					ObjType(obj_history_save, save)->usage_temp_path_save_id[ObjType(obj_history_save, save)->usage_temp_path_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_temp_path_amount++;
				}
			}
			
			self->usage_tl_texture_amount = IntType(0);
			self->usage_tl_path_amount = IntType(0);
			self->usage_tl_attractor_amount = IntType(0);
			self->usage_tl_ik_target_amount = IntType(0);
			self->usage_tl_flw_rot_target_amount = IntType(0);
			self->usage_tl_flw_pos_target_amount = IntType(0);
			self->usage_tl_flw_scale_target_amount = IntType(0);
			self->usage_tl_ik_target_angle_amount = IntType(0);
			withAll (obj_timeline, self->id)
			{
				if (self->value.Value(e_value_TEXTURE_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_texture_save_id[ObjType(obj_history_save, save)->usage_tl_texture_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_texture_amount++;
				}
				if (self->value.Value(e_value_PATH_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_path_save_id[ObjType(obj_history_save, save)->usage_tl_path_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_path_amount++;
				}
				if (self->value.Value(e_value_ATTRACTOR) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_attractor_save_id[ObjType(obj_history_save, save)->usage_tl_attractor_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_attractor_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_ik_target_save_id[ObjType(obj_history_save, save)->usage_tl_ik_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_ik_target_amount++;
				}
				if (self->value.Value(e_value_ROT_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_rot_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_rot_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_rot_target_amount++;
				}
				if (self->value.Value(e_value_POS_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_pos_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_pos_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_pos_target_amount++;
				}
				if (self->value.Value(e_value_SCALE_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_flw_scale_target_save_id[ObjType(obj_history_save, save)->usage_tl_flw_scale_target_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_flw_scale_target_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
				{
					ObjType(obj_history_save, save)->usage_tl_ik_target_angle_save_id[ObjType(obj_history_save, save)->usage_tl_ik_target_angle_amount] = self->save_id;
					ObjType(obj_history_save, save)->usage_tl_ik_target_angle_amount++;
				}
			}
			
			self->usage_kf_texture_amount = IntType(0);
			self->usage_kf_path_amount = IntType(0);
			self->usage_kf_ik_target_amount = IntType(0);
			self->usage_kf_flw_rot_target_amount = IntType(0);
			self->usage_kf_flw_pos_target_amount = IntType(0);
			self->usage_kf_flw_scale_target_amount = IntType(0);
			self->usage_kf_ik_target_angle_amount = IntType(0);
			self->usage_kf_attractor_amount = IntType(0);
			withAll (obj_keyframe, self->id)
			{
				if (self->value.Value(e_value_TEXTURE_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_texture_tl_save_id[ObjType(obj_history_save, save)->usage_kf_texture_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_texture_index[ObjType(obj_history_save, save)->usage_kf_texture_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_texture_amount++;
				}
				if (self->value.Value(e_value_PATH_OBJ) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_path_tl_save_id[ObjType(obj_history_save, save)->usage_kf_path_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_path_index[ObjType(obj_history_save, save)->usage_kf_path_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_path_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_ik_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_ik_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_ik_target_index[ObjType(obj_history_save, save)->usage_kf_ik_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_ik_target_amount++;
				}
				if (self->value.Value(e_value_ROT_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_index[ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_rot_target_amount++;
				}
				if (self->value.Value(e_value_POS_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_index[ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_pos_target_amount++;
				}
				if (self->value.Value(e_value_SCALE_TARGET) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_tl_save_id[ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_index[ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_flw_scale_target_amount++;
				}
				if (self->value.Value(e_value_IK_TARGET_ANGLE) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_tl_save_id[ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_index[ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_ik_target_angle_amount++;
				}
				if (self->value.Value(e_value_ATTRACTOR) == tl)
				{
					ObjType(obj_history_save, save)->usage_kf_attractor_tl_save_id[ObjType(obj_history_save, save)->usage_kf_attractor_amount] = save_id_get(self->timeline);
					ObjType(obj_history_save, save)->usage_kf_attractor_index[ObjType(obj_history_save, save)->usage_kf_attractor_amount] = ds_list_find_index(idInt(self->timeline, keyframe_list), self->id);
					ObjType(obj_history_save, save)->usage_kf_attractor_amount++;
				}
			}
			
			self->pattern_type = /*""*/ STR(0);
			if (idVar(tl, pattern_type) != /*""*/ STR(0) && idVar(tl, pattern_base_color) != null_)
			{
				self->pattern_type = idVar(tl, pattern_type);
				self->pattern_base_color = idVar(tl, pattern_base_color);
				self->pattern_pattern_list = array_copy_1d(idVar(tl, pattern_pattern_list));
				self->pattern_color_list = array_copy_1d(idVar(tl, pattern_color_list));
			}
			self->tree_amount = ds_list_size(idInt(tl, tree_list));
			for (IntType t = IntType(0); t < self->tree_amount; t++)
				self->tree_save_obj[t] = history_save_tl(ScopeAny(self), DsList(idInt(tl, tree_list)).Value(t));
			if (idInt(tl, part_list) != null_)
			{
				self->part_amount = ds_list_size(idInt(tl, part_list));
				for (IntType p = IntType(0); p < self->part_amount; p++)
					self->part_save_id[p] = save_id_get(DsList(idInt(tl, part_list)).Value(p));
			}
			else
				self->part_amount = IntType(0);
			
		}
		
		return save;
	}
	
	void history_save_tl_select(ScopeAny self)
	{
		sInt(tl_sel_amount) = IntType(0);
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0))
				continue;
			idArr(self.otherId, tl_sel_save_id)[idInt(self.otherId, tl_sel_amount)] = self->save_id;
			idArr(self.otherId, tl_sel_kf_amount)[idInt(self.otherId, tl_sel_amount)] = IntType(0);
			for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
			{
				IntType kf = DsList(self->keyframe_list).Value(k);
				if (!(ObjType(obj_keyframe, kf)->selected > 0))
					continue;
				idArr(self.otherId, tl_sel_kf_index)[idInt(self.otherId, tl_sel_amount)][idArr(self.otherId, tl_sel_kf_amount).Value(idInt(self.otherId, tl_sel_amount))] = k;
				idArr(self.otherId, tl_sel_kf_amount)[idInt(self.otherId, tl_sel_amount)]++;
			}
			idInt(self.otherId, tl_sel_amount)++;
		}
		
	}
	
	void history_save_tl_select_new(ScopeAny self)
	{
		sInt(tl_sel_new_amount) = IntType(0);
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0))
				continue;
			idArr(self.otherId, tl_sel_new_save_id)[idInt(self.otherId, tl_sel_new_amount)] = self->save_id;
			idArr(self.otherId, tl_sel_new_kf_amount)[idInt(self.otherId, tl_sel_new_amount)] = IntType(0);
			for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
			{
				IntType kf = DsList(self->keyframe_list).Value(k);
				if (!(ObjType(obj_keyframe, kf)->selected > 0))
					continue;
				idArr(self.otherId, tl_sel_new_kf_index)[idInt(self.otherId, tl_sel_new_amount)][idArr(self.otherId, tl_sel_new_kf_amount).Value(idInt(self.otherId, tl_sel_new_amount))] = k;
				idArr(self.otherId, tl_sel_new_kf_amount)[idInt(self.otherId, tl_sel_new_amount)]++;
			}
			idInt(self.otherId, tl_sel_new_amount)++;
		}
		
	}
	
	void history_save_tl_tree(ScopeAny self, VarType treeobj)
	{
		for (IntType t = IntType(0); t < ds_list_size(idInt(treeobj, tree_list)); t++)
		{
			VarType tl = DsList(idInt(treeobj, tree_list)).Value(t);
			if (idReal(tl, selected) > 0 && idVar(tl, part_of) == null_)
			{
				sArr(tl_save_obj)[sInt(tl_save_amount)] = history_save_tl(self, tl);
				sInt(tl_save_amount)++;
			}
			else
				history_save_tl_tree(self, tl);
			
		}
	}
	
	void history_save_var(Scope<obj_history> self, VarType object, VarType oldvalue, VarType newvalue)
	{
		self->save_var_save_id[self->save_var_amount] = save_id_get(object);
		if (self->first)
			self->save_var_old_value[self->save_var_amount] = oldvalue;
		self->save_var_new_value[self->save_var_amount] = newvalue;
		self->save_var_amount++;
	}
	
	VarType history_save_var_start(ScopeAny self, IntType script, RealType combine)
	{
		VarType hobj;
		history_pop(self);
		if (combine > 0 && sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->script == script && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_axis_edit == global::axis_edit)
		{
			hobj = sArr(history).Value(IntType(0));
			ObjType(obj_history, hobj)->first = false;
		}
		else
		{
			history_push(self);
			debug({ /*"history_save_var_start("*/ STR(1235) + script_get_name(script) + /*", "*/ STR(1056) + string(combine) + /*")"*/ STR(1129) });
			hobj = new_history(script);
			ObjType(obj_history, hobj)->first = true;
			sArr(history)[IntType(0)] = hobj;
		}
		
		ObjType(obj_history, hobj)->save_var_amount = IntType(0);
		return hobj;
	}
	
	IntType history_set(ScopeAny self, IntType script)
	{
		IntType hobj;
		history_pop(self);
		history_push(self);
		log({ /*"Action"*/ STR(1236), script_get_name(script) });
		hobj = new_history(script);
		sArr(history)[IntType(0)] = hobj;
		return hobj;
	}
	
	IntType history_set_res(ScopeAny self, IntType script, VarType fn, VarType oldres, IntType newres)
	{
		history_pop(self);
		history_push(self);
		log({ /*"Action Load resource"*/ STR(1237), script_get_name(script), fn });
		withOne (obj_history, new_history(script), self->id)
		{
			self->filename = fn;
			self->type = null_;
			self->old_res_save_id = save_id_get(oldres);
			self->new_res_save_id = save_id_get(newres);
			self->replaced = false;
			self->copied = false;
			if (newres != null_ && Obj(newres)->subAssetId == ID_obj_resource)
			{
				self->type = idVar(newres, type);
				self->replaced = idBool(newres, replaced);
				self->copied = idBool(newres, copied);
				self->player_skin = idVar(newres, player_skin);
			}
			idArr(self.otherId, history)[IntType(0)] = self->id;
			return self->id;
		}
		
		return IntType(0);
	}
	
	VarType history_set_var(ScopeAny self, IntType script, VarType oldval, VarType newval, RealType combine)
	{
		VarType hobj;
		history_pop(self);
		if (combine > 0 && sReal(history_amount) > IntType(0) && ObjType(obj_history, sArr(history).Value(IntType(0)))->script == script && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_temp_edit == save_id_get(global::temp_edit) && ObjType(obj_history, sArr(history).Value(IntType(0)))->save_axis_edit == global::axis_edit)
			hobj = sArr(history).Value(IntType(0));
		else
		{
			history_push(self);
			log({ /*"Action Set variable"*/ STR(1238), script_get_name(script), oldval, newval, combine });
			hobj = new_history(script);
			ObjType(obj_history, hobj)->old_value = oldval;
			ObjType(obj_history, hobj)->save_set_var = true;
			sArr(history)[IntType(0)] = hobj;
		}
		
		ObjType(obj_history, hobj)->new_value = newval;
		return hobj;
	}
	
	void history_startup()
	{
		global::_app->history[IntType(0)] = null_;
		global::_app->history_amount = IntType(0);
		global::_app->history_pos = IntType(0);
		global::_app->history_undo = IntType(0);
		global::_app->history_redo = IntType(0);
		global::_app->history_resource_update = false;
		global::history_data = null_;
	}
	
	IntType history_undo_res()
	{
		if (ObjType(obj_history, global::history_data)->filename != /*""*/ STR(0) && (!ObjType(obj_history, global::history_data)->replaced || ObjType(obj_history, global::history_data)->copied))
		{
			withOne (Object, save_id_find(ObjType(obj_history, global::history_data)->new_res_save_id), noone)
			{
				file_delete_lib(global::_app->project_folder + /*"/"*/ STR(20) + sVar(filename));
				instance_destroy(self);
			}
			
		}
		return save_id_find(ObjType(obj_history, global::history_data)->old_res_save_id);
	}
	
	void interface_update_accent()
	{
		global::c_accent_hover = merge_color((IntType)(global::c_accent), c_white, .2);
		global::c_accent_pressed = merge_color((IntType)(global::c_accent), c_black, .2);
		global::c_accent_overlay = global::c_accent;
		global::c_hover = global::c_accent;
	}
	
	void interface_update_instant(ScopeAny self)
	{
		IntType theme = sInt(setting_theme);
		global::c_text_main = ObjType(obj_theme, theme)->text_main;
		global::c_text_secondary = ObjType(obj_theme, theme)->text_secondary;
		global::c_text_tertiary = ObjType(obj_theme, theme)->text_tertiary;
		global::c_border = ObjType(obj_theme, theme)->border;
		global::c_overlay = ObjType(obj_theme, theme)->overlay;
		global::c_button_text = ObjType(obj_theme, theme)->button_text;
		global::a_button_text = ObjType(obj_theme, theme)->button_text_alpha;
		global::a_dark_overlay = ObjType(obj_theme, theme)->dark_overlay_alpha;
		global::c_level_top = ObjType(obj_theme, theme)->level_top;
		global::c_level_middle = ObjType(obj_theme, theme)->level_middle;
		global::c_level_bottom = ObjType(obj_theme, theme)->level_bottom;
		global::c_viewport_top = ObjType(obj_theme, theme)->viewport_top;
		global::c_viewport_bottom = ObjType(obj_theme, theme)->viewport_bottom;
		global::c_error = ObjType(obj_theme, theme)->red_error;
		global::c_warning = ObjType(obj_theme, theme)->yellow_warning;
		global::c_success = ObjType(obj_theme, theme)->green_success;
		global::c_axisred = ObjType(obj_theme, theme)->red;
		global::c_axisgreen = ObjType(obj_theme, theme)->green;
		global::c_axisblue = ObjType(obj_theme, theme)->blue;
		global::c_bend = ObjType(obj_theme, theme)->pink;
		global::c_axiscyan = ObjType(obj_theme, theme)->cyan;
		global::c_axisyellow = ObjType(obj_theme, theme)->yellow;
		global::c_axismagenta = ObjType(obj_theme, theme)->magenta;
		if (sInt(setting_accent) == IntType(9))
			global::c_accent = sVar(setting_accent_custom);
		else
			global::c_accent = ObjType(obj_theme, theme)->accent_list.Value(sInt(setting_accent));
		
		interface_update_accent();
	}
	
	VarType json_file_convert_unicode(VarType src, StringType dest)
	{
		return lib_json_file_convert_unicode(src, dest);
	}
	
	BoolType json_load_array()
	{
		IntType list = ds_list_create();
		while (json_load_char())
		{
			if (global::json_char == e_json_char_SQUARE_END)
				break;
			if (!json_load_value())
				break;
			ds_list_add({ list, global::json_value });
			switch ((IntType)global::json_value_type)
			{
				case e_json_type_OBJECT:
				{
					ds_list_mark_as_map(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
				case e_json_type_ARRAY:
				{
					ds_list_mark_as_list(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
			}
			
			if (global::json_char == e_json_char_SQUARE_END)
				break;
			if (global::json_char != e_json_char_COMMA)
			{
				global::json_error = /*"Expected \",\""*/ STR(1243);
				break;
			}
		}
		
		if (global::json_error != /*""*/ STR(0))
		{
			ds_list_destroy(list);
			return false;
		}
		global::json_value = list;
		global::json_value_type = e_json_type_ARRAY;
		json_load_char();
		return true;
	}
	
	BoolType json_load_char()
	{
		if (buffer_is_eof())
		{
			global::json_error = /*"Unexpected end of file"*/ STR(1244);
			return false;
		}
		do
		{
			global::json_char = buffer_read_byte();
			if (global::json_char == e_json_char_TAB)
				global::json_column += IntType(4);
			else
				if (global::json_char == e_json_char_NEW_LINE)
				{
					global::json_line++;
					global::json_column = IntType(0);
				}
				else
					global::json_column++;
			
			
		}
		while (!(global::json_char != e_json_char_TAB && global::json_char != e_json_char_SPACE && global::json_char != e_json_char_NEW_LINE && global::json_char != e_json_char_RETURN && global::json_char < IntType(127)));
		return true;
	}
	
	BoolType json_load_number()
	{
		StringType str, ex;
		BoolType expart;
		str = /*""*/ STR(0);
		expart = false;
		ex = /*""*/ STR(0);
		do
		{
			if (!expart)
				str += chr(global::json_char);
			else
				ex += chr(global::json_char);
			
			global::json_char = buffer_read_byte();
			global::json_column++;
			if (buffer_is_eof())
			{
				global::json_error = /*"Unexpected end of file"*/ STR(1244);
				return false;
			}
			if (global::json_char == e_json_char_E || global::json_char == e_json_char_CAPITAL_E)
			{
				if (expart)
				{
					global::json_error = /*"Unexpected symbol"*/ STR(1245);
					return false;
				}
				global::json_char = buffer_read_byte();
				global::json_column++;
				if (buffer_is_eof())
				{
					global::json_error = /*"Unexpected end of file"*/ STR(1244);
					return false;
				}
				expart = true;
			}
		}
		while (!((global::json_char < e_json_char_NUM_0 || global::json_char > e_json_char_NUM_9) && global::json_char != e_json_char_POINT && global::json_char != e_json_char_MINUS && global::json_char != e_json_char_PLUS));
		if (global::json_char == e_json_char_TAB || global::json_char == e_json_char_SPACE || global::json_char == e_json_char_NEW_LINE || global::json_char == e_json_char_RETURN)
		{
			if (!json_load_char())
				return false;
		}
		global::json_value = string_get_real(str);
		global::json_value_type = e_json_type_NUMBER;
		if (expart)
			global::json_value = power(global::json_value, string_get_real(ex));
		if (is_undefined(global::json_value))
		{
			global::json_error = /*"Invalid number \""*/ STR(1246) + str + /*"\""*/ STR(1155);
			return false;
		}
		return true;
	}
	
}
