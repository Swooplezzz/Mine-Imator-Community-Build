/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.10.18 22:48:02 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void tab_control_loading(ScopeAny self, RealType height)
	{
		tab_control(self, IntType(24) + height);
	}
	
	void tab_control_menu(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		RealType label = ((sReal(window_compact) > 0 && !(global::_app->panel_compact > 0)) ? IntType(0) : label_height + IntType(8));
		if (argument_count > IntType(0))
			tab_control(self, label + argument[IntType(0)]);
		else
			tab_control(self, label + IntType(24));
		
	}
	
	void tab_control_meter(ScopeAny self)
	{
		tab_control(self, (global::_app->panel_compact > 0 || sReal(window_compact) > 0) ? sReal(ui_small_height) : 44.0);
	}
	
	void tab_control_sortlist(ScopeAny self, RealType items)
	{
		tab_control(self, IntType(32) + IntType(14) + sReal(ui_small_height) + (items * sReal(ui_small_height)));
	}
	
	void tab_control_switch(ScopeAny self)
	{
		tab_control(self, sReal(ui_small_height));
	}
	
	void tab_control_textfield(ScopeAny self, BoolType toplabel, RealType size)
	{
		tab_control(self, size + ((label_height + IntType(8)) * (IntType)toplabel));
	}
	
	void tab_control_textfield_group(ScopeAny self, BoolType label)
	{
		RealType height = (global::_app->panel_compact > 0) ? real(sReal(ui_small_height) * sReal(textfield_amount)) : sReal(ui_small_height);
		tab_control(self, height + ((label_height + IntType(8)) * (IntType)label));
	}
	
	void tab_control_togglebutton(ScopeAny self)
	{
		tab_control(self, sReal(ui_large_height) + (label_height + IntType(8)));
	}
	
	void tab_control_wheel(ScopeAny self)
	{
		tab_control(self, IntType(48));
	}
	
	void tab_event_create(Scope<obj_tab> self)
	{
		self->script = null_;
		self->panel = null_;
		self->panel_last = null_;
		self->show = false;
		self->closeable = true;
		self->scroll = null_;
		self->glow = IntType(0);
		self->category_amount = IntType(0);
		self->category[IntType(0)] = null_;
	}
	
	RealType tab_frame_editor_bend(ScopeAny self)
	{
		if (idVar(global::tl_edit, model_part) == null_ || idInt(idVar(global::tl_edit, model_part), bend_part) == null_ || !idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_BEND))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_BEND;
		tab_frame_editor_buttons(self);
		draw_label(self, { text_get({ /*"frameeditorbend"*/ STR(2941) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(26);
		RealType snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : 0.1);
		ArrType axis, axisname, wheelx, color;
		VarType axislen;
		IntType wheel;
		axislen = IntType(0);
		for (IntType i = X_; i <= Z_; i++)
			axislen += (idVec(idVar(global::tl_edit, model_part), bend_axis).Real(i));
		if (!(sReal(setting_z_is_up) > 0))
			axis = ArrType::From({ X_, Z_, Y_ });
		else
			axis = ArrType::From({ X_, Y_, Z_ });
		
		axisname = ArrType::From({ /*"x"*/ STR(846), /*"y"*/ STR(829), /*"z"*/ STR(847) });
		if (axislen == IntType(3))
			wheelx = ArrType::From({ floor(sVar(dx) + (RealType)sVar(dw) / 6.0), floor(sVar(dx) + (RealType)sVar(dw) / 2.0), floor(sVar(dx) + sVar(dw) - (RealType)sVar(dw) / 6.0) });
		else
			if (axislen == IntType(2))
				wheelx = ArrType::From({ sVar(dx) + floor(sVar(dw) * 0.25), sVar(dx) + floor(sVar(dw) * 0.75), IntType(0) });
			else
				wheelx = ArrType::From({ sVar(dx) + floor(sVar(dw) * 0.5), IntType(0), IntType(0) });
		
		
		wheel = IntType(0);
		color = ArrType::From({ global::c_control_cyan, (sReal(setting_z_is_up) > 0) ? global::c_axisyellow : global::c_axismagenta, (sReal(setting_z_is_up) > 0) ? global::c_axismagenta : global::c_axisyellow });
		if (axislen > IntType(0))
		{
			if (ObjType(obj_category, idInt(sVar(tab), transform))->bend_sliders > 0)
			{
				for (IntType i = IntType(0); i < IntType(3); i++)
				{
					global::axis_edit = axis.Value(i);
					if (!idVec(idVar(global::tl_edit, model_part), bend_axis).Real(global::axis_edit))
						continue;
					tab_control_meter(self);
					draw_meter(self, /*"frameeditorbend"*/ STR(2941) + axisname.Value(i), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_X + global::axis_edit), idVec(idVar(global::tl_edit, model_part), bend_direction_min).Real(global::axis_edit), idVec(idVar(global::tl_edit, model_part), bend_direction_max).Real(global::axis_edit), IntType(0), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_bend.Value(i), ID_action_tl_frame_bend_angle);
					tab_next(self);
				}
			}
			else
			{
				if (!(global::_app->panel_compact > 0))
				{
					tab_control_wheel(self);
					for (IntType i = IntType(0); i < IntType(3); i++)
					{
						global::axis_edit = axis.Value(i);
						if (!idVec(idVar(global::tl_edit, model_part), bend_axis).Real(global::axis_edit))
							continue;
						draw_wheel(self, /*"frameeditorbendwheel"*/ STR(2942) + axisname.Value(i), wheelx.Value(wheel), sVar(dy) + IntType(24), color.Value(global::axis_edit), idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_X + global::axis_edit), idVec(idVar(global::tl_edit, model_part), bend_direction_min).Real(global::axis_edit), idVec(idVar(global::tl_edit, model_part), bend_direction_max).Real(global::axis_edit), IntType(0), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_bend.Value(i), ID_action_tl_frame_bend_angle);
						wheel++;
					}
					tab_next(self);
				}
				for (IntType i = IntType(0); i < IntType(3); i++)
				{
					global::axis_edit = axis.Value(i);
					if (!idVec(idVar(global::tl_edit, model_part), bend_axis).Real(global::axis_edit))
						continue;
					textfield_group_add(self, { /*"frameeditorbend"*/ STR(2941) + axisname.Value(i), idVar(global::tl_edit, value).Value(e_value_BEND_ANGLE_X + global::axis_edit), IntType(0), ID_action_tl_frame_bend_angle, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_bend.Value(global::axis_edit), null_, 0.1, idVec(idVar(global::tl_edit, model_part), bend_direction_min).Real(global::axis_edit), idVec(idVar(global::tl_edit, model_part), bend_direction_max).Real(global::axis_edit) });
				}
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"frameeditorbend"*/ STR(2941), (axislen == IntType(1)) ? VarType(floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - dragger_width / 2.0)) : sVar(dx), sVar(dy), (axislen == IntType(1)) ? VarType(dragger_width) : sVar(dw), 0.1, IntType(0), IntType(0), snapval, false, true, IntType(2));
				tab_next(self);
			}
			
		}
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	void tab_frame_editor_buttons(ScopeAny self)
	{
		StringType name;
		VarType bx, by, alpha;
		bx = sVar(dx) + sVar(dw) - IntType(24);
		by = sVar(dy);
		if (sVar(context_menu_name) == /*""*/ STR(0))
			sInt(context_menu_group) = sInt(context_menu_group_temp);
		name = /*"buttons"*/ STR(2943) + string(sInt(context_menu_group_temp));
		alpha = global::microani_arr.Value(e_microani_HOVER);
		draw_set_alpha(alpha);
		if (sInt(context_menu_group_temp) == e_context_group_SCALE)
		{
			if (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0)
				draw_set_alpha(1.0);
			draw_button_icon(self, { name + /*"link"*/ STR(2944), bx, by, IntType(24), IntType(24), ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all, icons_LINK, ID_action_group_combine_scale, false, (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0) ? /*"contextmenuscaleseparate"*/ STR(1509) : /*"contextmenuscalecombine"*/ STR(1510) });
			bx -= 28.0;
			draw_set_alpha(alpha);
		}
		if (sInt(context_menu_group_temp) == e_context_group_BEND && sReal(setting_advanced_mode) > 0)
		{
			if (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->bend_sliders > 0)
				draw_set_alpha(1.0);
			draw_button_icon(self, { name + /*"sliders"*/ STR(2945), bx, by, IntType(24), IntType(24), ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->bend_sliders, icons_SLIDERS, ID_action_group_bend_sliders, false, (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->bend_sliders > 0) ? /*"contextmenubendwheels"*/ STR(2946) : /*"contextmenubendsliders"*/ STR(2947) });
			bx -= 28.0;
			draw_set_alpha(alpha);
		}
		draw_button_icon(self, { name + /*"reset"*/ STR(2901), bx, by, IntType(24), IntType(24), false, icons_RESET, ID_action_group_reset, false, /*"contextmenugroupreset"*/ STR(1517) });
		bx -= 28.0;
		draw_button_icon(self, { name + /*"paste"*/ STR(2948), bx, by, IntType(24), IntType(24), false, icons_PASTE, ID_action_group_paste, DsList(sInt(context_group_copy_list)).Value(sInt(context_menu_group)) == null_, /*"contextmenugrouppaste"*/ STR(1516) });
		bx -= 28.0;
		draw_button_icon(self, { name + /*"copy"*/ STR(2949), bx, by, IntType(24), IntType(24), false, icons_COPY, ID_action_group_copy, false, /*"contextmenugroupcopy"*/ STR(1515) });
		bx -= 28.0;
		draw_set_alpha(1.0);
	}
	
	void tab_frame_editor_camera(ScopeAny self)
	{
		VarType capwid, text;
		sInt(context_menu_group_temp) = e_context_group_CAMERA;
		if (sReal(setting_advanced_mode) > 0)
		{
			if (idVar(global::tl_edit, value).Value(e_value_CAM_SIZE_USE_PROJECT) > 0)
			{
				idVar(idVar(sVar(tab), camera), video_template) = null_;
				text = text_get({ /*"frameeditorcameravideosizeuseproject"*/ STR(1450) });
			}
			else
			{
				if (idVar(idVar(sVar(tab), camera), video_template) == null_)
					idVar(idVar(sVar(tab), camera), video_template) = find_videotemplate(idVar(global::tl_edit, value).Value(e_value_CAM_WIDTH), idVar(global::tl_edit, value).Value(e_value_CAM_HEIGHT));
				if (idVar(idVar(sVar(tab), camera), video_template) > IntType(0))
					text = text_get({ /*"projectvideosizetemplate"*/ STR(1451) + idVar(idVar(idVar(sVar(tab), camera), video_template), name) }) + /*" ("*/ STR(1129) + string(idVar(idVar(idVar(sVar(tab), camera), video_template), width)) + /*"x"*/ STR(846) + string(idVar(idVar(idVar(sVar(tab), camera), video_template), height)) + /*")"*/ STR(1105);
				else
					text = text_get({ /*"projectvideosizecustom"*/ STR(1452) });
				
			}
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorcameravideosize"*/ STR(1449), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), (idVar(global::tl_edit, value).Value(e_value_CAM_SIZE_USE_PROJECT) > 0) ? VarType(null_) : idVar(idVar(sVar(tab), camera), video_template), text, ID_action_tl_frame_cam_video_template });
			tab_next(self);
			if (idVar(idVar(sVar(tab), camera), video_template) == IntType(0))
			{
				textfield_group_add(self, { /*"frameeditorcameravideosizecustomwidth"*/ STR(2950), idVar(global::tl_edit, value).Value(e_value_CAM_WIDTH), IntType(1280), ID_action_tl_frame_cam_width, X_, idInt(idVar(sVar(tab), camera), tbx_video_size_custom_width), null_, IntType(1) });
				textfield_group_add(self, { /*"frameeditorcameravideosizecustomheight"*/ STR(2951), idVar(global::tl_edit, value).Value(e_value_CAM_HEIGHT), IntType(720), ID_action_tl_frame_cam_height, X_, idInt(idVar(sVar(tab), camera), tbx_video_size_custom_height), null_, IntType(1) });
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"frameeditorcameravideosizecustom"*/ STR(2952), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(1), no_limit, IntType(1), false);
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"frameeditorcameravideosizecustomkeepaspectratio"*/ STR(2953), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CAM_SIZE_KEEP_ASPECT_RATIO), ID_action_tl_frame_cam_size_keep_aspect_ratio);
				tab_next(self);
				sVar(dy) += IntType(8);
			}
		}
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorcamerafov"*/ STR(2954), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_CAM_FOV), IntType(1), IntType(170), IntType(45), IntType(1), idInt(idVar(sVar(tab), camera), tbx_fov), ID_action_tl_frame_cam_fov);
		tab_next(self);
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"aperture"*/ STR(148), DsMap(global::collapse_map).Value(/*"aperture"*/ STR(148)), null_, true, /*"frameeditorcameraaperture"*/ STR(2955), /*"frameeditorcameraaperturetip"*/ STR(2956));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"aperture"*/ STR(148)) > 0)
			{
				tab_collapse_start(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcamerabladeamount"*/ STR(2957), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_CAM_BLADE_AMOUNT), IntType(0), IntType(16), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_blade_amount), ID_action_tl_frame_cam_blade_amount);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorcamerabladeangle"*/ STR(2958), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_BLADE_ANGLE), 0.1, -no_limit, no_limit, IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_blade_angle), ID_action_tl_frame_cam_blade_angle);
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"light_management_cam"*/ STR(147), DsMap(global::collapse_map).Value(/*"light_management_cam"*/ STR(147)), ID_action_tl_frame_cam_light_management, idVar(global::tl_edit, value).Value(e_value_CAM_LIGHT_MANAGEMENT), /*"frameeditorcameralightmanagement"*/ STR(2959));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_LIGHT_MANAGEMENT) > 0 && DsMap(global::collapse_map).Value(/*"light_management_cam"*/ STR(147)) > 0)
		{
			tab_collapse_start(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_TONEMAPPER) == e_tonemapper_REINHARD)
				text = text_get({ /*"frameeditorcameratonemapperreinhard"*/ STR(2960) });
			else
				if (idVar(global::tl_edit, value).Value(e_value_CAM_TONEMAPPER) == e_tonemapper_ACES)
					text = text_get({ /*"frameeditorcameratonemapperaces"*/ STR(2961) });
				else
					text = text_get({ /*"frameeditorcameratonemappernone"*/ STR(2962) });
			
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorcameratonemapper"*/ STR(1502), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_CAM_TONEMAPPER), text, ID_action_tl_frame_cam_tonemapper });
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameraexposure"*/ STR(2963), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_EXPOSURE), 0.01, IntType(0), no_limit, IntType(1), 0.01, idInt(idVar(sVar(tab), camera), tbx_exposure), ID_action_tl_frame_cam_exposure);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameragamma"*/ STR(2964), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_GAMMA), 0.01, IntType(0), no_limit, 2.2, 0.01, idInt(idVar(sVar(tab), camera), tbx_gamma), ID_action_tl_frame_cam_gamma);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"rotatepoint"*/ STR(140), DsMap(global::collapse_map).Value(/*"rotatepoint"*/ STR(140)), ID_action_tl_frame_cam_rotate, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE), /*"frameeditorcamerarotate"*/ STR(2965));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE) > 0 && DsMap(global::collapse_map).Value(/*"rotatepoint"*/ STR(140)) > 0)
		{
			tab_collapse_start(self);
			RealType snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : 0.1);
			tab_control_wheel(self);
			draw_wheel(self, /*"frameeditorcamerarotateanglexywheel"*/ STR(2966), sVar(dx) + floor(sVar(dw) * 0.25), sVar(dy) + IntType(24), c_aqua, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY), -no_limit, no_limit, IntType(0), snapval, idInt(idVar(sVar(tab), camera), tbx_rotate_angle_xy), ID_action_tl_frame_cam_rotate_angle_xy);
			draw_wheel(self, /*"frameeditorcamerarotateanglezwheel"*/ STR(2967), sVar(dx) + floor(sVar(dw) * 0.75), sVar(dy) + IntType(24), c_aqua, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z), -89.9, 89.9, IntType(0), snapval, idInt(idVar(sVar(tab), camera), tbx_rotate_angle_z), ID_action_tl_frame_cam_rotate_angle_z);
			tab_next(self);
			textfield_group_add(self, { /*"frameeditorcamerarotateanglexy"*/ STR(2968), idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY), IntType(0), ID_action_tl_frame_cam_rotate_angle_xy, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_rotate_angle_xy), null_, .1, -no_limit, no_limit });
			textfield_group_add(self, { /*"frameeditorcamerarotateanglez"*/ STR(2969), idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z), IntType(0), ID_action_tl_frame_cam_rotate_angle_z, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_rotate_angle_z), null_, .1, -89.9, 89.9 });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"frameeditorcamerarotateangle"*/ STR(2970), sVar(dx), sVar(dy), sVar(dw), 0.1, IntType(0), IntType(0), snapval, false, true);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcamerarotatedistance"*/ STR(2971), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_DISTANCE), IntType(1), IntType(1), no_limit, IntType(100), IntType(0), idInt(idVar(sVar(tab), camera), tbx_rotate_distance), ID_action_tl_frame_cam_rotate_distance);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorcamerarotatelookatpoint"*/ STR(2972), sVar(dx), sVar(dy), idBool(idVar(sVar(tab), camera), look_at_rotate), ID_action_tl_frame_look_at_rotate);
			tab_next(self);
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"camshake"*/ STR(149), DsMap(global::collapse_map).Value(/*"camshake"*/ STR(149)), ID_action_tl_frame_cam_shake, idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE), /*"frameeditorcameracamerashake"*/ STR(2973));
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE) > 0 && DsMap(global::collapse_map).Value(/*"camshake"*/ STR(149)) > 0)
			{
				tab_collapse_start(self);
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"frameeditorcameracamerashakerotational"*/ STR(2974), null_, IntType(0), idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_MODE) == IntType(0), ID_action_tl_frame_cam_shake_mode });
				togglebutton_add(self, { /*"frameeditorcameracamerashakepositional"*/ STR(2975), null_, IntType(1), idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_MODE) == IntType(1), ID_action_tl_frame_cam_shake_mode });
				draw_togglebutton(self, /*"frameeditorcameracamerashakemode"*/ STR(2976), sVar(dx), sVar(dy));
				tab_next(self);
				global::axis_edit = X_;
				textfield_group_add(self, { /*"frameeditorcameracamerashakestrengthx"*/ STR(2977), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_STRENGTH_X) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_strength, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_strength_x), null_, IntType(1), IntType(0), no_limit });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
				textfield_group_add(self, { /*"frameeditorcameracamerashakestrengthy"*/ STR(2978), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_STRENGTH_X + global::axis_edit) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_strength, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_strength_y), null_, IntType(1), IntType(0), no_limit });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
				textfield_group_add(self, { /*"frameeditorcameracamerashakestrengthz"*/ STR(2979), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_STRENGTH_X + global::axis_edit) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_strength, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_strength_z), null_, IntType(1), IntType(0), no_limit });
				tab_control_textfield_group(self);
				draw_textfield_group(self, /*"frameeditorcameracamerashakestrength"*/ STR(2980), sVar(dx), sVar(dy), sVar(dw), null_, null_, null_, .01, true, false, IntType(1));
				tab_next(self);
				global::axis_edit = X_;
				textfield_group_add(self, { /*"frameeditorcameracamerashakespeedx"*/ STR(2981), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_SPEED_X) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_speed, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_speed_x), null_, IntType(1), IntType(0), no_limit });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
				textfield_group_add(self, { /*"frameeditorcameracamerashakespeedy"*/ STR(2982), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_SPEED_X + global::axis_edit) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_speed, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_speed_y), null_, IntType(1), IntType(0), no_limit });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
				textfield_group_add(self, { /*"frameeditorcameracamerashakespeedz"*/ STR(2983), round(idVar(global::tl_edit, value).Value(e_value_CAM_SHAKE_SPEED_X + global::axis_edit) * IntType(100)), IntType(100), ID_action_tl_frame_cam_shake_speed, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_shake_speed_z), null_, IntType(1), IntType(0), no_limit });
				tab_control_textfield_group(self);
				draw_textfield_group(self, /*"frameeditorcameracamerashakespeed"*/ STR(2984), sVar(dx), sVar(dy), sVar(dw), null_, null_, null_, .01, true, false, IntType(1));
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"dof"*/ STR(150), DsMap(global::collapse_map).Value(/*"dof"*/ STR(150)), ID_action_tl_frame_cam_dof, idVar(global::tl_edit, value).Value(e_value_CAM_DOF), /*"frameeditorcameradof"*/ STR(2985));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_DOF) > 0 && DsMap(global::collapse_map).Value(/*"dof"*/ STR(150)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameradofdepth"*/ STR(2986), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_DEPTH), max({ 0.5, (RealType)idVar(global::tl_edit, value).Value(e_value_CAM_DOF_DEPTH) / 50.0 }), IntType(0), sVar(project_render_distance), IntType(0), IntType(0), idInt(idVar(sVar(tab), camera), tbx_dof_depth), ID_action_tl_frame_cam_dof_depth);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameradofrange"*/ STR(2987), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_RANGE), max({ 0.5, (RealType)idVar(global::tl_edit, value).Value(e_value_CAM_DOF_RANGE) / 50.0 }), IntType(0), no_limit, IntType(200), IntType(0), idInt(idVar(sVar(tab), camera), tbx_dof_range), ID_action_tl_frame_cam_dof_range);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameradoffadesize"*/ STR(2988), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FADE_SIZE), IntType(2), IntType(0), no_limit, IntType(100), IntType(0), idInt(idVar(sVar(tab), camera), tbx_dof_fade_size), ID_action_tl_frame_cam_dof_fade_size);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorcameradofblursize"*/ STR(2989), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_CAM_DOF_BLUR_SIZE) * IntType(100), IntType(0), IntType(10), IntType(1), .01, idInt(idVar(sVar(tab), camera), tbx_dof_blur_size), ID_action_tl_frame_cam_dof_blur_size);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameradofblurratio"*/ STR(2990), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_BLUR_RATIO) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_dof_blur_ratio), ID_action_tl_frame_cam_dof_blur_ratio);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameradofbias"*/ STR(2991), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_BIAS) * IntType(10)), IntType(0), IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_dof_bias), ID_action_tl_frame_cam_dof_bias);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameradofgain"*/ STR(2992), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_GAIN) * IntType(100)), IntType(0), IntType(200), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_dof_gain), ID_action_tl_frame_cam_dof_gain);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameradofthreshold"*/ STR(2993), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_THRESHOLD) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_dof_threshold), ID_action_tl_frame_cam_dof_threshold);
				tab_next(self);
				tab_control_switch(self);
				draw_button_collapse(self, /*"dof_fringe"*/ STR(151), DsMap(global::collapse_map).Value(/*"dof_fringe"*/ STR(151)), ID_action_tl_frame_cam_dof_fringe, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE), /*"frameeditorcameradoffringe"*/ STR(2994));
				tab_next(self);
				if (idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE) > 0 && DsMap(global::collapse_map).Value(/*"dof_fringe"*/ STR(151)) > 0)
				{
					tab_collapse_start(self);
					RealType snapval;
					VarType capwid;
					snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : 0.1);
					tab_control_wheel(self);
					global::axis_edit = X_;
					draw_wheel(self, /*"frameeditorcameradoffringeangleredwheel"*/ STR(2995), floor(sVar(dx) + (RealType)sVar(dw) / 6.0), sVar(dy) + IntType(24), global::c_axisred, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_RED), -no_limit, no_limit, idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_RED), snapval, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_red), ID_action_tl_frame_cam_dof_fringe_angle);
					global::axis_edit = Y_;
					draw_wheel(self, /*"frameeditorcameradoffringeanglegreenwheel"*/ STR(2996), floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy) + IntType(24), global::c_axisgreen, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_GREEN), -no_limit, no_limit, idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_GREEN), snapval, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_green), ID_action_tl_frame_cam_dof_fringe_angle);
					global::axis_edit = Z_;
					draw_wheel(self, /*"frameeditorcameradoffringeanglebluewheel"*/ STR(2997), floor(sVar(dx) + sVar(dw) - (RealType)sVar(dw) / 6.0), sVar(dy) + IntType(24), global::c_axisblue, idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_BLUE), -no_limit, no_limit, idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_BLUE), snapval, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_blue), ID_action_tl_frame_cam_dof_fringe_angle);
					tab_next(self);
					global::axis_edit = X_;
					textfield_group_add(self, { /*"frameeditorcameradoffringeanglered"*/ STR(2998), idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_RED), idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_RED), ID_action_tl_frame_cam_dof_fringe_angle, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_red) });
					global::axis_edit = Y_;
					textfield_group_add(self, { /*"frameeditorcameradoffringeanglegreen"*/ STR(2999), idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_GREEN), idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_GREEN), ID_action_tl_frame_cam_dof_fringe_angle, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_green) });
					global::axis_edit = Z_;
					textfield_group_add(self, { /*"frameeditorcameradoffringeangleblue"*/ STR(3000), idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_ANGLE_BLUE), idArr(global::tl_edit, value_default).Value(e_value_CAM_DOF_FRINGE_ANGLE_BLUE), ID_action_tl_frame_cam_dof_fringe_angle, global::axis_edit, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_angle_blue) });
					tab_control_textfield(self, false);
					draw_textfield_group(self, /*"frameeditorcameradoffringeangle"*/ STR(3001), sVar(dx), sVar(dy), sVar(dw), 0.1, -no_limit, no_limit, snapval, false, true, IntType(1));
					tab_next(self);
					textfield_group_add(self, { /*"frameeditorcameradoffringered"*/ STR(3002), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_RED) * IntType(100)), IntType(100), ID_action_tl_frame_cam_dof_fringe_red, X_, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_red) });
					textfield_group_add(self, { /*"frameeditorcameradoffringegreen"*/ STR(3003), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_GREEN) * IntType(100)), IntType(100), ID_action_tl_frame_cam_dof_fringe_green, X_, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_green) });
					textfield_group_add(self, { /*"frameeditorcameradoffringeblue"*/ STR(3004), round(idVar(global::tl_edit, value).Value(e_value_CAM_DOF_FRINGE_BLUE) * IntType(100)), IntType(100), ID_action_tl_frame_cam_dof_fringe_blue, X_, idInt(idVar(sVar(tab), camera), tbx_dof_fringe_blue) });
					tab_control_textfield_group(self);
					draw_textfield_group(self, /*"frameeditorcameradoffringeoffset"*/ STR(3005), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), no_limit, IntType(1), true, true, IntType(3));
					tab_next(self);
					tab_collapse_end(self, false);
				}
			}
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"bloom"*/ STR(152), DsMap(global::collapse_map).Value(/*"bloom"*/ STR(152)), ID_action_tl_frame_cam_bloom, idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM), /*"frameeditorcamerabloom"*/ STR(3006));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM) > 0 && DsMap(global::collapse_map).Value(/*"bloom"*/ STR(152)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcamerabloomthreshold"*/ STR(3007), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM_THRESHOLD) * IntType(100)), .1, IntType(0), no_limit, IntType(85), IntType(1), idInt(idVar(sVar(tab), camera), tbx_bloom_threshold), ID_action_tl_frame_cam_bloom_threshold);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcamerabloomradius"*/ STR(3008), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM_RADIUS) * IntType(100)), .1, IntType(0), no_limit, IntType(100), IntType(1), idInt(idVar(sVar(tab), camera), tbx_bloom_radius), ID_action_tl_frame_cam_bloom_radius);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcamerabloomintensity"*/ STR(3009), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM_INTENSITY) * IntType(100)), .1, IntType(0), no_limit, IntType(40), IntType(1), idInt(idVar(sVar(tab), camera), tbx_bloom_intensity), ID_action_tl_frame_cam_bloom_intensity);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcamerabloomratio"*/ STR(3010), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM_RATIO) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_bloom_ratio), ID_action_tl_frame_cam_bloom_ratio);
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorcamerabloomblend"*/ STR(3011), sVar(dx), sVar(dy), floor((RealType)sVar(dw) / 2.0), idVar(global::tl_edit, value).Value(e_value_CAM_BLOOM_BLEND), c_white, false, ID_action_tl_frame_cam_bloom_blend);
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"lensdirt"*/ STR(153), DsMap(global::collapse_map).Value(/*"lensdirt"*/ STR(153)), ID_action_tl_frame_cam_lens_dirt, idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT), /*"frameeditorcameralensdirt"*/ STR(3012));
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT) > 0 && DsMap(global::collapse_map).Value(/*"lensdirt"*/ STR(153)) > 0)
			{
				tab_collapse_start(self);
				VarType texobj, tex;
				texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
				tex = null_;
				VarType text;
				if (texobj != null_)
					text = idVar(texobj, display_name);
				else
					text = text_get({ /*"listnone"*/ STR(782) });
				
				if (texobj == null_)
					text = text_get({ /*"listdefault"*/ STR(808), text });
				if (texobj != null_ && idVar(texobj, type) != e_tl_type_CAMERA)
					tex = idVar(texobj, texture);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"frameeditorcameralensdirttexture"*/ STR(1418), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ), text, ID_action_tl_frame_texture_obj, false, tex });
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"frameeditorcameralensdirtbloom"*/ STR(3013), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT_BLOOM), ID_action_tl_frame_cam_lens_dirt_bloom);
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"frameeditorcameralensdirtglow"*/ STR(3014), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT_GLOW), ID_action_tl_frame_cam_lens_dirt_glow);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameralensdirtradius"*/ STR(3015), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT_RADIUS) * IntType(100)), IntType(0), IntType(300), IntType(50), IntType(1), idInt(idVar(sVar(tab), camera), tbx_lens_dirt_radius), ID_action_tl_frame_cam_lens_dirt_radius);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameralensdirtintensity"*/ STR(3016), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT_INTENSITY) * IntType(100)), IntType(0), IntType(200), IntType(80), IntType(1), idInt(idVar(sVar(tab), camera), tbx_lens_dirt_intensity), ID_action_tl_frame_cam_lens_dirt_intensity);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameralensdirtpower"*/ STR(3017), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_LENS_DIRT_POWER) * IntType(100)), IntType(100), IntType(500), IntType(150), IntType(1), idInt(idVar(sVar(tab), camera), tbx_lens_dirt_power), ID_action_tl_frame_cam_lens_dirt_power);
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"clrcor"*/ STR(154), DsMap(global::collapse_map).Value(/*"clrcor"*/ STR(154)), ID_action_tl_frame_cam_clrcor, idVar(global::tl_edit, value).Value(e_value_CAM_COLOR_CORRECTION), /*"frameeditorcameracolorcorrection"*/ STR(3018));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_COLOR_CORRECTION) > 0 && DsMap(global::collapse_map).Value(/*"clrcor"*/ STR(154)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameracolorcorrectioncontrast"*/ STR(3019), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_CONTRAST) * IntType(100)), .1, IntType(0), no_limit * IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_contrast), ID_action_tl_frame_cam_clrcor_contrast);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameracolorcorrectionbrightness"*/ STR(3020), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_BRIGHTNESS) * IntType(100)), .1, -no_limit * IntType(100), no_limit * IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_brightness), ID_action_tl_frame_cam_clrcor_brightness);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameracolorcorrectionsaturation"*/ STR(3021), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_SATURATION) * IntType(100)), .1, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), idInt(idVar(sVar(tab), camera), tbx_saturation), ID_action_tl_frame_cam_clrcor_saturation);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorcameracolorcorrectionvibrance"*/ STR(3022), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_CAM_VIBRANCE) * IntType(100)), .1, IntType(0), no_limit * IntType(100), IntType(0), IntType(1), idInt(idVar(sVar(tab), camera), tbx_vibrance), ID_action_tl_frame_cam_clrcor_vibrance);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"frameeditorcameracolorcorrectioncolorburn"*/ STR(3023), sVar(dx), sVar(dy), (RealType)sVar(dw) / 2.0, idVar(global::tl_edit, value).Value(e_value_CAM_COLOR_BURN), c_white, false, ID_action_tl_frame_cam_clrcor_color_burn);
			tab_next(self);
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"grain"*/ STR(155), DsMap(global::collapse_map).Value(/*"grain"*/ STR(155)), ID_action_tl_frame_cam_grain, idVar(global::tl_edit, value).Value(e_value_CAM_GRAIN), /*"frameeditorcameragrain"*/ STR(3024));
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_GRAIN) > 0 && DsMap(global::collapse_map).Value(/*"grain"*/ STR(155)) > 0)
			{
				tab_collapse_start(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameragrainstrength"*/ STR(3025), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_GRAIN_STRENGTH) * IntType(100)), -IntType(100), IntType(100), IntType(10), IntType(1), idInt(idVar(sVar(tab), camera), tbx_grain_strength), ID_action_tl_frame_cam_grain_strength);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameragrainsaturation"*/ STR(3026), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_GRAIN_SATURATION) * IntType(100)), IntType(0), IntType(100), IntType(10), IntType(1), idInt(idVar(sVar(tab), camera), tbx_grain_saturation), ID_action_tl_frame_cam_grain_saturation);
				tab_next(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameragrainsize"*/ STR(3027), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_CAM_GRAIN_SIZE), IntType(1), IntType(10), IntType(1), IntType(1), idInt(idVar(sVar(tab), camera), tbx_grain_size), ID_action_tl_frame_cam_grain_size);
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"vignette"*/ STR(156), DsMap(global::collapse_map).Value(/*"vignette"*/ STR(156)), ID_action_tl_frame_cam_vignette, idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE), /*"frameeditorcameravignette"*/ STR(3028));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE) > 0 && DsMap(global::collapse_map).Value(/*"vignette"*/ STR(156)) > 0)
		{
			tab_collapse_start(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorcameravignetteradius"*/ STR(3029), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE_RADIUS) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), idInt(idVar(sVar(tab), camera), tbx_vignette_radius), ID_action_tl_frame_cam_vignette_radius);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorcameravignettesoftness"*/ STR(3030), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE_SOFTNESS) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), idInt(idVar(sVar(tab), camera), tbx_vignette_softness), ID_action_tl_frame_cam_vignette_softness);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorcameravignettestrength"*/ STR(3031), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE_STRENGTH) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), idInt(idVar(sVar(tab), camera), tbx_vignette_strength), ID_action_tl_frame_cam_vignette_strength);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"frameeditorcameravignettecolor"*/ STR(3032), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_CAM_VIGNETTE_COLOR), c_black, false, ID_action_tl_frame_cam_vignette_color);
			tab_next(self);
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"ca"*/ STR(157), DsMap(global::collapse_map).Value(/*"ca"*/ STR(157)), ID_action_tl_frame_cam_ca, idVar(global::tl_edit, value).Value(e_value_CAM_CA), /*"frameeditorcameraca"*/ STR(3033));
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_CA) > 0 && DsMap(global::collapse_map).Value(/*"ca"*/ STR(157)) > 0)
			{
				tab_collapse_start(self);
				tab_control_meter(self);
				draw_meter(self, /*"frameeditorcameracabluramount"*/ STR(3034), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_CAM_CA_BLUR_AMOUNT) * IntType(100)), IntType(0), IntType(100), IntType(5), IntType(1), idInt(idVar(sVar(tab), camera), tbx_ca_blur_amount), ID_action_tl_frame_cam_ca_blur_amount);
				tab_next(self);
				tab_control_switch(self);
				draw_switch(self, /*"frameeditorcameracadistortchannels"*/ STR(3035), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CAM_CA_DISTORT_CHANNELS), ID_action_tl_frame_cam_ca_distort_channels);
				tab_next(self);
				textfield_group_add(self, { /*"frameeditorcameracaredoffset"*/ STR(3036), round(idVar(global::tl_edit, value).Value(e_value_CAM_CA_RED_OFFSET) * IntType(100)), IntType(12), ID_action_tl_frame_cam_ca_red_offset, X_, idInt(idVar(sVar(tab), camera), tbx_ca_red_offset) });
				textfield_group_add(self, { /*"frameeditorcameracagreenoffset"*/ STR(3037), round(idVar(global::tl_edit, value).Value(e_value_CAM_CA_GREEN_OFFSET) * IntType(100)), IntType(8), ID_action_tl_frame_cam_ca_green_offset, X_, idInt(idVar(sVar(tab), camera), tbx_ca_green_offset) });
				textfield_group_add(self, { /*"frameeditorcameracablueoffset"*/ STR(3038), round(idVar(global::tl_edit, value).Value(e_value_CAM_CA_BLUE_OFFSET) * IntType(100)), IntType(4), ID_action_tl_frame_cam_ca_blue_offset, X_, idInt(idVar(sVar(tab), camera), tbx_ca_blue_offset) });
				tab_control_textfield_group(self);
				draw_textfield_group(self, /*"frameeditorcameracaoffset"*/ STR(3039), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), no_limit, IntType(1), true, true, IntType(3));
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"distort"*/ STR(158), DsMap(global::collapse_map).Value(/*"distort"*/ STR(158)), ID_action_tl_frame_cam_distort, idVar(global::tl_edit, value).Value(e_value_CAM_DISTORT), /*"frameeditorcameradistort"*/ STR(3040));
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CAM_DISTORT) > 0 && DsMap(global::collapse_map).Value(/*"distort"*/ STR(158)) > 0)
			{
				tab_collapse_start(self);
				tab_control_switch(self);
				draw_switch(self, /*"frameeditorcameradistortrepeat"*/ STR(3041), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CAM_DISTORT_REPEAT), ID_action_tl_frame_cam_distort_repeat);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorcameradistortzoom"*/ STR(3042), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_DISTORT_ZOOM_AMOUNT) * IntType(100), IntType(1), snap_min, no_limit, IntType(100), .01, idInt(idVar(sVar(tab), camera), tbx_distort_zoom_amount), ID_action_tl_frame_cam_distort_zoom_amount);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorcameradistortamount"*/ STR(3043), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_CAM_DISTORT_AMOUNT) * IntType(100), .1, -no_limit * IntType(100), no_limit * IntType(100), IntType(5), 0.01, idInt(idVar(sVar(tab), camera), tbx_distort_amount), ID_action_tl_frame_cam_distort_amount);
				tab_next(self);
				tab_collapse_end(self, false);
			}
		}
		sInt(context_menu_group_temp) = null_;
	}
	
	RealType tab_frame_editor_color(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_COLOR))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_COLOR;
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"material_color"*/ STR(160), DsMap(global::collapse_map).Value(/*"material_color"*/ STR(160)), null_, true, /*"frameeditorcolor"*/ STR(3044));
			tab_next(self);
		}
		if (DsMap(global::collapse_map).Value(/*"material_color"*/ STR(160)) > 0 || !(sReal(setting_advanced_mode) > 0))
		{
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_collapse_start(self);
				tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			}
			tab_control_color(self);
			draw_button_color(self, /*"frameeditorblendcolor"*/ STR(3045), sVar(dx), sVar(dy), (sReal(setting_advanced_mode) > 0) ? sVar(dw) : VarType((RealType)sVar(dw) / 2.0), idVar(global::tl_edit, value).Value(e_value_RGB_MUL), c_white, false, ID_action_tl_frame_rgb_mul);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorhsvmul"*/ STR(3046), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_HSB_MUL), c_white, true, ID_action_tl_frame_hsb_mul);
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorrgbadd"*/ STR(3047), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_RGB_ADD), c_black, false, ID_action_tl_frame_rgb_add);
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorhsvadd"*/ STR(3048), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_HSB_ADD), c_black, true, ID_action_tl_frame_hsb_add);
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorrgbsub"*/ STR(3049), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_RGB_SUB), c_black, false, ID_action_tl_frame_rgb_sub);
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorhsvsub"*/ STR(3050), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_HSB_SUB), c_black, true, ID_action_tl_frame_hsb_sub);
				tab_next(self);
				BoolType glowenabled = idVar(global::tl_edit, glow) > 0 && !idArr(global::tl_edit, value_type).Value(e_value_type_CAMERA);
				if (glowenabled)
				{
					tab_control_color(self);
					draw_button_color(self, /*"frameeditorglowcolor"*/ STR(3051), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_GLOW_COLOR), c_white, false, ID_action_tl_frame_glow_color);
					tab_next(self);
				}
			}
			if (sReal(setting_advanced_mode) > 0)
				tab_set_collumns(self, { false });
			tab_control_color(self);
			draw_button_color(self, /*"frameeditormixcolor"*/ STR(3052), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_MIX_COLOR), c_black, false, ID_action_tl_frame_mix_color);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditormixpercent"*/ STR(3053), sVar(dx), sVar(dy), sVar(dw), floor(idVar(global::tl_edit, value).Value(e_value_MIX_PERCENT) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_mix_percent, ID_action_tl_frame_mix_percent);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
				tab_collapse_end(self);
		}
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	void tab_frame_editor_constraints(ScopeAny self)
	{
		tab_frame_editor_path(self);
		tab_frame_editor_ik(self);
		tab_frame_editor_follow_rot(self);
		tab_frame_editor_follow_pos(self);
		tab_frame_editor_follow_scale(self);
	}
	
	void tab_frame_editor_constraints_path_point(ScopeAny self)
	{
		tab_frame_editor_follow_rot(self);
		tab_frame_editor_follow_pos(self);
		tab_frame_editor_follow_scale(self);
	}
	
	void tab_frame_editor_follow_pos(ScopeAny self)
	{
		tab_control_switch(self);
		draw_button_collapse(self, /*"followpos"*/ STR(143), DsMap(global::collapse_map).Value(/*"followpos"*/ STR(143)), null_, true, /*"frameeditorfollowpos"*/ STR(3054), /*"frameeditorfollowpostip"*/ STR(3055));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"followpos"*/ STR(143)) > 0)
		{
			tab_collapse_start(self);
			VarType text;
			if (idVar(global::tl_edit, value).Value(e_value_POS_TARGET) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_POS_TARGET), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(782) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorfollowpostarget"*/ STR(3056), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_POS_TARGET), text, ID_action_tl_frame_follow_pos_target });
			sVar(dy) += IntType(32);
			draw_label(self, { text_get({ /*"frameeditorfollowposfollowaxis"*/ STR(3057) }), sVar(dx), sVar(dy) + IntType(22), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			sVar(dy) += IntType(32);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowposx"*/ STR(3058), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_POS_X), ID_action_tl_frame_follow_pos_x);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowposy"*/ STR(3059), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_POS_Y), ID_action_tl_frame_follow_pos_y);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowposz"*/ STR(3060), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_POS_Z), ID_action_tl_frame_follow_pos_z);
			tab_next(self);
			tab_collapse_end(self);
		}
	}
	
	void tab_frame_editor_follow_rot(ScopeAny self)
	{
		tab_control_switch(self);
		draw_button_collapse(self, /*"followrot"*/ STR(142), DsMap(global::collapse_map).Value(/*"followrot"*/ STR(142)), null_, true, /*"frameeditorfollowrot"*/ STR(3061), /*"frameeditorfollowrottip"*/ STR(3062));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"followrot"*/ STR(142)) > 0)
		{
			tab_collapse_start(self);
			VarType text;
			if (idVar(global::tl_edit, value).Value(e_value_ROT_TARGET) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_ROT_TARGET), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(782) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorfollowrottarget"*/ STR(3063), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_ROT_TARGET), text, ID_action_tl_frame_follow_rot_target });
			sVar(dy) += IntType(32);
			draw_label(self, { text_get({ /*"frameeditorfollowrotfollowaxis"*/ STR(3064) }), sVar(dx), sVar(dy) + IntType(22), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			sVar(dy) += IntType(32);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowrotx"*/ STR(3065), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_ROT_X), ID_action_tl_frame_follow_rot_x);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowroty"*/ STR(3066), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_ROT_Y), ID_action_tl_frame_follow_rot_y);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowrotz"*/ STR(3067), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_ROT_Z), ID_action_tl_frame_follow_rot_z);
			tab_next(self);
			tab_collapse_end(self);
		}
	}
	
	void tab_frame_editor_follow_scale(ScopeAny self)
	{
		tab_control_switch(self);
		draw_button_collapse(self, /*"followscale"*/ STR(144), DsMap(global::collapse_map).Value(/*"followscale"*/ STR(144)), null_, true, /*"frameeditorfollowscale"*/ STR(3068), /*"frameeditorfollowscaletip"*/ STR(3069));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"followscale"*/ STR(144)) > 0)
		{
			tab_collapse_start(self);
			VarType text;
			if (idVar(global::tl_edit, value).Value(e_value_SCALE_TARGET) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_SCALE_TARGET), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(782) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorfollowscaletarget"*/ STR(3070), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_SCALE_TARGET), text, ID_action_tl_frame_follow_scale_target });
			sVar(dy) += IntType(32);
			draw_label(self, { text_get({ /*"frameeditorfollowscalefollowaxis"*/ STR(3071) }), sVar(dx), sVar(dy) + IntType(22), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			sVar(dy) += IntType(32);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowscalex"*/ STR(3072), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_SCALE_X), ID_action_tl_frame_follow_scale_x);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowscaley"*/ STR(3073), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_SCALE_Y), ID_action_tl_frame_follow_scale_y);
			sVar(dy) += IntType(24);
			tab_control_switch(self);
			draw_switch(self, /*"frameeditorfollowscalez"*/ STR(3074), sVar(dx) + IntType(12), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FLW_SCALE_Z), ID_action_tl_frame_follow_scale_z);
			tab_next(self);
			tab_collapse_end(self);
		}
	}
	
	RealType tab_frame_editor_ik(ScopeAny self)
	{
		if (idVar(global::tl_edit, type) != e_tl_type_BODYPART || !idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_BEND) || idVar(global::tl_edit, model_part) == null_ || idBool(idVar(global::tl_edit, model_part), ik_supported) == false)
			return IntType(0);
		tab_control_switch(self);
		draw_button_collapse(self, /*"ik"*/ STR(141), DsMap(global::collapse_map).Value(/*"ik"*/ STR(141)), null_, true, /*"frameeditorik"*/ STR(3075), /*"frameeditoriktip"*/ STR(3076));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"ik"*/ STR(141)) > 0)
		{
			tab_collapse_start(self);
			VarType text;
			if (idVar(global::tl_edit, value).Value(e_value_IK_TARGET) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_IK_TARGET), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(782) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditoriktarget"*/ STR(3077), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_IK_TARGET), text, ID_action_tl_frame_ik_target });
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_IK_TARGET_ANGLE) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_IK_TARGET_ANGLE), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(782) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorikangletarget"*/ STR(3078), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_IK_TARGET_ANGLE), text, ID_action_tl_frame_ik_target_angle, idVar(global::tl_edit, value).Value(e_value_IK_TARGET) == null_ });
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorikangleoffset"*/ STR(3079), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_IK_ANGLE_OFFSET), 0.1, -no_limit, no_limit, IntType(0), snap_min, ObjType(obj_category, idInt(sVar(tab), constraints))->tbx_ik_angle_offset, ID_action_tl_frame_ik_angle_offset, null_, true, idVar(global::tl_edit, value).Value(e_value_IK_TARGET) == null_ || idVar(global::tl_edit, value).Value(e_value_IK_TARGET_ANGLE) == null_);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorikblend"*/ STR(3080), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_IK_BLEND) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), constraints))->tbx_ik_blend, ID_action_tl_frame_ik_blend);
			tab_next(self);
			tab_collapse_end(self);
		}
		return 0.0;
	}
	
	RealType tab_frame_editor_item(ScopeAny self)
	{
		if (idVar(global::tl_edit, temp) == null_ || idVar(global::tl_edit, type) != e_tl_type_ITEM)
			return IntType(0);
		VarType res = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
		if (res == null_)
			res = idVar(idVar(global::tl_edit, temp), item_tex);
		if (!res_is_ready(res))
			res = global::mc_res;
		tab_control_switch(self);
		draw_button_collapse(self, /*"itemslot"*/ STR(159), DsMap(global::collapse_map).Value(/*"itemslot"*/ STR(159)), ID_action_tl_frame_custom_item_slot, idVar(global::tl_edit, value).Value(e_value_CUSTOM_ITEM_SLOT), /*"frameeditoritemcustomitemslot"*/ STR(3081));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CUSTOM_ITEM_SLOT) > 0 && DsMap(global::collapse_map).Value(/*"itemslot"*/ STR(159)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditoritemitemslot"*/ STR(3082), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_ITEM_SLOT), .1, IntType(0), no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), item))->item_slot, ID_action_tl_frame_item_slot);
			tab_next(self);
			RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
			tab_control(self, IntType(200));
			draw_texture_picker(self, idVar(global::tl_edit, value).Value(e_value_ITEM_SLOT), idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), IntType(200), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), ObjType(obj_category, idInt(sVar(tab), item))->item_scroll, ID_action_tl_frame_item_slot);
			tab_next(self);
			tab_collapse_end(self);
		}
		return 0.0;
	}
	
	void tab_frame_editor_keyframe(ScopeAny self)
	{
		VarType trans, text;
		trans = idVar(global::tl_edit, value).Value(e_value_TRANSITION);
		if (trans != /*"linear"*/ STR(563) && trans != /*"instant"*/ STR(564) && trans != /*"bezier"*/ STR(565))
		{
			if (string_contains(trans, /*"easeinout"*/ STR(1073)))
			{
				trans = string_replace(trans, /*"easeinout"*/ STR(1073), /*""*/ STR(0));
				text = text_get({ /*"transitioneaseinout"*/ STR(3083), text_get({ /*"transitionease"*/ STR(3084) + trans }) });
			}
			if (string_contains(trans, /*"easein"*/ STR(1074)))
			{
				trans = string_replace(trans, /*"easein"*/ STR(1074), /*""*/ STR(0));
				text = text_get({ /*"transitioneasein"*/ STR(3085), text_get({ /*"transitionease"*/ STR(3084) + trans }) });
			}
			if (string_contains(trans, /*"easeout"*/ STR(1075)))
			{
				trans = string_replace(trans, /*"easeout"*/ STR(1075), /*""*/ STR(0));
				text = text_get({ /*"transitioneaseout"*/ STR(3086), text_get({ /*"transitionease"*/ STR(3084) + trans }) });
			}
		}
		else
			text = text_get({ /*"transition"*/ STR(1077) + trans });
		
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { /*"frameeditortransition"*/ STR(3087), e_menu_TRANSITION_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TRANSITION), text, ID_menu_transitions, false, DsMap(sVar(transition_texture_small_map)).Value(idVar(global::tl_edit, value).Value(e_value_TRANSITION)) });
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_TRANSITION) == /*"bezier"*/ STR(565) && sReal(setting_advanced_mode) > 0)
		{
			tab_control(self, IntType(208));
			VarType yy = sVar(dy);
			sInt(context_menu_group_temp) = e_context_group_EASE;
			textfield_group_add(self, { /*"frameeditoreaseinx"*/ STR(3088), floor(idVar(global::tl_edit, value).Value(e_value_EASE_IN_X) * IntType(100)), IntType(100), ID_action_tl_frame_ease_in_x, X_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_in_x, null_, 0.5, IntType(0), IntType(100) });
			textfield_group_add(self, { /*"frameeditoreaseiny"*/ STR(3089), floor(idVar(global::tl_edit, value).Value(e_value_EASE_IN_Y) * IntType(100)), IntType(0), ID_action_tl_frame_ease_in_y, Z_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_in_y, null_, 0.5, -no_limit, no_limit });
			draw_textfield_group(self, /*"frameeditoreasein"*/ STR(3090), sVar(dx), yy, ((RealType)sVar(dw) / 2.0) - IntType(8), null_, -no_limit, no_limit, IntType(1), IntType(3), false, true);
			yy += (IntType(40) + label_height);
			textfield_group_add(self, { /*"frameeditoreaseoutx"*/ STR(3091), floor(idVar(global::tl_edit, value).Value(e_value_EASE_OUT_X) * IntType(100)), IntType(0), ID_action_tl_frame_ease_out_x, X_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_out_x, null_, 0.5, IntType(0), IntType(100) });
			textfield_group_add(self, { /*"frameeditoreaseouty"*/ STR(3092), floor(idVar(global::tl_edit, value).Value(e_value_EASE_OUT_Y) * IntType(100)), IntType(100), ID_action_tl_frame_ease_out_y, Z_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_out_y, null_, 0.5, -no_limit, no_limit });
			draw_textfield_group(self, /*"frameeditoreaseout"*/ STR(3093), sVar(dx), yy, ((RealType)sVar(dw) / 2.0) - IntType(8), null_, -no_limit, no_limit, IntType(1), IntType(3), false, true);
			yy += (IntType(40) + label_height);
			if (draw_button_icon(self, { /*"frameeditorlinkeaseinout"*/ STR(3094), sVar(dx), yy, IntType(24), IntType(24), ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link, icons_LINK, null_, false, /*"tooltiplinkeaseinout"*/ STR(3095) }))
				ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link = !ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link;
			if (sVar(context_menu_name) == /*""*/ STR(0))
				sInt(context_menu_group) = sInt(context_menu_group_temp);
			draw_button_icon(self, { /*"frameeditoreasecopy"*/ STR(3096), sVar(dx) + IntType(28), yy, IntType(24), IntType(24), false, icons_COPY, ID_action_group_copy, false, /*"contextmenugroupcopy"*/ STR(1515) });
			draw_button_icon(self, { /*"frameeditoreasepaste"*/ STR(3097), sVar(dx) + (IntType(28) * IntType(2)), yy, IntType(24), IntType(24), false, icons_PASTE, ID_action_group_paste, DsList(sInt(context_group_copy_list)).Value(sInt(context_menu_group)) == null_, /*"contextmenugrouppaste"*/ STR(1516) });
			draw_button_icon(self, { /*"frameeditoreasereset"*/ STR(3098), sVar(dx) + (IntType(28) * IntType(3)), yy, IntType(24), IntType(24), false, icons_RESET, ID_action_group_reset, false, /*"contextmenugroupreset"*/ STR(1517) });
			draw_bezier_graph(self, sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy), (RealType)sVar(dw) / 2.0, sReal(tab_control_h), ArrType::From({ idVar(global::tl_edit, value).Value(e_value_EASE_IN_X), idVar(global::tl_edit, value).Value(e_value_EASE_IN_Y), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_X), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_Y) }), ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link);
			sInt(context_menu_group_temp) = null_;
			tab_next(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"frameeditorvisible"*/ STR(3099), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_VISIBLE), ID_action_tl_frame_visible);
		tab_next(self);
	}
	
	void tab_frame_editor_light(ScopeAny self)
	{
		sInt(context_menu_group_temp) = e_context_group_LIGHT;
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"frameeditorlightspot"*/ STR(3100), null_, e_tl_type_SPOT_LIGHT, idVar(global::tl_edit, type) == e_tl_type_SPOT_LIGHT, ID_action_tl_frame_light_type });
		togglebutton_add(self, { /*"frameeditorlightpoint"*/ STR(3101), null_, e_tl_type_POINT_LIGHT, idVar(global::tl_edit, type) == e_tl_type_POINT_LIGHT, ID_action_tl_frame_light_type });
		draw_togglebutton(self, /*"frameeditorlightlighttype"*/ STR(3102), sVar(dx), sVar(dy));
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"frameeditorlightcolor"*/ STR(3103), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_LIGHT_COLOR), c_white, false, ID_action_tl_frame_light_color);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightsize"*/ STR(3104), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_LIGHT_SIZE), .05, IntType(0), no_limit, IntType(2), .05, ObjType(obj_category, idInt(sVar(tab), light))->tbx_size, ID_action_tl_frame_light_size);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightrange"*/ STR(3105), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_LIGHT_RANGE), (RealType)idVar(global::tl_edit, value).Value(e_value_LIGHT_RANGE) / 100.0, IntType(0), no_limit, IntType(250), IntType(0), ObjType(obj_category, idInt(sVar(tab), light))->tbx_range, ID_action_tl_frame_light_range);
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorlightfadesize"*/ STR(3106), sVar(dx), sVar(dy), sVar(dw), floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_FADE_SIZE) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_fade_size, ID_action_tl_frame_light_fade_size);
		tab_next(self);
		if (ObjType(obj_category, idInt(sVar(tab), light))->has_spotlight)
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorlightspotradius"*/ STR(3107), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_RADIUS), IntType(1), IntType(150), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_spot_radius, ID_action_tl_frame_light_spot_radius);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorlightspotsharpness"*/ STR(3108), sVar(dx), sVar(dy), sVar(dw), floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_SHARPNESS) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_spot_sharpness, ID_action_tl_frame_light_spot_sharpness);
			tab_next(self);
		}
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightstrength"*/ STR(3109), sVar(dx), sVar(dy), dragger_width, floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_STRENGTH) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_strength, ID_action_tl_frame_light_strength);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightspecularstrength"*/ STR(3110), sVar(dx), sVar(dy), dragger_width, floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_SPECULAR_STRENGTH) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_specular_strength, ID_action_tl_frame_light_specular_strength);
		tab_next(self);
		VarType texobj, tex;
		texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
		tex = null_;
		VarType text;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(782) });
		
		if (texobj == null_)
			text = text_get({ /*"listdefault"*/ STR(808), text });
		if (texobj != null_ && idVar(texobj, type) != e_tl_type_CAMERA)
			tex = idVar(texobj, texture);
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { /*"frameeditorlightgobotexture"*/ STR(1419), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ), text, ID_action_tl_frame_texture_light_gobo, false, tex });
		tab_next(self);
		sInt(context_menu_group_temp) = null_;
	}
	
	RealType tab_frame_editor_material(ScopeAny self)
	{
		tab_frame_editor_texture(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditoropacity"*/ STR(3111), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_ALPHA) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_alpha, ID_action_tl_frame_alpha);
		tab_next(self);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_COLOR))
			tab_frame_editor_color(self);
		if (!(sReal(setting_advanced_mode) > 0))
			return IntType(0);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_SURFACE))
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"material_surface"*/ STR(161), DsMap(global::collapse_map).Value(/*"material_surface"*/ STR(161)), null_, true, /*"frameeditorsurface"*/ STR(3112));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"material_surface"*/ STR(161)) > 0)
			{
				tab_collapse_start(self);
				tab_frame_editor_texture_material(self);
				if (sVar(project_render_material_maps) > 0)
					tab_frame_editor_tex_normal(self);
				tab_collapse_end(self);
			}
		}
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_SUBSURFACE))
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"material_subsurface"*/ STR(162), DsMap(global::collapse_map).Value(/*"material_subsurface"*/ STR(162)), null_, true, /*"frameeditorsubsurface"*/ STR(3113));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"material_subsurface"*/ STR(162)) > 0)
			{
				tab_collapse_start(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorsubsurfaceradius"*/ STR(3114), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SUBSURFACE), .1, IntType(0), no_limit, IntType(0), 0.01, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface, ID_action_tl_frame_subsurface);
				tab_next(self);
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusred"*/ STR(3115), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_RED) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_red, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(X_) });
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusgreen"*/ STR(3116), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_GREEN) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_green, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(Y_) });
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusblue"*/ STR(3117), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_BLUE) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_blue, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(Z_) });
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"frameeditorsubsurfaceradiusrgb"*/ STR(3118), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), IntType(100), .1, false, true, IntType(3));
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorsubsurfacecolor"*/ STR(3119), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_COLOR), c_white, false, ID_action_tl_frame_subsurface_color);
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		if (type_has_wind(idVar(global::tl_edit, type)) && (idVar(global::tl_edit, wind) > 0 || idVar(global::tl_edit, wind_terrain) > 0))
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorwindinfluence"*/ STR(3120), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_WIND_INFLUENCE) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_wind_influence, ID_action_tl_frame_wind_influence);
			tab_next(self);
		}
		return 0.0;
	}
	
	void tab_frame_editor_particles(ScopeAny self)
	{
		VarType text;
		tab_control_checkbox(self);
		draw_switch(self, /*"frameeditorparticlesspawn"*/ STR(3121), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_SPAWN), ID_action_tl_frame_spawn);
		tab_next(self);
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlesfreeze"*/ STR(3122), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FREEZE), ID_action_tl_frame_freeze);
			tab_next(self);
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlesclear"*/ STR(3123), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CLEAR), ID_action_tl_frame_clear);
			tab_next(self);
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlescustomseed"*/ STR(3124), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CUSTOM_SEED), ID_action_tl_frame_custom_seed);
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CUSTOM_SEED) > 0)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesseed"*/ STR(3125), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SEED), 0.1, IntType(0), IntType(32000), IntType(0), IntType(1), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_seed, ID_action_tl_frame_seed);
				tab_next(self);
			}
		}
		if (idVar(global::tl_edit, value).Value(e_value_ATTRACTOR) != null_)
			text = idVar(idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), display_name);
		else
			text = text_get({ /*"listnone"*/ STR(782) });
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditorparticlesattractor"*/ STR(3126), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), text, ID_action_tl_frame_attractor });
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_ATTRACTOR) > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorparticlesforce"*/ STR(3127), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force, ID_action_tl_frame_force);
			tab_next(self);
			if (idVar(idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), type) == e_tl_type_PATH)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesforcedirectional"*/ STR(3128), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE_DIRECTIONAL), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force_directional, ID_action_tl_frame_force_directional);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesforcevortex"*/ STR(3129), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE_VORTEX), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force_vortex, ID_action_tl_frame_force_vortex);
				tab_next(self);
			}
		}
	}
	
}
