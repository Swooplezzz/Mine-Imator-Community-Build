/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.21 19:05:35 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType tab_frame_editor_item(ScopeAny self)
	{
		if (idVar(global::tl_edit, temp) == null_ || idVar(global::tl_edit, type) != e_tl_type_ITEM)
			return IntType(0);
		VarType res = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
		if (res == null_)
			res = idVar(idVar(global::tl_edit, temp), item_tex);
		if (!res_is_ready(res))
			res = global::mc_res;
		tab_control_switch(self);
		draw_button_collapse(self, /*"itemslot"*/ STR(166), DsMap(global::collapse_map).Value(/*"itemslot"*/ STR(166)), ID_action_tl_frame_custom_item_slot, idVar(global::tl_edit, value).Value(e_value_CUSTOM_ITEM_SLOT), /*"frameeditoritemcustomitemslot"*/ STR(3169));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_CUSTOM_ITEM_SLOT) > 0 && DsMap(global::collapse_map).Value(/*"itemslot"*/ STR(166)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditoritemitemslot"*/ STR(3170), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_ITEM_SLOT), .1, IntType(0), no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), item))->item_slot, ID_action_tl_frame_item_slot);
			tab_next(self);
			RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
			tab_control(self, IntType(200));
			draw_texture_picker(self, idVar(global::tl_edit, value).Value(e_value_ITEM_SLOT), idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), IntType(200), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), ObjType(obj_category, idInt(sVar(tab), item))->item_scroll, ID_action_tl_frame_item_slot);
			tab_next(self);
			tab_collapse_end(self);
		}
		return 0.0;
	}
	
	void tab_frame_editor_keyframe(ScopeAny self)
	{
		VarType trans, text;
		trans = idVar(global::tl_edit, value).Value(e_value_TRANSITION);
		if (trans != /*"linear"*/ STR(574) && trans != /*"instant"*/ STR(575) && trans != /*"bezier"*/ STR(576))
		{
			if (string_contains(trans, /*"easeinout"*/ STR(609)))
			{
				trans = string_replace(trans, /*"easeinout"*/ STR(609), /*""*/ STR(0));
				text = text_get({ /*"transitioneaseinout"*/ STR(3171), text_get({ /*"transitionease"*/ STR(3172) + trans }) });
			}
			if (string_contains(trans, /*"easein"*/ STR(608)))
			{
				trans = string_replace(trans, /*"easein"*/ STR(608), /*""*/ STR(0));
				text = text_get({ /*"transitioneasein"*/ STR(3173), text_get({ /*"transitionease"*/ STR(3172) + trans }) });
			}
			if (string_contains(trans, /*"easeout"*/ STR(610)))
			{
				trans = string_replace(trans, /*"easeout"*/ STR(610), /*""*/ STR(0));
				text = text_get({ /*"transitioneaseout"*/ STR(3174), text_get({ /*"transitionease"*/ STR(3172) + trans }) });
			}
		}
		else
			text = text_get({ /*"transition"*/ STR(1098) + trans });
		
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { /*"frameeditortransition"*/ STR(1537), e_menu_TRANSITION_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TRANSITION), text, ID_menu_transitions, false, DsMap(sVar(transition_texture_small_map)).Value(idVar(global::tl_edit, value).Value(e_value_TRANSITION)) });
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_TRANSITION) == /*"bezier"*/ STR(576) && sReal(setting_advanced_mode) > 0)
		{
			tab_control(self, IntType(208));
			VarType yy = sVar(dy);
			sInt(context_menu_group_temp) = e_context_group_EASE;
			textfield_group_add(self, { /*"frameeditoreaseinx"*/ STR(3175), floor(idVar(global::tl_edit, value).Value(e_value_EASE_IN_X) * IntType(100)), IntType(100), ID_action_tl_frame_ease_in_x, X_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_in_x, null_, 0.5, IntType(0), IntType(100) });
			textfield_group_add(self, { /*"frameeditoreaseiny"*/ STR(3176), floor(idVar(global::tl_edit, value).Value(e_value_EASE_IN_Y) * IntType(100)), IntType(0), ID_action_tl_frame_ease_in_y, Z_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_in_y, null_, 0.5, -no_limit, no_limit });
			draw_textfield_group(self, /*"frameeditoreasein"*/ STR(3177), sVar(dx), yy, ((RealType)sVar(dw) / 2.0) - IntType(8), null_, -no_limit, no_limit, IntType(1), IntType(3), false, true);
			yy += (IntType(40) + label_height);
			textfield_group_add(self, { /*"frameeditoreaseoutx"*/ STR(3178), floor(idVar(global::tl_edit, value).Value(e_value_EASE_OUT_X) * IntType(100)), IntType(0), ID_action_tl_frame_ease_out_x, X_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_out_x, null_, 0.5, IntType(0), IntType(100) });
			textfield_group_add(self, { /*"frameeditoreaseouty"*/ STR(3179), floor(idVar(global::tl_edit, value).Value(e_value_EASE_OUT_Y) * IntType(100)), IntType(100), ID_action_tl_frame_ease_out_y, Z_, ObjType(obj_category, idInt(sVar(tab), keyframe))->tbx_ease_out_y, null_, 0.5, -no_limit, no_limit });
			draw_textfield_group(self, /*"frameeditoreaseout"*/ STR(3180), sVar(dx), yy, ((RealType)sVar(dw) / 2.0) - IntType(8), null_, -no_limit, no_limit, IntType(1), IntType(3), false, true);
			yy += (IntType(40) + label_height);
			if (draw_button_icon(self, { /*"frameeditorlinkeaseinout"*/ STR(3181), sVar(dx), yy, IntType(24), IntType(24), ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link, icons_LINK, null_, false, /*"tooltiplinkeaseinout"*/ STR(3182) }))
				ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link = !ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link;
			if (sVar(context_menu_name) == /*""*/ STR(0))
				sInt(context_menu_group) = sInt(context_menu_group_temp);
			draw_button_icon(self, { /*"frameeditoreasecopy"*/ STR(3183), sVar(dx) + IntType(28), yy, IntType(24), IntType(24), false, icons_COPY, ID_action_group_copy, false, /*"contextmenugroupcopy"*/ STR(1547) });
			draw_button_icon(self, { /*"frameeditoreasepaste"*/ STR(3184), sVar(dx) + (IntType(28) * IntType(2)), yy, IntType(24), IntType(24), false, icons_PASTE, ID_action_group_paste, DsList(sInt(context_group_copy_list)).Value(sInt(context_menu_group)) == null_, /*"contextmenugrouppaste"*/ STR(1548) });
			draw_button_icon(self, { /*"frameeditoreasereset"*/ STR(3185), sVar(dx) + (IntType(28) * IntType(3)), yy, IntType(24), IntType(24), false, icons_RESET, ID_action_group_reset, false, /*"contextmenugroupreset"*/ STR(1549) });
			draw_bezier_graph(self, sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy), (RealType)sVar(dw) / 2.0, sReal(tab_control_h), ArrType::From({ idVar(global::tl_edit, value).Value(e_value_EASE_IN_X), idVar(global::tl_edit, value).Value(e_value_EASE_IN_Y), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_X), idVar(global::tl_edit, value).Value(e_value_EASE_OUT_Y) }), ObjType(obj_category, idInt(sVar(tab), keyframe))->ease_link);
			sInt(context_menu_group_temp) = null_;
			tab_next(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"frameeditorvisible"*/ STR(3186), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_VISIBLE), ID_action_tl_frame_visible);
		tab_next(self);
	}
	
	void tab_frame_editor_light(ScopeAny self)
	{
		sInt(context_menu_group_temp) = e_context_group_LIGHT;
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"frameeditorlightspot"*/ STR(3187), null_, e_tl_type_SPOT_LIGHT, idVar(global::tl_edit, type) == e_tl_type_SPOT_LIGHT, ID_action_tl_frame_light_type });
		togglebutton_add(self, { /*"frameeditorlightpoint"*/ STR(3188), null_, e_tl_type_POINT_LIGHT, idVar(global::tl_edit, type) == e_tl_type_POINT_LIGHT, ID_action_tl_frame_light_type });
		draw_togglebutton(self, /*"frameeditorlightlighttype"*/ STR(3189), sVar(dx), sVar(dy));
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"frameeditorlightcolor"*/ STR(3190), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_LIGHT_COLOR), c_white, false, ID_action_tl_frame_light_color);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightsize"*/ STR(3191), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_LIGHT_SIZE), .05, IntType(0), no_limit, IntType(2), .05, ObjType(obj_category, idInt(sVar(tab), light))->tbx_size, ID_action_tl_frame_light_size);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightrange"*/ STR(3192), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_LIGHT_RANGE), (RealType)idVar(global::tl_edit, value).Value(e_value_LIGHT_RANGE) / 100.0, IntType(0), no_limit, IntType(250), IntType(0), ObjType(obj_category, idInt(sVar(tab), light))->tbx_range, ID_action_tl_frame_light_range);
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorlightfadesize"*/ STR(3193), sVar(dx), sVar(dy), sVar(dw), floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_FADE_SIZE) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_fade_size, ID_action_tl_frame_light_fade_size);
		tab_next(self);
		if (ObjType(obj_category, idInt(sVar(tab), light))->has_spotlight)
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorlightspotradius"*/ STR(3194), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_RADIUS), IntType(1), IntType(150), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_spot_radius, ID_action_tl_frame_light_spot_radius);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorlightspotsharpness"*/ STR(3195), sVar(dx), sVar(dy), sVar(dw), floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_SPOT_SHARPNESS) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_spot_sharpness, ID_action_tl_frame_light_spot_sharpness);
			tab_next(self);
		}
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightstrength"*/ STR(3196), sVar(dx), sVar(dy), dragger_width, floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_STRENGTH) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_strength, ID_action_tl_frame_light_strength);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorlightspecularstrength"*/ STR(3197), sVar(dx), sVar(dy), dragger_width, floor(idVar(global::tl_edit, value).Value(e_value_LIGHT_SPECULAR_STRENGTH) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), light))->tbx_specular_strength, ID_action_tl_frame_light_specular_strength);
		tab_next(self);
		VarType texobj, tex, text;
		texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
		tex = null_;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(784) });
		
		if (texobj == null_)
			text = text_get({ /*"listdefault"*/ STR(809), text });
		if (texobj != null_ && idVar(texobj, type) != e_tl_type_CAMERA)
			tex = idVar(texobj, texture);
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { /*"frameeditorlightgobotexture"*/ STR(1439), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ), text, ID_action_tl_frame_texture_light_gobo, false, tex });
		tab_next(self);
		sInt(context_menu_group_temp) = null_;
	}
	
	RealType tab_frame_editor_material(ScopeAny self)
	{
		tab_frame_editor_texture(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditoropacity"*/ STR(3198), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_ALPHA) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_alpha, ID_action_tl_frame_alpha);
		tab_next(self);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_COLOR))
			tab_frame_editor_color(self);
		if (!(sReal(setting_advanced_mode) > 0))
			return IntType(0);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_SURFACE))
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"material_surface"*/ STR(168), DsMap(global::collapse_map).Value(/*"material_surface"*/ STR(168)), null_, true, /*"frameeditorsurface"*/ STR(3199));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"material_surface"*/ STR(168)) > 0)
			{
				tab_collapse_start(self);
				tab_frame_editor_texture_material(self);
				if (sVar(project_render_material_maps) > 0)
					tab_frame_editor_tex_normal(self);
				tab_collapse_end(self);
			}
		}
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_SUBSURFACE))
		{
			tab_control_switch(self);
			draw_button_collapse(self, /*"material_subsurface"*/ STR(169), DsMap(global::collapse_map).Value(/*"material_subsurface"*/ STR(169)), null_, true, /*"frameeditorsubsurface"*/ STR(3200));
			tab_next(self);
			if (DsMap(global::collapse_map).Value(/*"material_subsurface"*/ STR(169)) > 0)
			{
				tab_collapse_start(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorsubsurfaceradius"*/ STR(3201), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SUBSURFACE), .1, IntType(0), no_limit, IntType(0), 0.01, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface, ID_action_tl_frame_subsurface);
				tab_next(self);
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusred"*/ STR(3202), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_RED) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_red, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(X_) });
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusgreen"*/ STR(3203), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_GREEN) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_green, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(Y_) });
				textfield_group_add(self, { /*"frameeditorsubsurfaceradiusblue"*/ STR(3204), round(idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_RADIUS_BLUE) * IntType(100)), IntType(100), ID_action_tl_frame_subsurface_blue, X_, ObjType(obj_category, idInt(sVar(tab), material))->tbx_subsurface_radius.Real(Z_) });
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"frameeditorsubsurfaceradiusrgb"*/ STR(3205), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(0), IntType(100), .1, false, true, IntType(3));
				tab_next(self);
				tab_control_color(self);
				draw_button_color(self, /*"frameeditorsubsurfacecolor"*/ STR(3206), sVar(dx), sVar(dy), sVar(dw), idVar(global::tl_edit, value).Value(e_value_SUBSURFACE_COLOR), c_white, false, ID_action_tl_frame_subsurface_color);
				tab_next(self);
				tab_collapse_end(self);
			}
		}
		if (type_has_wind(idVar(global::tl_edit, type)) && (idVar(global::tl_edit, wind) > 0 || idVar(global::tl_edit, wind_terrain) > 0))
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorwindinfluence"*/ STR(3207), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_WIND_INFLUENCE) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_wind_influence, ID_action_tl_frame_wind_influence);
			tab_next(self);
		}
		return 0.0;
	}
	
	void tab_frame_editor_particles(ScopeAny self)
	{
		VarType text;
		tab_control_checkbox(self);
		draw_switch(self, /*"frameeditorparticlesspawn"*/ STR(3208), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_SPAWN), ID_action_tl_frame_spawn);
		tab_next(self);
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlesfreeze"*/ STR(3209), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_FREEZE), ID_action_tl_frame_freeze);
			tab_next(self);
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlesclear"*/ STR(3210), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CLEAR), ID_action_tl_frame_clear);
			tab_next(self);
			tab_control_checkbox(self);
			draw_switch(self, /*"frameeditorparticlescustomseed"*/ STR(3211), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_CUSTOM_SEED), ID_action_tl_frame_custom_seed);
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_CUSTOM_SEED) > 0)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesseed"*/ STR(3212), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SEED), 0.1, IntType(0), IntType(32000), IntType(0), IntType(1), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_seed, ID_action_tl_frame_seed);
				tab_next(self);
			}
		}
		if (idVar(global::tl_edit, value).Value(e_value_ATTRACTOR) != null_)
			text = idVar(idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), display_name);
		else
			text = text_get({ /*"listnone"*/ STR(784) });
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditorparticlesattractor"*/ STR(3213), e_menu_TIMELINE, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), text, ID_action_tl_frame_attractor });
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_ATTRACTOR) > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorparticlesforce"*/ STR(3214), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force, ID_action_tl_frame_force);
			tab_next(self);
			if (idVar(idVar(global::tl_edit, value).Value(e_value_ATTRACTOR), type) == e_tl_type_PATH)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesforcedirectional"*/ STR(3215), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE_DIRECTIONAL), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force_directional, ID_action_tl_frame_force_directional);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorparticlesforcevortex"*/ STR(3216), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_FORCE_VORTEX), 1.0 / 50.0, -no_limit, no_limit, IntType(1), IntType(0), ObjType(obj_category, idVar(sVar(tab), particles))->tbx_force_vortex, ID_action_tl_frame_force_vortex);
				tab_next(self);
			}
		}
	}
	
	RealType tab_frame_editor_path(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_POS) || idVar(global::tl_edit, type) == e_tl_type_PATH || idVar(global::tl_edit, type) == e_tl_type_PATH_POINT)
			return IntType(0);
		tab_control_switch(self);
		draw_button_collapse(self, /*"follow_path"*/ STR(146), DsMap(global::collapse_map).Value(/*"follow_path"*/ STR(146)), null_, true, /*"frameeditorfollowpath"*/ STR(3217));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"follow_path"*/ STR(146)) > 0)
		{
			VarType text;
			tab_collapse_start(self);
			if (idVar(global::tl_edit, value).Value(e_value_PATH_OBJ) != null_)
				text = idVar(idVar(global::tl_edit, value).Value(e_value_PATH_OBJ), display_name);
			else
				text = text_get({ /*"listnone"*/ STR(784) });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"frameeditorpath"*/ STR(1416), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_PATH_OBJ), text, ID_action_tl_frame_path });
			tab_next(self);
			if (idVar(global::tl_edit, value).Value(e_value_PATH_OBJ) > 0)
			{
				sStr(context_menu_value_name) = /*"pathoffset"*/ STR(1538);
				tab_control_dragger(self);
				draw_dragger(self, /*"frameeditorpathoffset"*/ STR(3218), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_PATH_OFFSET), .1, -no_limit, no_limit, IntType(0), 0.01, ObjType(obj_category, idInt(sVar(tab), constraints))->tbx_path_offset, ID_action_tl_frame_path_offset);
				tab_next(self);
				sStr(context_menu_value_name) = /*""*/ STR(0);
			}
			tab_collapse_end(self);
		}
		return 0.0;
	}
	
	RealType tab_frame_editor_path_point(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_PATH_POINT))
			return IntType(0);
		RealType snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : 0.1);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorpathpointangle"*/ STR(3219), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_PATH_POINT_ANGLE), .1, -no_limit, no_limit, IntType(0), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_path_point_angle, ID_action_tl_frame_path_point_angle);
		tab_next(self);
		snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorpathpointscale"*/ STR(3220), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_PATH_POINT_SCALE), .1, IntType(0), no_limit, IntType(1), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_path_point_scale, ID_action_tl_frame_path_point_scale);
		tab_next(self);
		return 0.0;
	}
	
	RealType tab_frame_editor_position(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_POS))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_POSITION;
		tab_frame_editor_buttons(self);
		draw_label(self, { text_get({ /*"frameeditorposition"*/ STR(3221) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(26);
		RealType mul, snapval;
		VecType def;
		mul = max({ IntType(1), point3D_distance(idVar(global::tl_edit, world_pos), global::cam_from) }) / 100.0;
		if (idVar(global::tl_edit, part_of) == null_ || idVar(global::tl_edit, type) == e_tl_type_CAMERA)
			def = point3D(IntType(0), IntType(0), IntType(0));
		else
			def = point3D(idArr(global::tl_edit, value_default).Value(e_value_POS_X), idArr(global::tl_edit, value_default).Value(e_value_POS_Y), idArr(global::tl_edit, value_default).Value(e_value_POS_Z));
		
		snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_position) : snap_min);
		global::axis_edit = X_;
		textfield_group_add(self, { /*"frameeditorpositionx"*/ STR(3222), idVar(global::tl_edit, value).Value(e_value_POS_X), def.Real(X_), ID_action_tl_frame_pos, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_pos_x, null_, mul / idArr(global::tl_edit, value_inherit).Value(e_value_SCA_X) });
		global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
		textfield_group_add(self, { /*"frameeditorpositiony"*/ STR(3223), idVar(global::tl_edit, value).Value(e_value_POS_X + global::axis_edit), def.Real(X_ + global::axis_edit), ID_action_tl_frame_pos, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_pos_y, null_, mul / idArr(global::tl_edit, value_inherit).Value(e_value_SCA_X + global::axis_edit) });
		global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
		textfield_group_add(self, { /*"frameeditorpositionz"*/ STR(3224), idVar(global::tl_edit, value).Value(e_value_POS_X + global::axis_edit), def.Real(X_ + global::axis_edit), ID_action_tl_frame_pos, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_pos_z, null_, mul / idArr(global::tl_edit, value_inherit).Value(e_value_SCA_X + global::axis_edit) });
		tab_control_textfield_group(self, false);
		draw_textfield_group(self, /*"frameeditorposition"*/ STR(3221), sVar(dx), sVar(dy), sVar(dw), null_, -no_limit, no_limit, snapval, false, true, IntType(1));
		tab_next(self);
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	RealType tab_frame_editor_rotation(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_ROT))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_ROTATION;
		tab_frame_editor_buttons(self);
		draw_label(self, { text_get({ /*"frameeditorrotation"*/ STR(3225) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(26);
		RealType snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : snap_min);
		VecType def;
		if (idVar(global::tl_edit, type) == e_tl_type_CAMERA)
			def = point3D(IntType(0), IntType(0), IntType(0));
		else
			def = point3D(idArr(global::tl_edit, value_default).Value(e_value_ROT_X), idArr(global::tl_edit, value_default).Value(e_value_ROT_Y), idArr(global::tl_edit, value_default).Value(e_value_ROT_Z));
		
		if (!(global::_app->panel_compact > 0))
		{
			tab_control_wheel(self);
			global::axis_edit = X_;
			draw_wheel(self, /*"frameeditorrotationxwheel"*/ STR(3226), floor(sVar(dx) + (RealType)sVar(dw) / 6.0), sVar(dy) + IntType(24), global::c_axisred, idVar(global::tl_edit, value).Value(e_value_ROT_X), -no_limit, no_limit, def.Real(X_), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_x, ID_action_tl_frame_rot);
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
			draw_wheel(self, /*"frameeditorrotationywheel"*/ STR(3227), floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy) + IntType(24), global::c_axisgreen, idVar(global::tl_edit, value).Value(e_value_ROT_X + global::axis_edit), -no_limit, no_limit, def.Real(X_ + global::axis_edit), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_y, ID_action_tl_frame_rot);
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
			draw_wheel(self, /*"frameeditorrotationzwheel"*/ STR(3228), floor(sVar(dx) + sVar(dw) - (RealType)sVar(dw) / 6.0), sVar(dy) + IntType(24), global::c_axisblue, idVar(global::tl_edit, value).Value(e_value_ROT_X + global::axis_edit), -no_limit, no_limit, def.Real(X_ + global::axis_edit), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_z, ID_action_tl_frame_rot);
			tab_next(self);
		}
		global::axis_edit = X_;
		textfield_group_add(self, { /*"frameeditorrotationx"*/ STR(3229), idVar(global::tl_edit, value).Value(e_value_ROT_X), def.Real(X_), ID_action_tl_frame_rot, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_x });
		global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
		textfield_group_add(self, { /*"frameeditorrotationy"*/ STR(3230), idVar(global::tl_edit, value).Value(e_value_ROT_X + global::axis_edit), def.Real(X_ + global::axis_edit), ID_action_tl_frame_rot, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_y });
		global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
		textfield_group_add(self, { /*"frameeditorrotationz"*/ STR(3231), idVar(global::tl_edit, value).Value(e_value_ROT_X + global::axis_edit), def.Real(X_ + global::axis_edit), ID_action_tl_frame_rot, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_rot_z });
		tab_control_textfield_group(self, false);
		draw_textfield_group(self, /*"frameeditorrotation"*/ STR(3225), sVar(dx), sVar(dy), sVar(dw), 0.1, -no_limit, no_limit, snapval, false, true, IntType(1));
		tab_next(self);
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	RealType tab_frame_editor_scale(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_SCA))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_SCALE;
		tab_frame_editor_buttons(self);
		draw_label(self, { text_get({ /*"frameeditorscale"*/ STR(3232) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(26);
		RealType snapval;
		IntType script;
		snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
		script = ((ObjType(obj_category, idInt(sVar(tab), transform))->scale_all > 0) ? ID_action_tl_frame_scale_all_axis : ID_action_tl_frame_scale);
		if (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorscalexyz"*/ STR(3233), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SCA_X), max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X) / 50.0 }), snap_min, no_limit, IntType(1), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_x, script);
			tab_next(self);
		}
		else
		{
			textfield_group_add(self, { /*"frameeditorscalex"*/ STR(3234), idVar(global::tl_edit, value).Value(e_value_SCA_X), IntType(1), script, X_, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_x, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X) / 50.0 }) });
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
			textfield_group_add(self, { /*"frameeditorscaley"*/ STR(3235), idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit), IntType(1), script, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_y, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit) / 50.0 }) });
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
			textfield_group_add(self, { /*"frameeditorscalez"*/ STR(3236), idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit), IntType(1), script, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_z, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit) / 50.0 }) });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"frameeditorscale"*/ STR(3232), sVar(dx), sVar(dy), sVar(dw), 0.1, snap_min, no_limit, snapval, false, true, IntType(3));
			tab_next(self);
		}
		
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	void tab_frame_editor_sound(ScopeAny self)
	{
		VarType text;
		if (idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ) != null_)
			text = idVar(idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ), display_name);
		else
			text = text_get({ /*"listnone"*/ STR(784) });
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditorsoundfile"*/ STR(1440), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ), text, ID_action_tl_frame_sound_obj });
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorsoundvolume"*/ STR(3237), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_SOUND_VOLUME) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_volume, ID_action_tl_frame_sound_volume);
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorsoundpitch"*/ STR(3238), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_SOUND_PITCH) * IntType(100)), IntType(50), IntType(200), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_pitch, ID_action_tl_frame_sound_pitch);
		tab_next(self);
		textfield_group_add(self, { /*"frameeditorsoundstart"*/ STR(3239), idVar(global::tl_edit, value).Value(e_value_SOUND_START), idArr(global::tl_edit, value_default).Value(e_value_SOUND_START), ID_action_tl_frame_sound_start, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), sound))->tbx_start, null_, max({ 0.01, 0.005 * abs(idVar(global::tl_edit, value).Value(e_value_SOUND_START)) }), IntType(0), no_limit });
		textfield_group_add(self, { /*"frameeditorsoundend"*/ STR(3240), idVar(global::tl_edit, value).Value(e_value_SOUND_END), idArr(global::tl_edit, value_default).Value(e_value_SOUND_END), ID_action_tl_frame_sound_end, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), sound))->tbx_end, null_, max({ 0.01, 0.005 * abs(idVar(global::tl_edit, value).Value(e_value_SOUND_END)) }), -no_limit, no_limit });
		tab_control_textfield(self, true);
		draw_textfield_group(self, /*"frameeditorsoundtime"*/ STR(3241), sVar(dx), sVar(dy), sVar(dw), max({ 0.01, 0.005 * abs(idVar(global::tl_edit, value).Value(e_value_SOUND_END)) }), -no_limit, no_limit, IntType(0), true);
		tab_next(self);
	}
	
	RealType tab_frame_editor_text(ScopeAny self)
	{
		if (idVar(global::tl_edit, temp) == null_ || idVar(global::tl_edit, type) != e_tl_type_TEXT)
			return IntType(0);
		VarType text;
		if (idVar(global::tl_edit, value).Value(e_value_TEXT_FONT) == null_)
			text = text_get({ /*"listdefault"*/ STR(809), idVar(idVar(idVar(global::tl_edit, temp), text_font), display_name) });
		else
			text = idVar(idVar(global::tl_edit, value).Value(e_value_TEXT_FONT), display_name);
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditortextfont"*/ STR(1441), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_TEXT_FONT), text, ID_action_tl_frame_text_font });
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"frameeditortextaa"*/ STR(3242), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_TEXT_AA), ID_action_tl_frame_text_aa, /*"frameeditortextaatip"*/ STR(3243));
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"textoutline"*/ STR(170), DsMap(global::collapse_map).Value(/*"textoutline"*/ STR(170)), ID_action_tl_frame_text_outline, idVar(global::tl_edit, value).Value(e_value_TEXT_OUTLINE), /*"frameeditortextoutline"*/ STR(3244));
		tab_next(self);
		if (idVar(global::tl_edit, value).Value(e_value_TEXT_OUTLINE) > 0 && DsMap(global::collapse_map).Value(/*"textoutline"*/ STR(170)) > 0)
		{
			tab_collapse_start(self);
			tab_control_color(self);
			draw_button_color(self, /*"frameeditortextoutlinecolor"*/ STR(3245), sVar(dx), sVar(dy), floor((RealType)sVar(dw) / 2.0), idVar(global::tl_edit, value).Value(e_value_TEXT_OUTLINE_COLOR), idArr(global::tl_edit, value_default).Value(e_value_TEXT_OUTLINE_COLOR), false, ID_action_tl_frame_text_outline_color);
			tab_next(self);
			tab_collapse_end(self);
		}
		sVar(dy) += IntType(20);
		draw_label(self, { text_get({ /*"frameeditortextalignment"*/ STR(3246) }) + /*":"*/ STR(785), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		VarType dwold, dxold;
		dwold = sVar(dw);
		dxold = sVar(dx);
		sVar(dw) = floor((RealType)sVar(dw) / 2.0 - IntType(4));
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"frameeditortextleft"*/ STR(3247), icons_TEXT_ALIGN_LEFT, /*"left"*/ STR(203), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"left"*/ STR(203), ID_action_tl_frame_text_halign });
		togglebutton_add(self, { /*"frameeditortextcenter"*/ STR(3248), icons_TEXT_ALIGN_CENTER, /*"center"*/ STR(1460), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"center"*/ STR(1460), ID_action_tl_frame_text_halign });
		togglebutton_add(self, { /*"frameeditortextright"*/ STR(3249), icons_TEXT_ALIGN_RIGHT, /*"right"*/ STR(204), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"right"*/ STR(204), ID_action_tl_frame_text_halign });
		draw_togglebutton(self, /*"frameeditortexthalign"*/ STR(3250), sVar(dx), sVar(dy), false);
		sVar(dx) += (sVar(dw) + IntType(8));
		togglebutton_add(self, { /*"frameeditortexttop"*/ STR(3251), icons_ALIGN_TOP, /*"top"*/ STR(202), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"top"*/ STR(202), ID_action_tl_frame_text_valign });
		togglebutton_add(self, { /*"frameeditortextcenter"*/ STR(3248), icons_ALIGN_MIDDLE, /*"center"*/ STR(1460), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"center"*/ STR(1460), ID_action_tl_frame_text_valign });
		togglebutton_add(self, { /*"frameeditortextbottom"*/ STR(3252), icons_ALIGN_BOTTOM, /*"bottom"*/ STR(201), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"bottom"*/ STR(201), ID_action_tl_frame_text_valign });
		draw_togglebutton(self, /*"frameeditortextvalign"*/ STR(3253), sVar(dx), sVar(dy), false);
		tab_next(self);
		sVar(dw) = dwold;
		sVar(dx) = dxold;
		tab_control_textfield(self, true, IntType(76));
		ObjType(obj_textbox, idInt(idVar(sVar(tab), text), tbx_text))->text = idVar(global::tl_edit, value).Value(e_value_TEXT);
		draw_textfield(self, /*"timelineeditortext"*/ STR(3254), sVar(dx), sVar(dy), sVar(dw), IntType(76), idInt(idVar(sVar(tab), text), tbx_text), ID_action_tl_frame_text, idVar(global::tl_edit, text), /*"top"*/ STR(202));
		tab_next(self);
		return 0.0;
	}
	
	RealType tab_frame_editor_texture(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE))
			return IntType(0);
		VarType texobj, tex;
		StringType name;
		tex = null_;
		name = /*""*/ STR(0);
		if (idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3255) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"tex"*/ STR(2483);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
						tex = temp_get_model_tex_preview(self, texobj, modelfile);
					}
					
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktex"*/ STR(1429);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
					
					tex = idInt(texobj, block_preview_texture);
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtex"*/ STR(1432);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(texobj, texture);
					break;
				}
				
				case e_tl_type_TEXT:
				{
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetex"*/ STR(1435);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
					
					if (texobj != null_ && idVar(texobj, type) != e_tl_type_CAMERA)
						tex = idVar(texobj, texture);
					break;
				}
			}
			
		}
		if (idVar(global::tl_edit, type) == e_tl_type_PATH)
		{
			name = /*"frameeditorshapetex"*/ STR(1435);
			texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
			if (texobj == null_)
				tex = ID_spr_shape;
			else
				tex = idVar(texobj, texture);
			
		}
		if (name == /*""*/ STR(0))
			return IntType(0);
		VarType text;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(784) });
		
		if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ) == null_)
			text = text_get({ /*"listdefault"*/ STR(809), text });
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ), text, ID_action_tl_frame_texture_obj, false, tex });
		tab_next(self);
		return 0.0;
	}
	
	void tab_frame_editor_texture_material(ScopeAny self)
	{
		VarType texobj, tex;
		StringType name;
		BoolType sliders;
		tex = null_;
		sliders = false;
		name = /*""*/ STR(0);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE) && idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3255) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"texmaterial"*/ STR(3256);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
						tex = temp_get_model_tex_material_preview(self, texobj, modelfile);
					}
					
					if (texobj == global::mc_res || texobj == null_)
						sliders = true;
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktexmaterial"*/ STR(1430);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
					
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (texobj == global::mc_res)
						sliders = true;
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtexmaterial"*/ STR(1433);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_material);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(texobj, texture);
					if (texobj == global::mc_res)
						sliders = true;
					break;
				}
				
				case e_tl_type_TEXT:
				{
					sliders = true;
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetexmaterial"*/ STR(1436);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
					
					if (texobj != null_)
						tex = idVar(texobj, texture);
					if (texobj == null_)
						sliders = true;
					break;
				}
			}
			
			if (idVar(global::tl_edit, type) == e_tl_type_PATH)
			{
				name = /*"frameeditorshapetexmaterial"*/ STR(1436);
				texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ);
				if (texobj == null_)
					tex = ID_spr_default_material;
				else
					tex = idVar(texobj, texture);
				
				if (texobj == null_)
					sliders = true;
			}
			if (name != /*""*/ STR(0))
			{
				VarType text;
				if (texobj != null_)
					text = idVar(texobj, display_name);
				else
					text = text_get({ /*"listnone"*/ STR(784) });
				
				if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ) == null_)
					text = text_get({ /*"listdefault"*/ STR(809), text });
				if (sVar(project_render_material_maps) > 0)
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ), text, ID_action_tl_frame_texture_material_obj, false, tex });
					tab_next(self);
				}
			}
		}
		else
			sliders = true;
		
		if (sliders)
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorroughness"*/ STR(3257), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_ROUGHNESS) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_roughness, ID_action_tl_frame_roughness);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditormetallic"*/ STR(3258), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_METALLIC) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_metallic, ID_action_tl_frame_metallic);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditoremissive"*/ STR(3259), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_EMISSIVE) * IntType(100)), .1, IntType(0), no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_emissive, ID_action_tl_frame_emissive);
			tab_next(self);
		}
	}
	
	RealType tab_frame_editor_tex_normal(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE))
			return IntType(0);
		VarType texobj, tex;
		StringType name;
		tex = null_;
		name = /*""*/ STR(0);
		if (idVar(global::tl_edit, temp) == null_)
			return IntType(0);
		if (idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3255) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"texnormal"*/ STR(3260);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
						tex = temp_get_model_tex_normal_preview(self, texobj, modelfile);
					}
					
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktexnormal"*/ STR(1431);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
					
					tex = idInt(texobj, block_preview_texture);
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtexnormal"*/ STR(1434);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_normal);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(texobj, texture);
					break;
				}
				
				case e_tl_type_TEXT:
				{
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetexnormal"*/ STR(1437);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
					
					if (texobj != null_)
						tex = idVar(texobj, texture);
					break;
				}
			}
			
		}
		if (idVar(global::tl_edit, type) == e_tl_type_PATH)
		{
			name = /*"frameeditorshapetexnormal"*/ STR(1437);
			texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ);
			if (texobj == null_)
				tex = ID_spr_default_normal;
			else
				tex = idVar(texobj, texture);
			
		}
		if (name == /*""*/ STR(0))
			return IntType(0);
		VarType text;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(784) });
		
		if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ) == null_)
			text = text_get({ /*"listdefault"*/ STR(809), text });
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ), text, ID_action_tl_frame_texture_normal_obj, false, tex });
		tab_next(self);
		return 0.0;
	}
	
	void tab_frame_editor_transform(ScopeAny self)
	{
		sVar(dy) -= 8.0;
		VarType taby;
		taby = sVar(dy);
		microani_set(/*"tabposition"*/ STR(3261), null_, false, false, false);
		tab_frame_editor_position(self);
		microani_set(/*"tabposition"*/ STR(3261), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabrotation"*/ STR(3262), null_, false, false, false);
		tab_frame_editor_rotation(self);
		microani_set(/*"tabrotation"*/ STR(3262), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabscale"*/ STR(3263), null_, false, false, false);
		tab_frame_editor_scale(self);
		microani_set(/*"tabscale"*/ STR(3263), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabbend"*/ STR(3264), null_, false, false, false);
		tab_frame_editor_bend(self);
		microani_set(/*"tabbend"*/ STR(3264), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		tab_frame_editor_path_point(self);
	}
	
	VarType tab_get_title(VarType tab)
	{
		if (tab == global::_app->properties)
			return text_get({ /*"tabprojectproperties"*/ STR(3265) });
		else
			if (tab == global::_app->timeline)
				return text_get({ /*"tabtimeline"*/ STR(3266) });
			else
				if (tab == global::_app->template_editor)
				{
					if (!(global::temp_edit > 0))
						return /*""*/ STR(0);
					switch ((IntType)idVar(global::temp_edit, type))
					{
						case e_temp_type_CHARACTER:
						{
							return text_get({ /*"tabcharmodel"*/ STR(3267), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_SPECIAL_BLOCK:
						case e_temp_type_BLOCK:
						{
							return text_get({ /*"tabblock"*/ STR(3268), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_ITEM:
						{
							return text_get({ /*"tabitem"*/ STR(3269), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_BODYPART:
						{
							return text_get({ /*"tabbodypart"*/ STR(3270), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_PARTICLE_SPAWNER:
						{
							return text_get({ /*"tabparticles"*/ STR(3271), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
					}
					
				}
				else
					if (tab == global::_app->ground_editor)
						return text_get({ /*"tabground"*/ STR(3272) });
					else
						if (tab == global::_app->timeline_editor)
						{
							VarType name = /*""*/ STR(0);
							if (global::tl_edit > 0)
							{
								name = string_remove_newline(idVar(global::tl_edit, display_name));
								if (global::tl_edit_amount > IntType(1))
									name += /*"..."*/ STR(3028);
							}
							return text_get({ /*"tabtimelineeditor"*/ STR(3273), name });
						}
						else
							if (tab == global::_app->frame_editor)
							{
								VarType name = /*""*/ STR(0);
								if (global::tl_edit > 0)
								{
									name = string_remove_newline(idVar(global::tl_edit, display_name));
									if (global::tl_edit_amount > IntType(1))
										name += /*"..."*/ STR(3028);
								}
								return text_get({ /*"tabframeeditor"*/ STR(3274), name, string(round(global::_app->timeline_marker)) });
							}
							else
								if (tab == global::_app->settings)
									return text_get({ /*"tabsettings"*/ STR(3275) });
						
					
				
			
		
		
		return /*""*/ STR(0);
	}
	
	void tab_ground_editor(ScopeAny self)
	{
		sVar(dh) -= 28.0;
		if (idBool(sVar(background_ground_tex), ready))
		{
			draw_texture_picker(self, sVar(background_ground_slot), idInt(sVar(background_ground_tex), block_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sVar(dh), ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)), block_sheet_width, block_sheet_height, idInt(sVar(tab), ground_scroll), ID_action_background_ground_slot, idVar(sVar(background_ground_tex), block_sheet_ani_texture), ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list)), block_sheet_ani_width, block_sheet_ani_height, sVar(background_ground_tex));
			if (sBool(content_mouseon))
				sStr(window_scroll_focus) = string(idInt(sVar(tab), ground_scroll));
		}
	}
	
	RealType tab_next(ScopeAny self, BoolType padding)
	{
		if (sBool(tab_collapse))
		{
			sVar(dx) -= 16.0;
			sVar(dw) += IntType(16);
			sBool(tab_collapse) = false;
		}
		if (sVar(tab_collumns) > 0)
		{
			sReal(tab_collumns_index) = mod_fix(sReal(tab_collumns_index) + IntType(1), sVar(tab_collumns_count));
			if (sReal(tab_collumns_index) != IntType(0))
				return IntType(0);
			sVar(dx) = sVar(tab_collumns_start_x);
		}
		sVar(dy) += sReal(tab_control_h) + (IntType(8) * (IntType)padding);
		return 0.0;
	}
	
	void tab_properties_background(ScopeAny self)
	{
		IntType capwid;
		if (sReal(window_compact) > 0 || sReal(panel_compact) > 0)
		{
			tab_control_dragger(self);
			draw_dragger_sky(self, /*"backgroundskytime"*/ STR(3276), sVar(dx), sVar(dy), sVar(background_sky_time), -IntType(45), ID_action_background_sky_time, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_time, true);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger_sky(self, /*"backgroundskyrotation"*/ STR(3277), sVar(dx), sVar(dy), sVar(background_sky_rotation), IntType(0), ID_action_background_sky_rotation, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_rotation, false);
			tab_next(self);
		}
		else
		{
			tab_control(self, IntType(120));
			draw_wheel_sky(self, /*"backgroundskytime"*/ STR(3276), sVar(dx) + floor(sVar(dw) * 0.25), sVar(dy) + IntType(60), sVar(background_sky_time), -IntType(45), ID_action_background_sky_time, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_time, true);
			draw_wheel_sky(self, /*"backgroundskyrotation"*/ STR(3277), sVar(dx) + floor(sVar(dw) * 0.75), sVar(dy) + IntType(60), sVar(background_sky_rotation), IntType(0), ID_action_background_sky_rotation, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_rotation, false);
			tab_next(self);
		}
		
		tab_control_switch(self);
		draw_button_collapse(self, /*"sunlight"*/ STR(140), DsMap(global::collapse_map).Value(/*"sunlight"*/ STR(140)), null_, true, /*"backgroundsunlight"*/ STR(3278));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"sunlight"*/ STR(140)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundsunlightangle"*/ STR(3279), sVar(dx), sVar(dy), dragger_width, sVar(background_sunlight_angle), .05, IntType(0), no_limit, .526, .001, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sunlight_angle, ID_action_background_sunlight_angle, null_, true, false, /*"backgroundsunlightangletip"*/ STR(3280));
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundsunlightstrength"*/ STR(3281), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sunlight_strength) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sunlight_strength, ID_action_background_sunlight_strength);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"sky"*/ STR(141), DsMap(global::collapse_map).Value(/*"sky"*/ STR(141)), null_, true, /*"backgroundskybackground"*/ STR(3282));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"sky"*/ STR(141)) > 0)
		{
			tab_collapse_start(self);
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"backgroundskyminecraft"*/ STR(3283), null_, IntType(0), sVar(background_image_show) == IntType(0), ID_action_background_image_show });
			togglebutton_add(self, { /*"backgroundskycustom"*/ STR(3284), null_, IntType(1), sVar(background_image_show) == IntType(1), ID_action_background_image_show });
			draw_togglebutton(self, /*"backgroundsky"*/ STR(3285), sVar(dx), sVar(dy));
			tab_next(self);
			if (sVar(background_image_show) > 0)
			{
				VarType text, tex;
				capwid = text_caption_width(self, { /*"backgroundimage"*/ STR(1381), /*"backgroundimagetype"*/ STR(1382) });
				text = text_get({ /*"listnone"*/ STR(784) });
				tex = null_;
				if (sVar(background_image) != null_)
				{
					text = idVar(sVar(background_image), display_name);
					tex = idVar(sVar(background_image), texture);
				}
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundimage"*/ STR(1381), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_image), text, ID_action_background_image, false, tex });
				tab_next(self);
				if (sVar(background_image) != null_)
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"backgroundimagetype"*/ STR(1382), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(background_image_type), text_get({ /*"backgroundimagetype"*/ STR(1382) + sVar(background_image_type) }), ID_action_background_image_type });
					tab_next(self);
					if (sVar(background_image_type) == /*"image"*/ STR(95))
					{
						tab_control_switch(self);
						draw_switch(self, /*"backgroundimagestretch"*/ STR(3286), sVar(dx), sVar(dy), sVar(background_image_stretch), ID_action_background_image_stretch);
						tab_next(self);
					}
					if (sVar(background_image_type) != /*"image"*/ STR(95))
					{
						tab_control_dragger(self);
						draw_dragger(self, /*"backgroundimagerotation"*/ STR(3287), sVar(dx), sVar(dy), dragger_width, sVar(background_image_rotation), .1, -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_background_rotation, ID_action_background_image_rotation);
						tab_next(self);
					}
					if (sVar(background_image_type) == /*"box"*/ STR(1364))
					{
						tab_control_switch(self);
						draw_switch(self, /*"backgroundimageboxmapped"*/ STR(3288), sVar(dx), sVar(dy), sVar(background_image_box_mapped), ID_action_background_image_box_mapped);
						tab_next(self);
						if (sVar(background_image_box_mapped) > 0)
						{
							tab_control_button_label(self);
							if (draw_button_label(self, /*"backgroundimagesavemap"*/ STR(3289), sVar(dx), sVar(dy), sVar(dw), icons_TEXTURE_EXPORT, e_button_SECONDARY))
								action_background_image_save_map();
							tab_next(self);
						}
					}
				}
			}
			else
			{
				VarType tex;
				capwid = text_caption_width(self, { /*"backgroundskysuntex"*/ STR(1386), /*"backgroundskymoontex"*/ STR(1387), /*"backgroundskymoonphase"*/ STR(1388) });
				tex = ((idVar(sVar(background_sky_sun_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_sun_tex), sun_texture) : idVar(sVar(background_sky_sun_tex), texture));
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskysuntex"*/ STR(1386), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_sun_tex), idVar(sVar(background_sky_sun_tex), display_name), ID_action_background_sky_sun_tex, false, tex });
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskysunangle"*/ STR(3290), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_sun_angle), 0.1, -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_sun_angle, ID_action_background_sky_sun_angle);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskysunscale"*/ STR(3291), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sky_sun_scale) * IntType(100)), 0.1, IntType(0), IntType(10000), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_sun_scale, ID_action_background_sky_sun_scale);
				tab_next(self);
				if (idVar(sVar(background_sky_moon_tex), type) == e_res_type_PACK && idBool(sVar(background_sky_moon_tex), ready))
					tex = idArr(sVar(background_sky_moon_tex), moon_texture).Value(sVar(background_sky_moon_phase));
				else
					tex = idVar(sVar(background_sky_moon_tex), texture);
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskymoontex"*/ STR(1387), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_moon_tex), idVar(sVar(background_sky_moon_tex), display_name), ID_action_background_sky_moon_tex, false, tex });
				tab_next(self);
				if (idVar(sVar(background_sky_moon_tex), type) == e_res_type_PACK && idBool(sVar(background_sky_moon_tex), ready))
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"backgroundskymoonphase"*/ STR(1388), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_moon_phase), text_get({ /*"backgroundskymoonphase"*/ STR(1388) + string(sVar(background_sky_moon_phase) + IntType(1)) }), ID_action_background_sky_moon_phase, false, idArr(sVar(background_sky_moon_tex), moon_texture).Value(sVar(background_sky_moon_phase)) });
					tab_next(self);
				}
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskymoonangle"*/ STR(3292), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_moon_angle), 0.1, -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_moon_angle, ID_action_background_sky_moon_angle);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskymoonscale"*/ STR(3293), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sky_moon_scale) * IntType(100)), 0.1, IntType(0), IntType(10000), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_moon_scale, ID_action_background_sky_moon_scale);
				tab_next(self);
			}
			
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"clouds"*/ STR(142), DsMap(global::collapse_map).Value(/*"clouds"*/ STR(142)), ID_action_background_sky_clouds_show, sVar(background_sky_clouds_show), /*"backgroundskycloudsshow"*/ STR(3294));
		tab_next(self);
		if (sVar(background_sky_clouds_show) > 0 && DsMap(global::collapse_map).Value(/*"clouds"*/ STR(142)) > 0)
		{
			tab_collapse_start(self);
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"backgroundskycloudsnormal"*/ STR(3295), null_, /*"normal"*/ STR(628), sVar(background_sky_clouds_mode) == /*"normal"*/ STR(628), ID_action_background_sky_clouds_mode });
			togglebutton_add(self, { /*"backgroundskycloudsfaded"*/ STR(3296), null_, /*"faded"*/ STR(745), sVar(background_sky_clouds_mode) == /*"faded"*/ STR(745), ID_action_background_sky_clouds_mode });
			togglebutton_add(self, { /*"backgroundskycloudsflat"*/ STR(3297), null_, /*"flat"*/ STR(746), sVar(background_sky_clouds_mode) == /*"flat"*/ STR(746), ID_action_background_sky_clouds_mode });
			draw_togglebutton(self, /*"backgroundskycloudsmode"*/ STR(3298), sVar(dx), sVar(dy), true, true);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				VarType tex = ((idVar(sVar(background_sky_clouds_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_clouds_tex), clouds_texture) : idVar(sVar(background_sky_clouds_tex), texture));
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskycloudstex"*/ STR(1389), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_clouds_tex), idVar(sVar(background_sky_clouds_tex), display_name), ID_action_background_sky_clouds_tex, false, tex });
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsspeed"*/ STR(3299), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sky_clouds_speed) * IntType(100)), 0.1, -no_limit, no_limit, IntType(100), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_speed, ID_action_background_sky_clouds_speed);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsoffset"*/ STR(3300), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_offset), IntType(10), -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_offset, ID_action_background_sky_clouds_offset);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsheight"*/ STR(3301), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_height), IntType(10), -no_limit, no_limit, IntType(1024), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_height, ID_action_background_sky_clouds_height);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudssize"*/ STR(3302), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_size), IntType(5), IntType(16), no_limit, IntType(1536), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_size, ID_action_background_sky_clouds_size);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsthickness"*/ STR(3303), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_thickness), IntType(2), IntType(0), no_limit, IntType(64), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_thickness, ID_action_background_sky_clouds_thickness);
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"ground"*/ STR(143), DsMap(global::collapse_map).Value(/*"ground"*/ STR(143)), ID_action_background_ground_show, sVar(background_ground_show), /*"backgroundgroundshow"*/ STR(3304));
		tab_next(self);
		capwid = text_caption_width(self, { /*"backgroundground"*/ STR(3305), /*"backgroundgroundtex"*/ STR(1390) });
		if (sVar(background_ground_show) > 0 && DsMap(global::collapse_map).Value(/*"ground"*/ STR(143)) > 0)
		{
			tab_collapse_start(self);
			IntType wid;
			VarType res;
			res = sVar(background_ground_tex);
			if (!res_is_ready(res))
				res = global::mc_res;
			tab_control(self, IntType(24));
			draw_set_font(sInt(font_label));
			wid = string_width(text_get({ /*"backgroundground"*/ STR(3305) }) + /*":"*/ STR(785));
			draw_label(self, { text_get({ /*"backgroundground"*/ STR(3305) }) + /*":"*/ STR(785), sVar(dx), sVar(dy) + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			draw_box(sVar(dx) + wid + IntType(16), sVar(dy) + IntType(4), IntType(20), IntType(20), false, global::c_level_bottom, IntType(1));
			if (sBool(background_ground_ani))
				draw_texture_slot(idVar(res, block_sheet_ani_texture).Value(block_texture_get_frame(true)), sVar(background_ground_slot) - ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), IntType(16), IntType(16), block_sheet_ani_width, block_sheet_ani_height, block_texture_get_blend(sVar(background_ground_name), res));
			else
				draw_texture_slot(idInt(res, block_sheet_texture), sVar(background_ground_slot), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), IntType(16), IntType(16), block_sheet_width, block_sheet_height, block_texture_get_blend(sVar(background_ground_name), res));
			
			if (draw_button_icon(self, { /*"backgroundgroundchange"*/ STR(3306), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(ground_editor))->show, icons_PENCIL, null_, false, /*"tooltipchangeground"*/ STR(3307) }))
				tab_toggle(self, sInt(ground_editor));
			tab_next(self);
			tab_control_menu(self, { sReal(ui_large_height) });
			draw_button_menu(self, { /*"backgroundgroundtex"*/ STR(1390), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex), idVar(sVar(background_ground_tex), display_name), ID_action_background_ground_tex, false, idInt(sVar(background_ground_tex), block_preview_texture) });
			tab_next(self);
			if (sVar(project_render_material_maps) > 0)
			{
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundgroundtexmaterial"*/ STR(1391), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex_material), idVar(sVar(background_ground_tex_material), display_name), ID_action_background_ground_tex_material, false, idInt(sVar(background_ground_tex_material), block_preview_texture) });
				tab_next(self);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundgroundtexnormal"*/ STR(1392), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex_normal), idVar(sVar(background_ground_tex_normal), display_name), ID_action_background_ground_tex_normal, false, idInt(sVar(background_ground_tex_normal), block_preview_texture) });
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		tab_control_menu(self);
		draw_button_menu(self, { /*"backgroundbiome"*/ STR(3308), e_menu_BIOME, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(background_biome), minecraft_asset_get_name(/*"biome"*/ STR(1714), sVar(background_biome)), ID_action_background_biome });
		tab_next(self);
		if (sVar(background_biome) == /*"custom"*/ STR(627))
		{
			sVar(dy) += IntType(20);
			draw_label(self, { text_get({ /*"backgroundbiomecolors"*/ STR(3309) }) + /*":"*/ STR(785), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_color(self);
			draw_button_color(self, /*"backgroundgrasscolor"*/ STR(3310), sVar(dx), sVar(dy), sVar(dw), sVar(background_grass_color), c_plains_biome_grass, false, ID_action_background_grass_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundfoliagecolor"*/ STR(3311), sVar(dx), sVar(dy), sVar(dw), sVar(background_foliage_color), c_plains_biome_foliage, false, ID_action_background_foliage_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundwatercolor"*/ STR(3312), sVar(dx), sVar(dy), sVar(dw), sVar(background_water_color), c_plains_biome_water, false, ID_action_background_water_color);
			tab_next(self);
			tab_set_collumns(self, { false });
			sVar(dy) += IntType(20);
			draw_label(self, { text_get({ /*"backgroundleafcolors"*/ STR(3313) }) + /*":"*/ STR(785), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesoakcolor"*/ STR(3314), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_oak_color), c_plains_biome_foliage, false, ID_action_background_leaves_oak_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavessprucecolor"*/ STR(3315), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_spruce_color), c_plains_biome_foliage_2, false, ID_action_background_leaves_spruce_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesbirchcolor"*/ STR(3316), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_birch_color), c_plains_biome_foliage_2, false, ID_action_background_leaves_birch_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesjunglecolor"*/ STR(3317), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_jungle_color), c_plains_biome_foliage, false, ID_action_background_leaves_jungle_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesacaciacolor"*/ STR(3318), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_acacia_color), c_plains_biome_foliage, false, ID_action_background_leaves_acacia_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesdarkoakcolor"*/ STR(3319), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_dark_oak_color), c_plains_biome_foliage, false, ID_action_background_leaves_dark_oak_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesmangrovecolor"*/ STR(3320), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_mangrove_color), c_plains_biome_foliage, false, ID_action_background_leaves_mangrove_color);
			tab_next(self);
			tab_set_collumns(self, { false });
		}
		sVar(dy) += IntType(20);
		draw_label(self, { text_get({ /*"backgroundscenecolors"*/ STR(3321) }) + /*":"*/ STR(785), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
		tab_control_color(self);
		draw_button_color(self, /*"backgroundskycolor"*/ STR(3322), sVar(dx), sVar(dy), sVar(dw), sVar(background_sky_color), c_sky, false, ID_action_background_sky_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundskycloudscolor"*/ STR(3323), sVar(dx), sVar(dy), sVar(dw), sVar(background_sky_clouds_color), c_clouds, false, ID_action_background_sky_clouds_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundsunlightcolor"*/ STR(3324), sVar(dx), sVar(dy), sVar(dw), sVar(background_sunlight_color), c_sunlight, false, ID_action_background_sunlight_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundambientcolor"*/ STR(3325), sVar(dx), sVar(dy), sVar(dw), sVar(background_ambient_color), c_ambient, false, ID_action_background_ambient_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundnightcolor"*/ STR(3326), sVar(dx), sVar(dy), sVar(dw), sVar(background_night_color), c_night, false, ID_action_background_night_color);
		tab_next(self);
		tab_set_collumns(self, { false });
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"backgroundtwilight"*/ STR(3327), sVar(dx), sVar(dy), sVar(background_twilight), ID_action_background_twilight, /*"backgroundtwilighttip"*/ STR(3328));
			tab_next(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"fog"*/ STR(144), DsMap(global::collapse_map).Value(/*"fog"*/ STR(144)), ID_action_background_fog_show, sVar(background_fog_show), /*"backgroundfog"*/ STR(3329));
		tab_next(self);
		if (sVar(background_fog_show) > 0 && DsMap(global::collapse_map).Value(/*"fog"*/ STR(144)) > 0)
		{
			tab_collapse_start(self);
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogsky"*/ STR(3330), sVar(dx), sVar(dy), sVar(background_fog_sky), ID_action_background_fog_sky);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogcolorcustom"*/ STR(3331), sVar(dx), sVar(dy), sVar(background_fog_color_custom), ID_action_background_fog_color_custom);
			tab_next(self);
			if (sVar(background_fog_color_custom) > 0)
			{
				tab_control_color(self);
				draw_button_color(self, /*"backgroundfogcolor"*/ STR(3332), sVar(dx), sVar(dy), sVar(dw), sVar(background_fog_color), c_sky, false, ID_action_background_fog_color);
				tab_next(self);
			}
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogcustomobjectcolor"*/ STR(3333), sVar(dx), sVar(dy), sVar(background_fog_custom_object_color), ID_action_background_fog_custom_object_color);
			tab_next(self);
			if (sVar(background_fog_custom_object_color) > 0)
			{
				tab_control_color(self);
				draw_button_color(self, /*"backgroundfogobjectcolor"*/ STR(3334), sVar(dx), sVar(dy), sVar(dw), sVar(background_fog_object_color), c_sky, false, ID_action_background_fog_object_color);
				tab_next(self);
			}
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogdistance"*/ STR(3335), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_distance), (RealType)sVar(background_fog_distance) / 100.0, IntType(10), sVar(project_render_distance), IntType(10000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_distance, ID_action_background_fog_distance);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogsize"*/ STR(3336), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_size), (RealType)sVar(background_fog_size) / 100.0, IntType(10), sVar(project_render_distance), IntType(2000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_size, ID_action_background_fog_size);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogheight"*/ STR(3337), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_height), (RealType)sVar(background_fog_height) / 100.0, IntType(10), IntType(2000), IntType(1000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_height, ID_action_background_fog_height);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"wind"*/ STR(145), DsMap(global::collapse_map).Value(/*"wind"*/ STR(145)), ID_action_background_wind, sVar(background_wind), /*"backgroundwind"*/ STR(3338));
		tab_next(self);
		if (sVar(background_wind) > 0 && DsMap(global::collapse_map).Value(/*"wind"*/ STR(145)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundwindspeed"*/ STR(3339), sVar(dx), sVar(dy), dragger_width, round(sVar(background_wind_speed) * IntType(100)), .1, IntType(0), no_limit * IntType(100), IntType(10), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_speed, ID_action_background_wind_speed);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundwindstrength"*/ STR(3340), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_strength), .1, IntType(0), no_limit, 0.5, 0.05, ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_strength, ID_action_background_wind_strength);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirection"*/ STR(3341), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_direction), .1, -no_limit, no_limit, IntType(45), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_direction, ID_action_background_wind_direction);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirectionalspeed"*/ STR(3342), sVar(dx), sVar(dy), dragger_width, round(sVar(background_wind_directional_speed) * IntType(100)), .1, IntType(0), no_limit, IntType(20), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_directional_speed, ID_action_background_wind_directional_speed);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirectionalstrength"*/ STR(3343), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_directional_strength), .01, IntType(0), no_limit, 1.5, 0.05, ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_directional_strength, ID_action_background_wind_directional_strength);
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundtextureanimationspeed"*/ STR(3344), sVar(dx), sVar(dy), dragger_width, sVar(background_texture_animation_speed), 1.0 / 100.0, IntType(0), no_limit, 0.25, IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_texture_animation_speed, ID_action_background_texture_animation_speed);
			tab_next(self);
		}
	}
	
}
