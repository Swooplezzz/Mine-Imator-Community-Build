/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.04 17:45:23 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void panel_draw_content(ScopeAny self)
	{
		RealType minw, minh, maxh;
		VarType dividew;
		minw = IntType(288);
		minh = IntType(160);
		maxh = IntType(0);
		sVar(dx) = sVar(content_x) + IntType(12);
		sVar(dy) = sVar(content_y) + IntType(14);
		sVar(dw) = sVar(content_width) - IntType(24);
		sVar(dh) = sVar(content_height);
		sVar(tab) = sVar(content_tab);
		dividew = sVar(content_width);
		if (sInt(content_direction) == e_scroll_VERTICAL)
		{
			if (ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->needed)
			{
				dividew -= 12.0;
				sVar(dw) -= 12.0;
			}
			sVar(dy) -= ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->value;
		}
		else
		{
			sVar(dh) -= IntType(30) * (IntType)ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->needed;
			sVar(dx) -= ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->value;
			if (sVar(dh) < minh)
			{
				if (idInt(sVar(tab), panel) != DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(189)))
					sVar(dy) -= minh - sVar(dh);
				sVar(dh) = minh;
			}
		}
		
		if (ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->needed && sBool(content_mouseon) && sVar(tab) != sVar(timeline))
			sStr(window_scroll_focus) = string(idInt(sVar(tab), scroll));
		sVar(dx_start) = sVar(dx);
		sVar(dy_start) = sVar(dy);
		sVar(dw_start) = sVar(dw);
		sVar(dh_start) = sVar(dh);
		if (!(idVar(sVar(tab), script) > 0))
		{
			RealType columns, catamount;
			ArrType cat;
			IntType c;
			catamount = IntType(0);
			for (c = IntType(0); c < idInt(sVar(tab), category_amount); c++)
			{
				if (ObjType(obj_category, idArr(sVar(tab), category).Value(c))->enabled)
				{
					if (!(sReal(setting_advanced_mode) > 0) && (idArr(sVar(tab), category).Value(c) == ObjType(obj_tab, sInt(frame_editor))->text || idArr(sVar(tab), category).Value(c) == ObjType(obj_tab, sInt(frame_editor))->item || idArr(sVar(tab), category).Value(c) == ObjType(obj_tab, sInt(timeline_editor))->appearance))
						continue;
					cat[catamount] = idArr(sVar(tab), category).Value(c);
					catamount++;
				}
			}
			columns = IntType(1);
			sVar(dw) = ceil((sVar(dw) - IntType(8) * (columns - IntType(1))) / columns);
			c = IntType(0);
			sVar(dy) = sVar(dy_start);
			sVar(dh) = sVar(dh_start);
			sVar(dy) -= 8.0;
			if (idInt(sVar(tab), header_script) > 0)
			{
				script_execute(self, { idInt(sVar(tab), header_script) });
				maxh = max({ sVar(dy) - sVar(dy_start), maxh });
			}
			for (IntType col = IntType(0); col < columns; col++)
			{
				RealType cats = max({ IntType(1), round(catamount / columns) });
				if (col == columns - IntType(1))
					cats = catamount - c;
				for (IntType _it = 0, _it_max = cats; _it < _it_max; _it++)
				{
					tab_control(self, IntType(28));
					draw_subheader(self, cat.Value(c), sVar(content_x) + IntType(4), sVar(dy), dividew - IntType(8), IntType(28));
					tab_next(self, { false });
					if (ObjType(obj_category, cat.Value(c))->show > 0 && ObjType(obj_category, cat.Value(c))->script > 0)
					{
						sVar(dy) += IntType(8);
						script_execute(self, { ObjType(obj_category, cat.Value(c))->script });
						sVar(dy) += IntType(8);
					}
					if (c < catamount - IntType(1) && ObjType(obj_category, cat.Value(c))->show > 0 && ObjType(obj_category, cat.Value(c))->script > 0)
					{
						draw_divide(sVar(content_x), sVar(dy), dividew - IntType(1));
						sVar(dy) += IntType(8);
					}
					maxh = max({ sVar(dy) - sVar(dy_start), maxh });
					c++;
				}
			}
		}
		else
		{
			script_execute(self, { idVar(sVar(tab), script) });
			maxh = sVar(dy) - sVar(dy_start);
		}
		
		if (sVar(tab) != sVar(timeline))
		{
			if (sInt(content_direction) == e_scroll_VERTICAL)
				scrollbar_draw(self, idInt(sVar(tab), scroll), e_scroll_VERTICAL, sVar(content_x) + dividew, sVar(content_y), sVar(content_height), maxh + IntType(32));
			else
				scrollbar_draw(self, idInt(sVar(tab), scroll), e_scroll_HORIZONTAL, sVar(content_x), sVar(content_y) + sVar(content_height) - IntType(35), sVar(content_width), sVar(dx) + sVar(dw) - sVar(content_x) + ObjType(obj_scrollbar, idInt(sVar(tab), scroll))->value + IntType(15));
			
		}
	}
	
	void panel_event_create(Scope<obj_panel> self)
	{
		self->size = IntType(0);
		self->size_real = IntType(0);
		self->size_real_ani = IntType(0);
		self->size_ani = IntType(1);
		self->tab_selected = IntType(0);
		self->tab_list_selected = IntType(0);
		self->tab_list_amount = IntType(0);
		self->tab_list[IntType(0)] = null_;
		self->list_glow = IntType(0);
		self->glow = IntType(0);
		self->glow_ani = IntType(0);
	}
	
	void panel_move_draw(ScopeAny self)
	{
		RealType boxx, boxw, boxh, tabsh;
		IntType boxy;
		boxx = gmlGlobal::mouse_x - (sReal(tab_move_box_width) / 2.0);
		boxy = gmlGlobal::mouse_y;
		boxw = IntType(300);
		boxh = IntType(300);
		tabsh = IntType(28);
		sVar(dx) = boxx;
		sVar(dy) = boxy;
		sVar(dw) = boxw;
		sVar(dh) = boxh;
		sVar(content_x) = boxx;
		sVar(content_y) = boxy;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh;
		draw_dropshadow(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_width), c_black, IntType(1));
		draw_box({ sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_width), false, global::c_level_middle, IntType(1) });
		draw_set_font(sInt(font_label));
		VarType tabname;
		IntType tabw;
		tabname = tab_get_title(sVar(tab_move));
		tabw = min({ string_width(tabname) + IntType(16), boxw });
		draw_box({ sVar(dx), sVar(dy), sVar(dw), tabsh, false, global::c_level_bottom, IntType(1) });
		draw_box({ sVar(dx), sVar(dy) + tabsh, sVar(dw), IntType(1), false, global::c_border, global::a_border });
		draw_box({ sVar(dx), sVar(dy), tabw, tabsh + IntType(1), false, global::c_level_middle, IntType(1) });
		draw_box({ sVar(dx) + tabw - IntType(1), sVar(dy), IntType(1), tabsh + IntType(1), false, global::c_border, global::a_border });
		draw_label(self, { tabname, floor(sVar(dx) + 8.0), round(sVar(dy) + (tabsh / 2.0)), fa_left, fa_center, global::c_accent, IntType(1) });
		sVar(content_y) += tabsh;
		sVar(content_width) = boxw;
		sVar(content_height) -= tabsh;
		sBool(content_mouseon) = false;
		sVar(content_tab) = sVar(tab_move);
		sInt(content_direction) = sInt(tab_move_direction);
		clip_begin(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_width) - tabsh);
		panel_draw_content(self);
		draw_box({ sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_width), false, global::c_level_middle, .25 });
		clip_end();
	}
	
	void panel_tab_list_add(IntType panel, IntType pos, VarType tab)
	{
		for (IntType t = ObjType(obj_panel, panel)->tab_list_amount; t > pos; t--)
			ObjType(obj_panel, panel)->tab_list[t] = ObjType(obj_panel, panel)->tab_list.Value(t - IntType(1));
		ObjType(obj_panel, panel)->tab_list[pos] = tab;
		ObjType(obj_panel, panel)->tab_list_amount++;
		idInt(tab, panel) = panel;
		idInt(tab, panel_last) = panel;
		ObjType(obj_panel, panel)->tab_selected = pos;
	}
	
	void panel_tab_list_remove(IntType panel, VarType tab)
	{
		IntType pos;
		for (pos = IntType(0); pos < ObjType(obj_panel, panel)->tab_list_amount; pos++)
			if (ObjType(obj_panel, panel)->tab_list.Value(pos) == tab)
				break;
		ObjType(obj_panel, panel)->tab_list_amount--;
		for (IntType t = pos; t < ObjType(obj_panel, panel)->tab_list_amount; t++)
			ObjType(obj_panel, panel)->tab_list[t] = ObjType(obj_panel, panel)->tab_list.Value(t + IntType(1));
		ObjType(obj_panel, panel)->tab_selected = min({ ObjType(obj_panel, panel)->tab_list_amount - IntType(1), ObjType(obj_panel, panel)->tab_selected });
	}
	
	RealType particles_load(ScopeAny self, VarType fn, VarType temp)
	{
		IntType hobj;
		hobj = null_;
		if (sReal(history_undo) > 0)
		{
			temp = save_id_find(ObjType(obj_history, global::history_data)->temp_save_id);
			withOne (Object, temp, self->id)
				temp_particles_type_clear(self);
			
			withOne (obj_history, global::history_data, self->id)
			{
				history_destroy_loaded(self);
				temp_particles_copy(ScopeAny(self), temp);
			}
			
			withOne (Object, temp, self->id)
			{
				for (IntType t = IntType(0); t < ObjType(obj_history, global::history_data)->pc_type_amount; t++)
					history_restore_ptype(ObjType(obj_history, global::history_data)->pc_type_save_obj.Value(t), self->id);
				temp_particles_restart(self);
			}
			
			tab_template_editor_update_ptype_list(self);
			return IntType(0);
		}
		else
			if (sReal(history_redo) > 0)
			{
				fn = ObjType(obj_history, global::history_data)->filename;
				temp = save_id_find(ObjType(obj_history, global::history_data)->temp_save_id);
			}
		
		if (filename_ext(fn) == /*".zip"*/ STR(5))
		{
			VarType name = filename_new_ext(filename_name(fn), /*""*/ STR(0));
			unzip({ fn });
			fn = file_find_single(unzip_directory, /*".miparticles;*.particles"*/ STR(1917));
			if (!file_exists_lib(fn))
				fn = file_find_single(unzip_directory + name + /*"/"*/ STR(16), /*".miparticles;*.particles"*/ STR(1917));
			if (!file_exists_lib(fn))
			{
				error(/*"erroropenparticleszip"*/ STR(1918));
				return IntType(0);
			}
		}
		if (!file_exists_lib(fn))
			return IntType(0);
		if (!(sReal(history_redo) > 0) && temp != sInt(bench_settings))
		{
			hobj = history_set(self, ID_particles_load);
			withOne (obj_history, hobj, self->id)
			{
				self->filename = fn;
				ObjType(obj_history, self->id)->temp_save_id = save_id_get(temp);
			}
			
			withOne (Object, temp, self->id)
			{
				temp_particles_copy(self, hobj);
				ObjType(obj_history, hobj)->pc_type_amount = ds_list_size(sInt(pc_type_list));
				for (IntType t = IntType(0); t < ObjType(obj_history, hobj)->pc_type_amount; t++)
					ObjType(obj_history, hobj)->pc_type_save_obj[t] = history_save_ptype(self, DsList(sInt(pc_type_list)).Value(t));
			}
			
		}
		IntType rootmap;
		BoolType legacy;
		if (string_contains(filename_ext(fn), /*".miparticles"*/ STR(699)))
		{
			log({ /*"Opening particles"*/ STR(1919), fn });
			rootmap = project_load_start(fn);
			if (rootmap == null_)
				return IntType(0);
			legacy = false;
		}
		else
		{
			log({ /*"Opening legacy particles"*/ STR(1920), fn });
			if (!project_load_legacy_start(fn))
				return IntType(0);
			legacy = true;
		}
		
		project_reset_loaded(self);
		global::save_folder = sStr(project_folder);
		global::load_folder = filename_dir(fn);
		log({ /*"save_folder"*/ STR(727), global::save_folder });
		log({ /*"load_folder"*/ STR(728), global::load_folder });
		if (!legacy)
		{
			withOne (Object, temp, self->id)
			{
				temp_particles_type_clear(self);
				project_load_particles(self, DsMap(rootmap).Value(/*"particles"*/ STR(524)));
				temp_particles_restart(self);
			}
			
			project_load_objects(rootmap);
			idVar(temp, pc_spawn_region_path) = save_id_find(idVar(temp, pc_spawn_region_path));
		}
		else
		{
			withOne (Object, temp, self->id)
			{
				temp_particles_type_clear(self);
				project_load_legacy_particles(self);
				temp_particles_restart(self);
			}
			
			project_load_legacy_objects();
		}
		
		project_load_find_save_ids(self);
		project_load_update(self);
		withOne (obj_history, hobj, self->id)
			history_save_loaded(self);
		
		project_reset_loaded(self);
		tab_template_editor_update_ptype_list(self);
		log({ /*"Particles loaded"*/ STR(1921) });
		return 0.0;
	}
	
	RealType particles_save(ScopeAny self)
	{
		VarType fn = file_dialog_save_particles(idVar(global::temp_edit, display_name));
		if (fn == /*""*/ STR(0))
			return IntType(0);
		fn = filename_new_ext(fn, /*".miparticles"*/ STR(699));
		log({ /*"Saving particles"*/ STR(1922), fn });
		global::save_folder = filename_dir(fn);
		global::load_folder = sStr(project_folder);
		log({ /*"save_folder"*/ STR(727), global::save_folder });
		log({ /*"load_folder"*/ STR(728), global::load_folder });
		project_save_start(fn, false);
		withOne (Object, global::temp_edit, self->id)
			project_save_particles(self);
		
		if (idVar(global::temp_edit, pc_spawn_region_type) == /*"path"*/ STR(534) && idVar(global::temp_edit, pc_spawn_region_path) != null_)
		{
			VarType tl = idVar(global::temp_edit, pc_spawn_region_path);
			for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			{
				if (ObjType(obj_timeline, DsList(idInt(tl, tree_list)).Value(i))->type == e_tl_type_PATH_POINT)
					ObjType(obj_timeline, DsList(idInt(tl, tree_list))[i])->save = true;
			}
		}
		project_save_objects(self);
		project_save_done();
		log({ /*"Particles saved"*/ STR(1923) });
		return 0.0;
	}
	
	void particle_event_destroy(Scope<obj_particle> self)
	{
		ds_list_delete(idInt(self->creator, particle_list), ds_list_find_index(idInt(self->creator, particle_list), self->id));
	}
	
	VarType particle_get_animation_percent(RealType step, RealType time, VarType startframe, VarType endframe, VarType anispeed, VarType onend)
	{
		RealType perc;
		time = (step - time) / 60.0;
		if (startframe == endframe)
			return startframe;
		perc = (time * anispeed) / abs(startframe - endframe);
		if (onend == IntType(0))
			perc = min({ perc, IntType(1) });
		else
			if (onend == IntType(1))
				perc = mod(perc, IntType(1));
			else
				if (onend == IntType(2))
				{
					if (floor(mod(perc, IntType(2))))
						perc = IntType(1) - (mod(perc, IntType(1)));
					else
						perc = mod(perc, IntType(1));
					
				}
		
		
		return perc;
	}
	
	void particle_spawner_clear(ScopeAny self)
	{
		withAll (obj_particle, self->id)
			if (self->creator == self.otherId)
				instance_destroy(ScopeAny(self));
		
		sVar(spawn_queue_start) = null_;
	}
	
	void particle_spawner_init(ScopeAny self)
	{
		sArr(spawn_queue_amount)[global::minute_steps] = IntType(0);
		sArr(spawn_queue)[global::minute_steps][IntType(0)] = IntType(0);
		sVar(spawn_queue_start) = null_;
		sReal(spawn_currentstep) = global::current_step;
		sReal(spawn_laststep) = global::current_step;
		sBool(spawn_active) = true;
		sBool(fire) = false;
		sInt(single_fire_count) = IntType(0);
		sInt(particle_list) = ds_list_create();
		sBool(is_timeline) = (self->subAssetId == ID_obj_timeline);
	}
	
	void particle_spawner_spawn(ScopeAny self, VarType type)
	{
		IntType pt;
		VarType temp;
		pt = (new obj_particle)->id;
		ObjType(obj_particle, pt)->creator = self->id;
		ObjType(obj_particle, pt)->type = type;
		ObjType(obj_particle, pt)->spawntime = sReal(spawn_currentstep);
		ObjType(obj_particle, pt)->frame = IntType(0);
		ObjType(obj_particle, pt)->time = IntType(0);
		ObjType(obj_particle, pt)->freezetime = IntType(0);
		if (sBool(is_timeline))
			temp = idVar(self->id, temp);
		else
			temp = sVar(select);
		
		RealType base_seed = IntType(0);
		if (sBool(is_timeline) && idVar(ObjType(obj_particle, pt)->creator, value).Value(e_value_CUSTOM_SEED) > 0)
			base_seed = ((idVar(temp, pc_spawn_constant) > 0) ? ds_list_size(sInt(particle_list)) : idInt(ObjType(obj_particle, pt)->creator, single_fire_count)) + idVar(ObjType(obj_particle, pt)->creator, value).Value(e_value_SEED);
		else
		{
			randomize();
			base_seed = random(sReal(spawn_currentstep) + ds_list_size(sInt(particle_list)));
		}
		
		random_set_seed((IntType)(base_seed));
		if (idVar(ObjType(obj_particle, pt)->type, sprite_template_still_frame) > 0 && idVar(ObjType(obj_particle, pt)->type, sprite_template_random_frame) > 0 && idVar(ObjType(obj_particle, pt)->type, temp) == particle_template)
		{
			VarType template_ = DsMap(global::particle_template_map).Value(idVar(ObjType(obj_particle, pt)->type, sprite_template));
			ObjType(obj_particle, pt)->frame = random(ObjType(obj_particle_template, template_)->frames);
		}
		ObjType(obj_particle, pt)->time_to_live = value_random(idVar(temp, pc_destroy_at_time_seconds), idVar(temp, pc_destroy_at_time_israndom), idVar(temp, pc_destroy_at_time_random_min), idVar(temp, pc_destroy_at_time_random_max)) * IntType(60);
		ObjType(obj_particle, pt)->pos[X_] = sVar(world_pos).Value(X_);
		ObjType(obj_particle, pt)->pos[Y_] = sVar(world_pos).Value(Y_);
		ObjType(obj_particle, pt)->pos[Z_] = sVar(world_pos).Value(Z_);
		if (idVar(temp, pc_spawn_region_use) > 0 && ObjType(obj_particle_type, type)->spawn_region > 0)
		{
			switch (StringType(idVar(temp, pc_spawn_region_type)).id)
			{
				case 527: // sphere
				{
					RealType xyang, zang, dis;
					xyang = random(360.0);
					zang = random_range(-180.0, 180.0);
					dis = random_range(-idVar(temp, pc_spawn_region_sphere_radius), idVar(temp, pc_spawn_region_sphere_radius));
					ObjType(obj_particle, pt)->pos[X_] += lengthdir_x(dis, xyang) * lengthdir_x(1.0, zang);
					ObjType(obj_particle, pt)->pos[Y_] += lengthdir_y(dis, xyang) * lengthdir_x(1.0, zang);
					ObjType(obj_particle, pt)->pos[Z_] += lengthdir_z(dis, zang);
					break;
				}
				
				case 3: // cube
				{
					ObjType(obj_particle, pt)->pos[X_] += random_range((RealType)-idVar(temp, pc_spawn_region_cube_size) / 2.0, (RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0);
					ObjType(obj_particle, pt)->pos[Y_] += random_range((RealType)-idVar(temp, pc_spawn_region_cube_size) / 2.0, (RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0);
					ObjType(obj_particle, pt)->pos[Z_] += random_range((RealType)-idVar(temp, pc_spawn_region_cube_size) / 2.0, (RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0);
					break;
				}
				
				case 1329: // box
				{
					ObjType(obj_particle, pt)->pos[X_] += random_range(-idVar(temp, pc_spawn_region_box_size).Value(X_) / 2.0, idVar(temp, pc_spawn_region_box_size).Value(X_) / 2.0);
					ObjType(obj_particle, pt)->pos[Y_] += random_range(-idVar(temp, pc_spawn_region_box_size).Value(Y_) / 2.0, idVar(temp, pc_spawn_region_box_size).Value(Y_) / 2.0);
					ObjType(obj_particle, pt)->pos[Z_] += random_range(-idVar(temp, pc_spawn_region_box_size).Value(Z_) / 2.0, idVar(temp, pc_spawn_region_box_size).Value(Z_) / 2.0);
					break;
				}
				
				case 534: // path
				{
					if (idVar(temp, pc_spawn_region_path) != null_)
					{
						RealType t;
						VarType p;
						ArrType tangent, normal;
						VecType angle;
						if (idVar(temp, pc_spawn_constant) > 0)
							t = random_range(0.0, array_length(VarType::CreateRef(idArr(idVar(temp, pc_spawn_region_path), path_table_matrix))));
						else
							t = mod_fix((RealType)ds_list_size(sInt(particle_list)) / idVar(temp, pc_spawn_amount), IntType(1)) * array_length(VarType::CreateRef(idArr(idVar(temp, pc_spawn_region_path), path_table_matrix)));
						
						p = spline_get_point(t, idArr(idVar(temp, pc_spawn_region_path), path_table_matrix), idVar(idVar(temp, pc_spawn_region_path), path_closed), idVar(idVar(temp, pc_spawn_region_path), path_smooth));
						tangent = ArrType::From({ p.Value(PATH_TANGENT_X), p.Value(PATH_TANGENT_Y), p.Value(PATH_TANGENT_Z) });
						normal = ArrType::From({ p.Value(PATH_NORMAL_X), p.Value(PATH_NORMAL_Y), p.Value(PATH_NORMAL_Z) });
						angle = vec3_rotate_axis_angle(normal, tangent, degtorad(random(360.0)));
						p = point3D_add(p, point3D_mul(angle, idVar(temp, pc_spawn_region_path_radius)));
						ObjType(obj_particle, pt)->pos[X_] = p.Value(X_);
						ObjType(obj_particle, pt)->pos[Y_] = p.Value(Y_);
						ObjType(obj_particle, pt)->pos[Z_] = p.Value(Z_);
					}
					break;
				}
				
			}
			
		}
		ObjType(obj_particle, pt)->anispeed = value_random(ObjType(obj_particle_type, type)->sprite_animation_speed, ObjType(obj_particle_type, type)->sprite_animation_speed_israndom, ObjType(obj_particle_type, type)->sprite_animation_speed_random_min, ObjType(obj_particle_type, type)->sprite_animation_speed_random_max);
		for (IntType a = X_; a <= Z_; a++)
		{
			ObjType(obj_particle, pt)->angle[a] = value_random(ObjType(obj_particle_type, type)->angle.Value(a * ObjType(obj_particle_type, type)->angle_extend), ObjType(obj_particle_type, type)->angle_israndom.Value(a * ObjType(obj_particle_type, type)->angle_extend), ObjType(obj_particle_type, type)->angle_random_min.Value(a * ObjType(obj_particle_type, type)->angle_extend), ObjType(obj_particle_type, type)->angle_random_max.Value(a * ObjType(obj_particle_type, type)->angle_extend));
			ObjType(obj_particle, pt)->spd[a] = (RealType)value_random(ObjType(obj_particle_type, type)->spd.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_israndom.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_random_min.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_random_max.Value(a * ObjType(obj_particle_type, type)->spd_extend)) / 60.0;
			ObjType(obj_particle, pt)->spd_add[a] = (RealType)value_random(ObjType(obj_particle_type, type)->spd_add.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_add_israndom.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_add_random_min.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_add_random_max.Value(a * ObjType(obj_particle_type, type)->spd_extend)) / 60.0;
			ObjType(obj_particle, pt)->spd_mul[a] = value_random(ObjType(obj_particle_type, type)->spd_mul.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_mul_israndom.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_mul_random_min.Value(a * ObjType(obj_particle_type, type)->spd_extend), ObjType(obj_particle_type, type)->spd_mul_random_max.Value(a * ObjType(obj_particle_type, type)->spd_extend));
			if (ObjType(obj_particle, pt)->spd_mul.Value(a) != IntType(1))
				for (IntType _it = 0, _it_max = IntType(5); _it < _it_max; _it++)
					ObjType(obj_particle, pt)->spd_mul[a] = sqrt(ObjType(obj_particle, pt)->spd_mul.Value(a));
			ObjType(obj_particle, pt)->rot[a] = value_random(ObjType(obj_particle_type, type)->rot.Value(a * ObjType(obj_particle_type, type)->rot_extend), ObjType(obj_particle_type, type)->rot_israndom.Value(a * ObjType(obj_particle_type, type)->rot_extend), ObjType(obj_particle_type, type)->rot_random_min.Value(a * ObjType(obj_particle_type, type)->rot_extend), ObjType(obj_particle_type, type)->rot_random_max.Value(a * ObjType(obj_particle_type, type)->rot_extend));
			ObjType(obj_particle, pt)->rot_spd[a] = (RealType)value_random(ObjType(obj_particle_type, type)->rot_spd.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_israndom.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_random_min.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_random_max.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend)) / 60.0;
			ObjType(obj_particle, pt)->rot_spd_add[a] = (RealType)value_random(ObjType(obj_particle_type, type)->rot_spd_add.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_add_israndom.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_add_random_min.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_add_random_max.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend)) / 60.0;
			ObjType(obj_particle, pt)->rot_spd_mul[a] = value_random(ObjType(obj_particle_type, type)->rot_spd_mul.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_mul_israndom.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_mul_random_min.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend), ObjType(obj_particle_type, type)->rot_spd_mul_random_max.Value(a * ObjType(obj_particle_type, type)->rot_spd_extend));
			if (ObjType(obj_particle, pt)->rot_spd_mul.Value(a) != IntType(1))
				for (IntType _it = 0, _it_max = IntType(5); _it < _it_max; _it++)
					ObjType(obj_particle, pt)->rot_spd_mul[a] = sqrt(ObjType(obj_particle, pt)->rot_spd_mul.Value(a));
		}
		ObjType(obj_particle, pt)->angle = vec3_normalize(vec3_mul_matrix(vec3(IntType(0), IntType(0), IntType(1)), matrix_create(vec3(IntType(0)), ObjType(obj_particle, pt)->angle, vec3(IntType(1)))));
		if (sBool(is_timeline))
		{
			ObjType(obj_particle, pt)->angle = vec3_mul_matrix(ObjType(obj_particle, pt)->angle, idMat(ObjType(obj_particle, pt)->creator, matrix_render));
			ObjType(obj_particle, pt)->angle = vec3_normalize(ObjType(obj_particle, pt)->angle);
		}
		ObjType(obj_particle, pt)->angle_speed = (RealType)value_random(ObjType(obj_particle_type, type)->angle_speed, ObjType(obj_particle_type, type)->angle_speed_israndom, ObjType(obj_particle_type, type)->angle_speed_random_min, ObjType(obj_particle_type, type)->angle_speed_random_max) / 60.0;
		ObjType(obj_particle, pt)->angle_speed_add = (RealType)value_random(ObjType(obj_particle_type, type)->angle_speed_add, ObjType(obj_particle_type, type)->angle_speed_add_israndom, ObjType(obj_particle_type, type)->angle_speed_add_random_min, ObjType(obj_particle_type, type)->angle_speed_add_random_max) / 60.0;
		ObjType(obj_particle, pt)->angle_speed_mul = value_random(ObjType(obj_particle_type, type)->angle_speed_mul, ObjType(obj_particle_type, type)->angle_speed_mul_israndom, ObjType(obj_particle_type, type)->angle_speed_mul_random_min, ObjType(obj_particle_type, type)->angle_speed_mul_random_max);
		if (ObjType(obj_particle, pt)->angle_speed_mul != IntType(1))
			for (IntType _it = 0, _it_max = IntType(5); _it < _it_max; _it++)
				ObjType(obj_particle, pt)->angle_speed_mul = sqrt(ObjType(obj_particle, pt)->angle_speed_mul);
		ObjType(obj_particle, pt)->sprite_angle = value_random(ObjType(obj_particle_type, type)->sprite_angle, ObjType(obj_particle_type, type)->sprite_angle_israndom, ObjType(obj_particle_type, type)->sprite_angle_random_min, ObjType(obj_particle_type, type)->sprite_angle_random_max);
		ObjType(obj_particle, pt)->sprite_angle_add = (RealType)value_random(ObjType(obj_particle_type, type)->sprite_angle_add, ObjType(obj_particle_type, type)->sprite_angle_add_israndom, ObjType(obj_particle_type, type)->sprite_angle_add_random_min, ObjType(obj_particle_type, type)->sprite_angle_add_random_max) / 60.0;
		ObjType(obj_particle, pt)->scale = value_random(ObjType(obj_particle_type, type)->scale, ObjType(obj_particle_type, type)->scale_israndom, ObjType(obj_particle_type, type)->scale_random_min, ObjType(obj_particle_type, type)->scale_random_max);
		ObjType(obj_particle, pt)->scale_add = (RealType)value_random(ObjType(obj_particle_type, type)->scale_add, ObjType(obj_particle_type, type)->scale_add_israndom, ObjType(obj_particle_type, type)->scale_add_random_min, ObjType(obj_particle_type, type)->scale_add_random_max) / 60.0;
		ObjType(obj_particle, pt)->alpha = value_random(ObjType(obj_particle_type, type)->alpha, ObjType(obj_particle_type, type)->alpha_israndom, ObjType(obj_particle_type, type)->alpha_random_min, ObjType(obj_particle_type, type)->alpha_random_max);
		ObjType(obj_particle, pt)->alpha_add = (RealType)value_random(ObjType(obj_particle_type, type)->alpha_add, ObjType(obj_particle_type, type)->alpha_add_israndom, ObjType(obj_particle_type, type)->alpha_add_random_min, ObjType(obj_particle_type, type)->alpha_add_random_max) / 60.0;
		if (ObjType(obj_particle_type, type)->color_israndom > 0)
			ObjType(obj_particle, pt)->color = merge_color((IntType)(ObjType(obj_particle_type, type)->color_random_start), (IntType)(ObjType(obj_particle_type, type)->color_random_end), random(1.0));
		else
			ObjType(obj_particle, pt)->color = ObjType(obj_particle_type, type)->color;
		
		if (ObjType(obj_particle_type, type)->color_mix_enabled > 0)
		{
			if (ObjType(obj_particle_type, type)->color_mix_israndom > 0)
				ObjType(obj_particle, pt)->color_mix = merge_color((IntType)(ObjType(obj_particle_type, type)->color_mix_random_start), (IntType)(ObjType(obj_particle_type, type)->color_mix_random_end), random(1.0));
			else
				ObjType(obj_particle, pt)->color_mix = ObjType(obj_particle_type, type)->color_mix;
			
			ObjType(obj_particle, pt)->color_mix_start = ObjType(obj_particle, pt)->color;
			ObjType(obj_particle, pt)->color_mix_time = max({ IntType(1), value_random(ObjType(obj_particle_type, type)->color_mix_time, ObjType(obj_particle_type, type)->color_mix_time_israndom, ObjType(obj_particle_type, type)->color_mix_time_random_min, ObjType(obj_particle_type, type)->color_mix_time_random_max) * IntType(60) });
		}
		else
		{
			ObjType(obj_particle, pt)->color_mix = -IntType(1);
			ObjType(obj_particle, pt)->color_mix_start = -IntType(1);
			ObjType(obj_particle, pt)->color_mix_time = IntType(0);
		}
		
		ds_list_add({ sInt(particle_list), pt });
	}
	
	void particle_spawner_update(ScopeAny self, IntType spawner)
	{
		if (global::_app->window_state == /*"export_movie"*/ STR(49) || !(global::_app->popup > 0) || !(idVar(global::_app->popup, block) > 0))
		{
			VarType temp;
			if (sBool(is_timeline))
			{
				temp = idVar(self->id, temp);
				sReal(spawn_currentstep) = floor(global::_app->background_time);
				if (floor(global::_app->timeline_marker_previous) > floor(global::_app->timeline_marker))
					particle_spawner_clear(self);
			}
			else
			{
				temp = sVar(select);
				sReal(spawn_currentstep) = global::current_step;
			}
			
			for (RealType s = sReal(spawn_laststep); s < sReal(spawn_currentstep); s++)
			{
				if (idVar(temp, pc_spawn_constant) > 0)
				{
					VarType spawn;
					if (sBool(is_timeline))
						spawn = sVar(value).Value(e_value_SPAWN);
					else
						spawn = sBool(spawn_active);
					
					if (spawn > 0)
					{
						if (sVar(spawn_queue_start) < IntType(0) || s >= sVar(spawn_queue_start) + global::minute_steps)
						{
							for (IntType t = IntType(0); t < global::minute_steps; t++)
								sArr(spawn_queue_amount)[t] = IntType(0);
							withAll (obj_particle_type, self->id)
							{
								if (self->creator != temp)
									continue;
								for (IntType _it = 0, _it_max = floor(self->spawn_rate * idVar(temp, pc_spawn_amount)); _it < _it_max; _it++)
								{
									IntType i = irandom((IntType)(global::minute_steps - IntType(1)));
									idArr(spawner, spawn_queue)[i][idArr(spawner, spawn_queue_amount).Value(i)] = self->id;
									idArr(spawner, spawn_queue_amount)[i]++;
								}
							}
							
							sVar(spawn_queue_start) = s;
						}
						RealType slot = s - sVar(spawn_queue_start);
						for (IntType t = IntType(0); t < sArr(spawn_queue_amount).Value(slot); t++)
							particle_spawner_spawn(self, sArr(spawn_queue)[slot][t]);
					}
				}
				else
				{
					if (sBool(fire))
					{
						withAll (obj_particle_type, self->id)
						{
							if (self->creator != temp)
								continue;
							for (IntType _it = 0, _it_max = floor(self->spawn_rate * idVar(temp, pc_spawn_amount)); _it < _it_max; _it++)
							{
								idInt(self.otherId, single_fire_count)++;
								withOne (Object, self.otherId, self->id)
									particle_spawner_spawn(self, self.otherId);
								
							}
							idInt(self.otherId, single_fire_count) = IntType(0);
						}
						
						sBool(fire) = false;
					}
				}
				
				for (IntType i = IntType(0); i < ds_list_size(sInt(particle_list)); i++)
				{
					IntType pt = DsList(sInt(particle_list)).Value(i);
					if (idVar(temp, pc_destroy_at_amount) > 0 && ds_list_size(sInt(particle_list)) > idVar(temp, pc_destroy_at_amount_val))
					{
						withOne (obj_particle, pt, self->id)
							instance_destroy(ScopeAny(self));
						
						continue;
					}
					if (sBool(is_timeline) && idVar(ObjType(obj_particle, pt)->creator, value).Value(e_value_FREEZE) > 0)
						ObjType(obj_particle, pt)->freezetime++;
					if (!sBool(is_timeline) || !(idVar(ObjType(obj_particle, pt)->creator, value).Value(e_value_FREEZE) > 0))
					{
						ObjType(obj_particle, pt)->time++;
						if (idVar(temp, pc_destroy_at_time) > 0 && ObjType(obj_particle, pt)->time >= ObjType(obj_particle, pt)->time_to_live)
						{
							withOne (obj_particle, pt, self->id)
								instance_destroy(ScopeAny(self));
							
							continue;
						}
						if (idVar(ObjType(obj_particle, pt)->type, temp) == particle_sheet)
						{
							VarType ani = particle_get_animation_percent(sReal(spawn_currentstep), (ObjType(obj_particle, pt)->spawntime + ObjType(obj_particle, pt)->freezetime), idVar(ObjType(obj_particle, pt)->type, sprite_frame_start), idVar(ObjType(obj_particle, pt)->type, sprite_frame_end), ObjType(obj_particle, pt)->anispeed, idVar(ObjType(obj_particle, pt)->type, sprite_animation_onend));
							if (ani == IntType(1) && idVar(temp, pc_destroy_at_animation_finish) > 0 && idVar(ObjType(obj_particle, pt)->type, sprite_animation_onend) == IntType(0))
							{
								withOne (obj_particle, pt, self->id)
									instance_destroy(ScopeAny(self));
								
								continue;
							}
							ObjType(obj_particle, pt)->frame = round(idVar(ObjType(obj_particle, pt)->type, sprite_frame_start) + (idVar(ObjType(obj_particle, pt)->type, sprite_frame_end) - idVar(ObjType(obj_particle, pt)->type, sprite_frame_start)) * ani);
						}
						else
							if (idVar(ObjType(obj_particle, pt)->type, temp) == particle_template)
							{
								if (!(idVar(ObjType(obj_particle, pt)->type, sprite_template_still_frame) > 0))
								{
									VarType template_ = DsMap(global::particle_template_map).Value(idVar(ObjType(obj_particle, pt)->type, sprite_template));
									RealType startf, endf;
									startf = ((idVar(ObjType(obj_particle, pt)->type, sprite_template_reverse) > 0) ? (ObjType(obj_particle_template, template_)->frames - IntType(1)) : VarType(0.0));
									endf = ((idVar(ObjType(obj_particle, pt)->type, sprite_template_reverse) > 0) ? VarType(0.0) : (ObjType(obj_particle_template, template_)->frames - IntType(1)));
									VarType ani = particle_get_animation_percent(sReal(spawn_currentstep), (ObjType(obj_particle, pt)->spawntime + ObjType(obj_particle, pt)->freezetime), startf, endf, ObjType(obj_particle, pt)->anispeed, idVar(ObjType(obj_particle, pt)->type, sprite_animation_onend));
									if (ani == IntType(1) && idVar(temp, pc_destroy_at_animation_finish) > 0 && idVar(ObjType(obj_particle, pt)->type, sprite_animation_onend) == IntType(0))
									{
										withOne (obj_particle, pt, self->id)
											instance_destroy(ScopeAny(self));
										
										continue;
									}
									ObjType(obj_particle, pt)->frame = round(startf + (endf - startf) * ani);
								}
							}
						
						if (sBool(is_timeline))
						{
							if (sVar(hide) > 0)
								continue;
							if (!(ObjType(obj_view, global::_app->view_main)->particles > 0) && (!(ObjType(obj_view, global::_app->view_second)->particles > 0) || !(ObjType(obj_view, global::_app->view_second)->show > 0)) && global::_app->window_state != /*"export_movie"*/ STR(49) && global::_app->window_state != /*"export_image"*/ STR(56))
								continue;
						}
						for (IntType a = X_; a <= Z_; a++)
							ObjType(obj_particle, pt)->pos[a] += ObjType(obj_particle, pt)->angle.Value(a) * ObjType(obj_particle, pt)->angle_speed;
						ObjType(obj_particle, pt)->angle_speed += ObjType(obj_particle, pt)->angle_speed_add;
						ObjType(obj_particle, pt)->angle_speed *= ObjType(obj_particle, pt)->angle_speed_mul;
						for (IntType a = X_; a <= Z_; a++)
						{
							ObjType(obj_particle, pt)->pos[a] += ObjType(obj_particle, pt)->spd.Value(a);
							ObjType(obj_particle, pt)->spd[a] += ObjType(obj_particle, pt)->spd_add.Value(a);
							ObjType(obj_particle, pt)->spd[a] *= ObjType(obj_particle, pt)->spd_mul.Value(a);
							if (idVar(ObjType(obj_particle, pt)->type, temp) > 0)
							{
								ObjType(obj_particle, pt)->rot[a] += ObjType(obj_particle, pt)->rot_spd.Value(a);
								ObjType(obj_particle, pt)->rot_spd[a] += ObjType(obj_particle, pt)->rot_spd_add.Value(a);
								ObjType(obj_particle, pt)->rot_spd[a] *= ObjType(obj_particle, pt)->rot_spd_mul.Value(a);
							}
							if (sBool(is_timeline) && sVar(value).Value(e_value_ATTRACTOR) != null_)
							{
								VarType att = sVar(value).Value(e_value_ATTRACTOR);
								if (idVar(att, type) != e_tl_type_PATH)
								{
									if (idVar(ObjType(obj_particle, pt)->type, orbit) > 0)
										ObjType(obj_particle, pt)->spd[a] += clamp(idVar(att, world_pos).Value(a) - ObjType(obj_particle, pt)->pos.Value(a), -sVar(value).Value(e_value_FORCE), sVar(value).Value(e_value_FORCE)) / 60.0;
									else
										ObjType(obj_particle, pt)->spd[a] += clamp(idVar(att, world_pos).Value(a) - sVar(world_pos).Value(a), -sVar(value).Value(e_value_FORCE), sVar(value).Value(e_value_FORCE)) / 60.0;
									
								}
							}
						}
						if (sBool(is_timeline) && sVar(value).Value(e_value_ATTRACTOR) != null_ && idVar(sVar(value).Value(e_value_ATTRACTOR), type) == e_tl_type_PATH)
						{
							VarType att, pointpos, pointposnext, curpos;
							RealType pointdis, curdis, d;
							IntType pointi, points;
							VecType v, p;
							att = sVar(value).Value(e_value_ATTRACTOR);
							pointpos = ArrType::From({ IntType(0), IntType(0), IntType(0) });
							pointdis = no_limit;
							pointi = IntType(0);
							points = array_length(VarType::CreateRef(idArr(att, path_table_matrix)));
							for (IntType j = IntType(0); j < points; j += IntType(3))
							{
								curpos = idArr(att, path_table_matrix).Value(j);
								curdis = point3D_distance(ObjType(obj_particle, pt)->pos, curpos);
								if (curdis < pointdis)
								{
									pointi = j;
									pointdis = curdis;
									pointpos = curpos;
								}
							}
							ArrType t;
							VecType n, b;
							t = ArrType::From({ pointpos.Value(PATH_TANGENT_X), pointpos.Value(PATH_TANGENT_Y), pointpos.Value(PATH_TANGENT_Z) });
							v = vec3_sub(ObjType(obj_particle, pt)->pos, pointpos);
							d = vec3_dot(v, t);
							p = vec3_add(pointpos, vec3_mul(t, d));
							n = vec3_normalize(vec3_sub(p, ObjType(obj_particle, pt)->pos));
							b = vec3_cross(t, n);
							for (IntType a = X_; a <= Z_; a++)
							{
								ObjType(obj_particle, pt)->pos[a] += clamp(p.Real(a) - ObjType(obj_particle, pt)->pos.Value(a), -sVar(value).Value(e_value_FORCE), sVar(value).Value(e_value_FORCE)) / 60.0;
								ObjType(obj_particle, pt)->pos[a] += (t.Value(a) * sVar(value).Value(e_value_FORCE_DIRECTIONAL));
								ObjType(obj_particle, pt)->pos[a] += (b.Real(a) * sVar(value).Value(e_value_FORCE_VORTEX));
							}
						}
						ObjType(obj_particle, pt)->sprite_angle += ObjType(obj_particle, pt)->sprite_angle_add;
						ObjType(obj_particle, pt)->scale += ObjType(obj_particle, pt)->scale_add;
						if (ObjType(obj_particle, pt)->scale <= IntType(0))
						{
							withOne (obj_particle, pt, self->id)
								instance_destroy(ScopeAny(self));
							
							continue;
						}
						ObjType(obj_particle, pt)->alpha += ObjType(obj_particle, pt)->alpha_add;
						if (ObjType(obj_particle, pt)->alpha <= IntType(0))
						{
							withOne (obj_particle, pt, self->id)
								instance_destroy(ScopeAny(self));
							
							continue;
						}
						if (ObjType(obj_particle, pt)->color_mix > -IntType(1))
							ObjType(obj_particle, pt)->color = merge_color((IntType)(ObjType(obj_particle, pt)->color_mix_start), (IntType)(ObjType(obj_particle, pt)->color_mix), clamp((s - ObjType(obj_particle, pt)->spawntime) / ObjType(obj_particle, pt)->color_mix_time, IntType(0), IntType(1)));
						BoolType hit_bounding_box = false;
						if (idVar(temp, pc_bounding_box_type) != /*"none"*/ STR(888) && idVar(ObjType(obj_particle, pt)->type, bounding_box) > 0)
						{
							if (idVar(temp, pc_bounding_box_type) == /*"ground"*/ STR(135))
							{
								if (ObjType(obj_particle, pt)->pos.Value(Z_) < idVar(temp, pc_bounding_box_ground_z))
								{
									hit_bounding_box = true;
									if (idVar(ObjType(obj_particle, pt)->type, bounce) > 0)
									{
										ObjType(obj_particle, pt)->spd[Z_] *= -idVar(ObjType(obj_particle, pt)->type, bounce_factor);
										if (abs(ObjType(obj_particle, pt)->spd.Value(Z_)) < 0.25)
											ObjType(obj_particle, pt)->spd[Z_] = IntType(0);
										for (IntType b = X_; b <= Z_; b++)
											ObjType(obj_particle, pt)->rot_spd[b] *= -0.5;
										ObjType(obj_particle, pt)->spd_mul[X_] *= 0.995;
										ObjType(obj_particle, pt)->spd_mul[X_] *= 0.995;
										ObjType(obj_particle, pt)->angle = vec3_reflect(ObjType(obj_particle, pt)->angle, vec3(IntType(0), IntType(0), IntType(1)));
										ObjType(obj_particle, pt)->angle_speed *= idVar(ObjType(obj_particle, pt)->type, bounce_factor);
									}
									ObjType(obj_particle, pt)->pos[Z_] = max({ ObjType(obj_particle, pt)->pos.Value(Z_), idVar(temp, pc_bounding_box_ground_z) });
								}
							}
							else
							{
								VarType boxstart, boxend;
								boxstart = null_;
								boxend = null_;
								if (idVar(temp, pc_bounding_box_type) == /*"spawn"*/ STR(1335))
								{
									if (!(idVar(temp, pc_spawn_region_use) > 0))
										continue;
									if (idVar(temp, pc_spawn_region_type) == /*"sphere"*/ STR(527))
									{
										RealType dis = point3D_distance(ObjType(obj_particle, pt)->pos, sVar(world_pos));
										if (dis > idVar(temp, pc_spawn_region_sphere_radius))
										{
											hit_bounding_box = true;
											for (IntType a = X_; a <= Z_; a++)
											{
												if (idVar(ObjType(obj_particle, pt)->type, bounce) > 0)
												{
													ObjType(obj_particle, pt)->spd[a] *= -idVar(ObjType(obj_particle, pt)->type, bounce_factor);
													if (abs(ObjType(obj_particle, pt)->spd.Value(a)) < 0.1)
														ObjType(obj_particle, pt)->spd[a] = IntType(0);
													ObjType(obj_particle, pt)->rot_spd[a] *= -0.5;
												}
											}
											ObjType(obj_particle, pt)->angle = vec3_reflect(ObjType(obj_particle, pt)->angle, vec3_normalize(vec3_sub(ObjType(obj_particle, pt)->pos, sVar(world_pos))));
											ObjType(obj_particle, pt)->angle_speed *= idVar(ObjType(obj_particle, pt)->type, bounce_factor);
											ObjType(obj_particle, pt)->pos = point3D_add(sVar(world_pos), vec3_mul(vec3_normalize(point3D_sub(ObjType(obj_particle, pt)->pos, sVar(world_pos))), idVar(temp, pc_spawn_region_sphere_radius)));
										}
									}
									else
										if (idVar(temp, pc_spawn_region_type) == /*"cube"*/ STR(3))
										{
											for (IntType a = X_; a <= Z_; a++)
											{
												boxstart[a] = sVar(world_pos).Value(a) - (RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0;
												boxend[a] = sVar(world_pos).Value(a) + (RealType)idVar(temp, pc_spawn_region_cube_size) / 2.0;
											}
										}
										else
											if (idVar(temp, pc_spawn_region_type) == /*"box"*/ STR(1329))
											{
												for (IntType a = X_; a <= Z_; a++)
												{
													boxstart[a] = sVar(world_pos).Value(a) - idVar(temp, pc_spawn_region_box_size).Value(a) / 2.0;
													boxend[a] = sVar(world_pos).Value(a) + idVar(temp, pc_spawn_region_box_size).Value(a) / 2.0;
												}
											}
											else
												if (idVar(temp, pc_spawn_region_type) == /*"path"*/ STR(534) && idVar(temp, pc_spawn_region_path) != null_)
												{
													VarType path, pointpos, pointposnext, curpos;
													RealType pointdis, curdis, d, dis;
													IntType pointi, points;
													VecType v, p, dir;
													ArrType t;
													path = idVar(temp, pc_spawn_region_path);
													pointpos = ArrType::From({ IntType(0), IntType(0), IntType(0) });
													pointdis = no_limit;
													pointi = IntType(0);
													points = array_length(VarType::CreateRef(idArr(path, path_table_matrix)));
													for (IntType j = IntType(0); j < points; j += IntType(3))
													{
														curpos = idArr(path, path_table_matrix).Value(j);
														curdis = point3D_distance(ObjType(obj_particle, pt)->pos, curpos);
														if (curdis < pointdis)
														{
															pointi = j;
															pointdis = curdis;
															pointpos = curpos;
														}
													}
													t = ArrType::From({ pointpos.Value(PATH_TANGENT_X), pointpos.Value(PATH_TANGENT_Y), pointpos.Value(PATH_TANGENT_Z) });
													v = vec3_sub(ObjType(obj_particle, pt)->pos, pointpos);
													d = vec3_dot(v, t);
													p = vec3_add(pointpos, vec3_mul(t, d));
													dis = point3D_distance(ObjType(obj_particle, pt)->pos, p);
													if (dis > idVar(temp, pc_spawn_region_path_radius))
													{
														dir = vec3_normalize(vec3_sub(ObjType(obj_particle, pt)->pos, p));
														ObjType(obj_particle, pt)->pos = vec3_add(p, vec3_mul(dir, idVar(temp, pc_spawn_region_path_radius)));
														ObjType(obj_particle, pt)->angle = vec3_reflect(ObjType(obj_particle, pt)->angle, vec3_normalize(vec3_sub(ObjType(obj_particle, pt)->pos, p)));
														ObjType(obj_particle, pt)->angle_speed *= idVar(ObjType(obj_particle, pt)->type, bounce_factor);
													}
												}
										
									
									
								}
								else
									if (idVar(temp, pc_bounding_box_type) == /*"custom"*/ STR(598))
									{
										for (IntType a = X_; a <= Z_; a++)
										{
											boxstart[a] = sVar(world_pos).Value(a) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_start).Value(a);
											boxend[a] = sVar(world_pos).Value(a) * idVar(temp, pc_bounding_box_relative) + idVar(temp, pc_bounding_box_custom_end).Value(a);
										}
									}
								
								if (boxstart != null_)
								{
									VarType normal = null_;
									if (ObjType(obj_particle, pt)->pos.Value(X_) < boxstart.Value(X_))
										normal = vec3(IntType(1), IntType(0), IntType(0));
									if (ObjType(obj_particle, pt)->pos.Value(X_) > boxend.Value(X_))
										normal = vec3(-IntType(1), IntType(0), IntType(0));
									if (ObjType(obj_particle, pt)->pos.Value(Y_) < boxstart.Value(Y_))
										normal = vec3(IntType(0), IntType(1), IntType(0));
									if (ObjType(obj_particle, pt)->pos.Value(Y_) > boxend.Value(Y_))
										normal = vec3(IntType(0), -IntType(1), IntType(0));
									if (ObjType(obj_particle, pt)->pos.Value(Z_) < boxstart.Value(Z_))
										normal = vec3(IntType(0), IntType(0), IntType(1));
									if (ObjType(obj_particle, pt)->pos.Value(Z_) > boxend.Value(Z_))
										normal = vec3(IntType(0), IntType(0), -IntType(1));
									if (normal != null_)
									{
										hit_bounding_box = true;
										for (IntType a = X_; a <= Z_; a++)
											ObjType(obj_particle, pt)->pos[a] = clamp(ObjType(obj_particle, pt)->pos.Value(a), boxstart.Value(a), boxend.Value(a));
										ObjType(obj_particle, pt)->angle = vec3_reflect(ObjType(obj_particle, pt)->angle, normal);
										ObjType(obj_particle, pt)->angle_speed *= idVar(ObjType(obj_particle, pt)->type, bounce_factor);
									}
									for (IntType a = X_; a <= Z_; a++)
									{
										if (ObjType(obj_particle, pt)->pos.Value(a) < boxstart.Value(a) || ObjType(obj_particle, pt)->pos.Value(a) > boxend.Value(a))
										{
											hit_bounding_box = true;
											ObjType(obj_particle, pt)->pos[a] = clamp(ObjType(obj_particle, pt)->pos.Value(a), boxstart.Value(a), boxend.Value(a));
											if (idVar(ObjType(obj_particle, pt)->type, bounce) > 0)
											{
												ObjType(obj_particle, pt)->spd[a] *= -idVar(ObjType(obj_particle, pt)->type, bounce_factor);
												if (abs(ObjType(obj_particle, pt)->spd.Value(a)) < 0.25)
													ObjType(obj_particle, pt)->spd[a] = IntType(0);
												for (IntType b = X_; b <= Z_; b++)
													ObjType(obj_particle, pt)->rot_spd[b] *= -0.5;
											}
										}
									}
								}
							}
							
						}
						if (hit_bounding_box && idVar(temp, pc_destroy_at_bounding_box) > 0)
						{
							instance_destroy(self, { pt });
							continue;
						}
					}
				}
			}
		}
		sReal(spawn_laststep) = sReal(spawn_currentstep);
	}
	
	RealType percent(VarType value, VarType s, VarType e, BoolType limit)
	{
		if (s == e)
			return (value < s);
		if (limit)
			return clamp((value - s) / (e - s), IntType(0), IntType(1));
		else
			return (value - s) / (e - s);
		
		return 0.0;
	}
	
	ArrType point3D_angle(VarType from, VarType to)
	{
		VecType dir;
		RealType yaw, pitch;
		dir = vec3_sub(to, from);
		yaw = arctan2(dir.Real(X_), dir.Real(Y_)) * 180.0 / pi_;
		pitch = arctan2(sqrt(power(dir.Real(X_), 2.0) + power(dir.Real(Y_), 2.0)), dir.Real(Z_)) * 180.0 / pi_;
		return ArrType::From({ pitch, IntType(0), yaw });
	}
	
	RealType point3D_angle_deg(VecType from, VecType to)
	{
		RealType d = vec3_length(from) * vec3_length(to);
		if (d < 0.0001)
			return IntType(0);
		return radtodeg(arccos(clamp(vec3_dot(from, to) / d, -IntType(1), IntType(1))));
	}
	
	RealType point3D_angle_signed(VecType from, VecType to, VarType axis)
	{
		return point3D_angle_deg(from, to) * sign(vec3_dot(axis, vec3_cross(from, to)));
	}
	
	VecType point3D_plane_intersect(VarType planepos, VarType planenormal, VecType raypos, VarType raydir)
	{
		RealType dist = vec3_dot(vec3_sub(planepos, raypos), planenormal) / max({ vec3_dot(planenormal, raydir), 0.0001 });
		return vec3_add(raypos, vec3_mul(raydir, dist));
	}
	
}
