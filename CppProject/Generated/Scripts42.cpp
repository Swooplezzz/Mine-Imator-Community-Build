/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.11 22:43:13 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType percent(VarType value, VarType s, VarType e, BoolType limit)
	{
		if (s == e)
			return (value < s);
		if (limit)
			return clamp((value - s) / (e - s), IntType(0), IntType(1));
		else
			return (value - s) / (e - s);
		
		return 0.0;
	}
	
	ArrType point3D_angle(VarType from, VarType to)
	{
		VecType dir;
		RealType yaw, pitch;
		dir = vec3_sub(to, from);
		yaw = arctan2(dir.Real(X_), dir.Real(Y_)) * 180.0 / pi_;
		pitch = arctan2(sqrt(power(dir.Real(X_), 2.0) + power(dir.Real(Y_), 2.0)), dir.Real(Z_)) * 180.0 / pi_;
		return ArrType::From({ pitch, IntType(0), yaw });
	}
	
	RealType point3D_angle_deg(VecType from, VecType to)
	{
		RealType d = vec3_length(from) * vec3_length(to);
		if (d < 0.0001)
			return IntType(0);
		return radtodeg(arccos(clamp(vec3_dot(from, to) / d, -IntType(1), IntType(1))));
	}
	
	RealType point3D_angle_signed(VecType from, VecType to, VarType axis)
	{
		return point3D_angle_deg(from, to) * sign(vec3_dot(axis, vec3_cross(from, to)));
	}
	
	VecType point3D_plane_intersect(VarType planepos, VarType planenormal, VecType raypos, VarType raydir)
	{
		RealType dist = vec3_dot(vec3_sub(planepos, raypos), planenormal) / max({ vec3_dot(planenormal, raydir), 0.0001 });
		return vec3_add(raypos, vec3_mul(raydir, dist));
	}
	
	ArrType point3D_project(VarType pnt, MatrixType mat, VarType w, VarType h)
	{
		VecType clipspace, device;
		clipspace = point4D_mul_matrix(ArrType::From({ pnt.Value(X_), pnt.Value(Y_), pnt.Value(Z_), IntType(1) }), mat);
		if (clipspace.Real(W_) <= IntType(0))
		{
			global::point3D_project_error = true;
			return ArrType::From({ IntType(0), IntType(0) });
		}
		global::point3D_project_error = false;
		device = point4D_homogenize(clipspace);
		return ArrType::From({ ((device.Real(X_) + 1.0) / 2.0) * w, ((IntType(1) - device.Real(Y_)) / 2.0) * h });
	}
	
	VecType point3D_project_plane(VarType pos, VarType planepos, VarType n)
	{
		return point3D_sub(pos, vec3_mul(n, (vec3_dot(n, pos) + -vec3_dot(n, planepos))));
	}
	
	VecType point3D_triangle_normal(VarType p1, VarType p2, VarType p3)
	{
		return vec3_normalize(vec3_cross(point3D_mul(p1, p3), point3D_mul(p2, p3)));
	}
	
	ArrType point_lerp(VarType pnt1, VarType pnt2, RealType amount)
	{
		ArrType np = ArrType::From({});
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(pnt1)); i++)
			np[i] = lerp(pnt1.Value(i), pnt2.Value(i), amount);
		return np;
	}
	
	RealType point_line_distance(RealType x1, RealType y1, RealType x2, RealType y2, RealType x3, RealType y3)
	{
		RealType x0, y0, cx, cy, t;
		cx = x2 - x1;
		cy = y2 - y1;
		if (cx == IntType(0) && cy == IntType(0))
		{
			x0 = x1;
			y0 = y1;
		}
		else
		{
			t = clamp(((x3 - x1) * cx + (y3 - y1) * cy) / (cx * cx + cy * cy), IntType(0), IntType(1));
			x0 = x1 + t * cx;
			y0 = y1 + t * cy;
		}
		
		return point_distance(x3, y3, x0, y0);
	}
	
	RealType point_zdirection(RealType x1, RealType y1, RealType z1, RealType x2, RealType y2, RealType z2)
	{
		if (x1 == x2 && y1 == y2)
		{
			if (z1 > z2)
				return -IntType(90);
			else
				return IntType(90);
			
		}
		return radtodeg(arctan((z2 - z1) / sqrt(max({ 0.001, sqr(x2 - x1) + sqr(y2 - y1) }))));
	}
	
	void popup_about_draw(ScopeAny self)
	{
		draw_box(sVar(dx), sVar(dy), sVar(dw), IntType(128), false, global::c_overlay, global::a_overlay);
		gpu_set_tex_filter(true);
		draw_sprite_ext(ID_spr_logo, IntType(0), (IntType)(sVar(dx) + (RealType)sVar(dw) / 2.0), (IntType)(sVar(dy) + IntType(54)), .75, .75, 0.0, c_white, draw_get_alpha());
		gpu_set_tex_filter(false);
		draw_set_font(sInt(font_value));
		VarType text;
		RealType width, textx;
		text = text_get({ /*"aboutversion"*/ STR(2001), mineimator_version_full }) + text_get({ /*"aboutreleasedate"*/ STR(2002), mineimator_version_date });
		width = string_width(text);
		textx = floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - width / 2.0);
		VarType version = text_get({ /*"aboutversion"*/ STR(2001), mineimator_version_full }) + ((global::trial_version > 0) ? /*" "*/ STR(21) + text_get({ /*"startuptrial"*/ STR(2003) }) : /*""*/ STR(0));
		draw_button_text(self, { version, textx, sVar(dy) + IntType(98), ID_popup_open_url, link_website, link_website });
		textx += string_width(version);
		draw_label(self, { text_get({ /*"aboutreleasedate"*/ STR(2002), mineimator_version_date }), textx, sVar(dy) + IntType(98), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
		RealType mctext, mctextx;
		mctext = string_width(text_get({ /*"aboutminecraftpre"*/ STR(2004) }) + text_get({ /*"aboutminecraft"*/ STR(2005) }));
		mctextx = floor(sVar(content_x) + ((RealType)sVar(content_width) / 2.0) - (mctext / 2.0));
		draw_label(self, { text_get({ /*"aboutminecraftpre"*/ STR(2004) }), mctextx, sVar(dy) + IntType(98) + IntType(19), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
		mctextx += string_width(text_get({ /*"aboutminecraftpre"*/ STR(2004) }));
		draw_button_text(self, { text_get({ /*"aboutminecraft"*/ STR(2005) }), mctextx, sVar(dy) + IntType(98) + IntType(19), ID_popup_open_url, link_minecraft, link_minecraft });
		sVar(dy) += IntType(128) + IntType(48);
		sVar(dx) = sVar(content_x) + IntType(64);
		VarType buttonx, buttony;
		buttonx = sVar(content_x) + IntType(12);
		buttony = sVar(content_y) + sVar(content_height) - (IntType(12) + IntType(28));
		if (draw_button_icon(self, { /*"aboutsite"*/ STR(2006), buttonx, buttony, IntType(24), IntType(24), false, icons_WORLD, null_, false, /*"aboutsite"*/ STR(2006) }))
			open_url(link_website);
		if (draw_button_icon(self, { /*"aboutforums"*/ STR(2007), buttonx + (IntType(30)), buttony, IntType(24), IntType(24), false, icons_COMMENTS, null_, false, /*"aboutforums"*/ STR(2007) }))
			open_url(link_forums);
		if (draw_button_icon(self, { /*"abouttwitter"*/ STR(2008), buttonx + (IntType(30) * IntType(2)), buttony, IntType(24), IntType(24), false, icons_TWITTER, null_, false, /*"abouttwitter"*/ STR(2008) }))
			open_url(link_twitter);
		if (draw_button_icon(self, { /*"aboutdiscord"*/ STR(2009), buttonx + (IntType(30) * IntType(3)), buttony, IntType(24), IntType(24), false, icons_DISCORD, null_, false, /*"aboutdiscord"*/ STR(2009) }))
			open_url(link_discord);
		if (global::trial_version > 0)
		{
			if (draw_button_label(self, /*"aboutupgrade"*/ STR(2010), sVar(content_x) + sVar(content_width) - IntType(13), sVar(content_y) + sVar(content_height) - (IntType(12) + IntType(32)), null_, icons_KEY, e_button_PRIMARY, null_, fa_right))
			{
				popup_switch(self, sInt(popup_upgrade));
				ObjType(obj_popup, sInt(popup_upgrade))->page = IntType(0);
			}
		}
		else
		{
			if (draw_button_label(self, /*"aboutdonate"*/ STR(2011), sVar(content_x) + sVar(content_width) - IntType(13), sVar(content_y) + sVar(content_height) - (IntType(12) + IntType(32)), null_, icons_DONATE, e_button_PRIMARY, null_, fa_right))
				open_url(link_donate);
		}
		
		sVar(dy) += IntType(12);
		draw_label(self, { text_get({ /*"aboutdevelopment"*/ STR(2012) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(26);
		draw_button_text(self, { /*"David"*/ STR(2013), sVar(dx), sVar(dy), ID_popup_open_url, link_david, link_david, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"Nimi"*/ STR(2014), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"Marvin"*/ STR(2015), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"mbanders"*/ STR(2016), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(34);
		draw_label(self, { text_get({ /*"aboutmoddevelopment"*/ STR(2017) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(26);
		draw_label(self, { /*"Swooplezz"*/ STR(2018), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"SoundsDotZip"*/ STR(2019), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"Elkav"*/ STR(2020), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(19);
		draw_label(self, { /*"mbanders"*/ STR(2016), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dx) += IntType(130) + IntType(24);
		sVar(dy) = sVar(content_y) + IntType(176);
		sVar(dy) += IntType(12);
		draw_label(self, { text_get({ /*"aboutcreatedby"*/ STR(2021) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(26);
		draw_button_text(self, { /*"David Andrei"*/ STR(2022), sVar(dx), sVar(dy), ID_popup_open_url, link_david, link_david, sInt(font_label) });
		sVar(dx) += IntType(130) + IntType(24);
		sVar(dy) = sVar(content_y) + IntType(176);
		sVar(dy) += IntType(12);
		draw_label(self, { text_get({ /*"aboutuibranding"*/ STR(2023) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(26);
		draw_label(self, { /*"Voxy"*/ STR(2024), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dx) -= 130.0 + 24.0;
		sVar(dy) += IntType(34);
		draw_label(self, { text_get({ /*"aboutbetatesting"*/ STR(2025) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(26);
		ArrType list = ArrType::From({ /*"9redwoods"*/ STR(2026), /*"Alpha Toostrr"*/ STR(2027), /*"AnxiousCynic"*/ STR(2028), /*"Cade [CaZaKoJa]"*/ STR(2029), /*"Hozq"*/ STR(2030), /*"Jnick"*/ STR(2031), /*"Jossamations"*/ STR(2032), /*"KeepOnChucking"*/ STR(2033), /*"Rollo"*/ STR(2034), /*"SKIBBZ"*/ STR(2035), /*"UpgradedMoon"*/ STR(2036), /*"Vash"*/ STR(2037), /*"__Mine__"*/ STR(2038) });
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(list)); i++)
		{
			draw_label(self, { list.Value(i), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			sVar(dy) += IntType(19);
			if (i == IntType(6))
			{
				sVar(dx) += IntType(130) + IntType(24);
				sVar(dy) = sVar(content_y) + IntType(176) + IntType(12) + IntType(26) + IntType(26) + IntType(34);
			}
		}
	}
	
	void popup_advanced_draw(ScopeAny self)
	{
		draw_set_font(sInt(font_value));
		StringType text = string_limit_ext(text_get({ /*"advancedinfo"*/ STR(2039) }), (sVar(dw) - IntType(40)) + IntType(8), no_limit);
		draw_label(self, { text, floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy), fa_middle, fa_top, global::c_text_main, global::a_text_main, sInt(font_value) });
		sVar(dy) += string_height(text) + IntType(19);
		draw_set_font(sInt(font_button));
		IntType buttonx = string_width(text_get({ /*"advancedenable"*/ STR(2040) })) + button_padding;
		tab_control_button_label(self);
		if (draw_button_label(self, /*"advancedenable"*/ STR(2040), sVar(dx) + sVar(dw) - buttonx, sVar(dy)))
		{
			action_setting_program_mode(self, true);
			popup_close(self);
		}
		buttonx += IntType(12) + (string_width(text_get({ /*"advancednotnow"*/ STR(2041) })) + button_padding);
		if (draw_button_label(self, /*"advancednotnow"*/ STR(2041), sVar(dx) + sVar(dw) - buttonx, sVar(dy), null_, null_, e_button_SECONDARY))
			popup_close(self);
		tab_next(self);
	}
	
	VarType popup_armor_editor_draw_piece_type(ScopeAny self, StringType piece, IntType pieceid, RealType capwid)
	{
		IntType statelen = array_length(VarType::CreateRef(idVar(idVar(sInt(popup), armor_edit), model_state)));
		VarType w = sVar(dw);
		VarType type = /*""*/ STR(0);
		for (IntType i = IntType(0); i < statelen; i += IntType(2))
		{
			VarType state = idVar(idVar(sInt(popup), armor_edit), model_state).Value(i);
			VarType model = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(/*"armor"*/ STR(782));
			if (state != piece)
				continue;
			sVar(menu_model_current) = model;
			sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
			type = idVar(idVar(sInt(popup), armor_edit), model_state).Value(i + IntType(1));
			if (type == /*"leather"*/ STR(1834))
			{
				w -= (28.0 + 8.0);
				if (draw_button_color(self, /*"armoreditordye"*/ STR(2042) + piece, sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(1)), minecraft_get_color(/*"other:leather"*/ STR(2043)), false, ID_action_armor_editor))
				{
					sInt(menu_armor_piece) = pieceid;
					sInt(menu_armor_piece_data) = IntType(1);
				}
			}
			if (idVar(sInt(popup), armor_edit) == sInt(bench_settings))
				draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), w, IntType(24), type, minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), type), ID_action_bench_model_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
			else
				draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), w, IntType(24), type, minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), type), (idVar(idVar(sInt(popup), armor_edit), type) == e_temp_type_BODYPART) ? ID_action_lib_bodypart_model_state : ID_action_lib_model_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
			
		}
		sVar(menu_model_current) = null_;
		return type;
	}
	
	void popup_armor_editor_draw_piece(ScopeAny self, StringType piece, IntType pieceid, RealType capwid)
	{
		if (sStr(settings_menu_name) != /*""*/ STR(0))
			sVar(settings_menu_busy_prev) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
		if (sVar(context_menu_name) != /*""*/ STR(0))
			sVar(context_menu_busy_prev) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
		if (ds_list_size(sInt(menu_list)) > IntType(0))
			ObjType(obj_menu, DsList(sInt(menu_list))[IntType(0)])->menu_busy_prev = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
		VarType piecetype = /*""*/ STR(0);
		ObjType(obj_popup, sInt(popup_armor_editor))->piece_current = pieceid;
		tab_control(self, IntType(24));
		piecetype = popup_armor_editor_draw_piece_type(self, piece, pieceid, capwid);
		tab_next(self);
		ObjType(obj_popup, sInt(popup_armor_editor))->piece_data_id = IntType(2);
		tab_control(self, IntType(24));
		draw_button_menu(self, { /*"armoreditorpattern"*/ STR(1535) + piece, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(2)), text_get({ /*"armoreditorpattern"*/ STR(1535) + idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(2)) }), ID_action_armor_editor, piecetype == /*"none"*/ STR(909), null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
		tab_next(self);
		ObjType(obj_popup, sInt(popup_armor_editor))->piece_data_id = IntType(3);
		tab_control(self, IntType(24));
		draw_button_menu(self, { /*"armoreditormaterial"*/ STR(1540) + piece, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(3)), text_get({ /*"armoreditormaterial"*/ STR(1540) + idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(3)) }), ID_action_armor_editor, (piecetype == /*"none"*/ STR(909) || idArr(idVar(sInt(popup), armor_edit), armor_array).Value(pieceid + IntType(2)) == /*"none"*/ STR(909)), null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
		tab_next(self);
	}
	
	void popup_armor_editor_draw(ScopeAny self)
	{
		ObjType(obj_preview, idInt(sInt(popup), preview))->select = idVar(sInt(popup), armor_edit);
		ObjType(obj_preview, idInt(sInt(popup), preview))->last_select = idVar(sInt(popup), armor_edit);
		ObjType(obj_preview, idInt(sInt(popup), preview))->update = true;
		preview_draw(self, idInt(sInt(popup), preview), sVar(dx), sVar(dy), IntType(200), sVar(dh) - (sVar(dy) - sVar(content_y)));
		sVar(dx) += IntType(216);
		sVar(dw) = IntType(310);
		RealType capwid = IntType(128);
		popup_armor_editor_draw_piece(self, /*"helmet"*/ STR(2044), IntType(0), capwid);
		draw_divide(sVar(dx), sVar(dy), sVar(dw));
		sVar(dy) += IntType(8);
		popup_armor_editor_draw_piece(self, /*"chestplate"*/ STR(2045), IntType(4), capwid);
		draw_divide(sVar(dx), sVar(dy), sVar(dw));
		sVar(dy) += IntType(8);
		popup_armor_editor_draw_piece(self, /*"leggings"*/ STR(2046), IntType(8), capwid);
		draw_divide(sVar(dx), sVar(dy), sVar(dw));
		sVar(dy) += IntType(8);
		popup_armor_editor_draw_piece(self, /*"boots"*/ STR(2047), IntType(12), capwid);
	}
	
	void popup_armor_editor_show(ScopeAny self, VarType obj)
	{
		withOne (obj_popup, sInt(popup_armor_editor), self->id)
		{
			withOne (obj_preview, self->preview, self->id)
			{
				preview_reset_view(ScopeAny(self));
				self->fov = IntType(25);
				self->xy_lock = true;
				self->zoom = 0.5;
				self->goalzoom = 0.5;
			}
			
			self->armor_edit = obj;
			ObjType(obj_preview, self->preview)->select = self->armor_edit;
			ObjType(obj_preview, self->preview)->last_select = self->armor_edit;
		}
		
		popup_show(self, sInt(popup_armor_editor));
	}
	
	void popup_close(ScopeAny self)
	{
		if (sInt(popup) == sInt(popup_modelbench))
			ObjType(obj_popup, sInt(popup_modelbench))->not_now = true;
		if (sInt(popup) == sInt(popup_upgrade))
		{
			ObjType(obj_popup, sInt(popup_upgrade))->open_advanced = false;
			ObjType(obj_popup, sInt(popup_upgrade))->custom_rendering = /*"default"*/ STR(102);
		}
		sVar(window_busy) = /*""*/ STR(0);
		sVar(window_focus) = /*""*/ STR(0);
		sStr(popup_ani_type) = /*"hide"*/ STR(751);
		app_mouse_clear(self);
	}
	
	void popup_downloadskin_draw(ScopeAny self)
	{
		tab_control_textfield(self);
		draw_textfield(self, /*"downloadskinusername"*/ STR(2048), sVar(dx), sVar(dy), sVar(dw) - IntType(28), IntType(24), idInt(sInt(popup), tbx_username), null_);
		BoolType download = keyboard_check_pressed(vk_enter);
		if (draw_button_icon(self, { /*"downloadskindownload"*/ STR(2049), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(18), IntType(24), IntType(24), false, icons_DOWNLOAD, null_, ObjType(obj_textbox, idInt(sInt(popup), tbx_username))->text == /*""*/ STR(0) || sInt(http_downloadskin) != null_, /*"tooltipdownloadskin"*/ STR(2050) }))
			download = true;
		if (download && (ObjType(obj_textbox, idInt(sInt(popup), tbx_username))->text != /*""*/ STR(0) && sInt(http_downloadskin) == null_))
		{
			idVar(sInt(popup), username) = ObjType(obj_textbox, idInt(sInt(popup), tbx_username))->text;
			idVar(sInt(popup), fail_message) = /*""*/ STR(0);
			idInt(sInt(popup), start_time) = current_time();
			sInt(http_downloadskin) = http_get_file(link_skins + idVar(sInt(popup), username), download_image_file);
		}
		tab_next(self);
		tab_control(self, IntType(8));
		if (sInt(http_downloadskin) != null_)
		{
			draw_label(self, { text_get({ /*"downloadskindownloading"*/ STR(2051) }), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_caption) });
			if (current_time() - idInt(sInt(popup), start_time) > IntType(3000))
			{
				idVar(sInt(popup), fail_message) = text_get({ /*"errordownloadskininternet"*/ STR(117) });
				sInt(http_downloadskin) = null_;
			}
		}
		else
			if (idVar(sInt(popup), fail_message) != /*""*/ STR(0))
				draw_label(self, { idVar(sInt(popup), fail_message), sVar(dx), sVar(dy) + IntType(8), fa_left, fa_bottom, global::c_error, IntType(1), sInt(font_caption) });
		
		tab_next(self);
		VarType previewx = sVar(content_x) + (RealType)sVar(content_width) / 2.0 - IntType(64);
		tab_control(self, IntType(128));
		draw_box(previewx, sVar(dy), IntType(128), IntType(128), false, global::c_level_bottom, IntType(1));
		if (idVar(sInt(popup), texture) > 0)
			draw_texture({ idVar(sInt(popup), texture), previewx, sVar(dy), IntType(2), IntType(2) });
		tab_next(self);
		tab_control_button_label(self);
		if (draw_button_label(self, /*"downloadskindone"*/ STR(2052), sVar(dx) + sVar(dw), sVar(dy), null_, null_, e_button_PRIMARY, null_, e_anchor_RIGHT, !(idVar(sInt(popup), texture) > 0)))
		{
			popup_close(self);
			script_execute(self, { idInt(sInt(popup), value_script), e_option_DOWNLOAD_SKIN_DONE });
		}
		tab_next(self);
	}
	
	void popup_downloadskin_show(ScopeAny self, IntType script)
	{
		withOne (obj_popup, sInt(popup_downloadskin), self->id)
		{
			if (self->texture != null_)
				texture_free(self->texture);
			self->value_script = script;
			self->texture = null_;
			self->username = /*""*/ STR(0);
			self->fail_message = /*""*/ STR(0);
			ObjType(obj_textbox, self->tbx_username)->text = /*""*/ STR(0);
		}
		
		file_delete_lib(download_image_file);
		sVar(window_focus) = string(ObjType(obj_popup, sInt(popup_downloadskin))->tbx_username);
		popup_show(self, sInt(popup_downloadskin));
	}
	
	RealType popup_draw(ScopeAny self)
	{
		RealType boxx, boxy, boxh;
		VarType boxw, closex, closey;
		if (sVar(popup_ani) == IntType(1))
		{
			RealType off = (idVar(sInt(popup), custom_height_goal) - idVar(sInt(popup), custom_height)) / max({ IntType(1), 4.0 / global::delta });
			if (off != IntType(0))
			{
				idVar(sInt(popup), custom_height) += off;
				idReal(sInt(popup), offset_y) += off / 2.0;
			}
		}
		else
			if (sInt(popup) != null_)
				idVar(sInt(popup), custom_height) = idVar(sInt(popup), custom_height_goal);
		
		if (sStr(popup_ani_type) == /*"show"*/ STR(752))
		{
			sVar(popup_ani) = min({ IntType(1), test_reduced_motion(IntType(1), (sVar(popup_ani) + 0.075 * global::delta)) });
			if (sVar(popup_ani) == IntType(1))
				sStr(popup_ani_type) = /*""*/ STR(0);
		}
		else
			if (sStr(popup_ani_type) == /*"hide"*/ STR(751))
			{
				sVar(popup_ani) = max({ IntType(0), test_reduced_motion(IntType(0), (sVar(popup_ani) - 0.075 * global::delta)) });
				if (sInt(popup_switch_to) > 0 && sVar(popup_ani) == IntType(0))
				{
					sInt(popup) = sInt(popup_switch_to);
					sInt(popup_switch_to) = null_;
					sStr(popup_ani_type) = /*"show"*/ STR(752);
					sVar(window_busy) = /*""*/ STR(0);
				}
				else
					if (sVar(popup_ani) == IntType(0))
					{
						sVar(window_busy) = /*""*/ STR(0);
						if (sInt(popup) != null_ && idVar(sInt(popup), closescript) > 0)
							script_execute(self, { idVar(sInt(popup), closescript) });
						sInt(popup) = null_;
						sStr(popup_ani_type) = /*""*/ STR(0);
						sInt(popup_switch_from) = null_;
					}
				
			}
		
		if (!(sInt(popup) > 0) || (sStr(popup_ani_type) == /*"hide"*/ STR(751) && sInt(popup_switch_to) == null_))
		{
			sVar(popup_block_ani) = max({ IntType(0), test_reduced_motion(IntType(0), (sVar(popup_block_ani) - 0.075 * global::delta)) });
			sStr(popup_block_ani_ease) = /*"easeincirc"*/ STR(597);
			sBool(popup_mouseon) = false;
			if (!(sInt(popup) > 0))
				return IntType(0);
		}
		else
			if (idVar(sInt(popup), block) > 0 || (sInt(popup_switch_to) != null_ && idVar(sInt(popup_switch_to), block) > 0 && sStr(popup_ani_type) == /*"hide"*/ STR(751)))
			{
				sVar(popup_block_ani) = min({ IntType(1), test_reduced_motion(IntType(1), (sVar(popup_block_ani) + 0.05 * global::delta)) });
				sStr(popup_block_ani_ease) = /*"easeoutcirc"*/ STR(598);
			}
			else
			{
				sVar(popup_block_ani) = max({ IntType(0), test_reduced_motion(IntType(0), (sVar(popup_block_ani) - 0.05 * global::delta)) });
				sStr(popup_block_ani_ease) = /*"easeincirc"*/ STR(597);
			}
		
		
		draw_set_alpha(ease(/*"easeoutcirc"*/ STR(598), sVar(popup_ani)));
		if (sVar(window_busy) == /*"popupmove"*/ STR(2053))
			draw_set_alpha(0.5);
		if (sVar(window_busy) == /*"popup"*/ STR(1636) + idVar(sInt(popup), name))
			sVar(window_busy) = /*""*/ STR(0);
		boxw = idVar(sInt(popup), width);
		boxh = floor(idVar(sInt(popup), custom_height));
		boxx = floor(idReal(sInt(popup), offset_x)) + sReal(window_width) / 2.0 - (RealType)boxw / 2.0;
		boxy = floor(idReal(sInt(popup), offset_y)) + sReal(window_height) / 2.0 - boxh / 2.0;
		boxx = floor(boxx);
		boxy = floor(boxy);
		sBool(popup_mouseon) = app_mouse_box(self, boxx, boxy, boxw, boxh);
		sVar(content_x) = boxx;
		sVar(content_y) = boxy;
		sVar(content_width) = boxw;
		sVar(content_height) = boxh;
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		sVar(content_tab) = null_;
		draw_dropshadow(self, boxx, boxy, boxw, boxh, c_black, IntType(1));
		draw_box(boxx, boxy, boxw, boxh, false, global::c_level_top, IntType(1));
		draw_outline(boxx, boxy, boxw, boxh, IntType(1), global::c_border, global::a_border, true);
		if (sVar(window_busy) == /*"popupclick"*/ STR(2054))
		{
			if (sReal(mouse_move) > IntType(10))
			{
				sReal(popup_move_offset_x) = idReal(sInt(popup), offset_x);
				sReal(popup_move_offset_y) = idReal(sInt(popup), offset_y);
				sVar(window_busy) = /*"popupmove"*/ STR(2053);
			}
			else
				if (!sBool(mouse_left))
					sVar(window_busy) = /*""*/ STR(0);
			
		}
		if (sVar(window_busy) == /*"popupmove"*/ STR(2053))
		{
			idReal(sInt(popup), offset_x) = sReal(popup_move_offset_x) + (gmlGlobal::mouse_x - sInt(mouse_click_x));
			idReal(sInt(popup), offset_y) = sReal(popup_move_offset_y) + (gmlGlobal::mouse_y - sInt(mouse_click_y));
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		else
		{
			idReal(sInt(popup), offset_x) = clamp(idReal(sInt(popup), offset_x), -(sReal(window_width) - boxw) / 2.0, (sReal(window_width) - boxw) / 2.0);
			idReal(sInt(popup), offset_y) = clamp(idReal(sInt(popup), offset_y), -(sReal(window_height) - boxh) / 2.0, (sReal(window_height) - boxh) / 2.0);
		}
		
		sVar(dx) = sVar(content_x);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = sVar(content_height);
		sVar(dx_start) = sVar(dx);
		sVar(dy_start) = sVar(dy);
		if (!(idVar(sInt(popup), custom) > 0))
		{
			sVar(dy) += IntType(12);
			sVar(dx) += IntType(12);
			sVar(dw) -= 24.0;
			sVar(dh) -= 12.0;
			draw_label(self, { text_get({ idVar(sInt(popup), name) + /*"caption"*/ STR(30) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_accent, IntType(1), sInt(font_heading) });
			closex = sVar(dx) + sVar(dw) - IntType(24);
			closey = sVar(dy);
			sVar(dy) += (IntType(24) + IntType(12));
		}
		else
		{
			closex = (sVar(dx) + sVar(dw)) - (IntType(24) + IntType(12));
			closey = sVar(dy) + IntType(12);
		}
		
		if (idVar(sInt(popup), close_button) > 0)
		{
			RealType revert = (idVar(sInt(popup), revert) > 0 && sInt(popup_switch_from) > 0 && sInt(popup_switch_from) != sInt(popup));
			if (draw_button_icon(self, { idVar(sInt(popup), name) + /*"close"*/ STR(1126), closex, closey, IntType(24), IntType(24), false, (revert > 0) ? icons_ARROW_LEFT : icons_CLOSE, null_, false }))
			{
				if (revert > 0)
					popup_switch(self, sInt(popup_switch_from));
				else
					popup_close(self);
				
			}
		}
		if (idVar(sInt(popup), script) != null_)
		{
			if (sBool(textbox_jump))
				ds_list_clear(sInt(textbox_list));
			script_execute(self, { idVar(sInt(popup), script) });
			sVar(dy) += IntType(4);
		}
		if (idVar(sInt(popup), height) != null_)
		{
			idVar(sInt(popup), custom_height_goal) = idVar(sInt(popup), height);
			idVar(sInt(popup), custom_height) = idVar(sInt(popup), custom_height_goal);
		}
		else
			idVar(sInt(popup), custom_height_goal) = ceil((sVar(dy) - sVar(dy_start)) / 2.0) * IntType(2);
		
		if (sBool(popup_mouseon) && sInt(mouse_cursor) == cr_default && sBool(mouse_left_pressed))
			sVar(window_busy) = /*"popupclick"*/ STR(2054);
		if (sVar(window_busy) == /*""*/ STR(0) && idVar(sInt(popup), block) > 0)
			sVar(window_busy) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	void popup_exportimage_draw(ScopeAny self)
	{
		if (sVar(project_video_template) == IntType(0))
			sVar(text) = text_get({ /*"projectvideosizecustom"*/ STR(1477) });
		else
			sVar(text) = text_get({ /*"projectvideosizetemplate"*/ STR(1476) + ObjType(obj_videotemplate, sVar(project_video_template))->name }) + /*" ("*/ STR(1155) + string(ObjType(obj_videotemplate, sVar(project_video_template))->width) + /*"x"*/ STR(851) + string(ObjType(obj_videotemplate, sVar(project_video_template))->height) + /*")"*/ STR(1131);
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"exportimageimagesize"*/ STR(1473), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_video_template), sVar(text), ID_action_project_video_template });
		tab_next(self);
		if (sVar(project_video_template) == IntType(0))
		{
			textfield_group_add(self, { /*"exportimageimagesizecustomwidth"*/ STR(2055), sVar(project_video_width), IntType(1280), ID_action_project_video_width, X_, idInt(sInt(popup), tbx_image_size_custom_width), null_, IntType(1), IntType(1), surface_get_max_size() });
			textfield_group_add(self, { /*"exportimageimagesizecustomheight"*/ STR(2056), sVar(project_video_height), IntType(720), ID_action_project_video_height, X_, idInt(sInt(popup), tbx_image_size_custom_height), null_, IntType(1), IntType(1), surface_get_max_size() });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"exportimageimagesizecustom"*/ STR(2057), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(1), no_limit, IntType(1), false);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"exportimageimagesizecustomkeepaspectratio"*/ STR(2058), sVar(dx), sVar(dy), sVar(project_video_keep_aspect_ratio), ID_action_project_video_keep_aspect_ratio);
			tab_next(self);
			sVar(dy) += IntType(8);
		}
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportimageremovebackground"*/ STR(2059), sVar(dx), sVar(dy), idBool(sInt(popup), remove_background), ID_action_toolbar_exportimage_remove_background);
		tab_next(self);
		if (idBool(sInt(popup), remove_background))
			draw_tooltip_label(self, /*"exportimageblendmodewarning"*/ STR(2060), icons_WARNING_TRIANGLE, e_toast_WARNING);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportimageincludehidden"*/ STR(2061), sVar(dx), sVar(dy), idBool(sInt(popup), include_hidden), ID_action_toolbar_exportimage_include_hidden);
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportimagehighquality"*/ STR(2062), sVar(dx), sVar(dy), idReal(sInt(popup), high_quality), ID_action_toolbar_exportimage_high_quality);
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportimagewatermark"*/ STR(2063), sVar(dx), sVar(dy), idBool(sInt(popup), watermark), ID_action_toolbar_exportimage_watermark);
		tab_next(self);
		tab_control_button_label(self);
		draw_button_label(self, /*"exportimagesave"*/ STR(2064), sVar(dx) + sVar(dw), sVar(dy), null_, icons_SAVE, e_button_PRIMARY, ID_action_toolbar_exportimage_save, e_anchor_RIGHT);
		tab_next(self);
	}
	
	void popup_exportmovie_draw(ScopeAny self)
	{
		VarType text;
		if (sVar(project_video_template) == IntType(0))
			text = text_get({ /*"projectvideosizecustom"*/ STR(1477) });
		else
			text = text_get({ /*"projectvideosizetemplate"*/ STR(1476) + ObjType(obj_videotemplate, sVar(project_video_template))->name }) + /*" ("*/ STR(1155) + string(ObjType(obj_videotemplate, sVar(project_video_template))->width) + /*"x"*/ STR(851) + string(ObjType(obj_videotemplate, sVar(project_video_template))->height) + /*")"*/ STR(1131);
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"exportmovievideosize"*/ STR(1472), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_video_template), text, ID_action_project_video_template });
		tab_next(self);
		BoolType badvideosize = (idStr(sInt(popup), format) == /*"mp4"*/ STR(61) || idStr(sInt(popup), format) == /*"mov"*/ STR(62)) && (mod(sVar(project_video_width), IntType(2)) == IntType(1) || mod(sVar(project_video_height), IntType(2)) == IntType(1));
		if (sVar(project_video_template) == IntType(0))
		{
			textfield_group_add(self, { /*"exportmovievideosizecustomwidth"*/ STR(2065), sVar(project_video_width), IntType(1280), ID_action_project_video_width, X_, idInt(sInt(popup), tbx_video_size_custom_width), null_, IntType(1), (idStr(sInt(popup), format) == /*"mp4"*/ STR(61) || idStr(sInt(popup), format) == /*"mov"*/ STR(62)) ? IntType(2) : IntType(1), surface_get_max_size() });
			textfield_group_add(self, { /*"exportmovievideosizecustomheight"*/ STR(2066), sVar(project_video_height), IntType(720), ID_action_project_video_height, X_, idInt(sInt(popup), tbx_video_size_custom_height), null_, IntType(1), (idStr(sInt(popup), format) == /*"mp4"*/ STR(61) || idStr(sInt(popup), format) == /*"mov"*/ STR(62)) ? IntType(2) : IntType(1), surface_get_max_size() });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"exportmovievideosizecustom"*/ STR(2067), sVar(dx), sVar(dy), sVar(dw), IntType(1), (idStr(sInt(popup), format) == /*"mp4"*/ STR(61) || idStr(sInt(popup), format) == /*"mov"*/ STR(62)) ? IntType(2) : IntType(1), no_limit, (idStr(sInt(popup), format) == /*"mp4"*/ STR(61) || idStr(sInt(popup), format) == /*"mov"*/ STR(62)) ? IntType(2) : IntType(1), false);
			tab_next(self);
			if (badvideosize)
				draw_tooltip_label(self, /*"exportmovievideosizecustomerror"*/ STR(2068), icons_WARNING_TRIANGLE, e_toast_NEGATIVE);
			tab_control_switch(self);
			draw_switch(self, /*"exportmovievideosizecustomkeepaspectratio"*/ STR(2069), sVar(dx), sVar(dy), sVar(project_video_keep_aspect_ratio), ID_action_project_video_keep_aspect_ratio);
			tab_next(self);
			sVar(dy) += IntType(8);
		}
		tab_control_menu(self);
		draw_button_menu(self, { /*"exportmovieformat"*/ STR(1478), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idStr(sInt(popup), format), text_get({ /*"exportmovieformat"*/ STR(1478) + idStr(sInt(popup), format) }), ID_action_toolbar_exportmovie_format });
		tab_next(self);
		if (idStr(sInt(popup), format) != /*"png"*/ STR(64))
		{
			if (idInt(sInt(popup), video_quality) == IntType(0))
				text = text_get({ /*"exportmovievideoqualitycustom"*/ STR(1484) });
			else
				text = text_get({ /*"exportmovievideoquality"*/ STR(1483) + ObjType(obj_videoquality, idInt(sInt(popup), video_quality))->name });
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"exportmovievideoquality"*/ STR(1483), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sInt(popup), video_quality), text, ID_action_toolbar_exportmovie_video_quality });
			tab_next(self);
			if (idInt(sInt(popup), video_quality) == IntType(0))
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"exportmoviebitrate"*/ STR(2070), sVar(dx), sVar(dy), dragger_width, idReal(sInt(popup), bit_rate), IntType(500), IntType(1), no_limit, IntType(2500000), IntType(1), idInt(sInt(popup), tbx_bit_rate), ID_action_toolbar_exportmovie_bit_rate);
				tab_next(self);
			}
		}
		if (idVar(sInt(popup), frame_rate) == IntType(0))
			text = text_get({ /*"exportmovieframeratecustom"*/ STR(1489) });
		else
			text = string(idVar(sInt(popup), frame_rate));
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"exportmovieframerate"*/ STR(1485), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(sInt(popup), frame_rate), text, ID_action_toolbar_exportmovie_frame_rate });
		tab_next(self);
		if (idVar(sInt(popup), frame_rate) == IntType(0))
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"exportmovieframespersecond"*/ STR(2071), sVar(dx), sVar(dy), dragger_width, idReal(sInt(popup), framespersecond), IntType(1), IntType(1), IntType(120), IntType(30), IntType(1), idInt(sInt(popup), tbx_framespersecond), ID_action_toolbar_exportmovie_framespersecond);
			tab_next(self);
		}
		if (idStr(sInt(popup), format) == /*"png"*/ STR(64))
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"exportmovieremovebackground"*/ STR(2072), sVar(dx), sVar(dy), idBool(sInt(popup), remove_background), ID_action_toolbar_exportmovie_remove_background);
			tab_next(self);
			if (idBool(sInt(popup), remove_background))
				draw_tooltip_label(self, /*"exportimageblendmodewarning"*/ STR(2060), icons_WARNING_TRIANGLE, e_toast_WARNING);
		}
		else
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"exportmovieincludeaudio"*/ STR(2073), sVar(dx), sVar(dy), idBool(sInt(popup), include_audio), ID_action_toolbar_exportmovie_include_audio);
			tab_next(self);
		}
		
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportmovieincludehidden"*/ STR(2074), sVar(dx), sVar(dy), idBool(sInt(popup), include_hidden), ID_action_toolbar_exportmovie_include_hidden);
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportmoviehighquality"*/ STR(2075), sVar(dx), sVar(dy), idReal(sInt(popup), high_quality), ID_action_toolbar_exportmovie_high_quality);
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"exportmoviewatermark"*/ STR(2076), sVar(dx), sVar(dy), idBool(sInt(popup), watermark), ID_action_toolbar_exportmovie_watermark);
		tab_next(self);
		tab_control_button_label(self);
		draw_button_label(self, /*"exportmoviesave"*/ STR(2077), sVar(dx) + sVar(dw), sVar(dy), null_, icons_SAVE, e_button_PRIMARY, ID_action_toolbar_exportmovie_save, e_anchor_RIGHT, badvideosize);
		tab_next(self);
	}
	
	void popup_importimage_draw(ScopeAny self)
	{
		withOne (obj_popup, sInt(popup_importimage), self->id)
		{
			self->filename = DsList(self->filenames).Value(IntType(0));
			if (self->texture != null_)
				texture_free(self->texture);
			self->texture = texture_create(self->filename);
		}
		
		draw_image_box_cover(idVar(sInt(popup), texture), sVar(dx) + sVar(dw) - IntType(130), sVar(dy) + IntType(24), IntType(128), IntType(128));
		draw_label(self, { text_get({ /*"importimagetype"*/ STR(2078) }) + /*":"*/ STR(789), sVar(dx), sVar(dy) + IntType(14), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(28);
		tab_control_checkbox(self);
		draw_radiobutton(self, /*"importimageskin"*/ STR(2079), sVar(dx), sVar(dy), e_res_type_SKIN, idVar(sInt(popup), type) == e_res_type_SKIN, ID_action_toolbar_importimage_type);
		tab_next(self);
		tab_control_checkbox(self);
		draw_radiobutton(self, /*"importimageitemsheet"*/ STR(2080), sVar(dx), sVar(dy), e_res_type_ITEM_SHEET, idVar(sInt(popup), type) == e_res_type_ITEM_SHEET, ID_action_toolbar_importimage_type);
		tab_next(self);
		tab_control_checkbox(self);
		draw_radiobutton(self, /*"importimageblocksheet"*/ STR(2081), sVar(dx), sVar(dy), e_res_type_BLOCK_SHEET, idVar(sInt(popup), type) == e_res_type_BLOCK_SHEET, ID_action_toolbar_importimage_type);
		tab_next(self);
		tab_control_checkbox(self);
		draw_radiobutton(self, /*"importimageparticlesheet"*/ STR(2082), sVar(dx), sVar(dy), e_res_type_PARTICLE_SHEET, idVar(sInt(popup), type) == e_res_type_PARTICLE_SHEET, ID_action_toolbar_importimage_type);
		tab_next(self);
		tab_control_checkbox(self);
		draw_radiobutton(self, /*"importimagetexture"*/ STR(2083), sVar(dx), sVar(dy), e_res_type_TEXTURE, idVar(sInt(popup), type) == e_res_type_TEXTURE, ID_action_toolbar_importimage_type);
		tab_next(self);
		tab_control_checkbox(self);
		draw_checkbox(self, /*"importimagedoall"*/ STR(2084), sVar(dx), sVar(dy), idBool(sInt(popup), do_all), ID_action_toolbar_importimage_do_all);
		tab_next(self);
		tab_control_button_label(self);
		if (draw_button_label(self, /*"importimageok"*/ STR(2085), sVar(dx) + sVar(dw), sVar(dy), null_, null_, e_button_PRIMARY, null_, e_anchor_RIGHT))
		{
			if (idVar(sInt(popup), type) == e_res_type_ITEM_SHEET)
				popup_importitemsheet_show(self, idVar(sInt(popup), filename), null_);
			else
			{
				action_res_image_load(self, idVar(sInt(popup), filename), idVar(sInt(popup), type));
				if (ds_list_size(idInt(sInt(popup), filenames)) == IntType(1))
					popup_close(self);
			}
			
			if (ds_list_size(idInt(sInt(popup), filenames)) > IntType(1))
			{
				ds_list_delete(idInt(sInt(popup), filenames), IntType(0));
				popup_show(self, sInt(popup));
				show_debug_message(/*"new popup"*/ STR(2086));
			}
		}
		tab_next(self);
	}
	
	void popup_importitemsheet_draw(ScopeAny self)
	{
		RealType previewsize, previewx, previewwid, previewhei;
		VarType previewy;
		RealType texwid, texhei, scale;
		previewsize = IntType(256);
		previewx = floor(sVar(content_x) + (RealType)sVar(content_width) / 2.0 - previewsize / 2.0);
		previewy = floor(sVar(dy) + previewsize / 2.0 - previewsize / 2.0);
		texwid = texture_width(idVar(sInt(popup), texture));
		texhei = texture_height(idVar(sInt(popup), texture));
		if (texhei > texwid)
		{
			scale = previewsize / texhei;
			previewx += (previewsize - scale * texwid) / 2.0;
		}
		else
		{
			scale = previewsize / texwid;
			previewy = sVar(dy);
		}
		
		previewwid = texwid * scale;
		previewhei = texhei * scale;
		tab_control(self, previewhei);
		draw_box(previewx, previewy, previewwid, previewhei, false, global::c_level_bottom, IntType(1));
		draw_texture({ idVar(sInt(popup), texture), previewx, previewy, scale, scale });
		if (idBool(sInt(popup), is_sheet))
		{
			RealType prevalpha = draw_get_alpha();
			draw_set_alpha(prevalpha * .35);
			for (RealType i = IntType(1); i < idVec(sInt(popup), sheet_size).Real(X_); i++)
				draw_line_color((IntType)(previewx + (i / idVec(sInt(popup), sheet_size).Real(X_)) * previewwid), (IntType)((previewy - IntType(1))), (IntType)(previewx + (i / idVec(sInt(popup), sheet_size).Real(X_)) * previewwid), (IntType)(previewy + previewhei - IntType(1)), (IntType)(global::c_text_main), (IntType)(global::c_text_main));
			for (RealType i = IntType(1); i < idVec(sInt(popup), sheet_size).Real(Y_); i++)
				draw_line_color((IntType)((previewx - IntType(1))), (IntType)(previewy + (i / idVec(sInt(popup), sheet_size).Real(Y_)) * previewhei), (IntType)(previewx + previewwid - IntType(1)), (IntType)(previewy + (i / idVec(sInt(popup), sheet_size).Real(Y_)) * previewhei), (IntType)(global::c_text_main), (IntType)(global::c_text_main));
			draw_set_alpha(prevalpha);
		}
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"importitemsheetissheet"*/ STR(2087), sVar(dx), sVar(dy), idBool(sInt(popup), is_sheet), ID_action_toolbar_importitemsheet_is_sheet);
		tab_next(self);
		if (idBool(sInt(popup), is_sheet))
		{
			draw_set_font(sInt(font_label));
			global::axis_edit = X_;
			tab_control(self, IntType(28));
			draw_dragger(self, /*"importitemsheetrows"*/ STR(2088), sVar(dx), sVar(dy), dragger_width, idVec(sInt(popup), sheet_size).Real(X_), 1.0 / 10.0, IntType(1), no_limit, idVec(sInt(popup), sheet_size_def).Real(X_), IntType(1), idInt(sInt(popup), tbx_sheet_width), ID_action_toolbar_importitemsheet_sheet_size);
			tab_next(self);
			global::axis_edit = Y_;
			tab_control(self, IntType(28));
			draw_dragger(self, /*"importitemsheetcolumns"*/ STR(2089), sVar(dx), sVar(dy), dragger_width, idVec(sInt(popup), sheet_size).Real(Y_), 1.0 / 10.0, IntType(1), no_limit, idVec(sInt(popup), sheet_size_def).Real(Y_), IntType(1), idInt(sInt(popup), tbx_sheet_height), ID_action_toolbar_importitemsheet_sheet_size);
			tab_next(self);
		}
		tab_control_button_label(self);
		if (draw_button_label(self, /*"importimageok"*/ STR(2085), sVar(dx) + sVar(dw), sVar(dy), null_, null_, e_button_PRIMARY, null_, e_anchor_RIGHT))
		{
			if (idInt(sInt(popup), value_script) != null_)
				script_execute(self, { idInt(sInt(popup), value_script), e_option_IMPORT_ITEM_SHEET_DONE });
			else
				action_res_image_load(self, idVar(sInt(popup), filename), e_res_type_ITEM_SHEET);
			
			popup_close(self);
		}
		tab_next(self);
	}
	
	void popup_importitemsheet_show(ScopeAny self, VarType fn, IntType script)
	{
		withOne (obj_popup, sInt(popup_importitemsheet), self->id)
		{
			if (self->texture != null_)
				texture_free(self->texture);
			self->filename = fn;
			self->value_script = script;
			self->texture = texture_create(self->filename);
			self->is_sheet = true;
			self->sheet_size = vec2(item_sheet_width, item_sheet_height);
			if (texture_width(self->texture) < item_size * IntType(8) || texture_height(self->texture) < item_size * IntType(8))
				self->is_sheet = false;
			else
				if (texture_width(self->texture) == texture_height(self->texture))
					self->sheet_size = vec2(IntType(16), IntType(16));
			
			self->sheet_size_def = array_copy_1d(self->sheet_size);
		}
		
		if (sInt(popup) != null_)
			popup_switch(self, sInt(popup_importitemsheet));
		else
			popup_show(self, sInt(popup_importitemsheet));
		
	}
	
	void popup_loading_draw(ScopeAny self)
	{
		if (sVar(popup_ani) == IntType(1))
		{
			if (idInt(sInt(popup), load_object) > 0 && idInt(sInt(popup), load_script) > 0)
				withOne (obj_resource, idInt(sInt(popup), load_object), self->id)
					script_execute(ScopeAny(self), { idInt(global::_app->popup, load_script) });
			
		}
		sVar(dx) += IntType(8);
		sVar(dy) += IntType(8);
		sVar(dw) -= 16.0;
		sVar(dh) -= 16.0;
		if (idReal(sInt(popup), load_amount) > IntType(1))
		{
			RealType object_progress = (idReal(sInt(popup), progress) == IntType(1) ? 0.0 : idReal(sInt(popup), progress));
			RealType progress = (idReal(sInt(popup), load_amount) - (ds_priority_size(global::load_queue) - object_progress)) / idReal(sInt(popup), load_amount);
			tab_control_loading(self);
			draw_loading_bar(self, sVar(dx), sVar(dy), sVar(dw), IntType(8), progress, text_get({ /*"loadingresources"*/ STR(2090) }), text_get({ /*"loadingpercent"*/ STR(2091), string(floor(progress * IntType(100))) }));
			tab_next(self);
		}
		tab_control_loading(self);
		draw_loading_bar(self, sVar(dx), sVar(dy), sVar(dw), IntType(8), idReal(sInt(popup), progress), idVar(sInt(popup), caption), idVar(sInt(popup), text));
		tab_next(self);
	}
	
	void popup_modelbench_draw(ScopeAny self)
	{
		sVar(dy) += IntType(8);
		draw_image({ ID_spr_modelbench_ad, IntType(0), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy) });
		sVar(dy) += sprite_get_height(ID_spr_modelbench_ad) + IntType(8);
		draw_label(self, { string_limit_ext(text_get({ /*"modelbenchinfo"*/ STR(2092) }), sVar(dw) + IntType(24), sVar(dh)), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy), fa_center, fa_top, global::c_text_main, global::a_text_main, sInt(font_value) });
		sVar(dy) += IntType(34) + IntType(30);
		draw_set_font(sInt(font_button));
		IntType buttonx = string_width(text_get({ /*"modelbenchdownload"*/ STR(2093) })) + button_padding;
		tab_control_button_label(self);
		if (draw_button_label(self, /*"modelbenchdownload"*/ STR(2093), sVar(dx) + sVar(dw) - buttonx, sVar(dy)))
		{
			open_url(link_modelbench);
			popup_close(self);
		}
		buttonx += IntType(12) + (string_width(text_get({ /*"modelbenchnotnow"*/ STR(2094) })) + button_padding);
		if (draw_button_label(self, /*"modelbenchnotnow"*/ STR(2094), sVar(dx) + sVar(dw) - buttonx, sVar(dy), null_, null_, e_button_SECONDARY))
			popup_close(self);
		if (draw_checkbox(self, /*"modelbenchdontshow"*/ STR(2095), sVar(dx), sVar(dy) + IntType(4), ObjType(obj_popup, sInt(popup_modelbench))->hidden, null_))
			ObjType(obj_popup, sInt(popup_modelbench))->hidden = !ObjType(obj_popup, sInt(popup_modelbench))->hidden;
		tab_next(self);
	}
	
	void popup_newproject_clear(ScopeAny self)
	{
		ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_name)->text = text_get({ /*"newprojectnamedefault"*/ STR(2096) });
		ObjType(obj_popup, sInt(popup_newproject))->folder = filename_get_valid(ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_name)->text);
		ObjType(obj_popup, sInt(popup_newproject))->description = /*""*/ STR(0);
	}
	
	void popup_newproject_draw(ScopeAny self)
	{
		BoolType issue = false;
		if (idVar(sInt(popup), folder) == /*""*/ STR(0) || directory_exists_lib(sStr(setting_project_folder) + idVar(sInt(popup), folder)))
			issue = true;
		tab_control_textfield(self, true);
		if (draw_textfield(self, /*"newprojectname"*/ STR(2097), sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sInt(popup), tbx_name), null_, idVar(sInt(popup), folder), /*"top"*/ STR(202)) || issue)
		{
			idVar(sInt(popup), folder) = filename_get_valid(ObjType(obj_textbox, idInt(sInt(popup), tbx_name))->text);
			if (idVar(sInt(popup), folder) == /*""*/ STR(0))
				idVar(sInt(popup), folder) = text_get({ /*"newprojectnamedefault"*/ STR(2096) });
			idVar(sInt(popup), folder) = filename_name(filename_get_unique(sStr(setting_project_folder) + idVar(sInt(popup), folder)));
		}
		tab_next(self);
		tab_control_textfield(self, true);
		if (draw_textfield(self, /*"newprojectauthor"*/ STR(2098), sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sInt(popup), tbx_author), null_, /*""*/ STR(0), /*"top"*/ STR(202)))
		{
			idVar(sInt(popup), author) = ObjType(obj_textbox, idInt(sInt(popup), tbx_author))->text;
		}
		tab_next(self);
		tab_control_textfield(self, true, IntType(76));
		if (draw_textfield(self, /*"newprojectdescription"*/ STR(2099), sVar(dx), sVar(dy), sVar(dw), IntType(76), idInt(sInt(popup), tbx_description), null_, /*""*/ STR(0), /*"top"*/ STR(202)))
		{
			idVar(sInt(popup), description) = ObjType(obj_textbox, idInt(sInt(popup), tbx_description))->text;
		}
		tab_next(self);
		StringType directory = /*"../"*/ STR(2100) + directory_name(sStr(setting_project_folder)) + string_remove_newline(idVar(sInt(popup), folder));
		tab_control(self, IntType(40));
		draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(28), IntType(40), text_get({ /*"newprojectlocation"*/ STR(2101) }), directory, true);
		if (draw_button_icon(self, { /*"newprojectchangefolder"*/ STR(2102), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_FOLDER_EDIT, null_, false, /*"tooltipchangefolder"*/ STR(2103) }))
		{
			StringType fn = file_dialog_save_project(self, idVar(sInt(popup), folder));
			if (fn != /*""*/ STR(0))
			{
				idVar(sInt(popup), folder) = filename_name(fn);
				action_setting_project_folder(self, filename_path(fn));
			}
		}
		tab_next(self);
		tab_control_button_label(self);
		if (draw_button_label(self, /*"newprojectcreate"*/ STR(2104), sVar(dx) + sVar(dw), sVar(dy), null_, null_, e_button_PRIMARY, null_, e_anchor_RIGHT))
		{
			if (sStr(window_state) == /*"startup"*/ STR(29))
				sStr(window_state) = /*""*/ STR(0);
			sInt(popup_switch_to) = null_;
			project_create(self);
		}
		tab_next(self);
	}
	
	void popup_pattern_editor_draw(ScopeAny self)
	{
		sVar(dx_start) = sVar(dx);
		ObjType(obj_preview, idInt(sInt(popup), preview))->update = true;
		sBool(setting_wind_enable) = false;
		preview_draw(self, idInt(sInt(popup), preview), sVar(dx), sVar(dy), IntType(200), IntType(332));
		sBool(setting_wind_enable) = true;
		sVar(dx) += IntType(200) + IntType(8);
		draw_separator_vertical(sVar(dx), sVar(dy) + IntType(4), IntType(332) - IntType(8));
		sVar(dx) += IntType(8);
		VarType listy;
		RealType listw;
		listy = sVar(dy);
		listw = sVar(dw) - (sVar(dx) - sVar(dx_start));
		if (draw_button_label(self, /*"patterneditoraddlayer"*/ STR(2105), sVar(dx), sVar(dy), listw, icons_PLUS, e_button_SECONDARY))
		{
			IntType pt = IntType(1) + irandom((IntType)(ds_list_size(global::minecraft_pattern_list) - IntType(2)));
			ds_list_add({ idInt(sInt(popup), pattern_list_edit), DsList(global::minecraft_pattern_list).Value(pt) });
			ds_list_add({ idInt(sInt(popup), pattern_color_list_edit), ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(irandom((IntType)(array_length(VarType::CreateRef(ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors)) - IntType(1)))) });
			idBool(sInt(popup), update) = true;
		}
		listy += (IntType(36) + IntType(8));
		VarType listystart, insertpos;
		RealType listh;
		listystart = listy;
		listh = IntType(48) * IntType(6);
		insertpos = idVar(sInt(popup), layer_move);
		scrollbar_draw(self, idInt(sInt(popup), layer_scrollbar), e_scroll_VERTICAL, sVar(dx) + listw - IntType(12), listy, listh, (ds_list_size(idInt(sInt(popup), pattern_list_edit)) + IntType(1)) * IntType(48));
		if (ObjType(obj_scrollbar, idInt(sInt(popup), layer_scrollbar))->needed)
		{
			listw -= 16.0;
			listy -= ObjType(obj_scrollbar, idInt(sInt(popup), layer_scrollbar))->value;
			sStr(window_scroll_focus) = string(idInt(sInt(popup), layer_scrollbar));
		}
		clip_begin(sVar(dx), listystart, listw, listh);
		if (gmlGlobal::mouse_y < listy && idVar(sInt(popup), layer_move) != null_)
		{
			insertpos = ds_list_size(idInt(sInt(popup), pattern_list_edit));
			draw_box(sVar(dx), listy, listw, IntType(48), false, global::c_level_bottom, IntType(1));
			listy += IntType(48);
		}
		for (RealType i = ds_list_size(idInt(sInt(popup), pattern_list_edit)) - IntType(1); i >= IntType(0); i--)
		{
			if (idVar(sInt(popup), layer_move) != null_ && idVar(sInt(popup), layer_move) == i)
				continue;
			if ((listy < listystart + listh) && (listy + IntType(48) > listystart))
			{
				if (idVar(sInt(popup), layer_move) == null_)
				{
					popup_pattern_editor_draw_layer(self, sVar(dx), listy, listw, IntType(48), i, false);
				}
				else
				{
					if (gmlGlobal::mouse_y >= listy && gmlGlobal::mouse_y <= listy + IntType(48))
					{
						if (gmlGlobal::mouse_y >= listy)
						{
							insertpos = i + IntType(1);
							draw_box(sVar(dx), listy, listw, IntType(48), false, global::c_level_bottom, IntType(1));
							listy += IntType(48);
							popup_pattern_editor_draw_layer(self, sVar(dx), listy, listw, IntType(48), i, false);
							listy += IntType(48);
							continue;
						}
					}
					else
						popup_pattern_editor_draw_layer(self, sVar(dx), listy, listw, IntType(48), i, false);
					
				}
				
			}
			listy += IntType(48);
		}
		if (gmlGlobal::mouse_y >= listy && idVar(sInt(popup), layer_move) != null_)
		{
			insertpos = IntType(0);
			draw_box(sVar(dx), listy, listw, IntType(48), false, global::c_level_bottom, IntType(1));
			listy += IntType(48);
		}
		if ((listy < listystart + listh) && (listy + IntType(48) > listystart))
			popup_pattern_editor_draw_layer(self, sVar(dx), listy, listw, IntType(48), -IntType(1), true);
		clip_end();
		sVar(dy) += IntType(325) + IntType(8);
		draw_set_font(sInt(font_button));
		IntType buttonx = string_width(text_get({ /*"patterneditordone"*/ STR(2106) })) + button_padding;
		tab_control_button_label(self);
		if (draw_button_label(self, /*"patterneditordone"*/ STR(2106), sVar(dx_start) + sVar(dw) - buttonx, sVar(dy)))
		{
			if (Obj(idVar(sInt(popup), pattern_edit))->subAssetId == ID_obj_bench_settings)
			{
				idVar(idVar(sInt(popup), pattern_edit), pattern_pattern_list) = ds_list_create_array(idInt(sInt(popup), pattern_list_edit));
				idVar(idVar(sInt(popup), pattern_edit), pattern_color_list) = ds_list_create_array(idInt(sInt(popup), pattern_color_list_edit));
				idVar(idVar(sInt(popup), pattern_edit), pattern_base_color) = ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_base_color;
				array_add(VarType::CreateRef(global::pattern_update), idVar(sInt(popup), pattern_edit));
				ObjType(obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview)->update = true;
			}
			else
				if (idVar(sInt(popup), pattern_edit) == global::temp_edit)
					action_lib_model_pattern(self, ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_base_color, ds_list_create_array(idInt(sInt(popup), pattern_list_edit)), ds_list_create_array(idInt(sInt(popup), pattern_color_list_edit)));
			
			instance_destroy(self, { idInt(sInt(popup), pattern_edit_preview), false });
			idInt(sInt(popup), pattern_edit_preview) = null_;
			popup_close(self);
		}
		buttonx += IntType(12) + (string_width(text_get({ /*"patterneditorcancel"*/ STR(2107) })) + button_padding);
		if (draw_button_label(self, /*"patterneditorcancel"*/ STR(2107), sVar(dx_start) + sVar(dw) - buttonx, sVar(dy), null_, null_, e_button_SECONDARY))
		{
			array_add(VarType::CreateRef(global::pattern_update), idVar(sInt(popup), pattern_edit));
			instance_destroy(self, { idInt(sInt(popup), pattern_edit_preview), false });
			idInt(sInt(popup), pattern_edit_preview) = null_;
			popup_close(self);
		}
		tab_next(self);
		if (idVar(sInt(popup), layer_remove) != null_)
		{
			ds_list_delete(idInt(sInt(popup), pattern_list_edit), (IntType)(idVar(sInt(popup), layer_remove)));
			ds_list_delete(idInt(sInt(popup), pattern_color_list_edit), (IntType)(idVar(sInt(popup), layer_remove)));
			idVar(sInt(popup), layer_remove) = null_;
			idBool(sInt(popup), update) = true;
		}
		if (idBool(sInt(popup), update))
		{
			if (ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_skin > 0)
				sprite_delete(ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_skin);
			ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_skin = minecraft_update_pattern_generate(ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->model_name, ObjType(obj_template, idInt(sInt(popup), pattern_edit_preview))->pattern_base_color, ds_list_create_array(idInt(sInt(popup), pattern_list_edit)), ds_list_create_array(idInt(sInt(popup), pattern_color_list_edit)));
			idBool(sInt(popup), update) = false;
		}
		if (idVar(sInt(popup), layer_move) != null_)
		{
			sVar(content_x) = IntType(0);
			sVar(content_y) = IntType(0);
			sVar(content_width) = sReal(window_width);
			sVar(content_height) = sReal(window_height);
			sInt(mouse_cursor) = cr_size_all;
			draw_dropshadow(self, gmlGlobal::mouse_x + idReal(sInt(popup), layer_move_x), gmlGlobal::mouse_y + idReal(sInt(popup), layer_move_y), listw, IntType(48), c_black, IntType(1));
			draw_box(gmlGlobal::mouse_x + idReal(sInt(popup), layer_move_x), gmlGlobal::mouse_y + idReal(sInt(popup), layer_move_y), listw, IntType(48), false, global::c_level_middle, IntType(1));
			popup_pattern_editor_draw_layer(self, gmlGlobal::mouse_x + idReal(sInt(popup), layer_move_x), gmlGlobal::mouse_y + idReal(sInt(popup), layer_move_y), listw, IntType(48), idVar(sInt(popup), layer_move), false);
			if (sBool(mouse_left_released))
			{
				if (insertpos != idVar(sInt(popup), layer_move))
				{
					ds_list_insert(idInt(sInt(popup), pattern_list_edit), (IntType)(insertpos), DsList(idInt(sInt(popup), pattern_list_edit)).Value(idVar(sInt(popup), layer_move)));
					ds_list_insert(idInt(sInt(popup), pattern_color_list_edit), (IntType)(insertpos), DsList(idInt(sInt(popup), pattern_color_list_edit)).Value(idVar(sInt(popup), layer_move)));
					VarType pos = idVar(sInt(popup), layer_move);
					if (insertpos <= idVar(sInt(popup), layer_move))
						pos++;
					ds_list_delete(idInt(sInt(popup), pattern_list_edit), (IntType)(pos));
					ds_list_delete(idInt(sInt(popup), pattern_color_list_edit), (IntType)(pos));
				}
				idVar(sInt(popup), layer_move) = null_;
				idBool(sInt(popup), update) = true;
				sVar(window_busy) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
			}
			if (gmlGlobal::mouse_y < listystart)
				ObjType(obj_scrollbar, idInt(sInt(popup), layer_scrollbar))->value_goal -= 30.0;
			else
				if (gmlGlobal::mouse_y > listystart + listh)
					ObjType(obj_scrollbar, idInt(sInt(popup), layer_scrollbar))->value_goal += IntType(30);
			
		}
	}
	
}
