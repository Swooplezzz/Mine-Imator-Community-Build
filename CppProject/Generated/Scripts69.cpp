/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.28 19:37:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void vbuffer_add_triangle(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count < IntType(15))
		{
			VarType pos1, pos2, pos3, tex1, tex2, tex3, normal1, normal2, normal3;
			pos1 = argument[IntType(0)];
			pos2 = argument[IntType(1)];
			pos3 = argument[IntType(2)];
			tex1 = argument[IntType(3)];
			tex2 = argument[IntType(4)];
			tex3 = argument[IntType(5)];
			if (argument_count > IntType(6) && is_array(argument[IntType(6)]))
			{
				normal1 = argument[IntType(6)];
				normal2 = argument[IntType(7)];
				normal3 = argument[IntType(8)];
			}
			else
			{
				normal1 = vec3_cross(point3D_sub(pos1, pos2), point3D_sub(pos2, pos3));
				normal2 = normal1;
				normal3 = normal1;
			}
			
			if (argument_count > IntType(10) && argument[IntType(10)] != null_)
			{
				VarType mat = argument[IntType(10)];
				pos1 = point3D_mul_matrix(pos1, mat);
				pos2 = point3D_mul_matrix(pos2, mat);
				pos3 = point3D_mul_matrix(pos3, mat);
				normal1 = vec3_normalize(vec3_mul_matrix(normal1, mat));
				if (argument[IntType(7)] != null_)
					normal2 = vec3_normalize(vec3_mul_matrix(normal2, mat));
				else
					normal2 = normal1;
				
				if (argument[IntType(8)] != null_)
					normal3 = vec3_normalize(vec3_mul_matrix(normal3, mat));
				else
					normal3 = normal1;
				
			}
			if (argument_count > IntType(9) && argument[IntType(9)])
			{
				VarType tmp = pos1;
				pos1 = pos2;
				pos2 = tmp;
				tmp = tex1;
				tex1 = tex2;
				tex2 = tmp;
				normal1 = vec3_mul(normal1, -IntType(1));
				normal2 = vec3_mul(normal2, -IntType(1));
				normal3 = vec3_mul(normal3, -IntType(1));
			}
			vertex_add({ pos1, normal1, tex1 });
			vertex_add({ pos2, normal2, tex2 });
			vertex_add({ pos3, normal3, tex3 });
		}
		else
		{
			VarType x1, y1, z1, x2, y2, z2, x3, y3, z3;
			VarType tx1, ty1, tx2, ty2, tx3, ty3;
			RealType nx, ny, nz;
			if (argument_count > IntType(16) && argument[IntType(16)] != null_)
			{
				VarType mat = argument[IntType(16)];
				x1 = mat.Value(IntType(0)) * argument[IntType(0)] + mat.Value(IntType(4)) * argument[IntType(1)] + mat.Value(IntType(8)) * argument[IntType(2)] + mat.Value(IntType(12));
				y1 = mat.Value(IntType(1)) * argument[IntType(0)] + mat.Value(IntType(5)) * argument[IntType(1)] + mat.Value(IntType(9)) * argument[IntType(2)] + mat.Value(IntType(13));
				z1 = mat.Value(IntType(2)) * argument[IntType(0)] + mat.Value(IntType(6)) * argument[IntType(1)] + mat.Value(IntType(10)) * argument[IntType(2)] + mat.Value(IntType(14));
				x2 = mat.Value(IntType(0)) * argument[IntType(3)] + mat.Value(IntType(4)) * argument[IntType(4)] + mat.Value(IntType(8)) * argument[IntType(5)] + mat.Value(IntType(12));
				y2 = mat.Value(IntType(1)) * argument[IntType(3)] + mat.Value(IntType(5)) * argument[IntType(4)] + mat.Value(IntType(9)) * argument[IntType(5)] + mat.Value(IntType(13));
				z2 = mat.Value(IntType(2)) * argument[IntType(3)] + mat.Value(IntType(6)) * argument[IntType(4)] + mat.Value(IntType(10)) * argument[IntType(5)] + mat.Value(IntType(14));
				x3 = mat.Value(IntType(0)) * argument[IntType(6)] + mat.Value(IntType(4)) * argument[IntType(7)] + mat.Value(IntType(8)) * argument[IntType(8)] + mat.Value(IntType(12));
				y3 = mat.Value(IntType(1)) * argument[IntType(6)] + mat.Value(IntType(5)) * argument[IntType(7)] + mat.Value(IntType(9)) * argument[IntType(8)] + mat.Value(IntType(13));
				z3 = mat.Value(IntType(2)) * argument[IntType(6)] + mat.Value(IntType(6)) * argument[IntType(7)] + mat.Value(IntType(10)) * argument[IntType(8)] + mat.Value(IntType(14));
			}
			else
			{
				x1 = argument[IntType(0)];
				y1 = argument[IntType(1)];
				z1 = argument[IntType(2)];
				x2 = argument[IntType(3)];
				y2 = argument[IntType(4)];
				z2 = argument[IntType(5)];
				x3 = argument[IntType(6)];
				y3 = argument[IntType(7)];
				z3 = argument[IntType(8)];
			}
			
			nx = (z1 - z2) * (y3 - y2) - (y1 - y2) * (z3 - z2);
			ny = (x1 - x2) * (z3 - z2) - (z1 - z2) * (x3 - x2);
			nz = (y1 - y2) * (x3 - x2) - (x1 - x2) * (y3 - y2);
			if (argument_count > IntType(15) && argument[IntType(15)])
			{
				VarType _tx1, _ty1, _tz1;
				_tx1 = x1;
				_ty1 = y1;
				_tz1 = z1;
				x1 = x2;
				y1 = y2;
				z1 = z2;
				x2 = _tx1;
				y2 = _ty1;
				z2 = _tz1;
				tx1 = argument[IntType(11)];
				ty1 = argument[IntType(12)];
				tx2 = argument[IntType(9)];
				ty2 = argument[IntType(10)];
				tx3 = argument[IntType(13)];
				ty3 = argument[IntType(14)];
				nx *= -1.0;
				ny *= -1.0;
				nz *= -1.0;
			}
			else
			{
				tx1 = argument[IntType(9)];
				ty1 = argument[IntType(10)];
				tx2 = argument[IntType(11)];
				ty2 = argument[IntType(12)];
				tx3 = argument[IntType(13)];
				ty3 = argument[IntType(14)];
			}
			
			vertex_add({ x1, y1, z1, nx, ny, nz, tx1, ty1 });
			vertex_add({ x2, y2, z2, nx, ny, nz, tx2, ty2 });
			vertex_add({ x3, y3, z3, nx, ny, nz, tx3, ty3 });
		}
		
	}
	
	VarType vbuffer_create_cone(RealType rad, VecType tex1, VecType tex2, RealType thflip, RealType tvflip, VarType detail, VarType closed, VarType invert, VarType mapped)
	{
		vbuffer_start();
		tex1.Real(X_) += 0.25;
		tex2.Real(X_) += 0.25;
		RealType i = IntType(0);
		for (IntType _it = 0, _it_max = detail; _it < _it_max; _it++)
		{
			RealType ip;
			RealType n1x, n1y, n2x, n2y;
			RealType x1, y1, x2, y2;
			VecType texsize, texmid;
			ip = i;
			i += 1.0 / detail;
			texsize = point2D_sub(tex2, tex1);
			texmid = point2D_add(tex1, vec2_mul(texsize, 1.0 / 2.0));
			n1x = cos(ip * pi_ * IntType(2));
			n1y = -sin(ip * pi_ * IntType(2));
			n2x = cos(i * pi_ * IntType(2));
			n2y = -sin(i * pi_ * IntType(2));
			x1 = n1x * rad;
			y1 = n1y * rad;
			x2 = n2x * rad;
			y2 = n2y * rad;
			if (invert > 0)
			{
				n1x *= -1.0;
				n1y *= -1.0;
				n2x *= -1.0;
				n2y *= -1.0;
			}
			if (mapped > 0)
			{
				texsize = vec2(0.5 * thflip, tvflip);
				texmid.Real(Y_) = texsize.Real(Y_) / 2.0;
			}
			if (closed > 0)
			{
				if (mapped > 0)
					texmid.Real(X_) = 3.0 / 4.0;
				vbuffer_add_triangle({ IntType(0), IntType(0), -rad, x1, y1, -rad, x2, y2, -rad, texmid.Real(X_), texmid.Real(Y_), texmid.Real(X_) + cos(ip * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) + sin(ip * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), texmid.Real(X_) + cos(i * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) + sin(i * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), invert });
			}
			if (mapped > 0)
			{
				texmid.Real(X_) = 1.0 / 4.0;
				tex1 = point2D(IntType(0), IntType(0));
				tex2 = point2D(abs(texsize.Real(X_)), abs(texsize.Real(Y_)));
				if (thflip < IntType(0))
				{
					RealType tmp = tex1.Real(X_);
					tex1.Real(X_) = tex2.Real(X_);
					tex2.Real(X_) = tmp;
				}
				if (tvflip < IntType(0))
				{
					RealType tmp = tex1.Real(Y_);
					tex1.Real(Y_) = tex2.Real(Y_);
					tex2.Real(Y_) = tmp;
				}
			}
			if (invert > 0)
			{
				vertex_add({ x2, y2, -rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ IntType(0), IntType(0), rad, IntType(0), IntType(0), IntType(1), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
			}
			else
			{
				vertex_add({ IntType(0), IntType(0), rad, IntType(0), IntType(0), IntType(1), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x2, y2, -rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
			}
			
		}
		return vbuffer_done();
	}
	
	VarType vbuffer_create_cube(RealType rad, VecType tex1, VecType tex2, RealType thflip, RealType tvflip, VarType invert, VarType mapped)
	{
		vbuffer_start();
		VecType texsize = point2D(1.0 / 3.0, 1.0 / 2.0);
		if (mapped > 0)
		{
			if (invert > 0)
				tex1.Real(X_) = texsize.Real(X_);
			else
				tex1.Real(X_) = texsize.Real(X_) * IntType(2);
			
			tex1.Real(Y_) = IntType(0);
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ rad, rad, -rad, rad, rad, rad, rad, -rad, rad, tex1.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex1.Real(Y_), invert });
		vbuffer_add_triangle({ rad, rad, -rad, rad, -rad, rad, rad, -rad, -rad, tex1.Real(X_), tex2.Real(Y_), tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), invert });
		if (mapped > 0)
		{
			if (invert > 0)
				tex1.Real(X_) = texsize.Real(X_) * IntType(2);
			else
				tex1.Real(X_) = texsize.Real(X_);
			
			tex1.Real(Y_) = IntType(0);
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ -rad, rad, rad, -rad, rad, -rad, -rad, -rad, rad, tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), invert });
		vbuffer_add_triangle({ -rad, -rad, rad, -rad, rad, -rad, -rad, -rad, -rad, tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex2.Real(Y_), invert });
		if (mapped > 0)
		{
			tex1 = point2D(IntType(0), IntType(0));
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ -rad, rad, rad, rad, rad, rad, rad, rad, -rad, tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), invert });
		vbuffer_add_triangle({ -rad, rad, -rad, -rad, rad, rad, rad, rad, -rad, tex1.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), invert });
		if (mapped > 0)
		{
			tex1 = point2D(IntType(0), texsize.Real(Y_));
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ rad, -rad, rad, -rad, -rad, rad, rad, -rad, -rad, tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex1.Real(Y_), tex1.Real(X_), tex2.Real(Y_), invert });
		vbuffer_add_triangle({ -rad, -rad, rad, -rad, -rad, -rad, rad, -rad, -rad, tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex2.Real(Y_), invert });
		if (mapped > 0)
		{
			tex1 = texsize;
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ -rad, -rad, rad, rad, -rad, rad, -rad, rad, rad, tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex1.Real(Y_), tex1.Real(X_), tex2.Real(Y_), invert });
		vbuffer_add_triangle({ rad, -rad, rad, rad, rad, rad, -rad, rad, rad, tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex2.Real(Y_), invert });
		if (mapped > 0)
		{
			tex1 = point2D(texsize.Real(X_) * IntType(2), texsize.Real(Y_));
			tex2 = point2D_add(tex1, texsize);
			if (thflip < IntType(0))
			{
				RealType tmp = tex1.Real(X_);
				tex1.Real(X_) = tex2.Real(X_);
				tex2.Real(X_) = tmp;
			}
			if (tvflip < IntType(0))
			{
				RealType tmp = tex1.Real(Y_);
				tex1.Real(Y_) = tex2.Real(Y_);
				tex2.Real(Y_) = tmp;
			}
		}
		vbuffer_add_triangle({ rad, -rad, -rad, -rad, -rad, -rad, -rad, rad, -rad, tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), invert });
		vbuffer_add_triangle({ rad, rad, -rad, rad, -rad, -rad, -rad, rad, -rad, tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), invert });
		return vbuffer_done();
	}
	
	VarType vbuffer_create_cylinder(RealType rad, VecType tex1, VecType tex2, RealType thflip, RealType tvflip, VarType detail, VarType closed, VarType invert, VarType mapped)
	{
		vbuffer_start();
		tex1.Real(X_) += 0.25;
		tex2.Real(X_) += 0.25;
		RealType i = IntType(0);
		for (IntType _it = 0, _it_max = detail; _it < _it_max; _it++)
		{
			RealType ip;
			RealType n1x, n1y, n2x, n2y;
			RealType x1, y1, x2, y2;
			VecType texsize, texmid;
			ip = i;
			i += 1.0 / detail;
			texsize = point2D_sub(tex2, tex1);
			texmid = point2D_add(tex1, vec2_mul(texsize, 1.0 / 2.0));
			n1x = cos(ip * pi_ * IntType(2));
			n1y = -sin(ip * pi_ * IntType(2));
			n2x = cos(i * pi_ * IntType(2));
			n2y = -sin(i * pi_ * IntType(2));
			x1 = n1x * rad;
			y1 = n1y * rad;
			x2 = n2x * rad;
			y2 = n2y * rad;
			if (invert > 0)
			{
				n1x *= -1.0;
				n1y *= -1.0;
				n2x *= -1.0;
				n2y *= -1.0;
			}
			if (mapped > 0)
			{
				texsize = vec2((1.0 / 3.0) * thflip, tvflip);
				texmid.Real(Y_) = texsize.Real(Y_) / 2.0;
			}
			if (closed > 0)
			{
				if (mapped > 0)
					texmid.Real(X_) = 5.0 / 6.0;
				vbuffer_add_triangle({ IntType(0), IntType(0), -rad, x1, y1, -rad, x2, y2, -rad, texmid.Real(X_), texmid.Real(Y_), texmid.Real(X_) + cos(ip * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) + sin(ip * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), texmid.Real(X_) + cos(i * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) + sin(i * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), invert });
				if (mapped > 0)
					texmid.Real(X_) = 1.0 / 2.0;
				vbuffer_add_triangle({ IntType(0), IntType(0), rad, x2, y2, rad, x1, y1, rad, texmid.Real(X_), texmid.Real(Y_), texmid.Real(X_) + cos(i * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) - sin(i * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), texmid.Real(X_) + cos(ip * pi_ * IntType(2)) * (texsize.Real(X_) / 2.0), texmid.Real(Y_) - sin(ip * pi_ * IntType(2)) * (texsize.Real(Y_) / 2.0), invert });
			}
			if (mapped > 0)
			{
				tex1 = point2D(IntType(0), IntType(0));
				tex2 = point2D(abs(texsize.Real(X_)), abs(texsize.Real(Y_)));
				if (thflip < IntType(0))
				{
					RealType tmp = tex1.Real(X_);
					tex1.Real(X_) = tex2.Real(X_);
					tex2.Real(X_) = tmp;
				}
				if (tvflip < IntType(0))
				{
					RealType tmp = tex1.Real(Y_);
					tex1.Real(Y_) = tex2.Real(Y_);
					tex2.Real(Y_) = tmp;
				}
			}
			if (invert > 0)
			{
				vertex_add({ x1, y1, rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) });
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ x2, y2, rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x2, y2, -rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ x2, y2, rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
			}
			else
			{
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ x1, y1, rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) });
				vertex_add({ x2, y2, rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x2, y2, rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) });
				vertex_add({ x2, y2, -rad, n2x, n2y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * i, tex1.Real(Y_) + texsize.Real(Y_) });
				vertex_add({ x1, y1, -rad, n1x, n1y, IntType(0), tex1.Real(X_) + texsize.Real(X_) * ip, tex1.Real(Y_) + texsize.Real(Y_) });
			}
			
		}
		return vbuffer_done();
	}
	
	VarType vbuffer_create_path(Scope<obj_timeline> self, IntType path, BoolType small_)
	{
		ArrType points;
		VarType radius, detail, closed, texlength, invert;
		BoolType rail;
		points = ObjType(obj_timeline, path)->path_table;
		radius = ObjType(obj_timeline, path)->path_shape_radius;
		detail = ObjType(obj_timeline, path)->path_shape_detail;
		closed = ObjType(obj_timeline, path)->path_closed;
		rail = !(ObjType(obj_timeline, path)->path_shape_tube > 0);
		texlength = ObjType(obj_timeline, path)->path_shape_tex_length;
		invert = ObjType(obj_timeline, path)->path_shape_invert;
		if (small_)
		{
			radius = IntType(1);
			detail = IntType(4);
			rail = false;
			invert = false;
		}
		vbuffer_start();
		ArrType frames;
		VarType p;
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(points)); i++)
		{
			p = points.Value(i);
			frames[i] = matrix_create_rotate_to(ArrType::From({ p.Value(PATH_TANGENT_X), p.Value(PATH_TANGENT_Y), p.Value(PATH_TANGENT_Z) }), ArrType::From({ p.Value(PATH_NORMAL_X), p.Value(PATH_NORMAL_Y), p.Value(PATH_NORMAL_Z) }));
		}
		VecType p1, p2, p3, p4;
		VecType n1, n2, n3, n4, nflatp, nflat;
		VecType nn1, nn2, nn3, nn4;
		VecType t1, t2, t3, t4;
		RealType jp, j;
		ArrType ringp;
		RealType length, plength;
		length = IntType(0);
		plength = IntType(0);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(frames)) - IntType(1); i++)
		{
			if (!rail)
			{
				jp = IntType(0);
				j = 1.0 / detail;
			}
			else
				jp = .5;
			
			ringp = ArrType::From({ cos(jp * pi_ * IntType(2)), IntType(0), -sin(jp * pi_ * IntType(2)) });
			plength = length;
			length += point3D_distance(points.Value(i), points.Value(i + IntType(1)));
			n1 = vec3_normalize(vec3_mul_matrix(ringp, frames.Value(i)));
			p1 = point3D_add(vec3_mul(n1, radius * points[i][IntType(4)]), points.Value(i));
			n3 = vec3_normalize(vec3_mul_matrix(ringp, frames.Value(i + IntType(1))));
			p3 = point3D_add(vec3_mul(n3, radius * points[i + IntType(1)][IntType(4)]), points.Value(i + IntType(1)));
			jp = IntType(0);
			j = IntType(0);
			while (j < IntType(1))
			{
				if (!rail)
				{
					jp = j;
					j += 1.0 / detail;
				}
				else
					j = IntType(0);
				
				ringp = ArrType::From({ cos(j * pi_ * IntType(2)), IntType(0), -sin(j * pi_ * IntType(2)) });
				n2 = vec3_normalize(vec3_mul_matrix(ringp, frames.Value(i)));
				p2 = point3D_add(vec3_mul(n2, radius * points[i][IntType(4)]), points.Value(i));
				n4 = vec3_normalize(vec3_mul_matrix(ringp, frames.Value(i + IntType(1))));
				p4 = point3D_add(vec3_mul(n4, radius * points[i + IntType(1)][IntType(4)]), points.Value(i + IntType(1)));
				if (rail)
				{
					t1 = vec2(IntType(0), plength / texlength);
					t2 = vec2(IntType(1), plength / texlength);
					t3 = vec2(IntType(0), length / texlength);
					t4 = vec2(IntType(1), length / texlength);
					n1 = ArrType::From({ frames[i][IntType(8)], frames[i][IntType(9)], frames[i][IntType(10)] });
					n2 = n1;
					n3 = ArrType::From({ frames[i + IntType(1)][IntType(8)], frames[i + IntType(1)][IntType(9)], frames[i + IntType(1)][IntType(10)] });
					n4 = n3;
				}
				else
				{
					t1 = vec2(jp, plength / texlength);
					t2 = vec2(j, plength / texlength);
					t3 = vec2(jp, length / texlength);
					t4 = vec2(j, length / texlength);
				}
				
				t1.Real(X_) /= 3.0;
				t2.Real(X_) /= 3.0;
				t3.Real(X_) /= 3.0;
				t4.Real(X_) /= 3.0;
				nn1 = n1;
				nn2 = n2;
				nn3 = n3;
				nn4 = n4;
				if (invert > 0)
				{
					nn1 = vec3_mul(nn1, -IntType(1));
					nn2 = vec3_mul(nn2, -IntType(1));
					nn3 = vec3_mul(nn3, -IntType(1));
					nn4 = vec3_mul(nn4, -IntType(1));
				}
				if (ObjType(obj_timeline, path)->path_shape_smooth_segments > 0 && !(ObjType(obj_timeline, path)->path_shape_smooth_ring > 0))
				{
					nflatp = vec3_normalize(vec3_add(nn1, nn2));
					nflat = vec3_normalize(vec3_add(nn3, nn4));
					nn1 = nflatp;
					nn2 = nflatp;
					nn3 = nflat;
					nn4 = nflat;
				}
				else
					if (!(ObjType(obj_timeline, path)->path_shape_smooth_segments > 0) && ObjType(obj_timeline, path)->path_shape_smooth_ring > 0)
					{
						nflatp = vec3_normalize(vec3_add(nn1, nn3));
						nflat = vec3_normalize(vec3_add(nn2, nn4));
						nn1 = nflatp;
						nn2 = nflat;
						nn3 = nflatp;
						nn4 = nflat;
					}
					else
						if (!(self->path_shape_smooth_segments > 0) && !(self->path_shape_smooth_ring > 0))
						{
							nflat = vec3_normalize(vec3_add(vec3_add(vec3_add(nn1, nn2), nn3), nn4));
							nn1 = nflat;
							nn2 = nflat;
							nn3 = nflat;
							nn4 = nflat;
						}
				
				
				if (invert > 0)
				{
					vbuffer_add_triangle({ p2, p1, p4, t4, t1, t2, nn2, nn1, nn4 });
					vbuffer_add_triangle({ p1, p3, p4, t4, t3, t1, nn1, nn3, nn4 });
				}
				else
				{
					vbuffer_add_triangle({ p4, p1, p2, t4, t1, t2, nn4, nn1, nn2 });
					vbuffer_add_triangle({ p4, p3, p1, t4, t3, t1, nn4, nn3, nn1 });
				}
				
				if (rail)
					break;
				if (!(closed > 0))
				{
					t1 = ArrType::From({ (cos((jp + .25) * pi_ * IntType(2)) + 1.0) / 2.0, (sin((jp + .25) * pi_ * IntType(2)) + 1.0) / 2.0 });
					t2 = ArrType::From({ (cos((j + .25) * pi_ * IntType(2)) + 1.0) / 2.0, (sin((j + .25) * pi_ * IntType(2)) + 1.0) / 2.0 });
					t3 = ArrType::From({ .5, .5 });
					t1.Real(X_) = (t1.Real(X_) / 3.0) + (1.0 / 3.0);
					t2.Real(X_) = (t2.Real(X_) / 3.0) + (1.0 / 3.0);
					t3.Real(X_) = (t3.Real(X_) / 3.0) + (1.0 / 3.0);
					if (i == IntType(0))
					{
						if (invert > 0)
							vbuffer_add_triangle({ p2, points.Value(i), p1, t1, t3, t2 });
						else
							vbuffer_add_triangle({ p1, points.Value(i), p2, t1, t3, t2 });
						
					}
					if (i == (array_length(VarType::CreateRef(points)) - IntType(2)))
					{
						t1.Real(X_) += (1.0 / 3.0);
						t2.Real(X_) += (1.0 / 3.0);
						t3.Real(X_) += (1.0 / 3.0);
						if (invert > 0)
							vbuffer_add_triangle({ p3, points.Value(i + IntType(1)), p4, t2, t3, t1 });
						else
							vbuffer_add_triangle({ p4, points.Value(i + IntType(1)), p3, t2, t3, t1 });
						
					}
				}
				p1 = p2;
				p3 = p4;
				n1 = n2;
				n3 = n4;
			}
			
		}
		return vbuffer_done();
	}
	
	VarType vbuffer_create_sphere(RealType rad, VecType tex1, VecType tex2, VarType detail, VarType invert)
	{
		vbuffer_start();
		tex1.Real(X_) += 0.25;
		tex2.Real(X_) += 0.25;
		RealType i = IntType(0);
		for (IntType _it = 0, _it_max = detail; _it < _it_max; _it++)
		{
			RealType ip, j;
			ip = i;
			i += 1.0 / detail;
			j = IntType(0);
			for (IntType _it = 0, _it_max = detail - IntType(2); _it < _it_max; _it++)
			{
				RealType jp;
				RealType n1x, n1y, n1z, n2x, n2y, n2z, n3x, n3y, n3z, n4x, n4y, n4z;
				RealType x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4;
				VecType texsize, texmid;
				RealType n;
				jp = j;
				j += 1.0 / (detail - IntType(2));
				texsize = point2D_sub(tex2, tex1);
				texmid = point2D_add(tex1, vec2_mul(texsize, 1.0 / 2.0));
				n = negate(invert);
				n1x = sin(ip * pi_ * IntType(2)) * sin(jp * pi_);
				n1y = -cos(ip * pi_ * IntType(2)) * sin(jp * pi_);
				n1z = -cos(jp * pi_);
				n2x = sin(ip * pi_ * IntType(2)) * sin(j * pi_);
				n2y = -cos(ip * pi_ * IntType(2)) * sin(j * pi_);
				n2z = -cos(j * pi_);
				n3x = sin(i * pi_ * IntType(2)) * sin(jp * pi_);
				n3y = -cos(i * pi_ * IntType(2)) * sin(jp * pi_);
				n3z = -cos(jp * pi_);
				n4x = sin(i * pi_ * IntType(2)) * sin(j * pi_);
				n4y = -cos(i * pi_ * IntType(2)) * sin(j * pi_);
				n4z = -cos(j * pi_);
				x1 = n1x * rad;
				y1 = n1y * rad;
				z1 = n1z * rad;
				x2 = n2x * rad;
				y2 = n2y * rad;
				z2 = n2z * rad;
				x3 = n3x * rad;
				y3 = n3y * rad;
				z3 = n3z * rad;
				x4 = n4x * rad;
				y4 = n4y * rad;
				z4 = n4z * rad;
				if (jp > IntType(0))
				{
					if (invert > 0)
					{
						vertex_add({ x3, y3, z3, n3x * n, n3y * n, n3z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n3z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x1, y1, z1, n1x * n, n1y * n, n1z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n1z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x4, y4, z4, n4x * n, n4y * n, n4z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n4z * (texsize.Real(Y_) / 2.0) });
					}
					else
					{
						vertex_add({ x1, y1, z1, n1x * n, n1y * n, n1z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n1z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x3, y3, z3, n3x * n, n3y * n, n3z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n3z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x4, y4, z4, n4x * n, n4y * n, n4z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n4z * (texsize.Real(Y_) / 2.0) });
					}
					
				}
				if (j < IntType(1))
				{
					if (invert > 0)
					{
						vertex_add({ x4, y4, z4, n4x * n, n4y * n, n4z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n4z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x1, y1, z1, n1x * n, n1y * n, n1z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n1z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x2, y2, z2, n2x * n, n2y * n, n2z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n2z * (texsize.Real(Y_) / 2.0) });
					}
					else
					{
						vertex_add({ x1, y1, z1, n1x * n, n1y * n, n1z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n1z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x4, y4, z4, n4x * n, n4y * n, n4z * n, tex2.Real(X_) - i * texsize.Real(X_), texmid.Real(Y_) - n4z * (texsize.Real(Y_) / 2.0) });
						vertex_add({ x2, y2, z2, n2x * n, n2y * n, n2z * n, tex2.Real(X_) - ip * texsize.Real(X_), texmid.Real(Y_) - n2z * (texsize.Real(Y_) / 2.0) });
					}
					
				}
			}
		}
		return vbuffer_done();
	}
	
	VarType vbuffer_create_surface(RealType rad, VecType tex1, VecType tex2, VarType invert)
	{
		vbuffer_start();
		vbuffer_add_triangle({ -rad, IntType(0), rad, rad, IntType(0), rad, rad, IntType(0), -rad, tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), invert });
		vbuffer_add_triangle({ -rad, IntType(0), -rad, -rad, IntType(0), rad, rad, IntType(0), -rad, tex1.Real(X_), tex2.Real(Y_), tex1.Real(X_), tex1.Real(Y_), tex2.Real(X_), tex2.Real(Y_), invert });
		return vbuffer_done();
	}
	
	void vbuffer_destroy(VarType vbuf)
	{
		vertex_delete_buffer((IntType)(vbuf));
	}
	
	VarType vbuffer_done(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType vbuffer = global::vbuffer_current;
		if (argument_count > IntType(0))
			global::vbuffer_current = argument[IntType(0)];
		vertex_end((IntType)(vbuffer));
		vbuffer = vbuffer_generate_tangents(vbuffer);
		vertex_freeze((IntType)(vbuffer));
		return vbuffer;
	}
	
	VarType vbuffer_generate_tangents(VarType vbuffer)
	{
		if (is_cpp() || dev_mode_skip_tangents)
			return vbuffer;
		IntType size, seekend;
		ArrType p, uv, seekpos;
		VecType t;
		VecType edge1, edge2, deltaUV1, deltaUV2;
		RealType f;
		size = vertex_get_number((IntType)(vbuffer));
		if (size < IntType(4))
			return vbuffer;
		IntType vertex_data = buffer_create_from_vertex_buffer((IntType)(vbuffer), buffer_grow, IntType(1));
		vbuffer_destroy(vbuffer);
		for (RealType i = IntType(0); i < size; i += IntType(3))
		{
			for (IntType j = IntType(0); j <= IntType(2); j++)
			{
				p[j][X_] = buffer_read(vertex_data, buffer_f32);
				p[j][Y_] = buffer_read(vertex_data, buffer_f32);
				p[j][Z_] = buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_u32);
				uv[j][X_] = buffer_read(vertex_data, buffer_f32);
				uv[j][Y_] = buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				seekpos[j] = buffer_tell(vertex_data);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
				buffer_read(vertex_data, buffer_f32);
			}
			seekend = buffer_tell(vertex_data);
			if (i == IntType(0))
				continue;
			edge1 = point3D_sub(p.Value(IntType(1)), p.Value(IntType(0)));
			edge2 = point3D_sub(p.Value(IntType(2)), p.Value(IntType(0)));
			deltaUV1 = point2D_sub(uv.Value(IntType(1)), uv.Value(IntType(0)));
			deltaUV2 = point2D_sub(uv.Value(IntType(2)), uv.Value(IntType(0)));
			f = 1.0 / (deltaUV1.Real(X_) * deltaUV2.Real(Y_) - deltaUV1.Real(Y_) * deltaUV2.Real(X_));
			t = vec3_normalize(vec3_mul(vec3_sub(vec3_mul(edge1, deltaUV2.Real(Y_)), vec3_mul(edge2, deltaUV1.Real(Y_))), f));
			for (IntType j = IntType(0); j <= IntType(2); j++)
			{
				buffer_seek(vertex_data, buffer_seek_start, seekpos.Value(j));
				buffer_write(vertex_data, buffer_f32, t.Real(X_));
				buffer_write(vertex_data, buffer_f32, t.Real(Y_));
				buffer_write(vertex_data, buffer_f32, t.Real(Z_));
			}
			buffer_seek(vertex_data, buffer_seek_start, seekend);
		}
		vbuffer = vertex_create_buffer_from_buffer(vertex_data, global::vertex_format);
		buffer_delete(vertex_data);
		return vbuffer;
	}
	
	BoolType vbuffer_is_empty(VarType vbuf)
	{
		return (vertex_get_number((IntType)(vbuf)) == (is_cpp() ? IntType(0) : IntType(3)));
	}
	
	BoolType vbuffer_render(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		MatrixType mat;
		VarType vbuf = argument[IntType(0)];
		if (vbuf == null_)
			return false;
		if (argument_count > IntType(1))
		{
			VarType pos, rot, sca;
			if (argument_count > IntType(1))
				pos = argument[IntType(1)];
			else
				pos = point3D(IntType(0), IntType(0), IntType(0));
			
			if (argument_count > IntType(2))
				rot = argument[IntType(2)];
			else
				rot = vec3(IntType(0), IntType(0), IntType(0));
			
			if (argument_count > IntType(3))
				sca = argument[IntType(3)];
			else
				sca = vec3(IntType(1), IntType(1), IntType(1));
			
			mat = matrix_get(matrix_world);
			matrix_set(matrix_world, matrix_create(pos, rot, sca));
		}
		vertex_submit((IntType)(vbuf), pr_trianglelist, -IntType(1));
		if (argument_count > IntType(1))
			matrix_set(matrix_world, mat);
		return false;
	}
	
	void vbuffer_render_matrix(VarType vbuf, MatrixType mat)
	{
		matrix_set(matrix_world, mat);
		vertex_submit((IntType)(vbuf), pr_trianglelist, -IntType(1));
		matrix_world_reset();
	}
	
	VarType vbuffer_start()
	{
		global::vbuffer_current = vertex_create_buffer();
		vertex_begin((IntType)(global::vbuffer_current), global::vertex_format);
		if (!is_cpp())
			for (IntType _it = 0, _it_max = IntType(3); _it < _it_max; _it++)
				vertex_add({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0) });
		return global::vbuffer_current;
	}
	
	VarType vec3_direction(VarType from, VarType to)
	{
		VecType v = vec3_normalize(point3D_sub(to, from));
		if (vec3_length(v) == IntType(0))
			return ArrType::From({ IntType(0), IntType(1), IntType(0) });
		else
			return v;
		
		return VarType();
	}
	
	VecType vec3_normal(VarType vec, RealType angle)
	{
		RealType xx, yy, zz, cx, cy;
		VecType t;
		xx = vec.Value(X_);
		yy = vec.Value(Y_);
		zz = vec.Value(Z_);
		if (abs(zz) != IntType(1))
		{
			cx = lengthdir_x(1.0, angle) / sqrt(xx * xx + yy * yy + zz * zz);
			cy = lengthdir_y(1.0, angle);
			t.Real(Z_) = cx * (xx * xx + yy * yy);
			t.Real(Y_) = cy * xx - cx * yy * zz;
			t.Real(X_) = -cx * xx * zz - cy * yy;
			return vec3_normalize(t);
		}
		else
			return ArrType::From({ lengthdir_x(1.0, angle), lengthdir_y(1.0, angle), IntType(0) });
		
		return VecType();
	}
	
	VecType vec3_project_ray(VecType point)
	{
		RealType px, py;
		VecType rayclip, rayeye, raywor;
		px = -(point.Real(X_) * IntType(2) - IntType(1));
		py = point.Real(Y_) * IntType(2) - IntType(1);
		rayclip = vec4(px, py, -IntType(1), IntType(1));
		rayeye = point4D_mul_matrix(rayclip, matrix_inverse(global::proj_matrix));
		rayeye = vec4(rayeye.Real(X_), rayeye.Real(Y_), -IntType(1), IntType(0));
		raywor = point4D_mul_matrix(rayeye, matrix_inverse(global::view_matrix));
		return vec3_normalize(vec3(raywor.Real(X_), raywor.Real(Y_), raywor.Real(Z_)));
	}
	
	VecType vec3_reflect(VarType v, VarType n)
	{
		return vec3_sub(v, vec3_mul(vec3_mul(n, vec3_dot(v, n)), IntType(2)));
	}
	
	VecType vec3_rotate_axis_angle(VarType v, VarType axis, RealType angle)
	{
		VecType d, r;
		d = vec3_mul(axis, vec3_dot(v, axis));
		r = vec3_sub(v, d);
		return vec3_add(d, vec3_add(vec3_mul(r, cos(angle)), vec3_mul(vec3_cross(axis, r), sin(angle))));
	}
	
	void vertex_add(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, zz;
		if (argument_count < IntType(8))
		{
			VarType pos, texcoord;
			VecType normal;
			pos = argument[IntType(0)];
			normal = vec3_normalize(argument[IntType(1)]);
			texcoord = argument[IntType(2)];
			xx = pos.Value(X_);
			yy = pos.Value(Y_);
			zz = pos.Value(Z_);
			vertex_position_3d((IntType)(global::vbuffer_current), xx, yy, pos.Value(Z_));
			vertex_normal((IntType)(global::vbuffer_current), normal.Real(X_), normal.Real(Y_), normal.Real(Z_));
			vertex_color((IntType)(global::vbuffer_current), (IntType)(global::vertex_rgb), global::vertex_alpha);
			vertex_texcoord((IntType)(global::vbuffer_current), texcoord.Value(X_), texcoord.Value(Y_));
		}
		else
		{
			xx = argument[IntType(0)];
			yy = argument[IntType(1)];
			zz = argument[IntType(2)];
			VecType normal = vec3_normalize(ArrType::From({ argument[IntType(3)], argument[IntType(4)], argument[IntType(5)] }));
			vertex_position_3d((IntType)(global::vbuffer_current), xx, yy, zz);
			vertex_normal((IntType)(global::vbuffer_current), normal.Real(X_), normal.Real(Y_), normal.Real(Z_));
			vertex_color((IntType)(global::vbuffer_current), (IntType)(global::vertex_rgb), global::vertex_alpha);
			vertex_texcoord((IntType)(global::vbuffer_current), argument[IntType(6)], argument[IntType(7)]);
		}
		
		RealType wavexy, wavez;
		wavexy = IntType(0);
		wavez = IntType(0);
		if (global::vertex_wave != e_vertex_wave_NONE)
		{
			if ((global::vertex_wave_zmin == null_ || zz > global::vertex_wave_zmin) && (global::vertex_wave_zmax == null_ || zz < global::vertex_wave_zmax))
			{
				if (global::vertex_wave == e_vertex_wave_ALL)
				{
					wavexy = IntType(1);
					wavez = IntType(1);
				}
				else
					if (global::vertex_wave == e_vertex_wave_Z_ONLY)
						wavez = IntType(1);
				
			}
			vertex_float4((IntType)(global::vbuffer_current), wavexy, wavez, global::vertex_emissive, global::vertex_subsurface);
		}
		else
			vertex_float4((IntType)(global::vbuffer_current), 0.0, 0.0, global::vertex_emissive, global::vertex_subsurface);
		
		vertex_float3((IntType)(global::vbuffer_current), 0.0, 0.0, 0.0);
	}
	
	void vertex_format_startup(ScopeAny self)
	{
		log({ /*"Create vertex format"*/ STR(3811) });
		vertex_format_begin();
		vertex_format_add_position_3d();
		vertex_format_add_normal();
		vertex_format_add_colour();
		vertex_format_add_texcoord();
		vertex_format_add_custom(vertex_type_float4, vertex_usage_texcoord);
		vertex_format_add_custom((IntType)(sVar(vertex_type_float3)), vertex_usage_texcoord);
		global::vertex_format = vertex_format_end();
		global::vertex_rgb = c_white;
		global::vertex_alpha = IntType(1);
		global::vertex_wave = e_vertex_wave_NONE;
		global::vertex_wave_zmin = null_;
		global::vertex_wave_zmax = null_;
		global::vertex_emissive = IntType(0);
		global::vertex_subsurface = IntType(0);
	}
	
	void view_area_draw(ScopeAny self)
	{
		sReal(view_area_x) = sReal(panel_area_x) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(191)))->size_real_ani + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(187)))->size_real_ani;
		sReal(view_area_y) = sReal(panel_area_y) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(190)))->size_real_ani;
		sReal(view_area_width) = sReal(panel_area_width) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(191)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(187)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(192)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(188)))->size_real_ani;
		sReal(view_area_height) = sReal(panel_area_height) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(190)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(189)))->size_real_ani;
		view_draw(self, sInt(view_main));
		view_draw(self, sInt(view_second));
		if (sVar(window_busy) == /*"viewresizehor"*/ STR(3812) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3813))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (string_contains(ObjType(obj_view, sInt(view_second))->location, /*"left"*/ STR(191)))
				ObjType(obj_view, sInt(view_second))->width = sVar(view_resize_width) + (gmlGlobal::mouse_x - sInt(mouse_click_x));
			else
				ObjType(obj_view, sInt(view_second))->width = sVar(view_resize_width) - (gmlGlobal::mouse_x - sInt(mouse_click_x));
			
			ObjType(obj_view, sInt(view_second))->width = clamp(ObjType(obj_view, sInt(view_second))->width, IntType(364), sReal(view_area_width));
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"viewresizever"*/ STR(3814) || sVar(window_busy) == /*"viewresizeboth"*/ STR(3813))
		{
			sInt(mouse_cursor) = cr_size_ns;
			if (string_contains(ObjType(obj_view, sInt(view_second))->location, /*"top"*/ STR(190)))
				ObjType(obj_view, sInt(view_second))->height = sVar(view_resize_height) + (gmlGlobal::mouse_y - sInt(mouse_click_y));
			else
				ObjType(obj_view, sInt(view_second))->height = sVar(view_resize_height) - (gmlGlobal::mouse_y - sInt(mouse_click_y));
			
			ObjType(obj_view, sInt(view_second))->height = clamp(ObjType(obj_view, sInt(view_second))->height, IntType(50), sReal(view_area_height));
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"viewresizeboth"*/ STR(3813))
		{
			if (ObjType(obj_view, sInt(view_second))->location == /*"right"*/ STR(192) || ObjType(obj_view, sInt(view_second))->location == /*"left_secondary"*/ STR(187))
				sInt(mouse_cursor) = cr_size_nesw;
			else
				sInt(mouse_cursor) = cr_size_nwse;
			
		}
		if (sVar(window_busy) == /*"viewresizesplithor"*/ STR(3815))
		{
			sInt(mouse_cursor) = cr_size_we;
			sReal(view_split) = clamp((gmlGlobal::mouse_x - sReal(view_area_x)) / sReal(view_area_width), 0.1, 0.9);
			if (ObjType(obj_view, sInt(view_second))->location == /*"right"*/ STR(192))
				sReal(view_split) = IntType(1) - sReal(view_split);
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"viewresizesplitver"*/ STR(3816))
		{
			sInt(mouse_cursor) = cr_size_ns;
			sReal(view_split) = clamp((gmlGlobal::mouse_y - sReal(view_area_y)) / sReal(view_area_height), 0.1, 0.9);
			if (ObjType(obj_view, sInt(view_second))->location == /*"bottom"*/ STR(189))
				sReal(view_split) = IntType(1) - sReal(view_split);
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
	}
	
}
