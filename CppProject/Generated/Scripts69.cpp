/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.16 10:06:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void tl_update_length()
	{
		VarType len = IntType(0);
		withAll (obj_timeline, noone)
		{
			if (ds_list_size(self->keyframe_list) == IntType(0))
				continue;
			if (self->type == e_tl_type_AUDIO)
			{
				for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
					len = max({ len, ObjType(obj_keyframe, DsList(self->keyframe_list).Value(k))->position + tl_keyframe_length(DsList(self->keyframe_list).Value(k)) });
			}
			else
				len = max({ len, ObjType(obj_keyframe, DsList(self->keyframe_list).Value(ds_list_size(self->keyframe_list) - IntType(1)))->position });
			
		}
		
		global::_app->timeline_length = len;
	}
	
	void tl_update_list(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType root, tllevel, collapsed;
		root = true;
		tllevel = -IntType(1);
		collapsed = false;
		if (argument_count > IntType(0))
		{
			root = argument[IntType(0)];
			tllevel = argument[IntType(1)];
			collapsed = argument[IntType(2)];
		}
		if (root > 0)
		{
			global::_app->tree_update_parent_filter = global::_app->id;
			global::_app->tree_update_extend = true;
			global::_app->tree_update_color = null_;
			global::_app->tree_close_parent = null_;
			ds_list_clear(sInt(tree_visible_list));
			ds_list_clear(sInt(tree_list_filter));
			ds_list_clear(sInt(project_timeline_list));
			sVar(level) = -IntType(1);
			sReal(indent_level) = -IntType(1);
		}
		else
		{
			sVar(level) = tllevel;
			sArr(level_display) = ArrType::From({});
			sArr(tree_contents) = array_create({ e_tl_type_amount - IntType(1) });
			ds_list_clear(sInt(tree_list_filter));
			sInt(parent_filter) = global::_app->tree_update_parent_filter;
			if (sVar(color_tag) != null_)
				global::_app->tree_update_color = sVar(color_tag);
			sVar(color_tag_inherit) = global::_app->tree_update_color;
			if (tl_update_list_filter(self->id))
			{
				if (global::_app->tree_update_extend > 0)
				{
					ds_list_add({ global::_app->tree_visible_list, self->id });
					global::_app->tree_update_extend = sVar(tree_extend);
				}
				if (!(sVar(tree_extend) > 0) && global::_app->tree_close_parent == null_)
					global::_app->tree_close_parent = self->id;
				ds_list_add({ idInt(sInt(parent_filter), tree_list_filter), self->id });
				if (self->id != global::_app->tree_close_parent && global::_app->tree_close_parent != null_)
					idArr(global::_app->tree_close_parent, tree_contents)[sVar(type)]++;
				global::_app->tree_update_parent_filter = self->id;
			}
			ds_list_add({ global::_app->project_timeline_list, self->id });
		}
		
		IntType update;
		VarType extend, color;
		update = global::_app->tree_update_parent_filter;
		extend = global::_app->tree_update_extend;
		color = global::_app->tree_update_color;
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
		{
			global::_app->tree_update_parent_filter = update;
			global::_app->tree_update_extend = extend;
			global::_app->tree_update_color = color;
			withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
				tl_update_list(self, { false, idVar(self.otherId, level) + IntType(1), global::_app->tree_close_parent != null_ });
			
		}
		if (!(collapsed > 0))
			global::_app->tree_close_parent = null_;
		if (argument_count == IntType(0) && global::_app->timeline_search == /*""*/ STR(0))
		{
			for (IntType t = IntType(0); t < ds_list_size(global::_app->tree_list_filter); t++)
			{
				withOne (Object, DsList(global::_app->tree_list_filter).Value(t), self->id)
					tl_update_list_indent(self, IntType(0));
				
			}
		}
	}
	
	BoolType tl_update_list_filter(VarType tl)
	{
		if (global::_app->setting_timeline_hide_ghosts > 0 && idVar(tl, ghost) > 0)
			return false;
		if (global::_app->timeline_search != /*""*/ STR(0) && !string_contains(string_upper(idVar(tl, display_name)), string_upper(global::_app->timeline_search)))
			return false;
		if (idVar(tl, color_tag_inherit) != null_ && global::_app->timeline_hide_color_tag.Value(idVar(tl, color_tag_inherit)) > 0)
			return false;
		return true;
	}
	
	void tl_update_list_indent(ScopeAny self, RealType tllevel)
	{
		sReal(indent_level) = tllevel;
		if (sInt(parent_filter) != global::_app->id)
		{
			sArr(level_display) = array_copy_1d(idArr(sInt(parent_filter), level_display));
			sArr(level_display) = array_add(VarType::CreateRef(sArr(level_display)), true);
			if (idInt(sInt(parent_filter), parent_filter) != global::_app->id)
			{
				if (ds_list_find_index(idInt(idInt(sInt(parent_filter), parent_filter), tree_list_filter), sInt(parent_filter)) == (ds_list_size(idInt(idInt(sInt(parent_filter), parent_filter), tree_list_filter)) - IntType(1)))
					sArr(level_display)[sVar(level) - IntType(2)] = false;
			}
		}
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list_filter)); t++)
		{
			withOne (Object, DsList(sInt(tree_list_filter)).Value(t), self->id)
				tl_update_list_indent(self, idReal(self.otherId, indent_level) + IntType(1));
			
		}
	}
	
	void tl_update_marker_length()
	{
		global::_app->timeline_marker_length = IntType(0);
		withAll (obj_marker, noone)
			global::_app->timeline_marker_length = max({ self->pos, global::_app->timeline_marker_length });
		
	}
	
	RealType tl_update_matrix(ScopeAny self, BoolType usepaths, BoolType updateik, BoolType updatepose, BoolType updatecopy)
	{
		IntType start, tlamount;
		VarType curtl, par, lasttex;
		VecType bend, pos, rot, sca;
		MatrixType matrixnoscale;
		BoolType hasik;
		RealType ikblend;
		ArrType posebend;
		BoolType inhalpha, inhcolor, inhglowcolor, inhvis, inhbend, inhtex, inhsurf, inhsubsurf;
		tlamount = ds_list_size(global::_app->project_timeline_list);
		posebend = ArrType::From({ IntType(0), IntType(0), IntType(0) });
		if (self->subAssetId == ID_obj_timeline)
			start = ds_list_find_index(global::_app->project_timeline_list, self->id);
		else
			start = IntType(0);
		
		if (start == -IntType(1))
			return IntType(0);
		for (IntType i = start; i < tlamount; i++)
		{
			curtl = DsList(global::_app->project_timeline_list).Value(i);
			if (updateik && !updatepose && (idVar(curtl, type) == e_tl_type_CHARACTER || idVar(curtl, type) == e_tl_type_SPECIAL_BLOCK || idVar(curtl, type) == e_tl_type_MODEL))
				for (IntType t = IntType(0); t < ds_list_size(idInt(curtl, tree_list)); t++)
					if (idVar(DsList(idInt(curtl, tree_list)).Value(t), inherit_pose) > 0)
						array_add(VarType::CreateRef(global::_app->project_inherit_pose_array), DsList(idInt(curtl, tree_list)).Value(t));
			if (idVar(curtl, value).Value(e_value_ROT_TARGET) != null_ || idVar(curtl, value).Value(e_value_POS_TARGET) != null_ || idVar(curtl, value).Value(e_value_SCALE_TARGET) != null_ || idVar(curtl, value).Value(e_value_BEND_IK_TARGET) != null_)
				idBool(curtl, update_matrix) = true;
			if (!idBool(curtl, update_matrix))
				continue;
			if (updateik && !updatepose && (array_length(VarType::CreateRef(global::_app->project_inherit_pose_array)) > IntType(0)) && array_contains(global::_app->project_inherit_pose_array, curtl))
			{
				idBool(curtl, update_matrix) = false;
				continue;
			}
			if (usepaths && (idVar(curtl, type) == e_tl_type_PATH || idVar(curtl, type) == e_tl_type_PATH_POINT))
			{
				idBool(curtl, update_matrix) = false;
				continue;
			}
			withOne (Object, curtl, self->id)
			{
				if (sVar(parent) != global::_app->id)
				{
					if (sVar(inherit_rot_point) > 0)
						sMat(matrix_parent) = array_copy_1d(idMat(sVar(parent), matrix_render));
					else
						sMat(matrix_parent) = array_copy_1d(idVar(sVar(parent), matrix));
					
					if (idVar(sVar(parent), type) == e_tl_type_BODYPART && sVar(lock_bend) > 0 && idVar(sVar(parent), model_part) != null_ && idInt(idVar(sVar(parent), model_part), bend_part) != null_)
					{
						bend = vec3(idArr(sVar(parent), value_inherit).Value(e_value_BEND_ANGLE_X), idArr(sVar(parent), value_inherit).Value(e_value_BEND_ANGLE_Y), idArr(sVar(parent), value_inherit).Value(e_value_BEND_ANGLE_Z));
						sMat(matrix_parent) = matrix_multiply(model_part_get_bend_matrix(self, { idVar(sVar(parent), model_part), bend, point3D(IntType(0), IntType(0), IntType(0)) }), sMat(matrix_parent));
					}
				}
				else
					sMat(matrix_parent) = MAT_IDENTITY;
				
				if (usepaths)
				{
					VarType path = sVar(value).Value(e_value_PATH_OBJ);
					if (path != null_ && array_length(VarType::CreateRef(idArr(path, path_table))) > IntType(0))
					{
						VarType offset, curpos;
						RealType angle;
						MatrixType mat;
						offset = sVar(value).Value(e_value_PATH_OFFSET);
						angle = IntType(0);
						curpos = tl_path_offset_get_position(path, offset);
						VecType n, t;
						n = vec3_normalize(ArrType::From({ curpos.Value(PATH_NORMAL_X), curpos.Value(PATH_NORMAL_Y), curpos.Value(PATH_NORMAL_Z) }));
						t = vec3_normalize(ArrType::From({ curpos.Value(PATH_TANGENT_X), curpos.Value(PATH_TANGENT_Y), curpos.Value(PATH_TANGENT_Z) }));
						mat = matrix_create_rotate_to(t, n);
						if (!(idVar(path, path_closed) > 0))
						{
							if (sVar(value).Value(e_value_PATH_OFFSET) <= IntType(0))
								curpos = tl_path_offset_get_position(path, IntType(0));
							else
								if (sVar(value).Value(e_value_PATH_OFFSET) >= idReal(path, path_length))
									curpos = tl_path_offset_get_position(path, idReal(path, path_length));
							
						}
						mat = matrix_multiply(mat, matrix_create(curpos, vec3(IntType(0)), vec3(IntType(1))));
						sMat(matrix_parent) = matrix_multiply(sMat(matrix_parent), mat);
						if (is_array(idVar(path, matrix)))
							sMat(matrix_parent) = matrix_multiply(sMat(matrix_parent), idVar(path, matrix));
					}
				}
				if (sVar(type) == e_tl_type_BODYPART && sVar(model_part) != null_)
				{
					if (sVar(part_of) != null_)
						sMat(matrix_parent) = matrix_multiply(matrix_create(idVar(sVar(model_part), position), idVar(sVar(model_part), rotation), vec3(IntType(1))), sMat(matrix_parent));
					else
						sMat(matrix_parent) = matrix_multiply(matrix_create(point3D(IntType(0), IntType(0), IntType(0)), idVar(sVar(model_part), rotation), vec3(IntType(1))), sMat(matrix_parent));
					
				}
				pos = point3D(sVar(value).Value(e_value_POS_X), sVar(value).Value(e_value_POS_Y), sVar(value).Value(e_value_POS_Z));
				rot = vec3(sVar(value).Value(e_value_ROT_X), sVar(value).Value(e_value_ROT_Y), sVar(value).Value(e_value_ROT_Z));
				sca = vec3(sVar(value).Value(e_value_SCA_X), sVar(value).Value(e_value_SCA_Y), sVar(value).Value(e_value_SCA_Z));
				sMat(matrix_local) = matrix_create(pos, rot, sca);
				sVar(matrix) = matrix_multiply(sMat(matrix_local), sMat(matrix_parent));
				hasik = (array_length(VarType::CreateRef(sArr(part_joints_matrix))) > IntType(0) && sVar(value).Value(e_value_IK_TARGET) != null_);
				if (!(sVar(inherit_rotation) > 0) && sVar(value).Value(e_value_ROT_TARGET) == null_)
				{
					matrix_remove_rotation(VarType::CreateRef(sVar(matrix)));
					sVar(matrix) = matrix_multiply(matrix_create(point3D(IntType(0), IntType(0), IntType(0)), vec3(sVar(value).Value(e_value_ROT_X), sVar(value).Value(e_value_ROT_Y), sVar(value).Value(e_value_ROT_Z)), vec3(IntType(1))), sVar(matrix));
				}
				sMat(matrix_parent_pre_ik) = array_copy_1d(sVar(matrix));
				if (hasik)
					sVar(matrix) = matrix_multiply(sArr(part_joints_matrix).Value(IntType(0)), sVar(matrix));
				posebend = ArrType::From({ IntType(0), IntType(0), IntType(0) });
				if (updatepose && sVar(part_of) != null_ && idVar(sVar(part_of), inherit_pose) > 0 && idVar(sVar(part_of), parent) != global::_app->id)
				{
					VarType posetl = null_;
					withOne (Object, idVar(sVar(part_of), parent), self->id)
						posetl = tl_part_find(self, idVar(self.otherId, model_part_name));
					
					if (posetl != null_)
					{
						sVar(matrix) = matrix_multiply(idMat(posetl, matrix_local), sVar(matrix));
						for (IntType j = X_; j <= Z_; j++)
							posebend[j] = idArr(posetl, value_inherit).Value(e_value_BEND_ANGLE_X + j);
						if (array_length(VarType::CreateRef(idArr(posetl, part_joints_matrix))) > IntType(0) && idVar(posetl, value).Value(e_value_IK_TARGET) != null_)
							sVar(matrix) = matrix_multiply(idArr(posetl, part_joints_matrix).Value(IntType(0)), sVar(matrix));
					}
				}
				if (sVar(scale_resize) > 0 || !(sVar(inherit_scale) > 0) || sVar(type) == e_tl_type_PARTICLE_SPAWNER)
				{
					sVar(tl) = self->id;
					while (true)
					{
						par = idVar(sVar(tl), parent);
						if (!(idVar(sVar(tl), inherit_scale) > 0) || par == global::_app->id)
							break;
						sca = vec3_mul(sca, vec3(idVar(par, value).Value(e_value_SCA_X), idVar(par, value).Value(e_value_SCA_Y), idVar(par, value).Value(e_value_SCA_Z)));
						sVar(tl) = par;
					}
					
					MatrixType parmat;
					matrix_remove_scale(VarType::CreateRef(sMat(matrix_parent)));
					parmat = array_copy_1d(sMat(matrix_parent));
					if (!(sVar(inherit_rotation) > 0))
						matrix_remove_rotation(VarType::CreateRef(parmat));
					matrixnoscale = matrix_multiply(matrix_create(pos, rot, vec3(IntType(1))), parmat);
					if (hasik)
						matrixnoscale = matrix_multiply(sArr(part_joints_matrix).Value(IntType(0)), matrixnoscale);
					for (IntType p = IntType(0); p < IntType(11); p++)
						sVar(matrix)[p] = matrixnoscale.Real(p);
					if (sVar(inherit_scale) > 0)
						sVar(matrix) = matrix_multiply(matrix_create(point3D(IntType(0), IntType(0), IntType(0)), vec3(IntType(0)), sca), sVar(matrix));
					else
						sVar(matrix) = matrix_multiply(matrix_create(point3D(IntType(0), IntType(0), IntType(0)), vec3(IntType(0)), vec3(sVar(value).Value(e_value_SCA_X), sVar(value).Value(e_value_SCA_Y), sVar(value).Value(e_value_SCA_Z))), sVar(matrix));
					
				}
				if (!(sVar(inherit_position) > 0) && sVar(value).Value(e_value_POS_TARGET) == null_)
				{
					matrix_remove_rotation(VarType::CreateRef(sMat(matrix_parent)));
					sVar(matrix)[MAT_X] = sVar(value).Value(e_value_POS_X);
					sVar(matrix)[MAT_Y] = sVar(value).Value(e_value_POS_Y);
					sVar(matrix)[MAT_Z] = sVar(value).Value(e_value_POS_Z);
				}
				if (sVar(value).Value(e_value_ROT_TARGET) != null_)
				{
					MatrixType target_rot_mat = array_copy_1d(idVar(sVar(value).Value(e_value_ROT_TARGET), matrix));
					debug({ idVar(sVar(value).Value(e_value_ROT_TARGET), display_name) });
					matrix_remove_rotation(VarType::CreateRef(sVar(matrix)));
					target_rot_mat.Real(MAT_X) = IntType(0);
					target_rot_mat.Real(MAT_Y) = IntType(0);
					target_rot_mat.Real(MAT_Z) = IntType(0);
					matrix_remove_scale(VarType::CreateRef(target_rot_mat));
					sVar(matrix) = matrix_multiply(target_rot_mat, sVar(matrix));
				}
				if (sVar(value).Value(e_value_POS_TARGET) != null_)
				{
					matrix_remove_rotation(VarType::CreateRef(sMat(matrix_parent)));
					sVar(matrix)[MAT_X] = sVar(value).Value(e_value_POS_X) + idVar(sVar(value).Value(e_value_POS_TARGET), matrix).Value(MAT_X);
					sVar(matrix)[MAT_Y] = sVar(value).Value(e_value_POS_Y) + idVar(sVar(value).Value(e_value_POS_TARGET), matrix).Value(MAT_Y);
					sVar(matrix)[MAT_Z] = sVar(value).Value(e_value_POS_Z) + idVar(sVar(value).Value(e_value_POS_TARGET), matrix).Value(MAT_Z);
				}
				if (sVar(value).Value(e_value_SCALE_TARGET) != null_)
				{
					matrix_remove_scale(VarType::CreateRef(sMat(matrix_parent)));
					sVar(value)[e_value_SCA_X] = idVar(sVar(value).Value(e_value_SCALE_TARGET), value).Value(e_value_SCA_X);
					sVar(value)[e_value_SCA_Y] = idVar(sVar(value).Value(e_value_SCALE_TARGET), value).Value(e_value_SCA_Y);
					sVar(value)[e_value_SCA_Z] = idVar(sVar(value).Value(e_value_SCALE_TARGET), value).Value(e_value_SCA_Z);
				}
				if (sVar(type) == e_tl_type_CAMERA && sVar(value).Value(e_value_CAM_ROTATE) > 0)
				{
					sVar(world_pos_rotate) = point3D(sVar(matrix).Value(MAT_X), sVar(matrix).Value(MAT_Y), sVar(matrix).Value(MAT_Z));
					sVar(matrix)[MAT_X] += lengthdir_x(sVar(value).Value(e_value_CAM_ROTATE_DISTANCE), sVar(value).Value(e_value_CAM_ROTATE_ANGLE_XY) + 90.0) * lengthdir_x(1.0, sVar(value).Value(e_value_CAM_ROTATE_ANGLE_Z));
					sVar(matrix)[MAT_Y] += lengthdir_y(sVar(value).Value(e_value_CAM_ROTATE_DISTANCE), sVar(value).Value(e_value_CAM_ROTATE_ANGLE_XY) + 90.0) * lengthdir_x(1.0, sVar(value).Value(e_value_CAM_ROTATE_ANGLE_Z));
					sVar(matrix)[MAT_Z] += lengthdir_z(sVar(value).Value(e_value_CAM_ROTATE_DISTANCE), sVar(value).Value(e_value_CAM_ROTATE_ANGLE_Z));
				}
				sVar(world_pos) = point3D(sVar(matrix).Value(MAT_X), sVar(matrix).Value(MAT_Y), sVar(matrix).Value(MAT_Z));
				sMat(matrix_render) = matrix_multiply(matrix_create(point3D_mul(sVec(rot_point_render), -IntType(1)), vec3(IntType(0)), vec3(IntType(1))), sVar(matrix));
				sArr(value_inherit)[e_value_SCA_X] = IntType(1);
				sArr(value_inherit)[e_value_SCA_Y] = IntType(1);
				sArr(value_inherit)[e_value_SCA_Z] = IntType(1);
				sVar(tl) = self->id;
				while (IntType(1))
				{
					par = idVar(sVar(tl), parent);
					if (par == global::_app->id)
						break;
					sArr(value_inherit)[e_value_SCA_X] *= idVar(par, value).Value(e_value_SCA_X);
					sArr(value_inherit)[e_value_SCA_Y] *= idVar(par, value).Value(e_value_SCA_Y);
					sArr(value_inherit)[e_value_SCA_Z] *= idVar(par, value).Value(e_value_SCA_Z);
					if (!(idVar(par, inherit_scale) > 0))
						break;
					sVar(tl) = par;
				}
				
				lasttex = sArr(value_inherit).Value(e_value_TEXTURE_OBJ);
				ikblend = sVar(value).Value(e_value_IK_BLEND) * (IntType)hasik;
				sArr(value_inherit)[e_value_ALPHA] = sVar(value).Value(e_value_ALPHA);
				sArr(value_inherit)[e_value_RGB_ADD] = sVar(value).Value(e_value_RGB_ADD);
				sArr(value_inherit)[e_value_RGB_SUB] = sVar(value).Value(e_value_RGB_SUB);
				sArr(value_inherit)[e_value_RGB_MUL] = sVar(value).Value(e_value_RGB_MUL);
				sArr(value_inherit)[e_value_HSB_ADD] = sVar(value).Value(e_value_HSB_ADD);
				sArr(value_inherit)[e_value_HSB_SUB] = sVar(value).Value(e_value_HSB_SUB);
				sArr(value_inherit)[e_value_HSB_MUL] = sVar(value).Value(e_value_HSB_MUL);
				sArr(value_inherit)[e_value_MIX_COLOR] = sVar(value).Value(e_value_MIX_COLOR);
				sArr(value_inherit)[e_value_GLOW_COLOR] = sVar(value).Value(e_value_GLOW_COLOR);
				sArr(value_inherit)[e_value_MIX_PERCENT] = sVar(value).Value(e_value_MIX_PERCENT);
				sArr(value_inherit)[e_value_EMISSIVE] = sVar(value).Value(e_value_EMISSIVE);
				sArr(value_inherit)[e_value_METALLIC] = sVar(value).Value(e_value_METALLIC);
				sArr(value_inherit)[e_value_ROUGHNESS] = sVar(value).Value(e_value_ROUGHNESS);
				sArr(value_inherit)[e_value_SUBSURFACE] = sVar(value).Value(e_value_SUBSURFACE);
				sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_RED] = sVar(value).Value(e_value_SUBSURFACE_RADIUS_RED);
				sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_GREEN] = sVar(value).Value(e_value_SUBSURFACE_RADIUS_GREEN);
				sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_BLUE] = sVar(value).Value(e_value_SUBSURFACE_RADIUS_BLUE);
				sArr(value_inherit)[e_value_SUBSURFACE_COLOR] = sVar(value).Value(e_value_SUBSURFACE_COLOR);
				sArr(value_inherit)[e_value_WIND_INFLUENCE] = sVar(value).Value(e_value_WIND_INFLUENCE);
				sArr(value_inherit)[e_value_VISIBLE] = sVar(value).Value(e_value_VISIBLE);
				sArr(value_inherit)[e_value_BEND_ANGLE_X] = sVar(value).Value(e_value_BEND_ANGLE_X) * (IntType(1) - ikblend);
				sArr(value_inherit)[e_value_BEND_ANGLE_Y] = sVar(value).Value(e_value_BEND_ANGLE_Y) * (IntType(1) - ikblend);
				sArr(value_inherit)[e_value_BEND_ANGLE_Z] = sVar(value).Value(e_value_BEND_ANGLE_Z) * (IntType(1) - ikblend);
				sArr(value_inherit)[e_value_TEXTURE_OBJ] = sVar(value).Value(e_value_TEXTURE_OBJ);
				sArr(value_inherit)[e_value_TEXTURE_MATERIAL_OBJ] = sVar(value).Value(e_value_TEXTURE_MATERIAL_OBJ);
				sArr(value_inherit)[e_value_TEXTURE_NORMAL_OBJ] = sVar(value).Value(e_value_TEXTURE_NORMAL_OBJ);
				inhalpha = true;
				inhcolor = true;
				inhglowcolor = true;
				inhvis = true;
				inhbend = true;
				inhtex = true;
				inhsurf = true;
				inhsubsurf = true;
				sVar(tl) = self->id;
				for (IntType j = X_; j <= Z_; j++)
					sArr(value_inherit)[e_value_BEND_ANGLE_X + j] += posebend.Value(j);
				while (true)
				{
					par = idVar(sVar(tl), parent);
					if (par == global::_app->id)
						break;
					if (!(idVar(sVar(tl), inherit_alpha) > 0))
						inhalpha = false;
					if (!(idVar(sVar(tl), inherit_color) > 0))
						inhcolor = false;
					if (!(idVar(sVar(tl), inherit_glow_color) > 0))
						inhglowcolor = false;
					if (!(idVar(sVar(tl), inherit_visibility) > 0))
						inhvis = false;
					if (!(idVar(sVar(tl), inherit_bend) > 0))
						inhbend = false;
					if (!(idVar(sVar(tl), inherit_texture) > 0) || idVar(sVar(tl), value).Value(e_value_TEXTURE_OBJ) > IntType(0))
						inhtex = false;
					if (!(idVar(sVar(tl), inherit_surface) > 0) || idVar(sVar(tl), value).Value(e_value_TEXTURE_MATERIAL_OBJ) > IntType(0))
						inhsurf = false;
					if (!(idVar(sVar(tl), inherit_subsurface) > 0))
						inhsubsurf = false;
					if (inhalpha)
						sArr(value_inherit)[e_value_ALPHA] *= idVar(par, value).Value(e_value_ALPHA);
					if (inhcolor)
					{
						if (idVar(par, value).Value(e_value_RGB_ADD) != c_black)
							sArr(value_inherit)[e_value_RGB_ADD] = color_add(sArr(value_inherit).Value(e_value_RGB_ADD), idVar(par, value).Value(e_value_RGB_ADD));
						if (idVar(par, value).Value(e_value_RGB_SUB) != c_black)
							sArr(value_inherit)[e_value_RGB_SUB] = color_add(sArr(value_inherit).Value(e_value_RGB_SUB), idVar(par, value).Value(e_value_RGB_SUB));
						if (idVar(par, value).Value(e_value_RGB_MUL) != c_white)
							sArr(value_inherit)[e_value_RGB_MUL] = color_multiply(sArr(value_inherit).Value(e_value_RGB_MUL), idVar(par, value).Value(e_value_RGB_MUL));
						if (idVar(par, value).Value(e_value_HSB_ADD) != c_black)
							sArr(value_inherit)[e_value_HSB_ADD] = color_add(sArr(value_inherit).Value(e_value_HSB_ADD), idVar(par, value).Value(e_value_HSB_ADD));
						if (idVar(par, value).Value(e_value_HSB_SUB) != c_black)
							sArr(value_inherit)[e_value_HSB_SUB] = color_add(sArr(value_inherit).Value(e_value_HSB_SUB), idVar(par, value).Value(e_value_HSB_SUB));
						if (idVar(par, value).Value(e_value_HSB_MUL) != c_white)
							sArr(value_inherit)[e_value_HSB_MUL] = color_multiply(sArr(value_inherit).Value(e_value_HSB_MUL), idVar(par, value).Value(e_value_HSB_MUL));
						if (idVar(par, value).Value(e_value_MIX_COLOR) != c_black)
							sArr(value_inherit)[e_value_MIX_COLOR] = color_add(sArr(value_inherit).Value(e_value_MIX_COLOR), idVar(par, value).Value(e_value_MIX_COLOR));
						sArr(value_inherit)[e_value_MIX_PERCENT] = clamp(sArr(value_inherit).Value(e_value_MIX_PERCENT) + idVar(par, value).Value(e_value_MIX_PERCENT), IntType(0), IntType(1));
					}
					if (inhsurf)
					{
						sArr(value_inherit)[e_value_TEXTURE_MATERIAL_OBJ] = idVar(par, value).Value(e_value_TEXTURE_MATERIAL_OBJ);
						sArr(value_inherit)[e_value_TEXTURE_NORMAL_OBJ] = idVar(par, value).Value(e_value_TEXTURE_NORMAL_OBJ);
						sArr(value_inherit)[e_value_METALLIC] = clamp(sArr(value_inherit).Value(e_value_METALLIC) + idVar(par, value).Value(e_value_METALLIC), IntType(0), IntType(1));
						sArr(value_inherit)[e_value_ROUGHNESS] = clamp(sArr(value_inherit).Value(e_value_ROUGHNESS) * idVar(par, value).Value(e_value_ROUGHNESS), IntType(0), IntType(1));
						sArr(value_inherit)[e_value_EMISSIVE] = (sArr(value_inherit).Value(e_value_EMISSIVE) + idVar(par, value).Value(e_value_EMISSIVE));
					}
					if (inhsubsurf)
					{
						sArr(value_inherit)[e_value_SUBSURFACE] = sArr(value_inherit).Value(e_value_SUBSURFACE) + idVar(par, value).Value(e_value_SUBSURFACE);
						sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_RED] = clamp(sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_RED) * idVar(par, value).Value(e_value_SUBSURFACE_RADIUS_RED), IntType(0), IntType(1));
						sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_GREEN] = clamp(sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_GREEN) * idVar(par, value).Value(e_value_SUBSURFACE_RADIUS_GREEN), IntType(0), IntType(1));
						sArr(value_inherit)[e_value_SUBSURFACE_RADIUS_BLUE] = clamp(sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_BLUE) * idVar(par, value).Value(e_value_SUBSURFACE_RADIUS_BLUE), IntType(0), IntType(1));
						if (idVar(par, value).Value(e_value_SUBSURFACE_COLOR) != c_white)
							sArr(value_inherit)[e_value_SUBSURFACE_COLOR] = color_multiply(sArr(value_inherit).Value(e_value_SUBSURFACE_COLOR), idVar(par, value).Value(e_value_SUBSURFACE_COLOR));
					}
					if (inhglowcolor && (idVar(par, value).Value(e_value_GLOW_COLOR) != c_white))
						sArr(value_inherit)[e_value_GLOW_COLOR] = color_multiply(sArr(value_inherit).Value(e_value_GLOW_COLOR), idVar(par, value).Value(e_value_GLOW_COLOR));
					if (inhvis)
						sArr(value_inherit)[e_value_VISIBLE] *= idVar(par, value).Value(e_value_VISIBLE);
					if (inhbend)
					{
						sArr(value_inherit)[e_value_BEND_ANGLE_X] += idVar(par, value).Value(e_value_BEND_ANGLE_X);
						sArr(value_inherit)[e_value_BEND_ANGLE_Y] += idVar(par, value).Value(e_value_BEND_ANGLE_Y);
						sArr(value_inherit)[e_value_BEND_ANGLE_Z] += idVar(par, value).Value(e_value_BEND_ANGLE_Z);
					}
					if (inhtex)
						sArr(value_inherit)[e_value_TEXTURE_OBJ] = idVar(par, value).Value(e_value_TEXTURE_OBJ);
					sArr(value_inherit)[e_value_WIND_INFLUENCE] *= idVar(par, value).Value(e_value_WIND_INFLUENCE);
					sVar(tl) = par;
				}
				
				sBool(colors_ext) = (sArr(value_inherit).Value(e_value_ALPHA) < IntType(1) || sArr(value_inherit).Value(e_value_RGB_ADD) - sArr(value_inherit).Value(e_value_RGB_SUB) != c_black || sArr(value_inherit).Value(e_value_HSB_ADD) - sArr(value_inherit).Value(e_value_HSB_SUB) != c_black || sArr(value_inherit).Value(e_value_HSB_MUL) < c_white || sArr(value_inherit).Value(e_value_MIX_PERCENT) > IntType(0) || sBool(part_mixing_shapes));
				if (hasik)
					sArr(value_inherit)[e_value_BEND_ANGLE_X] += sReal(part_joint_bend_angle) * ikblend;
				if ((sArr(value_inherit).Value(e_value_ALPHA) * IntType(1000)) != IntType(0))
				{
					if (lasttex != sArr(value_inherit).Value(e_value_TEXTURE_OBJ) && sVar(model_part) != null_ && idBool(sVar(model_part), has_3d_plane))
						tl_update_model_shape(self);
					else
						tl_update_model_shape_bend(self);
					
				}
				if (sVar(type) == e_tl_type_PATH)
				{
					withAll (obj_timeline, self->id)
					{
						if (self->value.Value(e_value_PATH_OBJ) == self.otherId)
							self->update_matrix = true;
					}
					
				}
				if (sVar(type) == e_tl_type_PATH_POINT && sVar(parent) != global::_app->id && idVar(sVar(parent), type) == e_tl_type_PATH)
					idBool(sVar(parent), path_update) = true;
				if (sBool(update_matrix))
				{
					for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
						idBool(DsList(sInt(tree_list))[t], update_matrix) = true;
				}
				if (lasttex != sArr(value_inherit).Value(e_value_TEXTURE_OBJ) && tl_get_visible(self))
					render_update_tl_resource(self);
				sBool(update_matrix) = false;
			}
			
		}
		sBool(update_matrix) = false;
		if (updateik)
		{
			if (global::_app->project_ik_part_array == null_)
			{
				global::_app->project_ik_part_array = ArrType::From({});
				withAll (obj_timeline, self->id)
					if (tl_supports_ik(ScopeAny(self)))
						array_add(VarType::CreateRef(global::_app->project_ik_part_array), self->id);
				
			}
			tl_update_ik(self, global::_app->project_ik_part_array);
		}
		if (updateik && !updatepose && array_length(VarType::CreateRef(global::_app->project_inherit_pose_array)) > IntType(0))
		{
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(global::_app->project_inherit_pose_array)); i++)
				idBool(global::_app->project_inherit_pose_array[i], update_matrix) = true;
			withOne (app, global::_app->id, self->id)
				tl_update_matrix(ScopeAny(self), false, false, true);
			
			global::_app->project_inherit_pose_array = ArrType::From({});
		}
		if (updatecopy)
		{
			if (global::_app->project_copy_obj_array == null_)
			{
				global::_app->project_copy_obj_array = ArrType::From({});
				withAll (obj_timeline, self->id)
					if (self->value.Value(e_value_ROT_TARGET) != null_ || self->value.Value(e_value_POS_TARGET) != null_ || self->value.Value(e_value_SCALE_TARGET) != null_ || self->value.Value(e_value_BEND_IK_TARGET) != null_)
						array_add(VarType::CreateRef(global::_app->project_copy_obj_array), self->id);
				
			}
			tl_update_copy(global::_app->project_copy_obj_array);
		}
		return 0.0;
	}
	
	RealType tl_update_model_shape(ScopeAny self, BoolType clear)
	{
		if (sInt(model_shape_alpha_map) != null_)
			ds_map_clear(sInt(model_shape_alpha_map));
		if (sInt(model_shape_vbuffer_map) != null_ && ds_map_size(sInt(model_shape_vbuffer_map)) > IntType(0))
		{
			VarType key = ds_map_find_first(sInt(model_shape_vbuffer_map));
			while (!is_undefined(key))
			{
				if (instance_exists(key) && idVar(key, vbuffer_default) != DsMap(sInt(model_shape_vbuffer_map)).Value(key))
					vbuffer_destroy(DsMap(sInt(model_shape_vbuffer_map)).Value(key));
				key = ds_map_find_next(sInt(model_shape_vbuffer_map), key);
			}
			
			ds_map_clear(sInt(model_shape_vbuffer_map));
		}
		sVec(bend_rot_last) = vec3(sArr(value_inherit).Value(e_value_BEND_ANGLE_X), sArr(value_inherit).Value(e_value_BEND_ANGLE_Y), sArr(value_inherit).Value(e_value_BEND_ANGLE_Z));
		sVar(bend_model_part_last) = sVar(model_part);
		if (sVar(model_part) == null_)
			return IntType(0);
		if (idBool(sVar(model_part), has_3d_plane))
		{
			if (sInt(model_shape_alpha_map) == null_)
				sInt(model_shape_alpha_map) = ds_map_create();
		}
		if (sInt(model_shape_vbuffer_map) == null_)
			sInt(model_shape_vbuffer_map) = ds_map_create();
		VarType res = null_;
		if (Obj(sVar(temp))->subAssetId == ID_obj_template)
			withOne (Object, sVar(temp), self->id)
				res = temp_get_model_texobj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_OBJ));
		
		model_part_fill_shape_alpha_map(sVar(model_part), sInt(model_shape_alpha_map), res, idInt(sVar(temp), model_texture_name_map), idInt(sVar(temp), model_shape_texture_name_map));
		model_part_fill_shape_vbuffer_map(sVar(model_part), sInt(model_shape_vbuffer_map), sInt(model_shape_alpha_map), sVec(bend_rot_last));
		return 0.0;
	}
	
	RealType tl_update_model_shape_bend(ScopeAny self)
	{
		VecType bend = vec3(sArr(value_inherit).Value(e_value_BEND_ANGLE_X), sArr(value_inherit).Value(e_value_BEND_ANGLE_Y), sArr(value_inherit).Value(e_value_BEND_ANGLE_Z));
		if (sVar(value).Value(e_value_BEND_IK_TARGET) != null_)
		{
			MatrixType mat = sMat(matrix_parent);
			MatrixType target_rot_mat = array_copy_1d(idVar(sVar(value).Value(e_value_BEND_IK_TARGET), matrix));
			target_rot_mat.Real(MAT_X) = IntType(0);
			target_rot_mat.Real(MAT_Y) = IntType(0);
			target_rot_mat.Real(MAT_Z) = IntType(0);
			matrix_remove_scale(VarType::CreateRef(target_rot_mat));
			MatrixType mat_inv = matrix_inverse(mat);
			VecType rot_target = matrix_rotation(matrix_multiply(target_rot_mat, mat_inv));
			bend = rot_target;
		}
		if (vec3_equals(sVec(bend_rot_last), bend) && sVar(bend_model_part_last) == sVar(model_part))
			return IntType(0);
		if (sVar(model_part) == null_ || idInt(sVar(model_part), bend_part) == null_ || idInt(sVar(model_part), shape_list) == null_)
			return IntType(0);
		if (sInt(model_shape_vbuffer_map) != null_ && ds_map_size(sInt(model_shape_vbuffer_map)) > IntType(0))
		{
			VarType key = ds_map_find_first(sInt(model_shape_vbuffer_map));
			while (!is_undefined(key))
			{
				if (instance_exists(key) && idVar(key, vbuffer_default) != DsMap(sInt(model_shape_vbuffer_map)).Value(key))
					vbuffer_destroy(DsMap(sInt(model_shape_vbuffer_map)).Value(key));
				key = ds_map_find_next(sInt(model_shape_vbuffer_map), key);
			}
			
			ds_map_clear(sInt(model_shape_vbuffer_map));
		}
		if (sInt(model_shape_vbuffer_map) == null_)
			sInt(model_shape_vbuffer_map) = ds_map_create();
		sVec(bend_rot_last) = bend;
		sVar(bend_model_part_last) = sVar(model_part);
		model_part_fill_shape_vbuffer_map(sVar(model_part), sInt(model_shape_vbuffer_map), sInt(model_shape_alpha_map), sVec(bend_rot_last));
		return 0.0;
	}
	
	void tl_update_parent_is_selected(ScopeAny self)
	{
		sBool(parent_is_selected) = false;
		if (sVar(parent) != global::_app->id)
			sBool(parent_is_selected) = (idReal(sVar(parent), selected) > 0 || idBool(sVar(parent), parent_is_selected));
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
			withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
				tl_update_parent_is_selected(self);
		
	}
	
	void tl_update_part_list(ScopeAny self, VarType part, VarType par)
	{
		for (IntType mp = IntType(0); mp < ds_list_size(idInt(part, part_list)); mp++)
		{
			VarType mpart = DsList(idInt(part, part_list)).Value(mp);
			VarType tl = tl_part_find(self, idVar(mpart, name));
			withOne (Object, tl, self->id)
			{
				sVar(model_part) = mpart;
				sVar(lock_bend) = idVar(mpart, lock_bend);
				sBool(part_mixing_shapes) = idBool(mpart, part_mixing_shapes);
				sVar(bend_model_part_last) = null_;
				tl_set_parent(self, { par });
				tl_update_value_types(self);
				tl_update_type_name(self);
				tl_update_display_name(self);
				tl_update_model_shape(self);
			}
			
			if (tl != null_ && idInt(mpart, part_list) != null_)
				tl_update_part_list(self, mpart, tl);
		}
	}
	
	RealType tl_update_path(Scope<obj_timeline> self)
	{
		if (self->type != e_tl_type_PATH)
			return IntType(0);
		self->path_update = false;
		if (self->path_vbuffer != null_)
		{
			vbuffer_destroy(self->path_vbuffer);
			self->path_vbuffer = null_;
		}
		if (self->path_select_vbuffer != null_)
		{
			vbuffer_destroy(self->path_select_vbuffer);
			self->path_select_vbuffer = null_;
		}
		ds_list_clear(self->path_points_list);
		self->path_table = ArrType::From({});
		self->path_table_matrix = ArrType::From({});
		for (IntType i = IntType(0); i < ds_list_size(self->tree_list); i++)
		{
			VarType tl = DsList(self->tree_list).Value(i);
			if (idVar(tl, type) == e_tl_type_PATH_POINT)
				ds_list_add({ self->path_points_list, ArrType::From({ idVar(tl, value).Value(e_value_POS_X), idVar(tl, value).Value(e_value_POS_Y), idVar(tl, value).Value(e_value_POS_Z), idVar(tl, value).Value(e_value_PATH_POINT_ANGLE), idVar(tl, value).Value(e_value_PATH_POINT_SCALE), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0) }) });
		}
		withAll (obj_timeline, self->id)
		{
			if (self->value.Value(e_value_PATH_OBJ) == self.otherId)
				self->update_matrix = true;
		}
		
		if (ds_list_size(self->path_points_list) < IntType(2))
		{
			withOne (app, global::_app->id, self->id)
				tl_update_matrix(ScopeAny(self), true);
			
			return IntType(0);
		}
		IntType detail;
		ArrType splinepoints;
		detail = (ds_list_size(self->path_points_list) + ((ds_list_size(self->path_points_list) - IntType(1) + self->path_closed) * self->path_detail));
		splinepoints = spline_subdivide(ds_list_create_array(self->path_points_list), self->path_closed);
		ArrType points_distance = ArrType::From({});
		VarType sampleprev, sample;
		self->path_length = IntType(0);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(splinepoints)); i++)
		{
			sampleprev = spline_get_point(i, splinepoints, self->path_closed, self->path_smooth, IntType(0));
			points_distance[i] = IntType(0);
			for (RealType j = IntType(0); j <= IntType(1); j += 0.05)
			{
				sample = spline_get_point(i + j, splinepoints, self->path_closed, self->path_smooth, IntType(0));
				points_distance[i] += point3D_distance(sampleprev, sample);
				sampleprev = sample;
			}
			points_distance[i] = max({ 0.001, points_distance.Value(i) });
			self->path_length += points_distance.Value(i);
		}
		if (self->path_length == IntType(0))
		{
			self->path_table[IntType(0)] = ArrType::From({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0) });
			self->path_table_matrix[IntType(0)] = ArrType::From({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0) });
			return IntType(0);
		}
		IntType t = IntType(0);
		for (RealType i = IntType(0); i < detail; i++)
		{
			RealType length = (i / (detail - IntType(1))) * self->path_length;
			IntType j = IntType(0);
			while (length > points_distance.Value(j) && length > 0.01)
			{
				length -= points_distance.Value(j);
				j++;
			}
			
			if (points_distance.Value(j) == IntType(0))
				continue;
			self->path_table[t] = spline_get_point(j + (length / points_distance.Value(j)), splinepoints, self->path_closed, self->path_smooth, IntType(0));
			self->path_table_matrix[t] = self->path_table.Value(t);
			t++;
		}
		spline_make_frames(VarType::CreateRef(self->path_table), self->path_closed, self->path_smooth);
		if (self->path_shape_generate > 0)
			self->path_vbuffer = vbuffer_create_path(self, self->id);
		else
			self->path_select_vbuffer = vbuffer_create_path(self, self->id, true);
		
		if (self->matrix != IntType(0))
		{
			self->path_table_matrix = ArrType::From({});
			for (IntType j = IntType(0); j < array_length(VarType::CreateRef(self->path_table)); j++)
			{
				VecType pos = point3D_mul_matrix(self->path_table.Value(j), self->matrix);
				self->path_table_matrix[j] = array_copy_1d(self->path_table.Value(j));
				self->path_table_matrix[j][X_] = pos.Real(X_);
				self->path_table_matrix[j][Y_] = pos.Real(Y_);
				self->path_table_matrix[j][Z_] = pos.Real(Z_);
			}
		}
		return 0.0;
	}
	
	void tl_update_recursive_select(ScopeAny self)
	{
		for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
		{
			withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
			{
				if (sVar(inherit_select) > 0)
				{
					tl_update_recursive_select(self);
					tl_select(self);
				}
			}
			
		}
	}
	
	void tl_update_rot_point(ScopeAny self)
	{
		if (sVar(temp) != null_ && sVar(part_of) == null_ && !(sVar(rot_point_custom) > 0))
			sVec(rot_point_render) = array_copy_1d(idVar(sVar(temp), rot_point));
		else
			sVec(rot_point_render) = array_copy_1d(sVar(rot_point));
		
		sBool(update_matrix) = true;
	}
	
	RealType tl_update_scenery_part(ScopeAny self)
	{
		if (sVar(part_of) == null_)
			return IntType(0);
		if (sVar(type) == e_tl_type_SPECIAL_BLOCK)
		{
			sVar(model_tex) = global::mc_res;
			sVar(model_tex_material) = global::mc_res;
			sVar(model_tex_normal) = global::mc_res;
			sVar(model_file) = null_;
			sInt(model_texture_name_map) = null_;
			sInt(model_texture_material_name_map) = null_;
			sInt(model_tex_normal_name_map) = null_;
			sInt(model_texture_material_name_map) = null_;
			sInt(model_tex_normal_name_map) = null_;
			sInt(model_shape_texture_name_map) = null_;
			sInt(model_shape_texture_material_name_map) = null_;
			sInt(model_shape_tex_normal_name_map) = null_;
			sInt(model_hide_list) = null_;
			sInt(model_shape_hide_list) = null_;
			sInt(model_color_name_map) = null_;
			sInt(model_color_map) = null_;
			sInt(model_shape_vbuffer_map) = null_;
			temp_update_model(self);
			temp_update_model_timeline_parts(self);
		}
		else
			if (sVar(type) == e_tl_type_BLOCK)
			{
				sVar(block_tex) = global::mc_res;
				sVar(block_tex_material) = global::mc_res;
				sVar(block_tex_normal) = global::mc_res;
				sVar(block_repeat_enable) = false;
				sVar(block_repeat) = vec3(IntType(1));
				sVar(block_vbuffer) = null_;
				sVar(block_randomize) = true;
				temp_update_block(self);
			}
			else
				if (sVar(type) == e_tl_type_TEXT)
				{
					sVar(text_font) = global::mc_res;
					sVar(text_3d) = false;
					sVar(text_face_camera) = false;
				}
		
		
		return 0.0;
	}
	
	void tl_update_type_name(ScopeAny self)
	{
		sVar(type_name) = text_get({ /*"type"*/ STR(807) + DsList(global::tl_type_name_list).Value(sVar(type)) });
		if (sVar(part_of) != null_)
		{
			if (sVar(type) == e_tl_type_BODYPART)
			{
				if (sVar(model_part) != null_)
					sVar(type_name) = minecraft_asset_get_name(/*"modelpart"*/ STR(780), idVar(sVar(model_part), name));
				else
					sVar(type_name) = text_get({ /*"timelineunusedbodypart"*/ STR(3936) });
				
			}
			else
				if (sVar(type) == e_tl_type_SPECIAL_BLOCK)
				{
					if (sVar(model_file) != null_)
						sVar(type_name) = minecraft_asset_get_name(/*"model"*/ STR(8), idVar(sVar(model_file), name));
				}
				else
					if (sVar(type) == e_tl_type_BLOCK)
					{
						sVar(type_name) = minecraft_asset_get_name(/*"block"*/ STR(4), ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(sVar(block_name)))->name);
					}
			
			
			sVar(type_name) = text_get({ /*"timelinepartof"*/ STR(3937), sVar(type_name), string_remove_newline(idVar(sVar(part_of), display_name)) });
		}
		else
			if (sVar(temp) != null_)
				sVar(type_name) = text_get({ /*"timelineinstanceof"*/ STR(3938), idVar(sVar(temp), display_name) });
		
	}
	
	void tl_update_values(ScopeAny self)
	{
		sInt(keyframe_prev) = sInt(keyframe_current);
		sInt(keyframe_current) = null_;
		sInt(keyframe_next) = null_;
		sVar(keyframe_current_values) = null_;
		sVar(keyframe_next_values) = null_;
		for (IntType k = IntType(0); k < ds_list_size(sInt(keyframe_list)); k++)
		{
			sInt(keyframe_next) = DsList(sInt(keyframe_list)).Value(k);
			if (ObjType(obj_keyframe, sInt(keyframe_next))->position > global::_app->timeline_marker)
				break;
			sInt(keyframe_current) = sInt(keyframe_next);
		}
		sReal(keyframe_progress) = tl_update_values_progress(Scope<obj_timeline>(self), global::_app->timeline_marker);
		sBool(keyframe_animate) = (sInt(keyframe_current) > 0 && sInt(keyframe_next) > 0 && sInt(keyframe_current) != sInt(keyframe_next));
		if (sInt(keyframe_current) != null_)
			sVar(keyframe_current_values) = ObjType(obj_keyframe, sInt(keyframe_current))->value;
		if (sInt(keyframe_next) != null_)
			sVar(keyframe_next_values) = ObjType(obj_keyframe, sInt(keyframe_next))->value;
		sVar(keyframe_progress_ease) = IntType(0);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_TRANSITION);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_EASE_IN_X);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_EASE_IN_Y);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_EASE_OUT_X);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_EASE_OUT_Y);
		sVar(keyframe_transition) = sVar(value).Value(e_value_TRANSITION);
		if (sVar(keyframe_transition) == /*"bezier"*/ STR(579))
			sVar(keyframe_progress_ease) = ease_bezier_curve(ArrType::From({ IntType(0), IntType(0) }), ArrType::From({ sVar(value).Value(e_value_EASE_IN_X), sVar(value).Value(e_value_EASE_IN_Y) }), ArrType::From({ sVar(value).Value(e_value_EASE_OUT_X), sVar(value).Value(e_value_EASE_OUT_Y) }), ArrType::From({ IntType(1), IntType(1) }), sReal(keyframe_progress));
		else
			sVar(keyframe_progress_ease) = ease(sVar(keyframe_transition), sReal(keyframe_progress));
		
		if (sArr(value_type).Value(e_value_type_TRANSFORM_POS))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_POS_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_POS_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_POS_Z);
			if (sVar(type) != e_tl_type_PATH && sVar(type) != e_tl_type_PATH_POINT)
			{
				tl_update_values_ease(Scope<obj_timeline>(self), e_value_PATH_OBJ);
				tl_update_values_ease(Scope<obj_timeline>(self), e_value_PATH_OFFSET);
			}
		}
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_ROT_TARGET);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_POS_TARGET);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_SCALE_TARGET);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_BEND_IK_TARGET);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_ROT_X);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_ROT_Y);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_ROT_Z);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_POS_X);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_POS_Y);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_POS_Z);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_SCALE_X);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_SCALE_Y);
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_COPY_SCALE_Z);
		if (sArr(value_type).Value(e_value_type_TRANSFORM_ROT))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ROT_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ROT_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ROT_Z);
		}
		if (sArr(value_type).Value(e_value_type_TRANSFORM_SCA))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SCA_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SCA_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SCA_Z);
		}
		if (sArr(value_type).Value(e_value_type_TRANSFORM_BEND))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BEND_ANGLE_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BEND_ANGLE_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BEND_ANGLE_Z);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_IK_TARGET);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_IK_BLEND);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_IK_TARGET_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_IK_ANGLE_OFFSET);
		}
		if (sArr(value_type).Value(e_value_type_TRANSFORM_PATH_POINT))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_PATH_POINT_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_PATH_POINT_SCALE);
		}
		if (sArr(value_type).Value(e_value_type_MATERIAL_COLOR))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ALPHA);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_RGB_ADD);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_RGB_SUB);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_RGB_MUL);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_HSB_ADD);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_HSB_SUB);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_HSB_MUL);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_MIX_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_GLOW_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_MIX_PERCENT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_EMISSIVE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_METALLIC);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ROUGHNESS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SUBSURFACE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SUBSURFACE_RADIUS_RED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SUBSURFACE_RADIUS_GREEN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SUBSURFACE_RADIUS_BLUE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SUBSURFACE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_WIND_INFLUENCE);
		}
		if (sArr(value_type).Value(e_value_type_PARTICLES))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SPAWN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_FREEZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CLEAR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CUSTOM_SEED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SEED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ATTRACTOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_FORCE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_FORCE_DIRECTIONAL);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_FORCE_VORTEX);
		}
		if (sArr(value_type).Value(e_value_type_LIGHT))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_SPECULAR_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_SIZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_RANGE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_RANGE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_FADE_SIZE);
			if (sArr(value_type).Value(e_value_type_SPOTLIGHT))
			{
				tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_OBJ);
				tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_SPOT_RADIUS);
				tl_update_values_ease(Scope<obj_timeline>(self), e_value_LIGHT_SPOT_SHARPNESS);
			}
		}
		if (sArr(value_type).Value(e_value_type_CAMERA))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_FOV);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_ASPECT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CLIP_NEAR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CLIP_FAR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LIGHT_MANAGEMENT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_TONEMAPPER);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_EXPOSURE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_GAMMA);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLADE_AMOUNT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLADE_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_ROTATE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_ROTATE_DISTANCE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_ROTATE_ANGLE_XY);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_ROTATE_ANGLE_Z);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_MODE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_STRENGTH_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_STRENGTH_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_STRENGTH_Z);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_SPEED_X);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_SPEED_Y);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SHAKE_SPEED_Z);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_DEPTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_RANGE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FADE_SIZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_BLUR_SIZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_BLUR_RATIO);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_BIAS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_THRESHOLD);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_GAIN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_ANGLE_RED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_ANGLE_GREEN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_ANGLE_BLUE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_RED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_GREEN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DOF_FRINGE_BLUE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM_THRESHOLD);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM_INTENSITY);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM_RADIUS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM_RATIO);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BLOOM_BLEND);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT_BLOOM);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT_GLOW);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT_RADIUS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT_INTENSITY);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_LENS_DIRT_POWER);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_COLOR_CORRECTION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CONTRAST);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_BRIGHTNESS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SATURATION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIBRANCE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_COLOR_BURN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_GRAIN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_GRAIN_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_GRAIN_SATURATION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_GRAIN_SIZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIGNETTE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIGNETTE_RADIUS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIGNETTE_SOFTNESS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIGNETTE_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_VIGNETTE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA_BLUR_AMOUNT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA_DISTORT_CHANNELS);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA_RED_OFFSET);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA_GREEN_OFFSET);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_CA_BLUE_OFFSET);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DISTORT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DISTORT_REPEAT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DISTORT_ZOOM_AMOUNT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_DISTORT_AMOUNT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_WIDTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_HEIGHT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SIZE_USE_PROJECT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CAM_SIZE_KEEP_ASPECT_RATIO);
		}
		if (sArr(value_type).Value(e_value_type_BACKGROUND))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_IMAGE_SHOW);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_IMAGE_ROTATION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_SUN_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_SUN_SCALE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_MOON_PHASE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_MOON_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_MOON_SCALE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_TIME);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_ROTATION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SUNLIGHT_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SUNLIGHT_ANGLE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_TWILIGHT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_CLOUDS_SHOW);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_CLOUDS_SPEED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_CLOUDS_HEIGHT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_CLOUDS_OFFSET);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_GROUND_SHOW);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_GROUND_SLOT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_GROUND_DIRECTION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_BIOME);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SKY_CLOUDS_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_SUNLIGHT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_AMBIENT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_NIGHT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_GRASS_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOLIAGE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WATER_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_OAK_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_SPRUCE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_BIRCH_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_JUNGLE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_ACACIA_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_DARK_OAK_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_LEAVES_MANGROVE_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_SHOW);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_SKY);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_CUSTOM_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_CUSTOM_OBJECT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_OBJECT_COLOR);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_DISTANCE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_SIZE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_FOG_HEIGHT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND_SPEED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND_DIRECTION);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND_DIRECTIONAL_SPEED);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_WIND_DIRECTIONAL_STRENGTH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_BG_TEXTURE_ANI_SPEED);
		}
		if (sArr(value_type).Value(e_value_type_MATERIAL_TEXTURE))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_MATERIAL_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_NORMAL_OBJ);
		}
		if (sArr(value_type).Value(e_value_type_SOUND))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SOUND_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SOUND_VOLUME);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SOUND_PITCH);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SOUND_START);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_SOUND_END);
		}
		if (sArr(value_type).Value(e_value_type_TEXT))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_FONT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_HALIGN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_VALIGN);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_AA);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_OUTLINE);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXT_OUTLINE_COLOR);
		}
		if (sArr(value_type).Value(e_value_type_ITEM))
		{
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_CUSTOM_ITEM_SLOT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_ITEM_SLOT);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_MATERIAL_OBJ);
			tl_update_values_ease(Scope<obj_timeline>(self), e_value_TEXTURE_NORMAL_OBJ);
		}
		tl_update_values_ease(Scope<obj_timeline>(self), e_value_VISIBLE);
		if (sVar(type) == e_tl_type_AUDIO && !(sVar(hide) > 0) && global::_app->timeline_marker > global::_app->timeline_marker_previous && global::_app->timeline_playing > 0)
		{
			if (sInt(keyframe_current) > 0)
			{
				if (sVar(value).Value(e_value_SOUND_OBJ) > 0 && idBool(sVar(value).Value(e_value_SOUND_OBJ), ready) && sInt(keyframe_prev) != sInt(keyframe_current))
				{
					ObjType(obj_keyframe, sInt(keyframe_current))->sound_play_index = audio_play_sound(idInt(sVar(value).Value(e_value_SOUND_OBJ), sound_index), IntType(0), (sVar(value).Value(e_value_SOUND_END) > IntType(0) ? true : false));
					audio_sound_pitch(ObjType(obj_keyframe, sInt(keyframe_current))->sound_play_index, sVar(value).Value(e_value_SOUND_PITCH));
					audio_sound_set_track_position(ObjType(obj_keyframe, sInt(keyframe_current))->sound_play_index, (mod(sVar(value).Value(e_value_SOUND_START), (idReal(sVar(value).Value(e_value_SOUND_OBJ), sound_samples) / sample_rate_))) * sVar(value).Value(e_value_SOUND_PITCH));
					audio_sound_gain(ObjType(obj_keyframe, sInt(keyframe_current))->sound_play_index, sVar(value).Value(e_value_SOUND_VOLUME), 0.0);
				}
				for (IntType k = IntType(0); k < ds_list_size(sInt(keyframe_list)); k++)
				{
					withOne (obj_keyframe, DsList(sInt(keyframe_list)).Value(k), self->id)
					{
						if (self->sound_play_index > 0 && global::_app->timeline_marker > self->position + tl_keyframe_length(self->id))
						{
							audio_stop_sound(self->sound_play_index);
							self->sound_play_index = null_;
						}
					}
					
					if (sInt(keyframe_current) == DsList(sInt(keyframe_list)).Value(k))
						break;
				}
			}
		}
		if (sVar(type) == e_temp_type_PARTICLE_SPAWNER && global::_app->timeline_marker > global::_app->timeline_marker_previous && sInt(keyframe_prev) != sInt(keyframe_current))
		{
			if (!(idVar(sVar(temp), pc_spawn_constant) > 0) && sVar(value).Value(e_value_SPAWN) > 0 && !(sVar(value).Value(e_value_FREEZE) > 0))
				sBool(fire) = true;
			if (sVar(value).Value(e_value_CLEAR) > 0)
				particle_spawner_clear(self);
		}
	}
	
}
