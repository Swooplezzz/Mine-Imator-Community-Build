/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.25 01:36:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType background_sky_night_alpha()
	{
		return smoothstep(percent(IntType(1) - max({ IntType(0), vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), IntType(1))) }), .85, IntType(1)));
	}
	
	RealType background_sky_rise_set_alpha(BoolType rise)
	{
		RealType t, d, a;
		t = mod_fix(global::_app->background_sky_time, IntType(360));
		d = percent(vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), IntType(1))), -0.175, 0.325);
		if (d > 0.5)
			a = percent(d, IntType(1), 0.5);
		else
			a = percent(d, IntType(0), .5);
		
		if ((rise && t < IntType(180)) || (!rise && t > IntType(180)))
			a = IntType(0);
		return smoothstep(a);
	}
	
	void background_sky_startup()
	{
		global::_app->background_image_sphere_vbuffer = null_;
		global::_app->background_image_cube_vbuffer = null_;
		global::_app->background_image_cube_mapped_vbuffer = null_;
		global::_app->background_fog_texture = texture_sprite(ID_spr_fog);
		global::_app->background_fog_vbuffer = null_;
		global::_app->background_sky_stars_texture = texture_sprite(ID_spr_stars);
		global::_app->background_sky_stars_vbuffer = null_;
		global::_app->background_sky_sun_moon_vbuffer = null_;
		global::_app->background_sky_clouds_vbuffer = null_;
		global::_app->background_sky_clouds_vbuffer_pos = ArrType::From({});
	}
	
	void background_sky_update()
	{
		if (!(global::_app->background_fog_color_custom > 0))
		{
			global::_app->background_fog_color_final = global::_app->background_sky_color;
			if (!(global::_app->background_image_show > 0))
			{
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color((IntType)(global::_app->background_fog_color_final), IntType(0), 0.95), global::_app->background_night_alpha);
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), c_white, (IntType(1) - global::_app->background_night_alpha) * 0.58);
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_blue, c_black, 0.3), global::_app->background_night_alpha * 0.05);
				if (global::_app->background_twilight > 0)
				{
					RealType cam_xyangle, p;
					cam_xyangle = point_direction(global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_to.Real(X_), global::cam_to.Real(Y_)) - global::_app->background_sky_rotation;
					p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(90))) / 180.0, IntType(1));
					global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_sunset_start, c_sunset_end, global::_app->background_sunset_alpha), global::_app->background_sunset_alpha * p);
					p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(270))) / 180.0, IntType(1));
					global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_sunset_start, c_sunset_end, global::_app->background_sunrise_alpha), global::_app->background_sunrise_alpha * p);
				}
			}
		}
		if (global::_app->background_fog_custom_object_color > 0)
			global::_app->background_fog_object_color_final = global::_app->background_fog_object_color;
		else
			global::_app->background_fog_object_color_final = global::_app->background_fog_color_final;
		
		RealType alphay;
		if (global::_app->background_sky_clouds_mode == /*"faded"*/ STR(749))
			alphay = percent(global::cam_from.Real(Z_), global::_app->background_sky_clouds_height, global::_app->background_sky_clouds_height - IntType(250));
		else
			alphay = IntType(1);
		
		global::_app->background_clouds_alpha = (global::_app->background_sky_clouds_mode == /*"faded"*/ STR(749) ? IntType(1) - min({ global::_app->background_night_alpha, 0.95 }) : .8 - min({ global::_app->background_night_alpha, 0.75 })) * alphay;
		global::_app->background_sky_clouds_final = merge_color((IntType)(global::_app->background_sky_clouds_color), make_color_rgb(IntType(120), IntType(120), IntType(255)), global::_app->background_night_alpha);
		global::_app->background_sky_clouds_vbuffer_pos = ArrType::From({});
		RealType size, offset, xo, yo, num, xx;
		IntType i;
		size = global::_app->background_sky_clouds_size * IntType(32);
		offset = (mod((global::_app->background_sky_clouds_speed * (global::_app->background_time * 0.25 + global::_app->background_sky_time * IntType(100)) + global::_app->background_sky_clouds_offset), size));
		xo = ((IntType)(global::cam_from.Real(X_) / size)) * size;
		yo = ((IntType)(global::cam_from.Real(Y_) / size)) * size - offset;
		num = (ceil((RealType)global::_app->background_fog_distance / size) + IntType(1)) * size;
		xx = -num;
		i = IntType(0);
		while (xx < num)
		{
			RealType yy = -num;
			while (yy < num)
			{
				global::_app->background_sky_clouds_vbuffer_pos[i] = point3D(xx + xo, yy + yo, global::_app->background_sky_clouds_height);
				i++;
				yy += size;
			}
			
			xx += size;
		}
		
	}
	
	RealType background_sky_update_clouds(ScopeAny self)
	{
		VarType tex, hei;
		RealType texwid, texhei, texsize, topalpha, cloudsize;
		IntType col, colsidesdark, colsideslight, coltop, colbottom;
		if (!idBool(sVar(background_sky_clouds_tex), ready))
			return IntType(0);
		tex = ((idVar(sVar(background_sky_clouds_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_clouds_tex), clouds_texture) : idVar(sVar(background_sky_clouds_tex), texture));
		texwid = texture_width(tex);
		texhei = texture_height(tex);
		texsize = max({ texwid, texhei });
		hei = IntType(0);
		if (sVar(background_sky_clouds_mode) == /*"faded"*/ STR(749))
		{
			colsidesdark = c_white;
			colsideslight = c_white;
			coltop = c_white;
			colbottom = c_white;
			topalpha = IntType(0);
		}
		else
		{
			colsidesdark = c_clouds_sidesdark;
			colsideslight = c_clouds_sideslight;
			coltop = c_clouds_top;
			colbottom = c_clouds_bottom;
			topalpha = IntType(1);
		}
		
		if (sVar(background_sky_clouds_vbuffer) > 0)
			vbuffer_destroy(sVar(background_sky_clouds_vbuffer));
		sVar(background_sky_clouds_vbuffer) = vbuffer_start();
		cloudsize = sVar(background_sky_clouds_size) * IntType(32);
		if (sVar(background_sky_clouds_mode) != /*"flat"*/ STR(750))
		{
			IntType surf = surface_create((IntType)(texwid), (IntType)(texhei));
			surface_set_target(surf);
		{
			draw_clear_alpha(c_black, 0.0);
			draw_texture({ tex, IntType(0), IntType(0) });
		}
			surface_reset_target();
			global::buffer_current = buffer_create((IntType)(texwid * texhei * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::buffer_current, surf, IntType(0));
			buffer_seek(global::buffer_current, buffer_seek_start, IntType(0));
			ArrType hascolor;
			for (IntType py = IntType(0); py < texhei; py++)
				for (IntType px = IntType(0); px < texwid; px++)
					hascolor[px][py] = ((IntType)buffer_read_int_uns() >> (IntType)IntType(24) == IntType(255));
			buffer_delete(global::buffer_current);
			surface_free(surf);
			RealType pw, ph, blockw, blockh;
			pw = 1.0 / texwid;
			ph = 1.0 / texhei;
			blockw = cloudsize / texwid;
			blockh = cloudsize / texhei;
			hei = sVar(background_sky_clouds_thickness);
			for (IntType xx = IntType(0); xx < texwid; xx++)
			{
				for (IntType yy = IntType(0); yy < texhei; yy++)
				{
					RealType vx, vy, tx, ty;
					if (!hascolor[xx][yy])
						continue;
					vx = xx * blockw;
					vy = yy * blockh;
					tx = xx * pw;
					ty = yy * ph;
					if (!hascolor[mod((xx + IntType(1)), texwid)][yy])
					{
						global::vertex_rgb = colsidesdark;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(1), IntType(0), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(1), IntType(0), IntType(0), tx, ty + ph });
						vertex_add({ vx + blockw, vy, hei, IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx + blockw, vy, hei, IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy, IntType(0), IntType(1), IntType(0), IntType(0), tx + pw, ty });
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(1), IntType(0), IntType(0), tx, ty });
					}
					if (!hascolor[mod_fix(xx - IntType(1), texwid)][yy])
					{
						global::vertex_rgb = colsidesdark;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy, IntType(0), -IntType(1), IntType(0), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx, vy, hei, -IntType(1), IntType(0), IntType(0), tx, ty + ph });
						vertex_add({ vx, vy + blockh, hei, -IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx, vy + blockh, hei, -IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy + blockh, IntType(0), -IntType(1), IntType(0), IntType(0), tx + pw, ty });
						vertex_add({ vx, vy, IntType(0), -IntType(1), IntType(0), IntType(0), tx, ty });
					}
					if (!hascolor[xx][mod((yy + IntType(1)), texhei)])
					{
						global::vertex_rgb = colsideslight;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx, ty + ph });
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx + pw, ty });
						vertex_add({ vx, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx, ty });
					}
					if (!hascolor[xx][mod_fix(yy - IntType(1), texhei)])
					{
						global::vertex_rgb = colsideslight;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx + blockw, vy, hei, IntType(0), -IntType(1), IntType(0), tx, ty + ph });
						vertex_add({ vx, vy, hei, IntType(0), -IntType(1), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx, vy, hei, IntType(0), -IntType(1), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx + pw, ty });
						vertex_add({ vx + blockw, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx, ty });
					}
				}
			}
		}
		col = (sVar(background_sky_clouds_mode) == /*"flat"*/ STR(750) ? coltop : colbottom);
		global::vertex_rgb = col;
		global::vertex_alpha = IntType(1);
		vertex_add({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(0) });
		vertex_add({ IntType(0), cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(1) });
		vertex_add({ cloudsize, cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(0) });
		vertex_add({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(0) });
		global::vertex_rgb = coltop;
		global::vertex_alpha = topalpha;
		vertex_add({ IntType(0), IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(0) });
		vertex_add({ cloudsize, IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(0) });
		vertex_add({ cloudsize, cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(1) });
		vertex_add({ IntType(0), cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(1) });
		vertex_add({ IntType(0), IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(0) });
		global::vertex_rgb = c_white;
		global::vertex_alpha = IntType(1);
		vbuffer_done();
		return 0.0;
	}
	
	void background_sky_update_sun()
	{
		RealType range = (RealType)global::_app->project_render_distance / 8.0;
		global::_app->background_light_data[IntType(0)] = lengthdir_x(range, global::_app->background_sky_rotation - IntType(90)) * lengthdir_x(1.0, global::_app->background_sky_time + 90.0);
		global::_app->background_light_data[IntType(1)] = lengthdir_y(range, global::_app->background_sky_rotation - IntType(90)) * lengthdir_x(1.0, global::_app->background_sky_time + 90.0);
		global::_app->background_light_data[IntType(2)] = lengthdir_z(range, global::_app->background_sky_time + IntType(90));
		if (mod_fix(global::_app->background_sky_time, IntType(360)) == IntType(0))
			global::_app->background_light_data[IntType(0)] += 0.1;
		global::_app->background_sun_direction = vec3_normalize(ArrType::From({ global::_app->background_light_data.Value(IntType(0)), global::_app->background_light_data.Value(IntType(1)), global::_app->background_light_data.Value(IntType(2)) }));
		global::_app->background_light_data[IntType(3)] = range / 2.0;
		global::_app->background_light_data[IntType(4)] = ((RealType)color_get_red(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(5)] = ((RealType)color_get_green(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(6)] = ((RealType)color_get_blue(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(7)] = range * IntType(2);
	}
	
	void bench_clear()
	{
		withAll (obj_template, noone)
			if (self->creator == global::_app->bench_settings)
				instance_destroy(ScopeAny(self));
		
		withAll (obj_resource, noone)
			if (self->creator == global::_app->bench_settings)
				instance_destroy(ScopeAny(self));
		
	}
	
	RealType bench_click(ScopeAny self, VarType type)
	{
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == type && sStr(bench_show_ani_type) == /*""*/ STR(0))
		{
			action_bench_create(self);
			sStr(bench_show_ani_type) = /*"hide"*/ STR(751);
			return IntType(0);
		}
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			ObjType(obj_bench_settings, self->id)->type = type;
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_CHARACTER)
			{
				if (ds_list_find_index(ObjType(obj_sortlist, self->char_list)->list, self->model_name) < IntType(0))
				{
					self->model_name = default_model;
					self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
				}
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_SPECIAL_BLOCK)
			{
				if (ds_list_find_index(ObjType(obj_sortlist, self->special_block_list)->list, self->model_name) < IntType(0))
				{
					self->model_name = default_special_block;
					self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
				}
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_BODYPART)
			{
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_part(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_BLOCK)
				temp_update_block(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_ITEM)
				render_generate_item(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_SHAPE)
				temp_update_shape(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_MODEL)
			{
				self->model_tex = null_;
				self->model_tex_material = null_;
				self->model_tex_normal = null_;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
				if (show_modelbench_popup)
					withOne (app, global::_app->id, self->id)
						if (!ObjType(obj_popup, global::_app->popup_modelbench)->hidden && !ObjType(obj_popup, global::_app->popup_modelbench)->not_now)
							popup_show(ScopeAny(self), global::_app->popup_modelbench);
				
			}
		}
		
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PARTICLE_SPAWNER)
			bench_update_particles_list(self);
		withOne (obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview, self->id)
		{
			particle_spawner_clear(ScopeAny(self));
			preview_reset_view(ScopeAny(self));
			self->update = true;
		}
		
		bench_clear();
		sVar(bench_settings_ani) = IntType(0);
		return 0.0;
	}
	
	RealType bench_draw(ScopeAny self)
	{
		if (sStr(bench_show_ani_type) == /*""*/ STR(0) && sVar(bench_show_ani) == IntType(0))
			return IntType(0);
		StringType func;
		VarType ani;
		VarType sdx, sdy, ymax;
		func = /*""*/ STR(0);
		if (sStr(bench_show_ani_type) == /*"show"*/ STR(752))
		{
			sVar(bench_show_ani) = test_reduced_motion(IntType(1), min({ IntType(1), sVar(bench_show_ani) + 0.1 * global::delta }));
			if (sVar(bench_show_ani) == IntType(1))
				sStr(bench_show_ani_type) = /*""*/ STR(0);
			func = /*"easeoutcirc"*/ STR(598);
		}
		else
			if (sStr(bench_show_ani_type) == /*"hide"*/ STR(751))
			{
				sVar(bench_show_ani) = test_reduced_motion(IntType(0), max({ IntType(0), sVar(bench_show_ani) - 0.1 * global::delta }));
				if (sVar(bench_show_ani) == IntType(0))
					sStr(bench_show_ani_type) = /*""*/ STR(0);
				func = /*"easeincirc"*/ STR(597);
			}
		
		if (sVar(bench_show_ani) == IntType(0))
		{
			if (sVar(window_busy) == /*"bench"*/ STR(753))
				sVar(window_busy) = /*""*/ STR(0);
			ObjType(obj_bench_settings, sInt(bench_settings))->height = IntType(0);
			ObjType(obj_bench_settings, sInt(bench_settings))->height_goal = sReal(bench_height);
			return IntType(0);
		}
		else
			ObjType(obj_bench_settings, sInt(bench_settings))->height = ObjType(obj_bench_settings, sInt(bench_settings))->height_goal;
		
		if (sVar(window_busy) == /*"bench"*/ STR(753))
			sVar(window_busy) = /*""*/ STR(0);
		ani = ease(func, sVar(bench_show_ani));
		sVar(content_x) = ObjType(obj_bench_settings, sInt(bench_settings))->posx - (IntType(8) - (IntType(8) * ani));
		sVar(content_y) = ObjType(obj_bench_settings, sInt(bench_settings))->posy;
		sVar(content_width) = IntType(534);
		sVar(content_height) = ObjType(obj_bench_settings, sInt(bench_settings))->height;
		sBool(content_mouseon) = !sBool(popup_mouseon);
		sVar(dx) = sVar(content_x);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = sVar(content_height);
		if (!app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && sBool(mouse_left_pressed) && sVar(window_busy) == /*""*/ STR(0))
		{
			sStr(bench_show_ani_type) = /*"hide"*/ STR(751);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
		}
		draw_set_alpha(ani);
		draw_dropshadow(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), c_black, IntType(1));
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_outline(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border, true);
		clip_begin(sVar(content_x) - IntType(4), sVar(content_y) - IntType(4), sVar(content_width) + IntType(8), sVar(content_height) + IntType(8));
		sdx = sVar(dx);
		sdy = sVar(dy);
		sVar(dy) += IntType(8);
		RealType types, divides, lefth;
		BoolType skipasset;
		types = IntType(13);
		divides = IntType(4);
		lefth = (types * IntType(32)) + (divides * IntType(9));
		for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(bench_type_list), item)); i++)
		{
			skipasset = false;
			if (!(sReal(setting_advanced_mode) > 0))
			{
				if (ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->name == /*"typemodel"*/ STR(181) || ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->name == /*"typebackground"*/ STR(193))
					skipasset = true;
			}
			if (!skipasset)
			{
				list_item_draw(self, { DsList(idInt(sInt(bench_type_list), item)).Value(i), sVar(dx), sVar(dy), IntType(192), (sReal(window_compact) > 0) ? IntType(28) : IntType(32), (ObjType(obj_bench_settings, sInt(bench_settings))->type == ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->value), IntType(0), IntType(5) });
				sVar(dy) += ((sReal(window_compact) > 0) ? IntType(28) : IntType(32));
			}
			if (i == IntType(2) || i == IntType(6) || i == IntType(9))
			{
				draw_divide(sVar(dx) + IntType(5), sVar(dy) + IntType(4), IntType(184));
				sVar(dy) += IntType(9);
			}
		}
		sVar(dy) += IntType(8);
		ymax = sVar(dy);
		sVar(dy) = sdy + IntType(12);
		sVar(dx) += IntType(192) + IntType(12);
		sVar(dw) = (sVar(content_width) - IntType(192)) - IntType(24);
		bench_draw_settings(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh));
		ymax = max({ sVar(dy), ymax });
		sVar(dy) = ymax;
		draw_divide_vertical(sdx + IntType(193), sdy, ObjType(obj_bench_settings, sInt(bench_settings))->height);
		ObjType(obj_bench_settings, sInt(bench_settings))->height_goal = sVar(dy) - sdy;
		clip_end();
		draw_set_alpha(1.0);
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(bench_show_ani_type) != /*"hide"*/ STR(751))
			sVar(window_busy) = /*"bench"*/ STR(753);
		return 0.0;
	}
	
	void bench_draw_settings(ScopeAny self, VarType bx, VarType by, VarType bw, VarType bh)
	{
		sVar(dx) = bx;
		sVar(dy) = by;
		sVar(dw) = bw;
		sVar(dh) = bh;
		sVar(content_x) = sVar(dx);
		sVar(content_y) = sVar(dy);
		sVar(content_width) = sVar(dw);
		sVar(content_height) = sVar(dh);
		RealType prevalpha;
		prevalpha = draw_get_alpha();
		sVar(bench_settings_ani) += test_reduced_motion(IntType(1), (0.09 * global::delta));
		sVar(bench_settings_ani) = clamp(sVar(bench_settings_ani), IntType(0), IntType(1));
		VarType aniease = ease(/*"easeoutcirc"*/ STR(598), sVar(bench_settings_ani));
		draw_set_alpha(aniease * prevalpha);
		sVar(dx) += -IntType(16) + (IntType(16) * aniease);
		VarType sy = sVar(dy);
		if (type_is_timeline(ObjType(obj_bench_settings, sInt(bench_settings))->type))
		{
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_LIGHT_SOURCE)
			{
				draw_sprite(ID_spr_bench_example, (IntType)((ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT) ? IntType(0) : IntType(1)), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"typepointlight"*/ STR(754), null_, e_tl_type_POINT_LIGHT, ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT, ID_action_bench_light_type });
				togglebutton_add(self, { /*"typespotlight"*/ STR(755), null_, e_tl_type_SPOT_LIGHT, ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_SPOT_LIGHT, ID_action_bench_light_type });
				draw_togglebutton(self, /*"benchlighttype"*/ STR(756), sVar(dx), sVar(dy));
				tab_next(self);
				if (ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT)
					draw_tooltip_label(self, /*"benchpointlighttip"*/ STR(757), icons_LIGHT_POINT, e_toast_INFO);
				else
					draw_tooltip_label(self, /*"benchspotlighttip"*/ STR(758), icons_LIGHT_SPOT, e_toast_INFO);
				
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_CAMERA)
			{
				draw_sprite(ID_spr_bench_example, IntType(5), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchcameratip"*/ STR(759), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_BACKGROUND)
			{
				draw_sprite(ID_spr_bench_example, IntType(4), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchbackgroundtip"*/ STR(760), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_AUDIO)
			{
				draw_sprite(ID_spr_bench_example, IntType(2), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchaudiotip"*/ STR(761), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PATH)
			{
				draw_sprite(ID_spr_bench_example, IntType(3), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchpathtip"*/ STR(762), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PATH_POINT)
				draw_tooltip_label(self, /*"benchpathpointtip"*/ STR(763), icons_INFO, e_toast_INFO);
		}
		else
		{
			preview_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->preview, sVar(dx), sVar(dy), sVar(dw), IntType(144));
			sVar(dy) += IntType(144) + IntType(8);
			sBool(menu_bench) = true;
			switch ((IntType)ObjType(obj_bench_settings, sInt(bench_settings))->type)
			{
				case e_temp_type_CHARACTER:
				case e_temp_type_SPECIAL_BLOCK:
				case e_temp_type_BODYPART:
				{
					VarType labeltext, part;
					IntType list, capwid;
					StringType texcap, texmatcap, texnormcap;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_CHARACTER)
					{
						labeltext = text_get({ /*"benchmodel"*/ STR(764) });
						list = ObjType(obj_bench_settings, sInt(bench_settings))->char_list;
						texcap = /*"benchskin"*/ STR(765);
						texmatcap = /*"benchskinmaterial"*/ STR(766);
						texnormcap = /*"benchskinnormal"*/ STR(767);
						capwid = text_caption_width(self, { texcap, texmatcap, texnormcap });
						part = ObjType(obj_bench_settings, sInt(bench_settings))->model_file;
					}
					else
						if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_SPECIAL_BLOCK)
						{
							labeltext = text_get({ /*"benchblock"*/ STR(768) });
							list = ObjType(obj_bench_settings, sInt(bench_settings))->special_block_list;
							texcap = /*"benchspblocktex"*/ STR(769);
							texmatcap = /*"benchspblocktexmaterial"*/ STR(770);
							texnormcap = /*"benchspblocktexnormal"*/ STR(771);
							capwid = text_caption_width(self, { texcap, texmatcap, texnormcap });
							part = ObjType(obj_bench_settings, sInt(bench_settings))->model_file;
						}
						else
							if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_BODYPART)
							{
								labeltext = text_get({ /*"benchmodel"*/ STR(764) });
								list = ObjType(obj_bench_settings, sInt(bench_settings))->bodypart_model_list;
								texcap = /*"benchbodypartskin"*/ STR(772);
								texmatcap = /*"benchbodypartskinmaterial"*/ STR(773);
								texnormcap = /*"benchbodypartskinnormal"*/ STR(774);
								capwid = text_caption_width(self, { /*"benchbodypart"*/ STR(775), texcap, texmatcap, texnormcap });
								part = ObjType(obj_bench_settings, sInt(bench_settings))->model_part;
							}
					
					
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->model_name, false, labeltext);
					tab_next(self);
					sVar(menu_filter) = ObjType(obj_textbox, ObjType(obj_sortlist, list)->search_tbx)->text;
					sVar(menu_filter_normal) = sortlist_column_get(list, ObjType(obj_bench_settings, sInt(bench_settings))->model_name, IntType(0));
					VarType model;
					IntType statelen;
					model = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(idVar(sInt(bench_settings), model_name));
					statelen = array_length(VarType::CreateRef(ObjType(obj_bench_settings, sInt(bench_settings))->model_state));
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						capwid = max({ capwid, text_caption_width(self, { minecraft_asset_get_name(/*"modelstate"*/ STR(776), state) }) });
					}
					tab_set_collumns(self, { true, IntType(2) });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) != /*"true"*/ STR(777) && ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) != /*"false"*/ STR(778))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						sVar(menu_model_current) = model;
						sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
						tab_control(self, sReal(ui_small_height));
						if (draw_checkbox(self, /*"modelstate"*/ STR(776) + state, sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(777), null_))
						{
							sInt(menu_model_state) = sInt(menu_model_state_current);
							if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(777))
								action_bench_model_state(self, /*"false"*/ STR(778));
							else
								action_bench_model_state(self, /*"true"*/ STR(777));
							
						}
						tab_next(self);
					}
					tab_set_collumns(self, { false });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(777) || ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"false"*/ STR(778))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						sVar(menu_model_current) = model;
						sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
						draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)), minecraft_asset_get_name(/*"modelstatevalue"*/ STR(9), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1))), ID_action_bench_model_state, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					sVar(menu_model_current) = null_;
					sVar(menu_filter) = /*""*/ STR(0);
					sVar(menu_filter_normal) = /*""*/ STR(0);
					if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_BODYPART && ObjType(obj_bench_settings, sInt(bench_settings))->model_file != null_)
					{
						draw_button_menu(self, { /*"benchbodypart"*/ STR(775), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->model_part_name, minecraft_asset_get_name(/*"modelpart"*/ STR(779), ObjType(obj_bench_settings, sInt(bench_settings))->model_part_name), ID_action_bench_model_part_name, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					VarType text, tex;
					text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, display_name);
					withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, global::_app->id)
						tex = res_get_model_texture(self, model_part_get_texture_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_texture_name_map));
					
					draw_button_menu(self, { texcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, text, ID_action_bench_model_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, display_name);
						withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, global::_app->id)
							tex = res_get_model_texture_material(self, model_part_get_texture_material_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_texture_material_name_map));
						
						draw_button_menu(self, { texmatcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, text, ID_action_bench_model_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, display_name);
						withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, global::_app->id)
							tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_tex_normal_name_map));
						
						draw_button_menu(self, { texnormcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, text, ID_action_bench_model_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model_use_blend_color > 0)
					{
						sReal(panel_compact) = true;
						tab_control_color(self);
						draw_button_color(self, /*"benchmodelcolor"*/ STR(780), sVar(dx), sVar(dy), sVar(dw), ObjType(obj_bench_settings, sInt(bench_settings))->model_blend_color, ObjType(obj_bench_settings, sInt(bench_settings))->model_blend_color_default, false, ID_action_bench_model_blend_color);
						tab_next(self);
						sReal(panel_compact) = false;
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->pattern_type != /*""*/ STR(0))
					{
						tab_control_button_label(self);
						if (draw_button_label(self, /*"benchpatterneditor"*/ STR(781), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
							popup_pattern_editor_show(self, sInt(bench_settings));
						tab_next(self);
						if (sInt(popup) == sInt(popup_pattern_editor))
							ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model_name == /*"armor"*/ STR(782))
					{
						tab_control_button_label(self);
						if (draw_button_label(self, /*"bencharmoreditor"*/ STR(783), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
							popup_armor_editor_show(self, sInt(bench_settings));
						tab_next(self);
						if (sInt(popup) == sInt(popup_armor_editor))
							ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
					}
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, list)->scroll);
					break;
				}
				
				case e_temp_type_SCENERY:
				{
					IntType capwid;
					VarType text, tex;
					capwid = text_caption_width(self, { /*"benchscenery"*/ STR(784), /*"benchblocktex"*/ STR(785), /*"benchblocktexmaterial"*/ STR(786), /*"benchblocktexnormal"*/ STR(787) });
					text = text_get({ /*"listnone"*/ STR(788) });
					if (ObjType(obj_bench_settings, sInt(bench_settings))->scenery != null_)
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->scenery, display_name);
					draw_button_menu(self, { /*"benchscenery"*/ STR(784), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->scenery, text, ID_action_bench_scenery, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					draw_button_menu(self, { /*"benchblocktex"*/ STR(785), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, display_name), ID_action_bench_block_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						draw_button_menu(self, { /*"benchblocktexmaterial"*/ STR(786), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, display_name), ID_action_bench_block_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						draw_button_menu(self, { /*"benchblocktexnormal"*/ STR(787), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, display_name), ID_action_bench_block_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					break;
				}
				
				case e_temp_type_ITEM:
				{
					IntType capwid;
					VarType res, text, sprite;
					capwid = text_caption_width(self, { /*"typeitem"*/ STR(182) });
					res = ObjType(obj_bench_settings, sInt(bench_settings))->item_tex;
					if (!res_is_ready(res))
						res = global::mc_res;
					draw_label(self, { text_get({ /*"typeitem"*/ STR(182) }) + /*":"*/ STR(789), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
					if (idInt(res, item_sheet_texture) != null_)
						draw_texture_slot(idInt(res, item_sheet_texture), ObjType(obj_bench_settings, sInt(bench_settings))->item_slot, sVar(dx) + capwid, sVar(dy) + IntType(4), IntType(16), IntType(16), idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_));
					else
					{
						RealType scale = min({ 16.0 / texture_width(idVar(res, texture)), 16.0 / texture_height(idVar(res, texture)) });
						draw_texture({ idVar(res, texture), sVar(dx) + capwid, sVar(dy) + IntType(4), scale, scale });
					}
					
					sVar(dy) += IntType(32);
					if (idInt(res, item_sheet_texture) != null_)
					{
						RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
						sReal(listh) = IntType(162);
						draw_texture_picker(self, ObjType(obj_bench_settings, sInt(bench_settings))->item_slot, idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sReal(listh), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), ObjType(obj_bench_settings, sInt(bench_settings))->item_scroll, ID_action_bench_item_slot);
						sVar(dy) += sReal(listh) + IntType(8);
					}
					VarType sx;
					sx = sVar(dx_start);
					sVar(dx_start) = sVar(dx);
					tab_set_collumns(self, { true, IntType(2) });
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitem3d"*/ STR(790), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_3d, ID_action_bench_item_3d);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitemfacecamera"*/ STR(791), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_face_camera, ID_action_bench_item_face_camera);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitembounce"*/ STR(792), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_bounce, ID_action_bench_item_bounce);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitemspin"*/ STR(793), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_spin, ID_action_bench_item_spin);
					tab_next(self);
					tab_set_collumns(self, { false });
					sVar(dx_start) = sx;
					capwid = text_caption_width(self, { /*"benchitemtex"*/ STR(794), /*"benchitemtexmaterial"*/ STR(795), /*"benchitemtexnormal"*/ STR(796) });
					VarType tex = idInt(res, block_preview_texture);
					if (tex == null_)
						tex = idVar(res, texture);
					draw_button_menu(self, { /*"benchitemtex"*/ STR(794), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, display_name), ID_action_bench_item_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						VarType tex = idInt(res, block_preview_texture);
						if (tex == null_)
							tex = idVar(res, texture);
						draw_button_menu(self, { /*"benchitemtexmaterial"*/ STR(795), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, display_name), ID_action_bench_item_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						tex = idInt(res, block_preview_texture);
						if (tex == null_)
							tex = idVar(res, texture);
						draw_button_menu(self, { /*"benchitemtexnormal"*/ STR(796), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, display_name), ID_action_bench_item_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					sStr(window_scroll_focus) = string(ObjType(obj_bench_settings, sInt(bench_settings))->item_scroll);
					break;
				}
				
				case e_temp_type_BLOCK:
				{
					draw_set_font(sInt(font_label));
					IntType capwid;
					VarType text, sprite;
					capwid = text_caption_width(self, { /*"benchblocktex"*/ STR(785), /*"benchblocktexmaterial"*/ STR(786), /*"benchblocktexnormal"*/ STR(787) });
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->block_list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->block_name, false, text_get({ /*"benchblock"*/ STR(768) }));
					tab_next(self);
					sVar(menu_filter) = ObjType(obj_textbox, ObjType(obj_sortlist, ObjType(obj_bench_settings, sInt(bench_settings))->block_list)->search_tbx)->text;
					sVar(menu_filter_normal) = sortlist_column_get(ObjType(obj_bench_settings, sInt(bench_settings))->block_list, ObjType(obj_bench_settings, sInt(bench_settings))->block_name, IntType(0));
					VarType block;
					IntType statelen;
					block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(idVar(sInt(bench_settings), block_name));
					statelen = array_length(VarType::CreateRef(ObjType(obj_bench_settings, sInt(bench_settings))->block_state));
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						capwid = max({ capwid, text_caption_width(self, { minecraft_asset_get_name(/*"blockstate"*/ STR(797), state) }) });
					}
					tab_set_collumns(self, { true, IntType(2) });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) != /*"true"*/ STR(777) && ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) != /*"false"*/ STR(778))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						sVar(menu_block_current) = block;
						sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
						tab_control(self, sReal(ui_small_height));
						if (draw_checkbox(self, /*"blockstate"*/ STR(797) + state, sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(777), null_))
						{
							sInt(menu_block_state) = sInt(menu_block_state_current);
							if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(777))
								action_bench_block_state(self, /*"false"*/ STR(778));
							else
								action_bench_block_state(self, /*"true"*/ STR(777));
							
						}
						tab_next(self);
					}
					tab_set_collumns(self, { false });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(777) || ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"false"*/ STR(778))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						sVar(menu_block_current) = block;
						sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
						draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)), minecraft_asset_get_name(/*"blockstatevalue"*/ STR(5), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1))), ID_action_bench_block_state, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					sVar(menu_block_current) = null_;
					sVar(menu_filter) = /*""*/ STR(0);
					sVar(menu_filter_normal) = /*""*/ STR(0);
					draw_button_menu(self, { /*"benchblocktex"*/ STR(785), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, display_name), ID_action_bench_block_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						draw_button_menu(self, { /*"benchblocktexmaterial"*/ STR(786), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, display_name), ID_action_bench_block_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						draw_button_menu(self, { /*"benchblocktexnormal"*/ STR(787), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, display_name), ID_action_bench_block_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, ObjType(obj_bench_settings, sInt(bench_settings))->block_list)->scroll);
					break;
				}
				
				case e_temp_type_PARTICLE_SPAWNER:
				{
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->particles_list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->particle_preset, false, text_get({ /*"benchparticlespreset"*/ STR(798) }));
					tab_next(self);
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, ObjType(obj_bench_settings, sInt(bench_settings))->particles_list)->scroll);
					break;
				}
				
				case e_temp_type_TEXT:
				{
					IntType capwid;
					capwid = text_caption_width(self, { /*"benchtextfont"*/ STR(799) });
					if (sReal(setting_advanced_mode) > 0)
					{
						draw_button_menu(self, { /*"benchtextfont"*/ STR(799), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->text_font, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->text_font, display_name), ID_action_bench_text_font, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					VarType sx;
					sx = sVar(dx_start);
					sVar(dx_start) = sVar(dx);
					tab_set_collumns(self, { true, IntType(2) });
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchtext3d"*/ STR(800), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->text_3d, ID_action_bench_text_3d);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchtextfacecamera"*/ STR(801), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->text_face_camera, ID_action_bench_text_face_camera);
					tab_next(self);
					tab_set_collumns(self, { false });
					sVar(dx_start) = sx;
					break;
				}
				
				case e_tl_type_SHAPE:
				{
					IntType capwid;
					VarType text;
					capwid = text_caption_width(self, { /*"benchshapetype"*/ STR(802), /*"benchshapetex"*/ STR(803), /*"benchshapetexmaterial"*/ STR(804), /*"benchshapetexnormal"*/ STR(805) });
					text = text_get({ /*"type"*/ STR(806) + DsList(global::tl_type_name_list).Value(e_tl_type_CUBE + ObjType(obj_bench_settings, sInt(bench_settings))->shape_type) });
					draw_button_menu(self, { /*"benchshapetype"*/ STR(802), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->shape_type, text, ID_action_bench_shape_type, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += IntType(32);
					VarType tex;
					text = text_get({ /*"listnone"*/ STR(788) });
					tex = null_;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex > 0)
					{
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, display_name);
						if (idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, type) != e_tl_type_CAMERA)
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, texture);
					}
					draw_button_menu(self, { /*"benchshapetex"*/ STR(803), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, text, ID_action_bench_shape_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						text = text_get({ /*"listnone"*/ STR(788) });
						tex = null_;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material > 0)
						{
							text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, display_name);
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, texture);
						}
						draw_button_menu(self, { /*"benchshapetexmaterial"*/ STR(804), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, text, ID_action_bench_shape_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						text = text_get({ /*"listnone"*/ STR(788) });
						tex = null_;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal > 0)
						{
							text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, display_name);
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, texture);
						}
						draw_button_menu(self, { /*"benchshapetexnormal"*/ STR(805), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, text, ID_action_bench_shape_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CUBE || ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CYLINDER || ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CONE)
					{
						if (sReal(setting_advanced_mode) > 0)
						{
							tab_control_checkbox(self);
							draw_checkbox(self, /*"benchshapetexmap"*/ STR(807), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_mapped, ID_action_bench_shape_tex_map, /*"benchshapetexmaptip"*/ STR(808));
							tab_next(self);
						}
					}
					else
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_SURFACE)
						{
							tab_control_checkbox(self);
							draw_checkbox(self, /*"benchshapefacecamera"*/ STR(809), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->shape_face_camera, ID_action_bench_shape_face_camera);
							tab_next(self);
						}
					
					break;
				}
				
				case e_temp_type_MODEL:
				{
					IntType capwid = text_caption_width(self, { /*"benchmodel"*/ STR(764), /*"benchmodeltex"*/ STR(810), /*"benchmodeltexmaterial"*/ STR(811), /*"benchmodeltexnormal"*/ STR(812) });
					VarType text;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model != null_)
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(788) });
					
					draw_button_menu(self, { /*"benchmodel"*/ STR(764), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model, text, ID_action_bench_model, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					VarType texobj, tex;
					withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
					{
						if (self->model_file != null_ && !instance_exists(self->model_file))
							self->model_file = null_;
						texobj = temp_get_model_texobj(ScopeAny(self), null_);
						tex = temp_get_model_tex_preview(ScopeAny(self), texobj, self->model_file);
					}
					
					if (texobj != null_)
						text = idVar(texobj, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(788) });
					
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex == null_)
						text = text_get({ /*"listdefault"*/ STR(813), text });
					draw_button_menu(self, { /*"benchmodeltex"*/ STR(810), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, text, ID_action_bench_model_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
						{
							texobj = temp_get_model_tex_material_obj(ScopeAny(self), null_);
							tex = temp_get_model_tex_material_preview(ScopeAny(self), texobj, self->model_file);
						}
						
						if (texobj != null_)
							text = idVar(texobj, display_name);
						else
							text = text_get({ /*"listnone"*/ STR(788) });
						
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material == null_)
							text = text_get({ /*"listdefault"*/ STR(813), text });
						draw_button_menu(self, { /*"benchmodeltexmaterial"*/ STR(811), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, text, ID_action_bench_model_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
						{
							texobj = temp_get_model_tex_normal_obj(ScopeAny(self), null_);
							tex = temp_get_model_tex_normal_preview(ScopeAny(self), texobj, self->model_file);
						}
						
						if (texobj != null_)
							text = idVar(texobj, display_name);
						else
							text = text_get({ /*"listnone"*/ STR(788) });
						
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal == null_)
							text = text_get({ /*"listdefault"*/ STR(813), text });
						draw_button_menu(self, { /*"benchmodeltexnormal"*/ STR(812), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, text, ID_action_bench_model_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					break;
				}
				
			}
			
			sBool(menu_bench) = false;
		}
		
		draw_set_alpha(prevalpha);
		sVar(dx) = bx;
		tab_control_button_label(self);
		tab_next(self);
		sVar(dy) += IntType(4);
		RealType edit = (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_PARTICLE_SPAWNER && sReal(setting_advanced_mode) > 0);
		VarType wid = ((edit > 0) ? VarType((RealType)sVar(dw) / 2.0 - IntType(4)) : sVar(dw));
		if (draw_button_label(self, /*"benchcreate"*/ STR(814), (edit > 0) ? (sVar(dx) + wid + 8.0) : sVar(dx), sy + sVar(dh) - IntType(56), wid, icons_ASSET_ADD))
		{
			action_bench_create(self);
			sStr(bench_show_ani_type) = /*"hide"*/ STR(751);
		}
		if (edit > 0)
		{
			if (draw_button_label(self, /*"benchcreateedit"*/ STR(815), sVar(dx), sy + sVar(dh) - IntType(56), wid, icons_PENCIL, e_button_SECONDARY))
			{
				action_bench_create(self, true);
				sStr(bench_show_ani_type) = /*"hide"*/ STR(751);
			}
		}
	}
	
}
