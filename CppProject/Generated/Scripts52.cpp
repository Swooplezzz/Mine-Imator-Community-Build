/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType render_world_block_map(IntType modelmap, VarType res)
	{
		VarType key;
		if (modelmap == null_)
			return IntType(0);
		key = ds_map_find_first(modelmap);
		while (!is_undefined(key))
		{
			VarType vbuffer = DsMap(modelmap).Value(key);
			if (!vbuffer_is_empty(vbuffer))
			{
				VarType tex;
				withOne (Object, res, noone)
					tex = res_get_model_texture(self, key);
				
				render_set_texture(tex);
				vbuffer_render({ vbuffer });
			}
			key = ds_map_find_next(modelmap, key);
		}
		
		return 0.0;
	}
	
	void render_world_done()
	{
		gpu_set_ztestenable(false);
	}
	
	RealType render_world_ground(ScopeAny self)
	{
		if (!(sVar(background_ground_show) > 0))
			return IntType(0);
		if (global::render_mode == e_render_mode_SCENE_TEST || global::render_mode == e_render_mode_AO_MASK)
			render_set_uniform_color(/*"uReplaceColor"*/ STR(2588), c_white, IntType(1));
		VarType blend = block_texture_get_blend(sVar(background_ground_name), sVar(background_ground_tex));
		BoolType iswater = (sVar(background_ground_name) == /*"block/water_flow"*/ STR(1777) || sVar(background_ground_name) == /*"block/water_still"*/ STR(1775));
		render_set_uniform_int(/*"uIsGround"*/ STR(2589), IntType(1));
		render_set_uniform_color(/*"uBlendColor"*/ STR(1959), blend, IntType(1));
		render_set_uniform_color(/*"uGlowColor"*/ STR(2590), c_black, IntType(1));
		render_set_uniform_int(/*"uGlowTexture"*/ STR(2591), IntType(0));
		render_set_uniform_int(/*"uFogShow"*/ STR(1968), global::_app->background_fog_show);
		render_set_uniform_int(/*"uIsWater"*/ STR(2587), iswater);
		render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), idVar(sVar(background_ground_tex_material), material_format));
		if (sVar(background_ground_tex_material) == global::mc_res)
		{
			render_set_uniform(/*"uMetallic"*/ STR(2584), IntType(0));
			render_set_uniform(/*"uRoughness"*/ STR(2585), (iswater && global::_app->project_render_water_reflections > 0 ? .07 : 1.0));
			render_set_uniform(/*"uEmissive"*/ STR(2586), IntType(0));
		}
		else
		{
			render_set_uniform(/*"uMetallic"*/ STR(2584), IntType(0));
			render_set_uniform(/*"uRoughness"*/ STR(2585), IntType(0));
			render_set_uniform(/*"uEmissive"*/ STR(2586), IntType(0));
		}
		
		global::shader_texture_filter_mipmap = global::_app->project_render_texture_filtering;
		if (sBool(background_ground_ani))
			render_set_texture(sArr(background_ground_ani_texture).Value(block_texture_get_frame()));
		else
			render_set_texture(sInt(background_ground_texture));
		
		if (sBool(background_ground_material_ani))
			render_set_texture(sArr(background_ground_ani_texture_material).Value(block_texture_get_frame()), /*"Material"*/ STR(2582));
		else
			render_set_texture(sInt(background_ground_texture_material), /*"Material"*/ STR(2582));
		
		if (sBool(background_ground_normal_ani))
			render_set_texture(sArr(background_ground_ani_texture_normal).Value(block_texture_get_frame()), /*"Normal"*/ STR(2583));
		else
			render_set_texture(sInt(background_ground_texture_normal), /*"Normal"*/ STR(2583));
		
		RealType xo, yo;
		xo = ((IntType)(global::cam_from.Real(X_) / IntType(16))) * IntType(16);
		yo = ((IntType)(global::cam_from.Real(Y_) / IntType(16))) * IntType(16);
		vbuffer_render({ sVar(background_ground_vbuffer), point3D(xo, yo, IntType(0)) });
		render_set_uniform_int(/*"uIsGround"*/ STR(2589), IntType(0));
		if (iswater)
		{
			render_set_uniform(/*"uRoughness"*/ STR(2585), IntType(1));
			render_set_uniform_int(/*"uIsWater"*/ STR(2587), IntType(0));
		}
		global::shader_texture_filter_mipmap = false;
		return 0.0;
	}
	
	void render_world_item(VarType vbuffer, VarType is3d, VarType facecamera, VarType bounce, VarType rotate, ArrType res)
	{
		if (!res_is_ready(res.Value(IntType(0))))
			res[IntType(0)] = global::mc_res;
		if (!res_is_ready(res.Value(IntType(1))))
			res[IntType(1)] = global::mc_res;
		if (!res_is_ready(res.Value(IntType(2))))
			res[IntType(2)] = global::mc_res;
		if (facecamera > 0)
		{
			MatrixType mat, rotmat;
			RealType rotz;
			mat = matrix_get(matrix_world);
			rotz = IntType(90) + point_direction(mat.Real(MAT_X), mat.Real(MAT_Y), global::proj_from.Real(X_), global::proj_from.Real(Y_));
			rotmat = matrix_build(-8.0, -0.5 * is3d, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			rotmat = matrix_multiply(rotmat, matrix_build(8.0, 0.5 * is3d, 0.0, 0.0, 0.0, rotz, 1.0, 1.0, 1.0));
			matrix_world_multiply_pre(rotmat);
		}
		if (rotate > 0)
		{
			RealType d, t, offz;
			MatrixType mat, rotmat;
			VarType rotz;
			d = IntType(60) * IntType(6);
			t = mod(global::_app->background_time, d) * IntType(360);
			offz = t / 360.0;
			mat = matrix_get(matrix_world);
			rotmat = matrix_build(-8.0, -0.5 * is3d, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			rotmat = matrix_multiply(rotmat, matrix_build(8.0, 0.5 * is3d, 0.0, 0.0, 0.0, offz, 1.0, 1.0, 1.0));
			matrix_world_multiply_pre(rotmat);
		}
		if (bounce > 0)
		{
			RealType d, t, offz;
			d = IntType(60) * IntType(3);
			t = mod(global::_app->background_time, d) * IntType(2);
			if (t < d)
				offz = ease(/*"easeinoutquad"*/ STR(580), t / d) * IntType(2) - IntType(1);
			else
				offz = IntType(1) - ease(/*"easeinoutquad"*/ STR(580), (t - d) / d) * IntType(2);
			
			matrix_world_multiply_post(matrix_build(0.0, 0.0, offz, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
		}
		if (idInt(res.Value(IntType(0)), item_sheet_texture) != null_)
			render_set_texture(idInt(res.Value(IntType(0)), item_sheet_texture));
		else
			render_set_texture(idVar(res.Value(IntType(0)), texture));
		
		if (res.Value(IntType(1)) != null_ && res.Value(IntType(1)) != global::mc_res)
		{
			if (global::shader_uniform_metallic != IntType(0))
			{
				global::shader_uniform_metallic = IntType(0);
				render_set_uniform(/*"uMetallic"*/ STR(2584), global::shader_uniform_metallic);
			}
			if (global::shader_uniform_roughness != IntType(0))
			{
				global::shader_uniform_roughness = IntType(0);
				render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
			}
			if (global::shader_uniform_emissive != IntType(0))
			{
				global::shader_uniform_emissive = IntType(0);
				render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
			}
			if (idInt(res.Value(IntType(1)), item_sheet_texture_material) != null_)
				render_set_texture(idInt(res.Value(IntType(1)), item_sheet_texture_material), /*"Material"*/ STR(2582));
			else
				render_set_texture(idVar(res.Value(IntType(1)), texture), /*"Material"*/ STR(2582));
			
			render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), idVar(res.Value(IntType(1)), material_format));
		}
		else
		{
			render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
			render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
		}
		
		if (res.Value(IntType(2)) != null_ && res.Value(IntType(2)) != global::mc_res)
		{
			if (idInt(res.Value(IntType(2)), item_sheet_tex_normal) != null_)
				render_set_texture(idInt(res.Value(IntType(2)), item_sheet_tex_normal), /*"Normal"*/ STR(2583));
			else
				render_set_texture(idVar(res.Value(IntType(2)), texture), /*"Normal"*/ STR(2583));
			
		}
		else
			render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
		
		vbuffer_render({ vbuffer });
	}
	
	void render_world_model_file_parts(ScopeAny self, VarType modelfile, VarType res, IntType texnamemap, IntType hidelist, IntType shapevbuffermap, IntType colornamemap, IntType shapehidelist, IntType shapetexnamemap, IntType matrixmap)
	{
		IntType partlist;
		MatrixType mat;
		partlist = idInt(modelfile, part_list);
		if (matrixmap != null_)
			partlist = idInt(modelfile, render_part_list);
		mat = matrix_get(matrix_world);
		for (IntType p = IntType(0); p < ds_list_size(partlist); p++)
		{
			VarType part = DsList(partlist).Value(p);
			if (matrixmap != null_)
			{
				if (ds_map_exists(matrixmap, idVar(part, name)))
					matrix_set(matrix_world, DsMap(matrixmap).Value(idVar(part, name)));
				else
					continue;
				
			}
			else
			{
				if (hidelist != null_ && ds_list_find_index(hidelist, idVar(part, name)) > -IntType(1))
					continue;
				matrix_set(matrix_world, matrix_multiply(idMat(part, default_matrix), mat));
			}
			
			if (idBool(part, part_mixing_shapes))
				render_set_uniform_int(/*"uColorsExt"*/ STR(2130), idBool(part, part_mixing_shapes));
			render_world_model_part(self, part, res, texnamemap, shapevbuffermap, colornamemap, shapehidelist, shapetexnamemap, null_);
			if (idBool(part, part_mixing_shapes))
				render_set_uniform_int(/*"uColorsExt"*/ STR(2130), IntType(0));
			if (matrixmap == null_)
			{
				if (idInt(part, part_list) != null_ && ds_list_size(idInt(part, part_list)) > IntType(0))
					render_world_model_file_parts(self, part, res, texnamemap, hidelist, shapevbuffermap, colornamemap, shapehidelist, shapetexnamemap);
			}
		}
		matrix_set(matrix_world, mat);
	}
	
	RealType render_world_model_part(ScopeAny self, VarType part, VarType res, IntType texnamemap, IntType shapevbuffermap, IntType colornamemap, IntType shapehidelist, IntType shapetexnamemap, VarType tlobject)
	{
		if (idInt(part, shape_list) == null_)
			return IntType(0);
		StringType parttexname;
		MatrixType mat;
		parttexname = ((tlobject > 0) ? /*""*/ STR(0) : string(model_part_get_texture_name(part, texnamemap)));
		if (!(tlobject > 0))
			mat = matrix_get(matrix_world);
		VarType shape, texobj, blendcolor, alpha;
		texobj = null_;
		blendcolor = null_;
		alpha = null_;
		global::render_blend_prev = null_;
		global::render_alpha_prev = null_;
		for (IntType s = IntType(0); s < ds_list_size(idInt(part, shape_list)); s++)
		{
			shape = DsList(idInt(part, shape_list)).Value(s);
			if (shapehidelist != null_ && ds_list_find_index(shapehidelist, ObjType(obj_model_shape, shape)->description) > -IntType(1))
				continue;
			if (global::render_mode == e_render_mode_CLICK && ObjType(obj_model_shape, shape)->locked > 0)
				continue;
			if ((ObjType(obj_model_shape, shape)->color_alpha * IntType(1000)) == IntType(0))
				continue;
			if (ObjType(obj_model_shape, shape)->move_required)
			{
				if (!(tlobject > 0))
					continue;
				if (!(abs(idVar(tlobject, value).Value(e_value_POS_X)) > ObjType(obj_model_shape, shape)->move_required_array.Value(X_) && abs(idVar(tlobject, value).Value(e_value_POS_Y)) > ObjType(obj_model_shape, shape)->move_required_array.Value(Y_) && abs(idVar(tlobject, value).Value(e_value_POS_Z)) > ObjType(obj_model_shape, shape)->move_required_array.Value(Z_)))
					continue;
			}
			if (tlobject > 0)
			{
				if (s > array_length(VarType::CreateRef(sArr(model_part_shape_tex))) - IntType(1))
					continue;
				render_set_texture(sArr(model_part_shape_tex).Value(s));
				render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), sArr(model_part_shape_material_res).Value(s));
				if (sArr(model_part_shape_tex_material).Value(s) == null_)
				{
					render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
					if (sArr(value_inherit).Value(e_value_EMISSIVE) != global::shader_uniform_emissive)
					{
						global::shader_uniform_emissive = sArr(value_inherit).Value(e_value_EMISSIVE);
						render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
					}
					if (sArr(value_inherit).Value(e_value_METALLIC) != global::shader_uniform_metallic)
					{
						global::shader_uniform_metallic = sArr(value_inherit).Value(e_value_METALLIC);
						render_set_uniform(/*"uMetallic"*/ STR(2584), global::shader_uniform_metallic);
					}
					if (sArr(value_inherit).Value(e_value_ROUGHNESS) != global::shader_uniform_roughness)
					{
						global::shader_uniform_roughness = sArr(value_inherit).Value(e_value_ROUGHNESS);
						render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
					}
				}
				else
				{
					render_set_texture(sArr(model_part_shape_tex_material).Value(s), /*"Material"*/ STR(2582));
					if (global::shader_uniform_metallic != IntType(1))
					{
						global::shader_uniform_metallic = IntType(0);
						render_set_uniform(/*"uMetallic"*/ STR(2584), global::shader_uniform_metallic);
					}
					if (global::shader_uniform_roughness != IntType(0))
					{
						global::shader_uniform_roughness = IntType(0);
						render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
					}
					if (global::shader_uniform_emissive != IntType(1))
					{
						global::shader_uniform_emissive = IntType(0);
						render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
					}
				}
				
				if (sArr(model_part_shape_tex_normal).Value(s) == null_)
					render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
				else
					render_set_texture(sArr(model_part_shape_tex_normal).Value(s), /*"Normal"*/ STR(2583));
				
			}
			else
			{
				VarType shapetexname = parttexname;
				if (ObjType(obj_model_shape, shape)->texture_name != /*""*/ STR(0))
					shapetexname = ObjType(obj_model_shape, shape)->texture_name;
				if (shapetexnamemap != null_)
				{
					VarType maptexname = DsMap(shapetexnamemap).Value(ObjType(obj_model_shape, shape)->description);
					if (!is_undefined(maptexname))
						shapetexname = maptexname;
				}
				withOne (Object, res, self->id)
				{
					texobj = res_get_model_texture(self, shapetexname);
					render_set_texture(texobj);
				}
				
			}
			
			if (self->subAssetId == ID_obj_preview && idVar(sVar(select), pattern_type) != /*""*/ STR(0))
			{
				if (sprite_exists(idInt(sVar(select), pattern_skin)))
					render_set_texture(idInt(sVar(select), pattern_skin));
			}
			if (tlobject != null_)
			{
				if (sprite_exists(idInt(tlobject, pattern_skin)))
				{
					VarType tempres = null_;
					withOne (Object, idVar(tlobject, temp), self->id)
						tempres = temp_get_model_texobj(self, null_);
					
					if (res == tempres)
						if (sprite_exists(idInt(tlobject, pattern_skin)))
							render_set_texture(idInt(tlobject, pattern_skin));
				}
				else
					if (idVar(idVar(tlobject, temp), pattern_type) != /*""*/ STR(0))
					{
						VarType tempres = null_;
						withOne (Object, idVar(tlobject, temp), self->id)
							tempres = temp_get_model_texobj(self, null_);
						
						if (res == tempres)
							if (sprite_exists(idInt(idVar(tlobject, temp), pattern_skin)))
								render_set_texture(idInt(idVar(tlobject, temp), pattern_skin));
					}
				
			}
			if (self->subAssetId == ID_obj_preview && Obj(sVar(select))->subAssetId != ID_obj_resource && idVar(sVar(select), model_name) == /*"armor"*/ STR(781))
			{
				if (ObjType(obj_model_shape, shape)->description == /*"helmet"*/ STR(2042))
				{
					if (sprite_exists(idArr(sVar(select), armor_skin_array).Value(IntType(0))))
						render_set_texture(idArr(sVar(select), armor_skin_array).Value(IntType(0)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"chestplate"*/ STR(2043))
				{
					if (sprite_exists(idArr(sVar(select), armor_skin_array).Value(IntType(1))))
						render_set_texture(idArr(sVar(select), armor_skin_array).Value(IntType(1)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"leggings"*/ STR(2044))
				{
					if (sprite_exists(idArr(sVar(select), armor_skin_array).Value(IntType(2))))
						render_set_texture(idArr(sVar(select), armor_skin_array).Value(IntType(2)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"boots"*/ STR(2045))
				{
					if (sprite_exists(idArr(sVar(select), armor_skin_array).Value(IntType(3))))
						render_set_texture(idArr(sVar(select), armor_skin_array).Value(IntType(3)));
				}
			}
			if (tlobject != null_ && idVar(idVar(tlobject, temp), model_name) == /*"armor"*/ STR(781))
			{
				if (ObjType(obj_model_shape, shape)->description == /*"helmet"*/ STR(2042))
				{
					if (sprite_exists(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(0))))
						render_set_texture(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(0)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"chestplate"*/ STR(2043))
				{
					if (sprite_exists(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(1))))
						render_set_texture(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(1)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"leggings"*/ STR(2044))
				{
					if (sprite_exists(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(2))))
						render_set_texture(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(2)));
				}
				if (ObjType(obj_model_shape, shape)->description == /*"boots"*/ STR(2045))
				{
					if (sprite_exists(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(3))))
						render_set_texture(idArr(idVar(tlobject, temp), armor_skin_array).Value(IntType(3)));
				}
			}
			blendcolor = ObjType(obj_model_shape, shape)->color_blend;
			alpha = ObjType(obj_model_shape, shape)->color_alpha;
			if (colornamemap != null_)
			{
				VarType color = DsMap(colornamemap).Value(ObjType(obj_model_shape, shape)->description);
				if (!is_undefined(color))
					blendcolor = color;
			}
			if (ObjType(obj_model_shape, shape)->use_model_color > 0)
			{
				if (self->subAssetId == ID_obj_preview && idVar(sVar(select), model_use_blend_color) > 0)
					blendcolor = color_multiply(blendcolor, idVar(sVar(select), model_blend_color));
				if (tlobject != null_ && idVar(idVar(tlobject, temp), model_use_blend_color) > 0)
					blendcolor = color_multiply(blendcolor, idVar(idVar(tlobject, temp), model_blend_color));
			}
			if (blendcolor != c_white || alpha != IntType(1))
			{
				blendcolor = color_multiply(global::shader_blend_color, blendcolor);
				alpha = global::shader_blend_alpha * ObjType(obj_model_shape, shape)->color_alpha;
			}
			else
			{
				blendcolor = global::shader_blend_color;
				alpha = global::shader_blend_alpha;
			}
			
			if (blendcolor != global::render_blend_prev || alpha != global::render_alpha_prev)
			{
				render_set_uniform_color(/*"uBlendColor"*/ STR(1959), blendcolor, alpha);
				global::render_blend_prev = blendcolor;
				global::render_alpha_prev = alpha;
			}
			if (ObjType(obj_model_shape, shape)->color_mix_percent > IntType(0))
			{
				if (tlobject != null_)
					render_set_uniform_color(/*"uMixColor"*/ STR(2136), merge_color((IntType)(ObjType(obj_model_shape, shape)->color_mix), (IntType)(sArr(value_inherit).Value(e_value_MIX_COLOR)), sArr(value_inherit).Value(e_value_MIX_PERCENT)), lerp(ObjType(obj_model_shape, shape)->color_mix_percent, sArr(value_inherit).Value(e_value_MIX_PERCENT), sArr(value_inherit).Value(e_value_MIX_PERCENT)));
				else
					render_set_uniform_color(/*"uMixColor"*/ STR(2136), ObjType(obj_model_shape, shape)->color_mix, ObjType(obj_model_shape, shape)->color_mix_percent);
				
			}
			MatrixType rendermatrix;
			if (tlobject > 0)
				rendermatrix = matrix_multiply(ObjType(obj_model_shape, shape)->matrix, sMat(matrix_render));
			else
				rendermatrix = matrix_multiply(ObjType(obj_model_shape, shape)->matrix, mat);
			
			if (ObjType(obj_model_shape, shape)->item_bounce > 0)
			{
				RealType d, t, offz;
				d = IntType(60) * IntType(3);
				t = mod(global::_app->background_time, d) * IntType(2);
				if (t < d)
					offz = ease(/*"easeinoutquad"*/ STR(580), t / d) * IntType(2) - IntType(1);
				else
					offz = IntType(1) - ease(/*"easeinoutquad"*/ STR(580), (t - d) / d) * IntType(2);
				
				rendermatrix = matrix_multiply(rendermatrix, matrix_build(0.0, 0.0, offz, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
			}
			if (ObjType(obj_model_shape, shape)->face_camera > 0)
			{
				RealType rotx, rotz;
				MatrixType rotmat;
				matrix_remove_rotation(VarType::CreateRef(rendermatrix));
				rotx = -point_zdirection(rendermatrix.Real(MAT_X), rendermatrix.Real(MAT_Y), rendermatrix.Real(MAT_Z), global::proj_from.Real(X_), global::proj_from.Real(Y_), global::proj_from.Real(Z_));
				rotz = IntType(90) + point_direction(rendermatrix.Real(MAT_X), rendermatrix.Real(MAT_Y), global::proj_from.Real(X_), global::proj_from.Real(Y_));
				rotmat = matrix_build(0.0, 0.0, 0.0, rotx, 0.0, rotz, 1.0, 1.0, 1.0);
				rendermatrix = matrix_multiply(rotmat, rendermatrix);
			}
			if (shapevbuffermap != null_ && !is_undefined(DsMap(shapevbuffermap).Value(shape)))
				vbuffer_render_matrix(DsMap(shapevbuffermap).Value(shape), rendermatrix);
		}
		if (!(tlobject > 0))
			matrix_set(matrix_world, mat);
		return 0.0;
	}
	
	RealType render_world_particle(ScopeAny self)
	{
		VarType temp, prevcolor, prevalpha;
		temp = idVar(sVar(type), temp);
		prevcolor = global::shader_blend_color;
		prevalpha = global::shader_blend_alpha;
		global::shader_blend_color = color_multiply(prevcolor, sVar(color));
		global::shader_blend_alpha *= sVar(alpha);
		render_set_uniform_color(/*"uBlendColor"*/ STR(1959), global::shader_blend_color, global::shader_blend_alpha);
		if (temp != particle_sheet && temp != particle_template)
		{
			VarType scenery, rep;
			VecType off;
			off = point3D(IntType(0), IntType(0), IntType(0));
			if (idVar(temp, block_repeat_enable) > 0)
				rep = idVar(temp, block_repeat);
			else
				rep = vec3(IntType(1));
			
			switch ((IntType)idVar(temp, type))
			{
				case e_temp_type_MODEL:
				{
					if (idVar(temp, model) == null_)
						break;
					if (idInt(idVar(temp, model), model_format) == e_model_format_BLOCK)
					{
						off = point3D_mul(rep, -block_size_ / 2.0);
						break;
					}
				}
				
				case e_temp_type_CHARACTER:
				case e_temp_type_SPECIAL_BLOCK:
				{
					if (idVar(temp, model_file) != null_)
						off = point3D(IntType(0), IntType(0), -(idVec(idVar(temp, model_file), bounds_parts_end).Real(Z_) - idVec(idVar(temp, model_file), bounds_parts_start).Real(Z_)) / 2.0);
					break;
				}
				
				case e_temp_type_SCENERY:
				{
					scenery = idVar(temp, scenery);
					if (scenery == null_)
						break;
					VecType displaysize = vec3_mul(vec3_mul(idVec(scenery, scenery_size), rep), vec3(block_size_));
					off = vec3_mul(displaysize, vec3(-0.5));
					break;
				}
				
				case e_temp_type_BLOCK:
				{
					off = point3D_mul(rep, -block_size_ / 2.0);
					break;
				}
				
				case e_temp_type_ITEM:
				{
					off = point3D(-IntType(8), -0.5, IntType(0));
					break;
				}
				
			}
			
			matrix_set(matrix_world, matrix_multiply(matrix_create(off, vec3(IntType(0)), vec3(IntType(1))), matrix_create(sVar(pos), sVar(rot), vec3(sVar(scale)))));
			switch ((IntType)idVar(temp, type))
			{
				case e_temp_type_MODEL:
				{
					if (idVar(temp, model) == null_)
						break;
					if (idInt(idVar(temp, model), model_format) == e_model_format_BLOCK)
					{
						VarType res;
						if (idVar(temp, model_tex) != null_ && idInt(idVar(temp, model_tex), block_sheet_texture) != null_)
							res = idVar(temp, model_tex);
						else
							res = global::mc_res;
						
						render_world_block(idVar(idVar(temp, model), block_vbuffer), res);
						withOne (Object, temp, self->id)
							res = temp_get_model_texobj(self, null_);
						
						render_world_block_map(idInt(idVar(temp, model), model_block_map), res);
						break;
					}
				}
				
				case e_temp_type_CHARACTER:
				case e_temp_type_SPECIAL_BLOCK:
				{
					if (idVar(temp, model_file) == null_)
						break;
					VarType res;
					withOne (Object, temp, self->id)
						res = temp_get_model_texobj(self, null_);
					
					render_world_model_file_parts(self, idVar(temp, model_file), res, idInt(temp, model_texture_name_map), idInt(temp, model_hide_list), idInt(temp, model_shape_vbuffer_map), idInt(temp, model_color_map), idInt(temp, model_shape_hide_list), idInt(temp, model_shape_texture_name_map));
					break;
				}
				
				case e_temp_type_SCENERY:
				{
					if (scenery != null_)
						render_world_scenery(self, scenery, ArrType::From({ idVar(temp, block_tex), idVar(temp, block_tex_material), idVar(temp, block_tex_normal) }), idVar(temp, block_repeat_enable), idVar(temp, block_repeat));
					break;
				}
				
				case e_temp_type_ITEM:
				{
					render_world_item(idVar(temp, item_vbuffer), idVar(temp, item_3d), idVar(temp, item_face_camera), idVar(temp, item_bounce), idVar(temp, item_spin), ArrType::From({ idVar(temp, item_tex), null_, null_ }));
					break;
				}
				
				case e_temp_type_BLOCK:
				{
					render_world_block(idVar(temp, block_vbuffer), idVar(temp, block_tex), true, rep);
					break;
				}
				
				case e_temp_type_BODYPART:
				{
					if (idVar(temp, model_part) == null_ || idVar(temp, model_file) == null_)
						break;
					VarType res = idVar(temp, model_tex);
					if (!res_is_ready(res))
						res = global::mc_res;
					render_world_model_part(self, idVar(temp, model_part), res, idInt(temp, model_texture_name_map), idInt(temp, model_shape_vbuffer_map), idInt(temp, model_color_map), idInt(temp, model_shape_hide_list), idInt(temp, model_shape_texture_name_map), null_);
					break;
				}
				
				case e_temp_type_TEXT:
				{
					render_world_text(idVar(sVar(type), text_vbuffer), idVar(sVar(type), text_texture), idVar(temp, text_face_camera), idVar(temp, text_font), null_);
					break;
				}
				
				default:
				{
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_shape_tex(temp_get_shape_texobj(self, null_));
					
					render_world_shape(idVar(temp, type), idVar(temp, shape_vbuffer), idVar(temp, shape_face_camera), ArrType::From({ tex, ID_spr_default_material, ID_spr_default_normal }));
					break;
				}
			}
			
		}
		else
		{
			if (idVar(sVar(type), temp) == particle_sheet)
			{
				VarType res = idVar(sVar(type), sprite_tex);
				if (!res_is_ready(res))
					res = global::mc_res;
				render_set_texture(idArr(res, particles_texture).Value(idVar(sVar(type), sprite_tex_image)));
			}
			else
			{
				IntType template_ = DsMap(global::particle_template_map).Value(idVar(sVar(type), sprite_template));
				VarType res = idVar(sVar(type), sprite_template_tex);
				if (!res_is_ready(res))
					res = global::mc_res;
				IntType tex = DsMap(idInt(res, particle_texture_atlas_map)).Value(ObjType(obj_particle_template, template_)->name);
				if (tex == VarType())
				{
					global::shader_blend_color = prevcolor;
					global::shader_blend_alpha = prevalpha;
					return IntType(0);
				}
				else
				{
					render_set_texture(tex);
					render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
					render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
					render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
				}
				
			}
			
			RealType xyang, zang, m;
			xyang = IntType(90) + point_direction(sVar(pos).Value(X_), sVar(pos).Value(Y_), global::proj_from.Real(X_), global::proj_from.Real(Y_));
			zang = -point_zdirection(sVar(pos).Value(X_), sVar(pos).Value(Y_), sVar(pos).Value(Z_), global::proj_from.Real(X_), global::proj_from.Real(Y_), global::proj_from.Real(Z_));
			if (idVar(sVar(type), temp) == particle_sheet)
				m = mod(max({ IntType(0), sReal(frame) - min({ idVar(sVar(type), sprite_frame_start), idVar(sVar(type), sprite_frame_end) }) }), idVar(sVar(type), sprite_vbuffer_amount));
			else
				m = mod(max({ IntType(0), sReal(frame) }), idVar(sVar(type), sprite_vbuffer_amount));
			
			matrix_set(matrix_world, matrix_create(sVar(pos), vec3(zang, sVar(sprite_angle), xyang), vec3(sVar(scale))));
			vbuffer_render({ idArr(sVar(type), sprite_vbuffer).Value(m) });
		}
		
		global::shader_blend_color = prevcolor;
		global::shader_blend_alpha = prevalpha;
		return 0.0;
	}
	
	RealType render_world_scenery(ScopeAny self, VarType scenery, VarType res, VarType repeatenable, VarType rep)
	{
		if (!idBool(scenery, ready))
			return IntType(0);
		if (repeatenable > 0)
		{
			MatrixType mat;
			VecType reppos;
			ArrType defrot, defscale;
			mat = matrix_get(matrix_world);
			reppos = ArrType::From({ IntType(0), IntType(0), IntType(0) });
			defrot = ArrType::From({ IntType(0), IntType(0), IntType(0) });
			defscale = ArrType::From({ IntType(1), IntType(1), IntType(1) });
			for (reppos.Real(X_) = IntType(0); reppos.Real(X_) < rep.Value(X_); reppos.Real(X_)++)
			{
				for (reppos.Real(Y_) = IntType(0); reppos.Real(Y_) < rep.Value(Y_); reppos.Real(Y_)++)
				{
					for (reppos.Real(Z_) = IntType(0); reppos.Real(Z_) < rep.Value(Z_); reppos.Real(Z_)++)
					{
						VecType pos = vec3_mul(idVec(scenery, scenery_size), point3D_mul(reppos, block_size_));
						matrix_set(matrix_world, matrix_multiply(matrix_create(pos, defrot, defscale), mat));
						render_world_block(idVar(scenery, block_vbuffer), res, true, idVec(scenery, scenery_size));
						if (Obj(self->id)->subAssetId != ID_obj_preview)
						{
							if (sArr(value_inherit).Value(e_value_ROUGHNESS) != global::shader_uniform_roughness)
							{
								global::shader_uniform_roughness = sArr(value_inherit).Value(e_value_ROUGHNESS);
								render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
							}
							if (sArr(value_inherit).Value(e_value_METALLIC) != global::shader_uniform_metallic)
							{
								global::shader_uniform_metallic = sArr(value_inherit).Value(e_value_METALLIC);
								render_set_uniform(/*"uMetallic"*/ STR(2584), global::shader_uniform_metallic);
							}
							if (sArr(value_inherit).Value(e_value_EMISSIVE) != global::shader_uniform_emissive)
							{
								global::shader_uniform_emissive = sArr(value_inherit).Value(e_value_EMISSIVE);
								render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
							}
						}
					}
				}
			}
		}
		else
			render_world_block(idVar(scenery, block_vbuffer), res, true, idVec(scenery, scenery_size));
		
		return 0.0;
	}
	
	void render_world_shape(VarType type, VarType vbuf, VarType facecamera, ArrType tex)
	{
		if (type == e_temp_type_SURFACE && facecamera > 0)
		{
			MatrixType mat;
			RealType rotx, rotz;
			mat = matrix_get(matrix_world);
			rotx = -point_zdirection(mat.Real(MAT_X), mat.Real(MAT_Y), mat.Real(MAT_Z), global::proj_from.Real(X_), global::proj_from.Real(Y_), global::proj_from.Real(Z_));
			rotz = IntType(90) + point_direction(mat.Real(MAT_X), mat.Real(MAT_Y), global::proj_from.Real(X_), global::proj_from.Real(Y_));
			matrix_world_multiply_pre(matrix_build(0.0, 0.0, 0.0, rotx, 0.0, rotz, 1.0, 1.0, 1.0));
		}
		render_set_texture(tex.Value(IntType(0)));
		render_set_texture(tex.Value(IntType(1)), /*"Material"*/ STR(2582));
		render_set_texture(tex.Value(IntType(2)), /*"Normal"*/ STR(2583));
		vbuffer_render({ vbuf });
	}
	
	RealType render_world_sky()
	{
		if (!(global::render_background > 0))
			return IntType(0);
		VarType hashprev = global::render_alpha_hash;
		global::render_alpha_hash = false;
		render_set_uniform_int(/*"uAlphaHash"*/ STR(1976), global::render_alpha_hash);
		global::render_shader_obj = DsMap(global::shader_map).Value(ID_shader_blend);
		withOne (Object, global::render_shader_obj, global::_app->id)
			shader_use(self);
		
		RealType dis = global::_app->project_render_distance * 0.75;
		gpu_set_zwriteenable(false);
		if (global::_app->background_image_show > 0 && global::_app->background_image != null_ && global::_app->background_image_type != /*"image"*/ STR(94))
		{
			VarType vbuf;
			if (global::_app->background_image_type == /*"sphere"*/ STR(554))
			{
				if (!(global::_app->background_image_sphere_vbuffer > 0))
					global::_app->background_image_sphere_vbuffer = vbuffer_create_sphere(IntType(1), point2D(IntType(1), IntType(0)), point2D(IntType(0), IntType(1)), IntType(32), true);
				vbuf = global::_app->background_image_sphere_vbuffer;
			}
			else
				if (global::_app->background_image_type == /*"box"*/ STR(1367))
				{
					if (global::_app->background_image_box_mapped > 0)
					{
						if (!(global::_app->background_image_cube_mapped_vbuffer > 0))
							global::_app->background_image_cube_mapped_vbuffer = vbuffer_create_cube(IntType(1), point2D(IntType(0), IntType(0)), point2D(IntType(1), IntType(1)), -IntType(1), IntType(1), true, true);
						vbuf = global::_app->background_image_cube_mapped_vbuffer;
					}
					else
					{
						if (!(global::_app->background_image_cube_vbuffer > 0))
							global::_app->background_image_cube_vbuffer = vbuffer_create_cube(IntType(1), point2D(IntType(1), IntType(0)), point2D(IntType(0), IntType(1)), IntType(1), IntType(1), true, false);
						vbuf = global::_app->background_image_cube_vbuffer;
					}
					
				}
			
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), c_white, IntType(1));
			render_set_texture(idVar(global::_app->background_image, texture));
			vbuffer_render({ vbuf, global::cam_from, point3D(IntType(0), IntType(0), global::_app->background_image_rotation), vec3(dis) });
		}
		if (global::_app->background_fog_show > 0 && global::_app->background_fog_sky > 0)
		{
			if (global::_app->background_fog_vbuffer == null_)
				global::_app->background_fog_vbuffer = vbuffer_create_sphere(IntType(1), point2D(IntType(0), IntType(0)), point2D(IntType(1), IntType(1)), IntType(16), true);
			gpu_set_texrepeat(false);
			global::shader_texture_filter_linear = false;
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), global::_app->background_fog_color_final, IntType(1));
			render_set_texture(global::_app->background_fog_texture);
			vbuffer_render({ global::_app->background_fog_vbuffer, global::cam_from, vec3(IntType(0)), vec3(dis, dis, dis * (((RealType)global::_app->background_fog_height / 1000.0) + (((RealType)global::_app->background_fog_height / 1000.0) * max({ global::_app->background_sunrise_alpha, global::_app->background_sunset_alpha })))) });
			gpu_set_texrepeat(true);
		}
		if (!(global::_app->background_image_show > 0))
		{
			MatrixType skymat = matrix_build(global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_from.Real(Z_), -global::_app->background_sky_time, 0.0, global::_app->background_sky_rotation, 1.0, 1.0, 1.0);
			RealType vis;
			if (global::_app->background_night_alpha > IntType(0))
			{
				if (global::_app->background_sky_stars_vbuffer == null_)
					global::_app->background_sky_stars_vbuffer = vbuffer_create_cube(0.8, point2D(IntType(0), IntType(0)), point2D(IntType(2), IntType(2)), false, false, true, false);
				render_set_uniform_color(/*"uBlendColor"*/ STR(1959), c_white, 0.4 * global::_app->background_night_alpha);
				render_set_texture(global::_app->background_sky_stars_texture);
				vbuffer_render_matrix(global::_app->background_sky_stars_vbuffer, matrix_multiply(matrix_build(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, dis, dis, dis), skymat));
			}
			gpu_set_blendmode(bm_add);
			vis = percent(vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), IntType(1))), -0.15, IntType(0));
			if (global::_app->background_sky_sun_moon_vbuffer == null_)
				global::_app->background_sky_sun_moon_vbuffer = vbuffer_create_surface(IntType(1), point2D(IntType(0), IntType(0)), point2D(IntType(1), IntType(1)), false);
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), c_white, vis);
			if (idVar(global::_app->background_sky_sun_tex, type) == e_res_type_PACK)
				render_set_texture(idVar(global::_app->background_sky_sun_tex, sun_texture));
			else
				render_set_texture(idVar(global::_app->background_sky_sun_tex, texture));
			
			RealType sca = (dis / 15000.0) * IntType(1850);
			vbuffer_render_matrix(global::_app->background_sky_sun_moon_vbuffer, matrix_multiply(matrix_build(0.0, 0.0, min({ dis * 0.7, max({ IntType(0), (dis * 0.7) / global::_app->background_sky_sun_scale }) }), 90.0, 0.0, 0.0 + global::_app->background_sky_sun_angle, sca * min({ IntType(1), global::_app->background_sky_sun_scale }), sca * min({ IntType(1), global::_app->background_sky_sun_scale }), sca), skymat));
			vis = percent(vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), -IntType(1))), -0.15, IntType(0));
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), c_white, vis);
			if (idVar(global::_app->background_sky_moon_tex, type) == e_res_type_PACK && idBool(global::_app->background_sky_moon_tex, ready))
			{
				VarType phase = global::_app->background_sky_moon_phase;
				render_set_texture(idArr(global::_app->background_sky_moon_tex, moon_texture).Value(phase));
			}
			else
				render_set_texture(idVar(global::_app->background_sky_moon_tex, texture));
			
			vbuffer_render_matrix(global::_app->background_sky_sun_moon_vbuffer, matrix_multiply(matrix_build(0.0, 0.0, max({ -dis * 0.7, min({ IntType(0), (-dis * 0.7) / global::_app->background_sky_moon_scale }) }), -90.0, 0.0, IntType(0) - global::_app->background_sky_moon_angle, sca * min({ IntType(1), global::_app->background_sky_moon_scale }), sca * min({ IntType(1), global::_app->background_sky_moon_scale }), sca), skymat));
			gpu_set_blendmode(bm_normal);
		}
		withOne (Object, global::render_shader_obj, global::_app->id)
			shader_clear();
		
		gpu_set_zwriteenable(true);
		global::render_alpha_hash = hashprev;
		render_set_uniform_int(/*"uAlphaHash"*/ STR(1976), global::render_alpha_hash);
		return 0.0;
	}
	
	RealType render_world_sky_clouds(ScopeAny self)
	{
		if (!(sVar(background_sky_clouds_show) > 0) || !(global::render_background > 0) || global::render_mode == e_render_mode_DEPTH_NO_SKY)
			return IntType(0);
		if (global::render_mode == e_render_mode_SCENE_TEST || global::render_mode == e_render_mode_AO_MASK)
			render_set_uniform_color(/*"uReplaceColor"*/ STR(2588), c_black, IntType(1));
		VarType res = sVar(background_sky_clouds_tex);
		if (!res_is_ready(res))
			res = global::mc_res;
		render_set_uniform_int(/*"uIsSky"*/ STR(2592), IntType(1));
		render_set_uniform_color(/*"uBlendColor"*/ STR(1959), sInt(background_sky_clouds_final), sReal(background_clouds_alpha));
		render_set_uniform_color(/*"uGlowColor"*/ STR(2590), c_black, IntType(1));
		render_set_uniform_int(/*"uGlowTexture"*/ STR(2591), IntType(0));
		render_set_uniform(/*"uMetallic"*/ STR(2584), IntType(0));
		render_set_uniform(/*"uRoughness"*/ STR(2585), IntType(1));
		render_set_uniform(/*"uEmissive"*/ STR(2586), IntType(0));
		render_set_uniform(/*"uLightSpecular"*/ STR(2593), IntType(0));
		if (idVar(res, type) == e_res_type_PACK)
			render_set_texture(idVar(res, clouds_texture));
		else
			render_set_texture(idVar(res, texture));
		
		render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
		render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
		if (!(sVar(background_fog_show) > 0) || !(sVar(background_fog_sky) > 0))
			render_set_uniform(/*"uFogShow"*/ STR(1968), IntType(0));
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(background_sky_clouds_vbuffer_pos))); i++)
			vbuffer_render({ sVar(background_sky_clouds_vbuffer), sArr(background_sky_clouds_vbuffer_pos).Value(i) });
		render_set_uniform_int(/*"uIsSky"*/ STR(2592), IntType(0));
		render_set_uniform(/*"uLightSpecular"*/ STR(2593), global::render_light_specular_strength);
		if (!(sVar(background_fog_show) > 0) || !(sVar(background_fog_sky) > 0))
			render_set_uniform(/*"uFogShow"*/ STR(1968), global::_app->background_fog_show);
		return 0.0;
	}
	
	void render_world_start(VarType zfar)
	{
		if (zfar != VarType())
			global::cam_far = min({ global::cam_far_prev, global::cam_near + zfar });
		else
			global::cam_far = global::cam_far_prev;
		
		gpu_set_ztestenable(true);
		render_set_projection(global::cam_from, global::cam_to, global::cam_up, global::cam_fov, global::render_ratio, global::cam_near, global::cam_far);
		global::proj_from = global::cam_from;
		global::render_proj_from = global::proj_from;
		global::proj_matrix = matrix_get(matrix_projection);
		global::view_matrix = matrix_get(matrix_view);
		global::view_proj_matrix = matrix_multiply(global::view_matrix, global::proj_matrix);
		global::proj_depth_near = global::cam_near;
		global::proj_depth_far = global::cam_far;
	}
	
	void render_world_start_light(VarType from, VecType to, VecType offset, IntType tl, VecType up)
	{
		global::render_light_from = from;
		global::render_light_to = to;
		global::render_light_offset = offset;
		global::render_light_near = IntType(1);
		global::render_light_far = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_RANGE);
		global::render_light_color = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_COLOR);
		global::render_light_strength = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_STRENGTH);
		global::render_light_specular_strength = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_SPECULAR_STRENGTH);
		global::render_light_size = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_SIZE);
		global::render_light_fade_size = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_FADE_SIZE);
		if (ObjType(obj_timeline, tl)->type == e_tl_type_POINT_LIGHT)
			global::render_light_fov = IntType(90);
		else
			if (ObjType(obj_timeline, tl)->type == e_tl_type_SPOT_LIGHT)
			{
				global::render_light_fov = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_SPOT_RADIUS);
				global::render_light_spot_sharpness = ObjType(obj_timeline, tl)->value.Value(e_value_LIGHT_SPOT_SHARPNESS);
				if (ObjType(obj_timeline, tl)->value.Value(e_value_TEXTURE_OBJ) != null_)
					global::render_gobo_texture = idVar(ObjType(obj_timeline, tl)->value.Value(e_value_TEXTURE_OBJ), texture);
				else
					global::render_gobo_texture = ID_spr_shape;
				
			}
		
		gpu_set_ztestenable(true);
		VecType spot_up;
		VarType xx, yy, zz;
		spot_up = vec3(IntType(0), IntType(0), IntType(1));
		if (ObjType(obj_timeline, tl)->type == e_tl_type_SPOT_LIGHT)
		{
			VecType spot_up;
			RealType xx, yy, zz;
			spot_up = vec3(IntType(0), IntType(0), IntType(0));
			xx = up.Real(X_) - global::render_light_from.Value(X_);
			yy = up.Real(Y_) - global::render_light_from.Value(Y_);
			zz = up.Real(Z_) - global::render_light_from.Value(Z_);
			spot_up.Real(X_) = xx;
			spot_up.Real(Y_) = yy;
			spot_up.Real(Z_) = zz;
			render_set_projection(global::render_light_from, global::render_light_to, spot_up, global::render_light_fov, IntType(1), IntType(1), global::render_light_far);
			global::spot_proj_matrix = matrix_get(matrix_projection);
			global::spot_view_matrix = matrix_get(matrix_view);
			global::spot_view_proj_matrix = matrix_multiply(global::spot_view_matrix, global::spot_proj_matrix);
			global::render_spot_matrix = global::spot_view_proj_matrix;
			VecType light_from = point3D_add(global::render_light_from, global::render_light_offset);
			up = point3D_add(up, global::render_light_offset);
			xx = up.Real(X_) - light_from.Real(X_);
			yy = up.Real(Y_) - light_from.Real(Y_);
			zz = up.Real(Z_) - light_from.Real(Z_);
			spot_up.Real(X_) = xx;
			spot_up.Real(Y_) = yy;
			spot_up.Real(Z_) = zz;
		}
		render_set_projection(point3D_add(global::render_light_from, global::render_light_offset), point3D_add(global::render_light_to, global::render_light_offset), spot_up, global::render_light_fov, IntType(1), IntType(1), global::render_light_far);
		global::render_proj_from = point3D_add(global::render_light_from, global::render_light_offset);
		global::render_shadow_from = global::render_proj_from;
		global::light_proj_matrix = matrix_get(matrix_projection);
		global::light_view_matrix = matrix_get(matrix_view);
		global::light_view_proj_matrix = matrix_multiply(global::light_view_matrix, global::light_proj_matrix);
		global::proj_depth_near = global::render_light_near;
		global::proj_depth_far = global::render_light_far;
		global::render_shadow_matrix = global::light_view_proj_matrix;
	}
	
	void render_world_start_sun(IntType cascade)
	{
		global::render_sun_near = ObjType(frustum, global::render_cascades.Value(cascade))->near_;
		global::render_sun_far = ObjType(frustum, global::render_cascades.Value(cascade))->far_;
		global::render_light_fov = IntType(45);
		global::render_light_color = global::_app->background_sunlight_color_final;
		global::render_light_strength = global::_app->background_sunlight_strength;
		global::render_light_specular_strength = IntType(1);
		gpu_set_ztestenable(true);
		camera_set_view_mat(global::cam_render, ObjType(frustum, global::render_cascades.Value(cascade))->matView);
		camera_set_proj_mat(global::cam_render, ObjType(frustum, global::render_cascades.Value(cascade))->matProj);
		camera_apply(global::cam_render);
		update_frustum();
		global::light_proj_matrix = matrix_get(matrix_projection);
		global::light_view_matrix = matrix_get(matrix_view);
		global::light_view_proj_matrix = matrix_multiply(global::light_view_matrix, global::light_proj_matrix);
		global::render_sun_matrix = global::light_view_proj_matrix;
		global::render_sun_direction = global::_app->background_sun_direction;
	}
	
	void render_world_text(VarType vbuffer, VarType tex, VarType facecamera, VarType res, VarType outline)
	{
		if (facecamera > 0)
		{
			MatrixType mat;
			RealType rotx, rotz;
			mat = matrix_get(matrix_world);
			rotx = -point_zdirection(mat.Real(MAT_X), mat.Real(MAT_Y), mat.Real(MAT_Z), global::proj_from.Real(X_), global::proj_from.Real(Y_), global::proj_from.Real(Z_));
			rotz = IntType(90) + point_direction(mat.Real(MAT_X), mat.Real(MAT_Y), global::proj_from.Real(X_), global::proj_from.Real(Y_));
			matrix_world_multiply_pre(matrix_build(0.0, 0.0, 0.0, rotx, 0.0, rotz, 1.0, 1.0, 1.0));
		}
		if (!idBool(res, font_minecraft))
		{
			RealType sca = 8.0 / 48.0;
			matrix_world_multiply_pre(matrix_build(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, sca, 1.0, sca));
		}
		render_set_texture(tex.Value(IntType(0)));
		vbuffer_render({ vbuffer.Value(IntType(0)) });
		if (outline != null_)
		{
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), outline, global::shader_blend_alpha);
			render_set_texture(tex.Value(IntType(1)));
			vbuffer_render({ vbuffer.Value(IntType(1)) });
			render_set_uniform_color(/*"uBlendColor"*/ STR(1959), global::shader_blend_color, global::shader_blend_alpha);
		}
	}
	
}
