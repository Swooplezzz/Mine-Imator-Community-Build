/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 01:25:00 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void debug_ds_list(VarType argument0)
	{
		IntType list = argument0;
		debug({ /*"Elements"*/ STR(1057), ds_list_size((IntType)(list)) });
		for (IntType i = IntType(0); i < ds_list_size(list); i++)
			debug({ /*"    "*/ STR(1058) + string(DsList(list).Value(i)) });
	}
	
	void debug_ds_map(IntType map)
	{
		IntType keylist;
		VarType key;
		keylist = ds_list_create();
		key = ds_map_find_first((IntType)(map));
		while (!is_undefined(key))
		{
			ds_list_add({ keylist, key });
			key = ds_map_find_next((IntType)(map), key);
		}
		
		ds_list_sort(keylist, true);
		debug({ /*"Elements"*/ STR(1057), ds_list_size(keylist) });
		for (IntType i = IntType(0); i < ds_list_size(keylist); i++)
			debug({ /*"   "*/ STR(1059) + string(DsList(keylist).Value(i)) + /*" => "*/ STR(1060) + string(DsMap(map).Value(DsList(keylist).Value(i))) });
		ds_list_destroy(keylist);
	}
	
	RealType debug_info_draw(ScopeAny self)
	{
		if (!sBool(debug_info))
			return IntType(0);
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = sReal(window_height);
		StringType str = /*""*/ STR(0);
		str += /*"Performance: \n"*/ STR(1061);
		str += /*"======================================= \n"*/ STR(1062);
		str += /*"FPS: "*/ STR(1063) + string(gmlGlobal::fps) + /*" \n"*/ STR(1064);
		str += /*"FPS real: "*/ STR(1065) + string(gmlGlobal::fps_real) + /*" \n"*/ STR(1064);
		str += /*"delta: "*/ STR(1066) + string(global::delta) + /*" \n"*/ STR(1064);
		str += /*"\n"*/ STR(710);
		str += /*"Window: \n"*/ STR(1067);
		str += /*"======================================= \n"*/ STR(1062);
		str += /*"DPI: "*/ STR(1068) + string(display_get_dpi_x()) + /*","*/ STR(1069) + string(display_get_dpi_y()) + /*" \n"*/ STR(1064);
		str += /*"Size: "*/ STR(1070) + string(sReal(window_width)) + /*","*/ STR(1069) + string(sReal(window_height)) + /*" \n"*/ STR(1064);
		str += /*"window_busy: "*/ STR(1071) + string(sVar(window_busy)) + /*" \n"*/ STR(1064);
		str += /*"window_focus: "*/ STR(1072) + string(sVar(window_focus)) + /*" \n"*/ STR(1064);
		str += /*"current_step: "*/ STR(1073) + string(global::current_step) + /*" \n"*/ STR(1064);
		str += /*"\n"*/ STR(710);
		StringType nodox_userprofile = string_replace(string(environment_get_variable(/*"USERPROFILE"*/ STR(1074))), string(environment_get_variable(/*"USERNAME"*/ STR(1075))), /*"?????"*/ STR(1076));
		StringType nodox_project_file = string(string_replace(sVar(project_file), string(environment_get_variable(/*"USERPROFILE"*/ STR(1074))), nodox_userprofile));
		StringType nodox_project_folder = string(string_replace(sStr(project_folder), string(environment_get_variable(/*"USERPROFILE"*/ STR(1074))), nodox_userprofile));
		StringType nodox_working_directory = string(string_replace(gmlGlobal::working_directory, string(environment_get_variable(/*"USERPROFILE"*/ STR(1074))), nodox_userprofile));
		StringType nodox_file_directory = string(string_replace(file_directory, string(environment_get_variable(/*"USERPROFILE"*/ STR(1074))), nodox_userprofile));
		str += /*"Project: \n"*/ STR(1077);
		str += /*"======================================= \n"*/ STR(1062);
		str += /*"project_file: "*/ STR(1078) + string_replace(string(nodox_project_file), /*"\\"*/ STR(177), /*"/"*/ STR(20)) + /*" \n"*/ STR(1064);
		str += /*"project_folder: "*/ STR(1079) + string_replace(string(nodox_project_folder), /*"\\"*/ STR(177), /*"/"*/ STR(20)) + /*" \n"*/ STR(1064);
		str += /*"working_directory: "*/ STR(1080) + string_replace(string(nodox_working_directory), /*"\\"*/ STR(177), /*"/"*/ STR(20)) + /*" \n"*/ STR(1064);
		str += /*"file_directory: "*/ STR(1081) + string_replace(string(nodox_file_directory), /*"\\"*/ STR(177), /*"/"*/ STR(20)) + /*" \n"*/ STR(1064);
		str += /*"\n"*/ STR(710);
		str += /*"instance_count: "*/ STR(1082) + string(gmlGlobal::instance_count) + /*" \n"*/ STR(1064);
		str += /*"render_world() calls: "*/ STR(1083) + string(global::render_world_count) + /*" \n"*/ STR(1064);
		str += /*"Vertex buffer triangles: "*/ STR(1084) + string(get_vertex_buffer_triangles()) + /*" \n"*/ STR(1064);
		str += /*"Vertex buffer render calls: "*/ STR(1085) + string(get_vertex_buffer_render_calls()) + /*" \n"*/ STR(1064);
		str += /*"Primitive lines: "*/ STR(1086) + string(get_primitive_lines()) + /*" \n"*/ STR(1064);
		str += /*"Primitive triangles: "*/ STR(1087) + string(get_primitive_triangles()) + /*" \n"*/ STR(1064);
		str += /*"Primitive render calls: "*/ STR(1088) + string(get_primitive_render_calls()) + /*" \n"*/ STR(1064);
		str += /*"\n"*/ STR(710);
		str += /*"[F12 to disable]"*/ STR(1089);
		IntType w = string_width_font(str, sInt(font_label)) + IntType(16);
		IntType h = string_height_font(str, sInt(font_label)) + IntType(16);
		draw_box(sReal(window_width) - w - IntType(8), sReal(window_height) - h - IntType(8), w, h, false, c_black, .75);
		draw_label(self, { str, sReal(window_width) - w, sReal(window_height) - IntType(16), fa_left, fa_bottom, c_white, IntType(1), sInt(font_label) });
		return 0.0;
	}
	
	void debug_timer_start()
	{
		global::debug_timer = current_time();
	}
	
	void debug_timer_stop(StringType str)
	{
		debug({ str, string(current_time() - global::debug_timer) + /*" msec"*/ STR(1090) });
	}
	
	StringType dec_to_hex(RealType dec, RealType len)
	{
		if (!(dec > 0))
			return /*"0"*/ STR(1091);
		StringType h, hex, hi, lo;
		RealType byte;
		h = /*"0123456789ABCDEF"*/ STR(1052);
		hex = /*""*/ STR(0);
		while (dec > 0)
		{
			byte = (IntType)dec & (IntType)IntType(255);
			hi = string_char_at(h, (IntType)((IntType)(byte / IntType(16)) + IntType(1)));
			lo = string_char_at(h, (IntType)(mod(byte, IntType(16)) + IntType(1)));
			hex = hi + lo + hex;
			dec = (IntType)dec >> (IntType)IntType(8);
		}
		
		for (IntType _it = 0, _it_max = max({ IntType(0), len - string_length(hex) }); _it < _it_max; _it++)
			hex = /*"0"*/ STR(1091) + hex;
		return hex;
	}
	
	VarType directory_create_lib(StringType dir)
	{
		return lib_directory_create(dir);
	}
	
	VarType directory_delete_lib(StringType dir)
	{
		return lib_directory_delete(dir);
	}
	
	RealType directory_exists_lib(VarType dir)
	{
		if (dir == /*""*/ STR(0))
			return IntType(0);
		return lib_directory_exists(dir);
	}
	
	StringType directory_name(StringType dir)
	{
		return filename_name(filename_dir(dir + /*".ext"*/ STR(1092))) + /*"/"*/ STR(20);
	}
	
	StringType dir_get_string(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return /*"east"*/ STR(899);
			}
			case e_dir_WEST:
			{
				return /*"west"*/ STR(900);
			}
			case e_dir_SOUTH:
			{
				return /*"south"*/ STR(901);
			}
			case e_dir_NORTH:
			{
				return /*"north"*/ STR(902);
			}
			case e_dir_UP:
			{
				return /*"up"*/ STR(918);
			}
			case e_dir_DOWN:
			{
				return /*"down"*/ STR(919);
			}
		}
		
		return /*""*/ STR(0);
	}
	
	VecType dir_get_vec3(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return vec3(IntType(1), IntType(0), IntType(0));
			}
			case e_dir_WEST:
			{
				return vec3(-IntType(1), IntType(0), IntType(0));
			}
			case e_dir_SOUTH:
			{
				return vec3(IntType(0), IntType(1), IntType(0));
			}
			case e_dir_NORTH:
			{
				return vec3(IntType(0), -IntType(1), IntType(0));
			}
			case e_dir_UP:
			{
				return vec3(IntType(0), IntType(0), IntType(1));
			}
			case e_dir_DOWN:
			{
				return vec3(IntType(0), IntType(0), -IntType(1));
			}
		}
		
		return vec3(IntType(0), IntType(0), IntType(0));
	}
	
	void draw_bezier_curve(ArrType p1, ArrType p2, ArrType p3, ArrType p4, RealType w, VarType color, RealType alpha)
	{
		IntType prevcolor;
		RealType prevalpha;
		VecType p, prevp;
		prevcolor = draw_get_color();
		prevalpha = draw_get_alpha();
		draw_set_color((IntType)(color));
		draw_set_alpha(alpha);
		p = ArrType::From({ IntType(0), IntType(0) });
		for (RealType i = IntType(0); i < IntType(64); i++)
		{
			prevp = p;
			p = bezier_curve_cubic(p1, p2, p3, p4, i / 64.0);
			if (i == IntType(0))
				continue;
			draw_image({ ID_spr_handle, IntType(0), prevp.Real(X_), prevp.Real(Y_), .75, point_distance(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)), color, alpha, point_direction(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)) - IntType(90) });
		}
		draw_set_color(prevcolor);
		draw_set_alpha(prevalpha);
	}
	
	void draw_bezier_graph(ScopeAny self, VarType xx, VarType yy, RealType wid, RealType hei, ArrType points, BoolType sync)
	{
		RealType vertical, boxw, boxh;
		VarType boxx, boxy;
		BoolType update;
		vertical = (hei > wid);
		boxx = xx;
		boxy = yy + hei / 6.0;
		boxw = wid;
		boxh = hei / 1.5;
		update = false;
		draw_box(xx, yy, wid, hei, false, global::c_level_bottom, IntType(1));
		draw_box(boxx, boxy, boxw, boxh, false, global::c_level_top, IntType(1));
		draw_outline(xx, yy, wid, hei, IntType(1), global::c_border, global::a_border, true);
		VarType easeinxpos, easeoutxpos, colorin, colorout;
		RealType easeinypos, easeoutypos;
		easeinxpos = boxx + boxw * points.Value(IntType(0));
		easeinypos = (boxy + boxh) - boxh * points.Value(IntType(1));
		easeoutxpos = boxx + boxw * points.Value(IntType(2));
		easeoutypos = (boxy + boxh) - boxh * points.Value(IntType(3));
		gpu_set_cullmode((IntType)(false));
		clip_begin(xx, yy, wid, hei);
		gpu_set_tex_filter(true);
		draw_bezier_curve(ArrType::From({ boxx, boxy + boxh }), ArrType::From({ easeinxpos, easeinypos }), ArrType::From({ easeoutxpos, easeoutypos }), ArrType::From({ boxx + boxw, boxy }), IntType(2), global::c_text_secondary, global::a_text_secondary);
		if (global::tl_edit != null_)
			draw_box(xx + wid * idReal(global::tl_edit, keyframe_progress), yy, IntType(2), hei, false, c_red, .30);
		draw_image({ ID_spr_handle, IntType(0), boxx, boxy + boxh, .75, point_distance(boxx, boxy + boxh, easeinxpos, easeinypos), global::c_accent, IntType(1), point_direction(boxx, boxy + boxh, easeinxpos, easeinypos) - IntType(90) });
		draw_image({ ID_spr_handle, IntType(0), boxx + boxw, boxy, .75, point_distance(boxx + boxw, boxy, easeoutxpos, easeoutypos), global::c_accent, IntType(1), point_direction(boxx + boxw, boxy, easeoutxpos, easeoutypos) - IntType(90) });
		gpu_set_tex_filter(false);
		clip_end();
		colorin = (easeinypos < yy || easeinypos > yy + hei ? global::c_error : global::c_accent);
		easeinxpos = clamp(easeinxpos, boxx, boxx + boxw);
		easeinypos = clamp(easeinypos, yy, yy + hei);
		colorout = (easeoutypos < yy || easeoutypos > yy + hei ? global::c_error : global::c_accent);
		easeoutxpos = clamp(easeoutxpos, boxx, boxx + boxw);
		easeoutypos = clamp(easeoutypos, yy, yy + hei);
		draw_box(easeinxpos - IntType(6), easeinypos - IntType(6), IntType(12), IntType(12), false, colorin, IntType(1));
		draw_box(easeinxpos - IntType(3), easeinypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1));
		draw_box(easeoutxpos - IntType(6), easeoutypos - IntType(6), IntType(12), IntType(12), false, colorout, IntType(1));
		draw_box(easeoutxpos - IntType(3), easeoutypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1));
		if (app_mouse_box(self, easeinxpos - IntType(5), easeinypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereasein"*/ STR(1093);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeinxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeinypos;
			}
		}
		if (app_mouse_box(self, easeoutxpos - IntType(5), easeoutypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
			sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereaseout"*/ STR(1094);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			}
		}
		points[IntType(0)] *= 100.0;
		points[IntType(1)] *= 100.0;
		points[IntType(2)] *= 100.0;
		points[IntType(3)] *= 100.0;
		if (sVar(window_busy) == /*"beziereasein"*/ STR(1093))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(0)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(1)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(2)] = IntType(100) - points.Value(IntType(0));
					points[IntType(3)] = IntType(100) - points.Value(IntType(1));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"beziereaseout"*/ STR(1094))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(2)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(3)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(0)] = IntType(100) - points.Value(IntType(2));
					points[IntType(1)] = IntType(100) - points.Value(IntType(3));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (update)
		{
			points[IntType(0)] /= 100.0;
			points[IntType(1)] /= 100.0;
			points[IntType(2)] /= 100.0;
			points[IntType(3)] /= 100.0;
			if (sync)
				action_tl_frame_ease_all(self, points, false);
			else
				if (sVar(window_busy) == /*"beziereasein"*/ STR(1093))
					action_tl_frame_ease_in(self, points, false);
				else
					action_tl_frame_ease_out(self, ArrType::From({ points.Value(IntType(2)), points.Value(IntType(3)) }), false);
			
			
		}
	}
	
	void draw_blank(RealType xx, RealType yy, VarType w, VarType h)
	{
		draw_primitive_begin(pr_trianglestrip);
		draw_vertex_texture((IntType)(xx), (IntType)(yy), 0.0, 0.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy), 1.0, 0.0);
		draw_vertex_texture((IntType)(xx), (IntType)(yy + h), 0.0, 1.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy + h), 1.0, 1.0);
		draw_primitive_end();
	}
	
	RealType draw_box(VarType xx, VarType yy, VarType width, VarType height, RealType outline, VarType incolor, VarType inalpha)
	{
		VarType color;
		RealType alpha;
		color = draw_get_color();
		alpha = draw_get_alpha();
		if (!is_undefined(incolor))
		{
			color = incolor;
			alpha *= inalpha;
		}
		if (alpha == IntType(0) || width <= IntType(0) || height <= IntType(0))
			return IntType(0);
		draw_primitive_begin((outline > 0) ? pr_linestrip : pr_trianglefan);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + width), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + width), (IntType)(yy + height), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy + height), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_primitive_end();
		return 0.0;
	}
	
	void draw_box_bevel(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, width, height, alpha, light;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		width = argument[IntType(2)];
		height = argument[IntType(3)];
		alpha = argument[IntType(4)];
		light = false;
		if (argument_count > IntType(5))
			light = argument[IntType(5)];
		if (light > 0)
		{
			draw_box(xx, yy, IntType(3), height, false, c_white, .6 * alpha);
			draw_box(xx + width - IntType(3), yy, IntType(3), height, false, c_black, .05 * alpha);
			draw_box(xx, yy + height - IntType(3), width, IntType(3), false, c_black, .1 * alpha);
			draw_box(xx, yy, width, IntType(3), false, c_white, .8 * alpha);
		}
		else
		{
			draw_box(xx, yy, IntType(3), height, false, c_white, .15 * alpha);
			draw_box(xx + width - IntType(3), yy, IntType(3), height, false, c_black, .1 * alpha);
			draw_box(xx, yy + height - IntType(3), width, IntType(3), false, c_black, .2 * alpha);
			draw_box(xx, yy, width, IntType(3), false, c_white, .3 * alpha);
		}
		
	}
	
	RealType draw_box_hover(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx = argument[0];
		VarType yy = argument[1];
		VarType width = argument[2];
		VarType height = argument[3];
		VarType inalpha = argument[4];
		RealType size, alpha;
		VarType color;
		size = IntType(2);
		color = global::c_hover;
		alpha = global::a_hover * inalpha;
		if (alpha == IntType(0))
			return IntType(0);
		RealType t = percent(argument[IntType(4)], IntType(0), .75);
		draw_outline(xx, yy, width, height, IntType(1), color, alpha * t);
		t = percent(argument[IntType(4)], .25, IntType(1));
		draw_outline(xx - IntType(1), yy - IntType(1), width + IntType(2), height + IntType(2), IntType(1), color, alpha * t);
		return 0.0;
	}
	
	void draw_box_rounded(RealType xx, VarType yy, RealType w, RealType h, VarType incolor, RealType inalpha, BoolType roundlefttop, BoolType roundrighttop, BoolType roundrightbottom, BoolType roundleftbottom, IntType roundsize, VarType roundsprite)
	{
		IntType oldcolor;
		RealType oldalpha;
		if (!is_undefined(incolor))
		{
			oldcolor = draw_get_color();
			oldalpha = draw_get_alpha();
			draw_set_color((IntType)(incolor));
			draw_set_alpha(oldalpha * inalpha);
		}
		if (is_undefined(roundsprite))
			roundsprite = ID_spr_rounded_2;
		draw_primitive_begin(pr_trianglefan);
		draw_vertex((IntType)(xx + w / 2.0), (IntType)(yy + h / 2.0));
		if (roundlefttop)
		{
			draw_vertex((IntType)(xx), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy));
		
		if (roundrighttop)
		{
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + w), (IntType)(yy + roundsize));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy));
		
		if (roundrightbottom)
		{
			draw_vertex((IntType)(xx + w), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy + h));
		
		if (roundleftbottom)
		{
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx), (IntType)(yy + h - roundsize));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy + h));
		
		draw_vertex((IntType)(xx), (IntType)(yy + roundsize * (IntType)roundlefttop));
		draw_primitive_end();
		if (roundlefttop)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1) });
		if (roundrighttop)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(90) });
		if (roundrightbottom)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(180) });
		if (roundleftbottom)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(270) });
		if (!is_undefined(incolor))
		{
			draw_set_color(oldcolor);
			draw_set_alpha(oldalpha);
		}
	}
	
	void draw_box_selection(RealType xx, RealType yy, RealType ww, RealType hh)
	{
		clip_begin(xx, yy, ww, hh);
		render_set_culling(false);
		draw_box(xx, yy, ww, hh, false, global::c_accent_overlay, global::a_accent_overlay);
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + (IntType(64) * i)), yy + IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(90) });
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + ww - (IntType(64) * i)), yy + hh - IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), -IntType(90) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx + ww, yy + (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(180) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx, yy + hh - (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1) });
		render_set_culling(true);
		clip_end();
	}
	
	RealType draw_button_accent(ScopeAny self, VarType xx, VarType yy, RealType width, RealType height, IntType index)
	{
		BoolType mouseon, mouseclick;
		VarType accent;
		width = floor(width);
		height = floor(height);
		if (xx + width < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + height < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		mouseon = app_mouse_box(self, xx, yy, width, height) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (index < IntType(9))
			accent = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(index);
		else
			accent = null_;
		
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		microani_set(/*"accentlistitem"*/ STR(1095) + string(index), null_, mouseon, mouseclick, sInt(setting_accent) == index, 0.5);
		microani_update({ mouseon, mouseclick, sInt(setting_accent) == index });
		if (accent != null_)
		{
			draw_box(xx, yy, width, height, false, accent, IntType(1));
			draw_image({ ID_spr_icons, icons_TICK, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE) });
		}
		else
		{
			draw_outline(xx + IntType(1), yy + IntType(1), width - IntType(2), height - IntType(2), IntType(1), global::c_border, global::a_border);
			draw_box(xx, yy, width, height, false, sVar(setting_accent_custom), global::microani_arr.Value(e_microani_ACTIVE));
			draw_image({ ID_spr_icons, icons_PICKER, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), merge_color((IntType)(global::c_text_secondary), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE)), lerp(global::a_text_secondary, 1.0, global::microani_arr.Value(e_microani_ACTIVE)) });
			tip_set(self, text_get({ /*"tooltipcustomaccentcolor"*/ STR(1096) }), xx, yy, width, height);
		}
		
		IntType buttoncolor;
		RealType buttonalpha;
		buttoncolor = merge_color(c_white, c_black, global::microani_arr.Value(e_microani_PRESS));
		buttonalpha = lerp(0.0, .17, global::microani_arr.Value(e_microani_HOVER) * (IntType(1) - global::microani_arr.Value(e_microani_PRESS)));
		buttonalpha = lerp(buttonalpha, .20, global::microani_arr.Value(e_microani_PRESS));
		draw_box(xx, yy, width, height, false, buttoncolor, buttonalpha);
		draw_box_hover({ xx, yy, width, height, global::microani_arr.Value(e_microani_HOVER) });
		if (mouseon && sBool(mouse_left_released))
		{
			sInt(setting_accent) = index;
			sVar(update_interface_timeout) = current_time() + IntType(10000);
			sBool(update_interface_wait) = true;
			return true;
		}
		return 0.0;
	}
	
	RealType draw_button_collapse(ScopeAny self, StringType name, VarType open, IntType script, VarType active, StringType caption, StringType tip)
	{
		draw_set_font(sInt(font_label));
		RealType xx;
		VarType yy;
		IntType wid;
		BoolType mouseon, mousepress, mouseclick;
		xx = sVar(dx) - IntType(8);
		yy = sVar(dy) + (sReal(tab_control_h) / 2.0) - IntType(10);
		wid = string_width(text_get({ caption })) + IntType(26);
		mouseon = app_mouse_box(self, xx, sVar(dy), wid, IntType(24)) && sBool(content_mouseon) && active > 0;
		mousepress = mouseon && sBool(mouse_left);
		mouseclick = mouseon && sBool(mouse_left_released);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || sVar(dy) + IntType(24) < sVar(content_y) || sVar(dy) > sVar(content_y) + sVar(content_height))
			return IntType(0);
		draw_button_icon(self, { name + /*"collapse"*/ STR(1097), xx, yy, IntType(20), IntType(20), open > 0 && active > 0, null_, null_, !(active > 0), /*""*/ STR(0), ID_spr_chevron_ani });
		microani_update({ mouseon, mousepress, open > 0 && active > 0 });
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		sVar(dx) += IntType(16);
		sVar(dw) -= 16.0;
		sBool(tab_collapse) = true;
		global::collapse_ani = test_reduced_motion(open, global::microani_arr.Value(e_microani_ACTIVE));
		if (script > 0)
			draw_switch(self, caption, sVar(dx), sVar(dy), active, script, tip);
		else
		{
			draw_label(self, { text_get({ caption }), sVar(dx), sVar(dy) + sReal(tab_control_h) / 2.0, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			draw_help_circle(self, tip, sVar(dx) + string_width(text_get({ caption })) + IntType(4), sVar(dy) + IntType(2), false);
		}
		
		if (mouseclick && ds_map_exists(global::collapse_map, name))
			action_collapse(name, !(DsMap(global::collapse_map).Value(name) > 0));
		return mouseclick;
	}
	
	BoolType draw_button_color(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, VarType color, VarType def, BoolType hsvmode, IntType script)
	{
		VarType textx, textw, buttonx, buttonw;
		RealType mini, h;
		BoolType mouseon, mouseclick, active, click;
		textx = xx;
		mini = (w < IntType(32));
		h = ((mini > 0) ? 24.0 : sReal(ui_small_height));
		if (mini > 0)
		{
			buttonx = xx;
			buttonw = w;
		}
		else
			if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
			{
				buttonx = xx;
				buttonw = w;
				textw = w;
				yy += (label_height + IntType(8));
			}
			else
			{
				buttonx = xx + floor((RealType)w / 2.0);
				buttonw = floor((RealType)w / 2.0);
				textw = floor((RealType)w / 2.0) - IntType(8);
			}
		
		
		active = (sStr(settings_menu_name) == /*"colorpicker"*/ STR(706) && ObjType(obj_colorpicker, sInt(colorpicker))->value_name == name);
		mouseon = app_mouse_box(self, buttonx, yy, buttonw, h) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		click = context_menu_area(self, { xx, yy, w, h, /*"contextmenuvalue"*/ STR(1098), color, e_context_type_COLOR, script, def });
		microani_set(name, script, mouseon, mouseclick, active, false, IntType(1), true);
		IntType col, labelcolor;
		RealType alpha, labelalpha;
		col = merge_color(IntType(0), global::c_overlay, global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box(buttonx, yy, buttonw, h, false, global::c_level_top, IntType(1));
		draw_box(buttonx, yy, buttonw, h, false, col, alpha);
		col = merge_color((IntType)(global::c_border), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(global::a_border, global::a_text_tertiary, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_outline(buttonx, yy, buttonw, h, IntType(1), col, alpha, true);
		draw_box(buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), false, color, IntType(1));
		draw_outline(buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), IntType(1), global::c_border, global::a_border, IntType(1));
		draw_box_hover({ buttonx, yy, buttonw, h, global::microani_arr.Value(e_microani_PRESS) });
		if (!(mini > 0))
		{
			labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
			labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
			labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
			labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
			labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			draw_set_font(sInt(font_label));
			if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
				draw_label(self, { string_limit(text_get({ name }), textw - IntType(8)), xx, yy - (label_height + IntType(8)), fa_left, fa_top, labelcolor, labelalpha });
			else
				draw_label(self, { string_limit(text_get({ name }), textw - IntType(8)), xx, yy + h / 2.0, fa_left, fa_center, labelcolor, labelalpha });
			
		}
		microani_update({ mouseon, mouseclick, active || (mouseon && sBool(mouse_left)), false });
		if (mouseon && sBool(mouse_left_released))
		{
			click = true;
			colorpicker_show(self, name, color, def, script, buttonx, yy, w, h);
			if (hsvmode)
				ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"hsv"*/ STR(1040);
		}
		return click;
	}
	
	RealType draw_button_icon(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType name, xx, yy, wid, hei, value, icon, script, disabled, tip, sprite;
		name = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		wid = argument[IntType(3)];
		hei = argument[IntType(4)];
		value = argument[IntType(5)];
		icon = argument[IntType(6)];
		script = null_;
		disabled = false;
		tip = /*""*/ STR(0);
		sprite = ID_spr_icons;
		if (argument_count > IntType(7))
			script = argument[IntType(7)];
		if (argument_count > IntType(8))
			disabled = argument[IntType(8)];
		if (argument_count > IntType(9))
			tip = argument[IntType(9)];
		if (argument_count > IntType(10))
			if (argument[IntType(10)] != null_)
				sprite = argument[IntType(10)];
		if (tip != /*""*/ STR(0))
			tip_set(self, text_get({ tip }), xx, yy, wid, hei);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon, animated, image;
		mouseon = (sBool(content_mouseon) && !(disabled > 0) && app_mouse_box(self, xx, yy, wid, hei));
		animated = (sprite != ID_spr_icons && sprite != null_ && icon == null_ && sprite_get_number((IntType)(sprite)) > IntType(1));
		image = ((wid != hei) && sprite != ID_spr_icons && sprite != null_ && icon == null_);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		microani_set(name, script, mouseon, mouseon && sBool(mouse_left), value);
		draw_box_hover({ xx, yy, wid, hei, global::microani_arr.Value(e_microani_PRESS) });
		IntType onbackcolor, oniconcolor, offbackcolor, officoncolor;
		RealType onbackalpha, oniconalpha, offbackalpha, officonalpha, dropdown;
		dropdown = (icon == icons_CHEVRON_DOWN_TINY);
		offbackcolor = global::c_overlay;
		offbackcolor = merge_color(offbackcolor, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_PRESS));
		offbackalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		offbackalpha = lerp(offbackalpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_PRESS));
		onbackcolor = merge_color((IntType)(global::c_accent_overlay), global::c_overlay, global::microani_arr.Value(e_microani_HOVER));
		onbackcolor = merge_color(onbackcolor, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_PRESS));
		onbackalpha = lerp(global::a_accent_overlay, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		onbackalpha = lerp(onbackalpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_PRESS));
		onbackcolor = merge_color(offbackcolor, onbackcolor, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		onbackalpha = lerp(offbackalpha, onbackalpha, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		onbackalpha = lerp(onbackalpha, 0.0, global::microani_arr.Value(e_microani_DISABLED));
		officoncolor = merge_color((IntType)((dropdown > 0) ? global::c_text_tertiary : global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		officoncolor = merge_color(officoncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		officonalpha = lerp((dropdown > 0) ? global::a_text_tertiary : global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		officonalpha = lerp(officonalpha, 1.0, global::microani_arr.Value(e_microani_PRESS));
		oniconcolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		oniconcolor = merge_color(oniconcolor, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		oniconalpha = merge_color((IntType)(global::a_accent), (IntType)(global::a_accent_hover), global::microani_arr.Value(e_microani_HOVER));
		oniconalpha = merge_color((IntType)(oniconalpha), (IntType)(global::a_accent_pressed), global::microani_arr.Value(e_microani_PRESS));
		oniconcolor = merge_color(officoncolor, oniconcolor, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		oniconalpha = lerp(officonalpha, oniconalpha, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		oniconcolor = merge_color(oniconcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		oniconalpha = lerp(oniconalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(xx, yy, wid, hei, false, onbackcolor, onbackalpha);
		if (image)
			draw_image({ sprite, IntType(0), xx, yy, IntType(1), IntType(1), oniconcolor, oniconalpha });
		else
			if (animated)
			{
				RealType frame = floor((sprite_get_number((IntType)(sprite)) - IntType(1)) * global::microani_arr.Value(e_microani_ACTIVE));
				draw_image({ sprite, frame, xx + (RealType)wid / 2.0, yy + (RealType)hei / 2.0, IntType(1), IntType(1), oniconcolor, oniconalpha });
			}
			else
				draw_image({ sprite, icon, xx + (RealType)wid / 2.0, yy + (RealType)hei / 2.0, IntType(1), IntType(1), oniconcolor, oniconalpha });
		
		
		microani_update({ mouseon, mouseon && sBool(mouse_left), value, disabled });
		if (mouseon && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script, !(value > 0) });
			app_mouse_clear(self);
			return true;
		}
		return 0.0;
	}
	
	RealType draw_button_label(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, IntType icon, IntType type, IntType script, IntType anchor, BoolType disabled)
	{
		RealType h, capwid;
		IntType font;
		VarType cap;
		BoolType customw;
		h = IntType(32);
		cap = text_get({ name });
		h = (type != e_button_TOOLBAR ? IntType(32) : sReal(toolbar_size));
		font = (type != e_button_TOOLBAR ? sInt(font_button) : sInt(font_value));
		if (type == e_button_BIG)
		{
			h = IntType(64);
			font = sInt(font_heading_big);
		}
		draw_set_font(font);
		capwid = string_width(cap);
		if (w == null_)
		{
			w = capwid + (icon == null_ ? IntType(24) : IntType(52));
			customw = false;
		}
		else
			customw = true;
		
		if (anchor == e_anchor_CENTER)
			xx = xx - floor((RealType)w / 2.0);
		else
			if (anchor == e_anchor_RIGHT)
				xx -= w;
		
		if (yy > sVar(content_y) + sVar(content_height) || yy + h < sVar(content_y) || xx > sVar(content_x) + sVar(content_width) || xx + w < sVar(content_x))
			return IntType(0);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && !disabled;
		mouseclick = mouseon && sBool(mouse_left);
		microani_set(name, script, mouseon, mouseclick, false);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		VarType focus;
		IntType backcolor, linecolor, contentcolor;
		RealType backalpha, linealpha, contentalpha, contentx;
		focus = max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) });
		if (type == e_button_PRIMARY || type == e_button_BIG)
		{
			backcolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
			backcolor = merge_color(backcolor, global::c_accent_pressed, focus);
			backcolor = merge_color(backcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			backalpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = global::c_button_text;
			contentalpha = global::a_button_text;
		}
		else
		{
			backcolor = merge_color(global::c_overlay, (IntType)(global::c_accent_overlay), focus);
			backalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
			backalpha = lerp(backalpha, global::a_accent_overlay, focus);
			backalpha = lerp(backalpha, 0.0, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
			contentcolor = merge_color(contentcolor, (IntType)(global::c_accent), focus);
			contentcolor = merge_color(contentcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			contentalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
			contentalpha = lerp(contentalpha, 1.0, focus);
			contentalpha = lerp(contentalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			linecolor = merge_color((IntType)(global::c_border), (IntType)(global::c_accent), focus);
			linealpha = lerp(global::a_border, global::a_accent, focus);
		}
		
		draw_box(xx, yy, w, h, false, backcolor, backalpha);
		if (type == e_button_PRIMARY || type == e_button_BIG)
			draw_box_bevel({ xx, yy, w, h, IntType(1) });
		if (type == e_button_SECONDARY)
		{
			draw_box(xx, yy, w, h, false, global::c_level_top, draw_get_alpha());
			draw_outline(xx, yy, w, h, IntType(1), linecolor, linealpha, IntType(1));
		}
		draw_box_hover({ xx, yy, w, h, global::microani_arr.Value(e_microani_PRESS) });
		if (customw)
			contentx = floor((xx + (RealType)w / 2.0) - ((capwid + (icon == null_ ? 0.0 : 32.0)) / 2.0));
		else
			contentx = floor(xx + (icon == null_ ? 12.0 : 8.0));
		
		if (icon != null_)
		{
			draw_image({ ID_spr_icons, icon, contentx + IntType(12), yy + h / 2.0, IntType(1), IntType(1), contentcolor, contentalpha });
			contentx += IntType(32);
		}
		draw_label(self, { cap, contentx, yy + h / 2.0, fa_left, fa_middle, contentcolor, contentalpha });
		microani_update({ mouseon, mouseclick, false, disabled });
		if (mouseon && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script });
			return true;
		}
		return 0.0;
	}
	
	BoolType draw_button_menu(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType name, type, xx, yy, wid, hei, value, text, script, tex, disabled, icon, caption, texcolor, texalpha, capwid;
		RealType flip;
		BoolType mouseon, menuactive, menuhide, showsearch;
		VarType cap, menuid, nameid;
		name = argument[IntType(0)];
		type = argument[IntType(1)];
		xx = argument[IntType(2)];
		yy = argument[IntType(3)];
		wid = argument[IntType(4)];
		hei = argument[IntType(5)];
		value = argument[IntType(6)];
		text = argument[IntType(7)];
		script = argument[IntType(8)];
		if (argument_count > IntType(9))
			disabled = argument[IntType(9)];
		else
			disabled = false;
		
		if (argument_count > IntType(10))
			tex = argument[IntType(10)];
		else
			tex = null_;
		
		if (argument_count > IntType(11))
			icon = argument[IntType(11)];
		else
			icon = null_;
		
		if (argument_count > IntType(12))
			caption = argument[IntType(12)];
		else
			caption = /*""*/ STR(0);
		
		if (argument_count > IntType(13))
		{
			texcolor = argument[IntType(13)];
			texalpha = argument[IntType(14)];
			if (texcolor == null_)
				texcolor = c_white;
			if (texalpha == null_)
				texalpha = IntType(1);
		}
		else
		{
			texcolor = c_white;
			texalpha = IntType(1);
		}
		
		if (argument_count > IntType(15))
			capwid = argument[IntType(15)];
		else
			capwid = null_;
		
		if (sVar(menu_model_current) != null_)
		{
			cap = minecraft_asset_get_name(/*"modelstate"*/ STR(775), name);
			name = /*"modelstate"*/ STR(775) + name;
		}
		else
			if (sVar(menu_block_current) != null_)
			{
				cap = minecraft_asset_get_name(/*"blockstate"*/ STR(796), name);
				name = /*"blockstate"*/ STR(796) + name;
			}
			else
				cap = text_get({ name });
		
		
		if (sBool(menu_bench))
			nameid = /*"bench"*/ STR(752) + name;
		else
			if (sVar(content_tab) == null_ && sInt(popup) != null_)
				nameid = idVar(sInt(popup), name) + name;
			else
				nameid = name;
		
		
		menuactive = false;
		menuhide = false;
		menuid = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
		{
			if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
			{
				menuactive = true;
				menuhide = ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_ani_type == /*"hide"*/ STR(750);
				menuid = DsList(sInt(menu_list)).Value(i);
			}
		}
		showsearch = (type != e_menu_TRANSITION_LIST && menuactive && !menuhide);
		flip = (yy + hei + hei * IntType(8) > sReal(window_height));
		microani_set(nameid, null_, false, false, false, false, 1.5, false, 0.5);
		IntType textcolor, bordercolor, chevroncolor, animation;
		RealType textalpha, borderalpha, chevronalpha;
		VarType fadealpha;
		textcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		textcolor = merge_color(textcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		textcolor = merge_color(textcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		textalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		textalpha = lerp(textalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		textalpha = lerp(textalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		fadealpha = global::microani_arr.Value(e_microani_FADE);
		animation = global::current_microani;
		if (type != e_menu_LIST_SEAMLESS)
		{
			draw_set_font(sInt(font_label));
			if (capwid == null_ && (!(sReal(window_compact) > 0) || global::_app->panel_compact > 0))
			{
				draw_label(self, { string_limit(cap, sVar(dw)), xx, yy - IntType(3), fa_left, fa_top, textcolor, textalpha });
				yy += (label_height + IntType(8));
			}
			else
			{
				if (capwid == null_ && sReal(window_compact) > 0)
				{
					cap = string_limit(cap, (RealType)sVar(dw) / 3.0);
					capwid = (RealType)sVar(dw) / 3.0;
				}
				draw_label(self, { cap, xx, yy + (RealType)hei / 2.0, fa_left, fa_middle, textcolor, textalpha });
				wid -= capwid;
				xx += capwid;
			}
			
			ObjType(value_animation, ObjType(micro_animation, animation)->fade)->value = IntType(1);
		}
		if (menuactive)
		{
			if (type != e_menu_LIST_SEAMLESS)
			{
				xx = lerp(xx, max({ sVar(dx), ObjType(obj_menu, menuid)->menu_x }), ObjType(obj_menu, menuid)->menu_ani_ease);
				wid = lerp(wid, min({ sVar(dw), ObjType(obj_menu, menuid)->menu_w }), ObjType(obj_menu, menuid)->menu_ani_ease);
			}
			else
			{
				xx = lerp(xx, ObjType(obj_menu, menuid)->menu_x, ObjType(obj_menu, menuid)->menu_ani_ease);
				wid = lerp(wid, ObjType(obj_menu, menuid)->menu_w, ObjType(obj_menu, menuid)->menu_ani_ease);
			}
			
		}
		bordercolor = merge_color((IntType)(global::c_border), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		borderalpha = lerp(global::a_border, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_PRESS));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box(xx, yy, wid, hei, false, global::c_level_top, draw_get_alpha());
		draw_outline(xx, yy, wid, hei, IntType(1), bordercolor, borderalpha * fadealpha, true);
		draw_box_hover({ xx, yy, wid, hei, global::microani_arr.Value(e_microani_PRESS) });
		mouseon = (app_mouse_box(self, xx, yy, wid, hei) && !(disabled > 0) && sBool(content_mouseon)) || (menuactive && app_mouse_box(self, xx, yy, wid, hei, /*"menu"*/ STR(1099)));
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		if (showsearch && ObjType(obj_textbox, sInt(menu_search_tbx))->text != /*""*/ STR(0))
			text = /*""*/ STR(0);
		IntType item = list_item_add(text, null_, caption, tex, icon, -IntType(1), null_, false, false);
		ObjType(obj_list_item, item)->disabled = disabled > 0 || showsearch;
		if (type == e_menu_TRANSITION_LIST)
		{
			ObjType(obj_list_item, item)->thumbnail_blend = global::c_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_alpha = global::a_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_backdrop = false;
		}
		else
		{
			ObjType(obj_list_item, item)->thumbnail_blend = texcolor;
			ObjType(obj_list_item, item)->thumbnail_alpha = texalpha;
		}
		
		if (ObjType(micro_animation, global::current_microani)->goal_ease != 0.5)
			clip_begin(xx, yy, wid, hei);
		list_item_draw(self, { item, xx, yy + ((ObjType(micro_animation, global::current_microani)->goal_ease * IntType(2)) - IntType(1)) * IntType(12), wid, hei, false, null_, null_, false });
		instance_destroy(self, { item });
		if (ObjType(micro_animation, global::current_microani)->goal_ease != 0.5)
			clip_end();
		if (showsearch)
		{
			VarType busyprev = sVar(window_busy);
			BoolType mouseonprev = sBool(content_mouseon);
			if (sVar(window_busy) == /*"menu"*/ STR(1099))
			{
				sVar(window_busy) = sVar(menu_search_busy);
				sBool(content_mouseon) = true;
			}
			if (mouseon && sBool(mouse_left_released) && (sVar(window_focus) != string(sInt(menu_search_tbx))))
			{
				sVar(window_focus) = string(sInt(menu_search_tbx));
				app_mouse_clear(self);
			}
			VarType m = menuid;
			if (textbox_draw(self, sInt(menu_search_tbx), xx + IntType(8) + (IntType(28) * bool_to_float(tex != null_)), yy + ((RealType)hei / 2.0) - IntType(8), wid - IntType(32), hei, true))
			{
				sVar(menu_current) = m;
				sBool(menu_expose) = (ObjType(obj_textbox, sInt(menu_search_tbx))->text != /*""*/ STR(0));
				sVar(menu_search) = ObjType(obj_textbox, sInt(menu_search_tbx))->text;
				list_destroy(self, ObjType(obj_menu, m)->menu_list);
				if (type == e_menu_LIST || type == e_menu_LIST_SEAMLESS)
					ObjType(obj_menu, m)->menu_list = list_init(self, name);
				else
					if (type == e_menu_TIMELINE)
						ObjType(obj_menu, m)->menu_list = menu_timeline_init(self, m);
					else
						if (type == e_menu_BIOME)
							ObjType(obj_menu, m)->menu_list = menu_biome_init(self, m);
				
				
				ObjType(obj_menu, m)->menu_amount = ObjType(obj_menu, m)->menu_list == null_ ? IntType(0) : ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
				if (ObjType(obj_menu, m)->menu_list != null_)
					ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
				sVar(menu_search) = /*""*/ STR(0);
				sBool(menu_expose) = false;
			}
			sVar(menu_search_busy) = sVar(window_busy);
			sVar(window_busy) = busyprev;
			sBool(content_mouseon) = mouseonprev;
		}
		chevroncolor = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		chevronalpha = lerp(global::a_text_tertiary, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		chevronalpha = lerp(chevronalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		chevronalpha = lerp(chevronalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_image({ ID_spr_icons, icons_CHEVRON_DOWN_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * (IntType(1) - global::microani_arr.Value(e_microani_CUSTOM_LINEAR)) });
		draw_image({ ID_spr_icons, icons_CHEVRON_UP_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * global::microani_arr.Value(e_microani_CUSTOM_LINEAR) });
		draw_box(xx, yy, wid, hei, false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_DISABLED));
		microani_update({ mouseon, mouseon && sBool(mouse_left), (menuactive && !menuhide), disabled, ((menuactive && !menuhide) ? !(flip > 0) : flip) });
		if (!menuactive && mouseon && keyboard_check(vk_control) && sReal(mouse_wheel) != IntType(0))
		{
			sInt(menu_model_state) = sInt(menu_model_state_current);
			sInt(menu_block_state) = sInt(menu_block_state_current);
			sInt(menu_armor_piece) = ObjType(obj_popup, sInt(popup_armor_editor))->piece_current;
			sInt(menu_armor_piece_data) = ObjType(obj_popup, sInt(popup_armor_editor))->piece_data_id;
			IntType m = (new obj_menu)->id;
			ObjType(obj_menu, m)->menu_ani = IntType(0);
			ObjType(obj_menu, m)->menu_value = value;
			ObjType(obj_menu, m)->menu_name = nameid;
			ObjType(obj_menu, m)->menu_include_tl_edit = (ObjType(obj_menu, m)->menu_name != /*"timelineeditorparent"*/ STR(1100));
			sVar(menu_current) = m;
			sBool(menu_expose) = true;
			IntType list;
			if (type == e_menu_LIST || type == e_menu_LIST_SEAMLESS || type == e_menu_TRANSITION_LIST)
				list = list_init(self, name);
			else
				if (type == e_menu_TIMELINE)
					list = menu_timeline_init(self, m);
				else
					if (type == e_menu_BIOME)
						list = menu_biome_init(self, m);
			
			
			if (type == e_menu_TRANSITION_LIST)
				script = ID_action_tl_frame_transition;
			sBool(menu_expose) = false;
			RealType index = IntType(0);
			IntType item = null_;
			list_value_filter(self, list);
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, list)->item); i++)
			{
				IntType it = DsList(ObjType(obj_list, list)->item).Value(i);
				if (ObjType(obj_list_item, it)->script != null_)
					continue;
				if (ObjType(obj_list_item, it)->value == value)
				{
					index = i;
					break;
				}
			}
			index += sReal(mouse_wheel);
			index = mod_fix(index, ds_list_size(ObjType(obj_list, list)->item));
			item = DsList(ObjType(obj_list, list)->item).Value(index);
			global::list_item_script = script;
			global::list_item_script_value = ObjType(obj_list_item, item)->value;
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->holding)->init(IntType(1));
			ObjType(micro_animation, global::current_microani)->goal_ease = ((sReal(mouse_wheel)) + IntType(1)) * .5;
			list_destroy(self, list);
			instance_destroy(self, { m });
			return true;
		}
		if (menuactive)
		{
			sVar(menu_x) = xx;
			sVar(menu_y) = yy;
		}
		if (mouseon && sBool(mouse_left_released) && menuhide)
		{
			sVar(window_busy) = /*"menu"*/ STR(1099);
			sVar(window_focus) = string(sInt(menu_search_tbx));
			ObjType(obj_menu, menuid)->menu_ani_type = /*"show"*/ STR(751);
			app_mouse_clear(self);
		}
		if (!menuactive && mouseon && sBool(mouse_left_released) && !menuhide)
		{
			VarType m = null_;
			for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
			{
				if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
				{
					m = DsList(sInt(menu_list)).Value(i);
					break;
				}
			}
			if (m == null_)
				m = (new obj_menu)->id;
			ObjType(obj_menu, m)->menu_busy_prev = sVar(window_busy);
			sVar(window_busy) = /*"menu"*/ STR(1099);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			ObjType(obj_menu, m)->menu_name = nameid;
			ObjType(obj_menu, m)->menu_type = type;
			ObjType(obj_menu, m)->menu_window = window_get_current();
			ObjType(obj_menu, m)->menu_temp_edit = global::temp_edit;
			ObjType(obj_menu, m)->menu_script = script;
			ObjType(obj_menu, m)->menu_value = value;
			ObjType(obj_menu, m)->menu_ani = IntType(0);
			ObjType(obj_menu, m)->menu_ani_type = /*"show"*/ STR(751);
			ObjType(obj_menu, m)->menu_flip = flip;
			ObjType(obj_menu, m)->menu_x = xx;
			ObjType(obj_menu, m)->menu_x_start = xx;
			ObjType(obj_menu, m)->menu_y = yy;
			ObjType(obj_menu, m)->menu_w = wid;
			ObjType(obj_menu, m)->menu_w_start = wid;
			ObjType(obj_menu, m)->menu_button_h = hei;
			ObjType(obj_menu, m)->menu_item_w = wid;
			ObjType(obj_menu, m)->menu_item_h = ObjType(obj_menu, m)->menu_button_h;
			ObjType(obj_menu, m)->menu_include_tl_edit = (ObjType(obj_menu, m)->menu_name != /*"timelineeditorparent"*/ STR(1100));
			ObjType(obj_menu, m)->menu_margin = IntType(0);
			ObjType(obj_menu, m)->menu_transition = null_;
			ObjType(obj_menu, m)->menu_steps = IntType(0);
			ObjType(obj_menu, m)->menu_floating = false;
			ObjType(obj_menu, m)->content_x = sVar(content_x);
			ObjType(obj_menu, m)->content_width = sVar(content_width);
			sVar(menu_current) = m;
			sBool(menu_expose) = false;
			sInt(menu_model_state) = sInt(menu_model_state_current);
			sInt(menu_block_state) = sInt(menu_block_state_current);
			sInt(menu_armor_piece) = ObjType(obj_popup, sInt(popup_armor_editor))->piece_current;
			sInt(menu_armor_piece_data) = ObjType(obj_popup, sInt(popup_armor_editor))->piece_data_id;
			if (type != e_menu_TRANSITION_LIST)
				sVar(window_focus) = string(sInt(menu_search_tbx));
			if (type == e_menu_LIST || type == e_menu_LIST_SEAMLESS)
				ObjType(obj_menu, m)->menu_list = list_init(self, name);
			else
				if (type == e_menu_TIMELINE)
					ObjType(obj_menu, m)->menu_list = menu_timeline_init(self, m);
				else
					if (type == e_menu_BIOME)
						ObjType(obj_menu, m)->menu_list = menu_biome_init(self, m);
			
			
			ObjType(obj_menu, m)->menu_amount = ObjType(obj_menu, m)->menu_list == null_ ? IntType(0) : ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
			if (ObjType(obj_menu, m)->menu_list != null_)
				ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
			withOne (obj_menu, m, self->id)
				menu_focus_selected(self);
			
			if (ObjType(obj_menu, m)->menu_flip > 0)
				ObjType(obj_menu, m)->menu_show_amount = floor((ObjType(obj_menu, m)->menu_y * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			else
				ObjType(obj_menu, m)->menu_show_amount = floor(((sReal(window_height) - (ObjType(obj_menu, m)->menu_y + ObjType(obj_menu, m)->menu_button_h)) * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			
			global::current_microani = animation;
			sInt(menu_popup) = sInt(popup);
			return true;
		}
		global::current_microani = animation;
		return false;
	}
	
}
