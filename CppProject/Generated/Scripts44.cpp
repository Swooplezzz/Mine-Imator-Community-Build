/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.25 01:36:45 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void preview_event_create(ScopeAny self)
	{
		sVar(select) = null_;
		sVar(surface) = null_;
		sBool(mouseon_prev) = false;
		sStr(pack_image) = /*"preview"*/ STR(1399);
		sStr(pack_image_material) = /*"diffuse"*/ STR(636);
		sStr(pack_model_texture) = /*"entity/player/wide/steve"*/ STR(2146);
		sReal(pack_block_sheet_ani) = false;
		sReal(pack_colormap) = IntType(0);
		sInt(pack_particles) = IntType(0);
		sVar(last_select) = null_;
		sVar(texture) = null_;
		sBool(reset_view) = false;
		sInt(sound_play_index) = null_;
		sReal(sound_playing) = false;
		sReal(fov) = IntType(45);
		sBool(xy_lock) = false;
		sVar(world_pos) = point3D(IntType(0), IntType(0), IntType(0));
		preview_reset_view(self);
		particle_spawner_init(self);
		sVar(text_vbuffer) = ArrType::From({ null_, null_ });
		sVar(text_texture) = ArrType::From({ null_, null_ });
		sVar(text_string) = /*""*/ STR(0);
		sVar(text_res) = null_;
		sVar(text_3d) = false;
	}
	
	void preview_reset_view(ScopeAny self)
	{
		sReal(xyangle) = 314.99;
		sReal(zangle) = IntType(15);
		sReal(xoff) = IntType(0);
		sReal(yoff) = IntType(0);
		sReal(goalxoff) = IntType(0);
		sReal(goalyoff) = IntType(0);
		sReal(zoom) = IntType(1);
		sReal(goalzoom) = IntType(1);
	}
	
	void project_backup(ScopeAny self)
	{
		StringType fn = sStr(project_folder) + /*"/"*/ STR(20) + filename_name(sStr(project_folder));
		log({ /*"Backup"*/ STR(2147), fn });
		for (RealType b = sReal(setting_backup_amount) - IntType(1); b > IntType(0); b--)
			if (file_exists_lib(fn + /*".backup"*/ STR(2148) + string(b)))
				file_rename_lib(fn + /*".backup"*/ STR(2148) + string(b), fn + /*".backup"*/ STR(2148) + string(b + IntType(1)));
		project_save(self, { fn + /*".backup"*/ STR(2148) + ((sReal(setting_backup_amount) > IntType(1)) ? /*"1"*/ STR(1136) : /*""*/ STR(0)) });
		project_reset_backup(self);
		log({ /*"Backup saved"*/ STR(2149) });
	}
	
	RealType project_create(ScopeAny self)
	{
		StringType dirname = sStr(setting_project_folder) + ObjType(obj_popup, sInt(popup_newproject))->folder;
		directory_create_lib(sStr(setting_project_folder));
		directory_create_lib(dirname);
		if (!directory_exists_lib(dirname))
		{
			error(/*"errornewprojectaccess"*/ STR(2150));
			return IntType(0);
		}
		log({ /*"Creating project"*/ STR(2151), dirname });
		project_reset(self);
		action_load_render_settings(self, render_default_file);
		sVar(project_name) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_name)->text;
		sVar(project_author) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_author)->text;
		sVar(project_description) = ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_newproject))->tbx_description)->text;
		sStr(project_folder) = dirname;
		sVar(project_file) = sStr(project_folder) + /*"/"*/ STR(20) + filename_get_valid(sVar(project_name)) + /*".miproject"*/ STR(721);
		popup_close(self);
		project_save(self);
		toast_new(self, e_toast_POSITIVE, text_get({ /*"alertprojectcreated"*/ STR(2152) }));
		toast_add_action(self, /*"alertprojectcreatedview"*/ STR(2153), ID_popup_open_url, sStr(project_folder));
		return 0.0;
	}
	
	RealType project_load(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType fn = (argument_count > IntType(0) ? argument[IntType(0)] : file_dialog_open_project(self));
		if (fn == /*""*/ STR(0))
			return IntType(0);
		VarType name = filename_new_ext(filename_name(fn), /*""*/ STR(0));
		if (filename_ext(fn) == /*".zip"*/ STR(7))
		{
			unzip(fn);
			fn = file_find_single(unzip_directory, /*".miproject;.mproj;.mani"*/ STR(2154));
			if (!file_exists_lib(fn))
				fn = file_find_single(unzip_directory + name + /*"/"*/ STR(20), /*".miproject;.mproj;.mani"*/ STR(2154));
			if (!file_exists_lib(fn))
			{
				error(/*"erroropenprojectzip"*/ STR(2155));
				return IntType(0);
			}
		}
		if (!file_exists_lib(fn))
			return IntType(0);
		StringType ext;
		IntType rootmap, buf;
		BoolType legacy;
		ext = filename_ext(fn);
		if (ext == /*".miproject"*/ STR(721) || string_contains(ext, /*".backup"*/ STR(2148)))
		{
			log({ /*"Opening project"*/ STR(2156), fn });
			rootmap = project_load_start(fn);
			if (rootmap == null_)
				return IntType(0);
			legacy = false;
		}
		else
		{
			log({ /*"Opening legacy project"*/ STR(2157), fn });
			if (!project_load_legacy_start(fn))
				return IntType(0);
			buf = global::buffer_current;
			legacy = true;
		}
		
		project_reset(self);
		project_reset_loaded(self);
		sVar(project_file) = filename_new_ext(fn, /*".miproject"*/ STR(721));
		sStr(project_folder) = filename_dir(fn);
		sVar(project_name) = name;
		global::save_folder = sStr(project_folder);
		global::load_folder = filename_dir(fn);
		log({ /*"save_folder"*/ STR(745), global::save_folder });
		log({ /*"load_folder"*/ STR(746), global::load_folder });
		if (!legacy)
		{
			project_load_project(self, DsMap(rootmap).Value(/*"project"*/ STR(219)));
			project_load_render(self, DsMap(rootmap).Value(/*"render"*/ STR(13)));
			project_load_background(self, DsMap(rootmap).Value(/*"background"*/ STR(225)));
			project_load_objects(rootmap);
			project_load_markers(DsMap(rootmap).Value(/*"markers"*/ STR(2158)));
		}
		else
		{
			global::buffer_current = buf;
			if (global::load_format >= e_project_FORMAT_100_DEMO_2)
			{
				project_load_legacy_project(self);
				project_load_legacy_objects();
				project_load_legacy_background(self);
				project_load_legacy_work_camera(self);
			}
			else
				project_load_legacy_beta(self, true);
			
			buffer_delete(global::buffer_current);
		}
		
		project_load_find_save_ids(self);
		project_load_update(self);
		project_reset_loaded(self);
		log({ /*"Project loaded"*/ STR(2159) });
		if (global::load_format < e_project_FORMAT_110_PRE_1)
		{
			if (!dev_mode)
				file_rename_lib(fn, fn + /*".old"*/ STR(2160));
			project_save(self);
		}
		sBool(recent_add_wait) = true;
		return true;
	}
	
	RealType project_load_background(ScopeAny self, VarType map)
	{
		if (!ds_map_valid(map))
			return IntType(0);
		sBool(background_loaded) = true;
		sVar(background_image_show) = value_get_real(DsMap(map).Value(/*"image_show"*/ STR(2161)), sVar(background_image_show));
		if (sVar(background_image) != null_)
			idInt(sVar(background_image), count)--;
		sVar(background_image) = value_get_save_id({ DsMap(map).Value(/*"image"*/ STR(94)), sVar(background_image) });
		sVar(background_image_type) = value_get_string(DsMap(map).Value(/*"image_type"*/ STR(2162)), sVar(background_image_type));
		sVar(background_image_stretch) = value_get_real(DsMap(map).Value(/*"image_stretch"*/ STR(2163)), sVar(background_image_stretch));
		sVar(background_image_box_mapped) = value_get_real(DsMap(map).Value(/*"image_box_mapped"*/ STR(2164)), sVar(background_image_box_mapped));
		sVar(background_image_rotation) = value_get_real(DsMap(map).Value(/*"image_rotation"*/ STR(2165)), sVar(background_image_rotation));
		idInt(sVar(background_sky_sun_tex), count)--;
		sVar(background_sky_sun_tex) = value_get_save_id({ DsMap(map).Value(/*"sky_sun_tex"*/ STR(2166)), sVar(background_sky_sun_tex) });
		sVar(background_sky_sun_angle) = value_get_real(DsMap(map).Value(/*"sky_sun_angle"*/ STR(2167)), sVar(background_sky_sun_angle));
		sVar(background_sky_sun_scale) = value_get_real(DsMap(map).Value(/*"sky_sun_scale"*/ STR(2168)), sVar(background_sky_sun_scale));
		idInt(sVar(background_sky_moon_tex), count)--;
		sVar(background_sky_moon_tex) = value_get_save_id({ DsMap(map).Value(/*"sky_moon_tex"*/ STR(2169)), sVar(background_sky_moon_tex) });
		sVar(background_sky_moon_phase) = value_get_real(DsMap(map).Value(/*"sky_moon_phase"*/ STR(2170)), sVar(background_sky_moon_phase));
		sVar(background_sky_moon_angle) = value_get_real(DsMap(map).Value(/*"sky_moon_angle"*/ STR(2171)), sVar(background_sky_moon_angle));
		sVar(background_sky_moon_scale) = value_get_real(DsMap(map).Value(/*"sky_moon_scale"*/ STR(2172)), sVar(background_sky_moon_scale));
		sVar(background_sky_time) = value_get_real(DsMap(map).Value(/*"sky_time"*/ STR(2173)), sVar(background_sky_time));
		sVar(background_sky_rotation) = value_get_real(DsMap(map).Value(/*"sky_rotation"*/ STR(2174)), sVar(background_sky_rotation));
		sVar(background_sunlight_strength) = value_get_real(DsMap(map).Value(/*"sunlight_strength"*/ STR(2175)), sVar(background_sunlight_strength));
		if (global::load_format < e_project_FORMAT_200_PRE_5)
			sVar(background_sunlight_strength) += IntType(1);
		sVar(background_sunlight_angle) = value_get_real(DsMap(map).Value(/*"sunlight_angle"*/ STR(2176)), sVar(background_sunlight_angle));
		sVar(background_twilight) = value_get_real(DsMap(map).Value(/*"twilight"*/ STR(2177)), sVar(background_twilight));
		sVar(background_sky_clouds_show) = value_get_real(DsMap(map).Value(/*"sky_clouds_show"*/ STR(2178)), sVar(background_sky_clouds_show));
		sVar(background_sky_clouds_mode) = value_get_real(DsMap(map).Value(/*"sky_clouds_mode"*/ STR(2179)), sVar(background_sky_clouds_mode));
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			VarType faded, flat;
			faded = false;
			flat = false;
			faded = value_get_real(DsMap(map).Value(/*"sky_clouds_story_mode"*/ STR(2180)), faded);
			flat = value_get_real(DsMap(map).Value(/*"sky_clouds_flat"*/ STR(2181)), flat);
			if (faded > 0)
				sVar(background_sky_clouds_mode) = /*"faded"*/ STR(749);
			else
				if (flat > 0)
					sVar(background_sky_clouds_mode) = /*"flat"*/ STR(750);
			
			sVar(background_sky_clouds_height) = value_get_real(DsMap(map).Value(/*"sky_clouds_z"*/ STR(2182)), sVar(background_sky_clouds_height));
			sVar(background_sky_clouds_thickness) = value_get_real(DsMap(map).Value(/*"sky_clouds_height"*/ STR(2183)), sVar(background_sky_clouds_thickness));
		}
		else
		{
			sVar(background_sky_clouds_mode) = value_get_string(DsMap(map).Value(/*"sky_clouds_mode"*/ STR(2179)), sVar(background_sky_clouds_mode));
			sVar(background_sky_clouds_height) = value_get_real(DsMap(map).Value(/*"sky_clouds_height"*/ STR(2183)), sVar(background_sky_clouds_height));
			sVar(background_sky_clouds_thickness) = value_get_real(DsMap(map).Value(/*"sky_clouds_thickness"*/ STR(2184)), sVar(background_sky_clouds_thickness));
		}
		
		idInt(sVar(background_sky_clouds_tex), count)--;
		sVar(background_sky_clouds_tex) = value_get_save_id({ DsMap(map).Value(/*"sky_clouds_tex"*/ STR(2185)), sVar(background_sky_clouds_tex) });
		sVar(background_sky_clouds_size) = value_get_real(DsMap(map).Value(/*"sky_clouds_size"*/ STR(2186)), sVar(background_sky_clouds_size));
		sVar(background_sky_clouds_speed) = value_get_real(DsMap(map).Value(/*"sky_clouds_speed"*/ STR(2187)), sVar(background_sky_clouds_speed));
		sVar(background_sky_clouds_offset) = value_get_real(DsMap(map).Value(/*"sky_clouds_offset"*/ STR(2188)), sVar(background_sky_clouds_offset));
		if (global::load_format < e_project_FORMAT_200_PRE_5)
		{
			if (global::_app->background_sky_clouds_tex == /*"default"*/ STR(102))
				global::_app->background_sky_clouds_size *= 8.0;
		}
		sVar(background_ground_show) = value_get_real(DsMap(map).Value(/*"ground_show"*/ STR(2189)), sVar(background_ground_show));
		sVar(background_ground_name) = value_get_string(DsMap(map).Value(/*"ground_name"*/ STR(2190)), sVar(background_ground_name));
		sVar(background_ground_direction) = value_get_real(DsMap(map).Value(/*"ground_direction"*/ STR(2191)), sVar(background_ground_direction));
		if (global::load_format < e_project_FORMAT_120_PRE_1)
		{
			sVar(background_ground_name) = string_replace(sVar(background_ground_name), /*"blocks/"*/ STR(856), /*"block/"*/ STR(822));
			VarType newname = ds_map_find_key(global::legacy_block_texture_name_map, sVar(background_ground_name));
			if (!is_undefined(newname))
				sVar(background_ground_name) = newname;
		}
		sVar(background_ground_slot) = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), sVar(background_ground_name));
		if (sVar(background_ground_slot) < IntType(0))
			sVar(background_ground_slot) = ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)) + ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list), sVar(background_ground_name));
		idInt(sVar(background_ground_tex), count)--;
		sVar(background_ground_tex) = value_get_save_id({ DsMap(map).Value(/*"ground_tex"*/ STR(2192)), sVar(background_ground_tex) });
		idInt(sVar(background_ground_tex_material), count)--;
		sVar(background_ground_tex_material) = value_get_save_id({ DsMap(map).Value(/*"ground_tex_material"*/ STR(2193)), sVar(background_ground_tex_material) });
		idInt(sVar(background_ground_tex_normal), count)--;
		sVar(background_ground_tex_normal) = value_get_save_id({ DsMap(map).Value(/*"ground_tex_normal"*/ STR(2194)), sVar(background_ground_tex_normal) });
		sVar(background_biome) = value_get_string(DsMap(map).Value(/*"biome"*/ STR(1719)), sVar(background_biome));
		if (sVar(background_biome) == /*""*/ STR(0))
			sVar(background_biome) = ObjType(obj_biome, DsList(global::biome_list).Value(IntType(2)))->name;
		sVar(background_sky_color) = value_get_color(DsMap(map).Value(/*"sky_color"*/ STR(2195)), sVar(background_sky_color));
		sVar(background_sky_clouds_color) = value_get_color(DsMap(map).Value(/*"sky_clouds_color"*/ STR(2196)), sVar(background_sky_clouds_color));
		sVar(background_sunlight_color) = value_get_color(DsMap(map).Value(/*"sunlight_color"*/ STR(2197)), sVar(background_sunlight_color));
		sVar(background_ambient_color) = value_get_color(DsMap(map).Value(/*"ambient_color"*/ STR(2198)), sVar(background_ambient_color));
		sVar(background_night_color) = value_get_color(DsMap(map).Value(/*"night_color"*/ STR(2199)), sVar(background_night_color));
		sVar(background_water_color) = value_get_color(DsMap(map).Value(/*"water_color"*/ STR(2200)), sVar(background_water_color));
		sVar(background_grass_color) = value_get_color(DsMap(map).Value(/*"grass_color"*/ STR(2201)), sVar(background_grass_color));
		sVar(background_foliage_color) = value_get_color(DsMap(map).Value(/*"foliage_color"*/ STR(2202)), sVar(background_foliage_color));
		sVar(background_leaves_oak_color) = value_get_color(DsMap(map).Value(/*"leaves_oak_color"*/ STR(2203)), sVar(background_leaves_oak_color));
		sVar(background_leaves_spruce_color) = value_get_color(DsMap(map).Value(/*"leaves_spruce_color"*/ STR(2204)), sVar(background_leaves_spruce_color));
		sVar(background_leaves_birch_color) = value_get_color(DsMap(map).Value(/*"leaves_birch_color"*/ STR(2205)), sVar(background_leaves_birch_color));
		sVar(background_leaves_jungle_color) = value_get_color(DsMap(map).Value(/*"leaves_jungle_color"*/ STR(2206)), sVar(background_leaves_jungle_color));
		sVar(background_leaves_acacia_color) = value_get_color(DsMap(map).Value(/*"leaves_acacia_color"*/ STR(2207)), sVar(background_leaves_acacia_color));
		sVar(background_leaves_dark_oak_color) = value_get_color(DsMap(map).Value(/*"leaves_dark_oak_color"*/ STR(2208)), sVar(background_leaves_dark_oak_color));
		sVar(background_leaves_mangrove_color) = value_get_color(DsMap(map).Value(/*"leaves_mangrove_color"*/ STR(2209)), sVar(background_leaves_mangrove_color));
		sVar(background_fog_show) = value_get_real(DsMap(map).Value(/*"fog_show"*/ STR(2210)), sVar(background_fog_show));
		sVar(background_fog_sky) = value_get_real(DsMap(map).Value(/*"fog_sky"*/ STR(2211)), sVar(background_fog_sky));
		sVar(background_fog_color_custom) = value_get_real(DsMap(map).Value(/*"fog_color_custom"*/ STR(2212)), sVar(background_fog_color_custom));
		sVar(background_fog_color) = value_get_color(DsMap(map).Value(/*"fog_color"*/ STR(2213)), sVar(background_fog_color));
		sVar(background_fog_custom_object_color) = value_get_real(DsMap(map).Value(/*"fog_object_color_custom"*/ STR(2214)), sVar(background_fog_custom_object_color));
		sVar(background_fog_object_color) = value_get_color(DsMap(map).Value(/*"fog_object_color"*/ STR(2215)), sVar(background_fog_object_color));
		sVar(background_fog_distance) = value_get_real(DsMap(map).Value(/*"fog_distance"*/ STR(2216)), sVar(background_fog_distance));
		sVar(background_fog_size) = value_get_real(DsMap(map).Value(/*"fog_size"*/ STR(2217)), sVar(background_fog_size));
		sVar(background_fog_height) = value_get_real(DsMap(map).Value(/*"fog_height"*/ STR(2218)), sVar(background_fog_height));
		sVar(background_wind) = value_get_real(DsMap(map).Value(/*"wind"*/ STR(145)), sVar(background_wind));
		sVar(background_wind_speed) = value_get_real(DsMap(map).Value(/*"wind_speed"*/ STR(2219)), sVar(background_wind_speed));
		sVar(background_wind_strength) = value_get_real(DsMap(map).Value(/*"wind_strength"*/ STR(2220)), sVar(background_wind_strength));
		sVar(background_wind_direction) = value_get_real(DsMap(map).Value(/*"wind_direction"*/ STR(2221)), sVar(background_wind_direction));
		sVar(background_wind_directional_speed) = value_get_real(DsMap(map).Value(/*"wind_directional_speed"*/ STR(2222)), sVar(background_wind_directional_speed));
		sVar(background_wind_directional_strength) = value_get_real(DsMap(map).Value(/*"wind_directional_strength"*/ STR(2223)), sVar(background_wind_directional_strength));
		sVar(background_texture_animation_speed) = value_get_real(DsMap(map).Value(/*"texture_animation_speed"*/ STR(2224)), sVar(background_texture_animation_speed));
		return 0.0;
	}
	
	void project_load_find_save_ids(ScopeAny self)
	{
		VarType key = ds_map_find_first(global::save_id_map);
		while (!is_undefined(key))
		{
			if (DsMap(global::save_id_map).Value(key) != /*"root"*/ STR(2225) && DsMap(global::save_id_map).Value(key) != /*"default"*/ STR(102))
			{
				if (is_real(DsMap(global::save_id_map).Value(key)) || save_id_find(DsMap(global::save_id_map).Value(key)) != null_)
				{
					StringType sid;
					do
						sid = save_id_create();
					while (!(is_undefined(ds_map_find_value(global::save_id_map, sid))));
					DsMap(global::save_id_map)[key] = sid;
				}
			}
			key = ds_map_find_next(global::save_id_map, key);
		}
		
		DsMap(global::save_id_map)[null_] = null_;
		DsMap(global::save_id_map)[/*"root"*/ STR(2225)] = /*"root"*/ STR(2225);
		DsMap(global::save_id_map)[/*"default"*/ STR(102)] = /*"default"*/ STR(102);
		withAll (obj_resource, self->id)
			if (self->loaded && !is_undefined(DsMap(global::save_id_map).Value(self->load_id)))
				self->save_id = DsMap(global::save_id_map).Value(self->load_id);
		
		if (sBool(background_loaded))
		{
			sVar(background_image) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_image)));
			if (sVar(background_image) > 0)
				idInt(sVar(background_image), count)++;
			sVar(background_ground_tex) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_ground_tex)));
			idInt(sVar(background_ground_tex), count)++;
			sVar(background_ground_tex_material) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_ground_tex_material)));
			idInt(sVar(background_ground_tex_material), count)++;
			sVar(background_ground_tex_normal) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_ground_tex_normal)));
			idInt(sVar(background_ground_tex_normal), count)++;
			if (global::load_format >= e_project_FORMAT_100_DEMO_4)
			{
				sVar(background_sky_sun_tex) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_sky_sun_tex)));
				idInt(sVar(background_sky_sun_tex), count)++;
				sVar(background_sky_moon_tex) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_sky_moon_tex)));
				idInt(sVar(background_sky_moon_tex), count)++;
				sVar(background_sky_clouds_tex) = save_id_find(DsMap(global::save_id_map).Value(sVar(background_sky_clouds_tex)));
				idInt(sVar(background_sky_clouds_tex), count)++;
			}
		}
		withAll (obj_timeline, self->id)
			if (self->loaded && !is_undefined(DsMap(global::save_id_map).Value(self->load_id)))
				self->save_id = DsMap(global::save_id_map).Value(self->load_id);
		
		withAll (obj_template, self->id)
		{
			if (!self->loaded)
				continue;
			if (!is_undefined(DsMap(global::save_id_map).Value(self->load_id)))
				self->save_id = DsMap(global::save_id_map).Value(self->load_id);
			self->model = save_id_find(DsMap(global::save_id_map).Value(self->model));
			self->model_tex = save_id_find(DsMap(global::save_id_map).Value(self->model_tex));
			self->model_tex_material = save_id_find(DsMap(global::save_id_map).Value(self->model_tex_material));
			self->model_tex_normal = save_id_find(DsMap(global::save_id_map).Value(self->model_tex_normal));
			self->item_tex = save_id_find(DsMap(global::save_id_map).Value(self->item_tex));
			self->item_tex_material = save_id_find(DsMap(global::save_id_map).Value(self->item_tex_material));
			self->item_tex_normal = save_id_find(DsMap(global::save_id_map).Value(self->item_tex_normal));
			self->block_tex = save_id_find(DsMap(global::save_id_map).Value(self->block_tex));
			self->block_tex_material = save_id_find(DsMap(global::save_id_map).Value(self->block_tex_material));
			self->block_tex_normal = save_id_find(DsMap(global::save_id_map).Value(self->block_tex_normal));
			self->scenery = save_id_find(DsMap(global::save_id_map).Value(self->scenery));
			self->shape_tex = save_id_find(DsMap(global::save_id_map).Value(self->shape_tex));
			self->shape_tex_material = save_id_find(DsMap(global::save_id_map).Value(self->shape_tex_material));
			self->shape_tex_normal = save_id_find(DsMap(global::save_id_map).Value(self->shape_tex_normal));
			self->text_font = save_id_find(DsMap(global::save_id_map).Value(self->text_font));
			if (self->type == e_temp_type_ITEM && (!instance_exists(self->item_tex) || Obj(self->item_tex)->subAssetId != ID_obj_resource))
				self->item_tex = global::mc_res;
			if (self->type == e_temp_type_ITEM && (!instance_exists(self->item_tex_material) || Obj(self->item_tex_material)->subAssetId != ID_obj_resource))
				self->item_tex_material = global::mc_res;
			if (self->type == e_temp_type_ITEM && (!instance_exists(self->item_tex_normal) || Obj(self->item_tex_normal)->subAssetId != ID_obj_resource))
				self->item_tex_normal = global::mc_res;
			if (self->type == e_temp_type_SCENERY && instance_exists(self->scenery) && Obj(self->scenery)->subAssetId != ID_obj_resource)
				self->scenery = null_;
			if (global::temp_creator != global::_app->bench_settings)
			{
				if (self->model != null_)
					idInt(self->model, count)++;
				if (self->model_tex != null_)
					idInt(self->model_tex, count)++;
				if (self->model_tex_material != null_)
					idInt(self->model_tex_material, count)++;
				if (self->model_tex_normal != null_)
					idInt(self->model_tex_normal, count)++;
				if (self->item_tex != null_)
					idInt(self->item_tex, count)++;
				if (self->item_tex_material != null_)
					idInt(self->item_tex_material, count)++;
				if (self->item_tex_normal != null_)
					idInt(self->item_tex_normal, count)++;
				if (self->block_tex != null_)
					idInt(self->block_tex, count)++;
				if (self->block_tex_material != null_)
					idInt(self->block_tex_material, count)++;
				if (self->block_tex_normal != null_)
					idInt(self->block_tex_normal, count)++;
				if (self->scenery != null_)
					idInt(self->scenery, count)++;
				if (self->shape_tex != null_ && idVar(self->shape_tex, type) != e_tl_type_CAMERA)
					idInt(self->shape_tex, count)++;
				if (self->shape_tex_material != null_)
					idInt(self->shape_tex_material, count)++;
				if (self->shape_tex_normal != null_)
					idInt(self->shape_tex_normal, count)++;
				if (self->text_font != null_)
					idInt(self->text_font, count)++;
			}
			if (global::load_format < e_project_FORMAT_110_PRE_1 && self->type == e_temp_type_ITEM && self->item_tex != global::mc_res && !(self->legacy_item_sheet > 0))
				idVar(self->item_tex, type) = e_res_type_TEXTURE;
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
				self->pc_spawn_region_path = save_id_find(self->pc_spawn_region_path);
		}
		
		withAll (obj_timeline, self->id)
		{
			if (!self->loaded)
				continue;
			self->temp = save_id_find(DsMap(global::save_id_map).Value(self->temp));
			self->part_of = save_id_find(DsMap(global::save_id_map).Value(self->part_of));
			if (self->part_of == null_ && self->temp != null_)
				idInt(self->temp, count)++;
			if (global::load_format < e_project_FORMAT_122)
			{
				if (self->part_root == null_ && self->part_of != null_ && idVar(self->part_of, type) == e_tl_type_SCENERY && self->type == e_tl_type_SPECIAL_BLOCK)
				{
					self->part_root = self->part_of;
					project_load_set_part_root(ScopeAny(self), self->part_of);
				}
			}
			else
				self->part_root = save_id_find(DsMap(global::save_id_map).Value(self->part_root));
			
			if (self->value_default.Value(e_value_TEXTURE_OBJ) != null_)
				self->value_default[e_value_TEXTURE_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value_default.Value(e_value_TEXTURE_OBJ)));
			if (self->value_default.Value(e_value_TEXTURE_MATERIAL_OBJ) != null_)
				self->value_default[e_value_TEXTURE_MATERIAL_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value_default.Value(e_value_TEXTURE_MATERIAL_OBJ)));
			if (self->value_default.Value(e_value_TEXTURE_NORMAL_OBJ) != null_)
				self->value_default[e_value_TEXTURE_NORMAL_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value_default.Value(e_value_TEXTURE_NORMAL_OBJ)));
			self->glint_tex = save_id_find(DsMap(global::save_id_map).Value(self->glint_tex));
			idInt(self->glint_tex, count)++;
			if (self->part_list != null_)
				for (IntType i = IntType(0); i < ds_list_size(self->part_list); i++)
					DsList(self->part_list)[i] = save_id_find(DsMap(global::save_id_map).Value(DsList(self->part_list).Value(i)));
			self->parent = save_id_find(DsMap(global::save_id_map).Value(self->parent));
			if (self->parent == null_)
				self->parent = global::_app->id;
			if (!is_array(idVar(self->parent, tree_array)))
				idVar(self->parent, tree_array) = ArrType();
			if (self->parent_tree_index < IntType(0))
				idVar(self->parent, tree_array)[array_length(VarType::CreateRef(idVar(sVar(parent), tree_array)))] = self->id;
			else
				idVar(self->parent, tree_array)[sVar(parent_tree_index)] = self->id;
			
		}
		
		withAll (obj_keyframe, self->id)
		{
			if (!self->loaded)
				continue;
			self->value[e_value_PATH_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_PATH_OBJ)));
			self->value[e_value_ATTRACTOR] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_ATTRACTOR)));
			self->value[e_value_IK_TARGET] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_IK_TARGET)));
			self->value[e_value_IK_TARGET_ANGLE] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_IK_TARGET_ANGLE)));
			self->value[e_value_ROT_TARGET] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_ROT_TARGET)));
			self->value[e_value_POS_TARGET] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_POS_TARGET)));
			self->value[e_value_SCALE_TARGET] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_SCALE_TARGET)));
			self->value[e_value_BEND_IK_TARGET] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_BEND_IK_TARGET)));
			if (self->value.Value(e_value_TEXTURE_OBJ) == /*"none"*/ STR(909))
				self->value[e_value_TEXTURE_OBJ] = IntType(0);
			else
				self->value[e_value_TEXTURE_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_TEXTURE_OBJ)));
			
			if (self->value.Value(e_value_TEXTURE_MATERIAL_OBJ) == /*"none"*/ STR(909))
				self->value[e_value_TEXTURE_MATERIAL_OBJ] = IntType(0);
			else
				self->value[e_value_TEXTURE_MATERIAL_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_TEXTURE_MATERIAL_OBJ)));
			
			if (self->value.Value(e_value_TEXTURE_NORMAL_OBJ) == /*"none"*/ STR(909))
				self->value[e_value_TEXTURE_NORMAL_OBJ] = IntType(0);
			else
				self->value[e_value_TEXTURE_NORMAL_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_TEXTURE_NORMAL_OBJ)));
			
			self->value[e_value_SOUND_OBJ] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_SOUND_OBJ)));
			if (self->value.Value(e_value_SOUND_OBJ) != null_)
				idInt(self->value.Value(e_value_SOUND_OBJ), count)++;
			self->value[e_value_TEXT_FONT] = save_id_find(DsMap(global::save_id_map).Value(self->value.Value(e_value_TEXT_FONT)));
		}
		
		withAll (obj_particle_type, self->id)
		{
			if (!self->loaded)
				continue;
			if (!is_undefined(DsMap(global::save_id_map).Value(self->load_id)))
				self->save_id = DsMap(global::save_id_map).Value(self->load_id);
			if (self->temp != particle_sheet && self->temp != particle_template)
				self->temp = save_id_find(DsMap(global::save_id_map).Value(self->temp));
			self->sprite_tex = save_id_find(DsMap(global::save_id_map).Value(self->sprite_tex));
			self->sprite_template_tex = save_id_find(DsMap(global::save_id_map).Value(self->sprite_template_tex));
			if (global::temp_creator != global::_app->bench_settings)
				idInt(self->sprite_tex, count)++;
		}
		
		withAll (obj_marker, self->id)
		{
			if (!self->loaded)
				continue;
			if (!is_undefined(DsMap(global::save_id_map).Value(self->load_id)))
				self->save_id = DsMap(global::save_id_map).Value(self->load_id);
			ds_list_add({ global::_app->timeline_marker_list, self->id });
		}
		
		marker_list_sort(self);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sVar(tree_array))); i++)
			if (sVar(tree_array).Value(i) > IntType(0))
				ds_list_add({ sInt(tree_list), sVar(tree_array).Value(i) });
		withAll (obj_timeline, self->id)
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->tree_array)); i++)
				if (self->tree_array.Value(i) > IntType(0))
					ds_list_add({ self->tree_list, self->tree_array.Value(i) });
		
		if (global::load_format < e_project_FORMAT_100_DEBUG)
			for (IntType t = IntType(0); t < ds_list_size(sInt(tree_list)); t++)
				withOne (Object, DsList(sInt(tree_list)).Value(t), self->id)
					tl_update_hide(self);
		
		if (ObjType(obj_view, sInt(view_main))->camera != -IntType(4) && ObjType(obj_view, sInt(view_main))->camera != -IntType(5) && !instance_exists(ObjType(obj_view, sInt(view_main))->camera))
			ObjType(obj_view, sInt(view_main))->camera = save_id_find(ObjType(obj_view, sInt(view_main))->camera);
		if (ObjType(obj_view, sInt(view_second))->camera != -IntType(4) && ObjType(obj_view, sInt(view_second))->camera != -IntType(5) && !instance_exists(ObjType(obj_view, sInt(view_second))->camera))
			ObjType(obj_view, sInt(view_second))->camera = save_id_find(ObjType(obj_view, sInt(view_second))->camera);
	}
	
	void project_load_legacy_background(ScopeAny self)
	{
		sBool(background_loaded) = true;
		sVar(background_image_show) = buffer_read_byte();
		if (sVar(background_image) != null_)
			idInt(sVar(background_image), count)--;
		sVar(background_image) = buffer_read_int();
		if (sVar(background_image) == IntType(0))
			sVar(background_image) = null_;
		ArrType imagetype = ArrType::From({ /*"image"*/ STR(94), /*"sphere"*/ STR(555), /*"box"*/ STR(1369) });
		sVar(background_image_type) = imagetype.Value(buffer_read_byte());
		sVar(background_image_stretch) = buffer_read_byte();
		if (global::load_format >= e_project_FORMAT_100_DEBUG)
			sVar(background_image_box_mapped) = buffer_read_byte();
		sVar(background_sky_time) = buffer_read_double();
		sVar(background_sky_clouds_show) = buffer_read_byte();
		IntType flat = buffer_read_byte();
		sVar(background_sky_clouds_mode) = ((flat > 0) ? /*"flat"*/ STR(750) : /*"faded"*/ STR(749));
		sVar(background_sky_clouds_speed) = buffer_read_double();
		sVar(background_ground_show) = buffer_read_byte();
		sVar(background_ground_legacy_name) = DsList(global::legacy_block_100_texture_list).Value(buffer_read_int());
		IntType newslot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), sVar(background_ground_legacy_name));
		if (newslot >= IntType(0))
			sVar(background_ground_slot) = newslot;
		else
		{
			newslot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list), sVar(background_ground_legacy_name));
			if (newslot >= IntType(0))
				sVar(background_ground_slot) = ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)) + newslot;
		}
		
		idInt(sVar(background_ground_tex), count)--;
		sVar(background_ground_tex) = project_load_legacy_save_id();
		sVar(background_ground_tex_material) = /*"default"*/ STR(102);
		sVar(background_ground_tex_normal) = /*"default"*/ STR(102);
		sVar(background_biome) = ObjType(obj_biome, DsList(global::biome_list).Value(buffer_read_byte()))->name;
		sVar(background_sky_color) = buffer_read_int();
		sVar(background_sky_clouds_color) = buffer_read_int();
		sVar(background_sunlight_color) = buffer_read_int();
		sVar(background_ambient_color) = buffer_read_int();
		sVar(background_night_color) = buffer_read_int();
		sVar(background_fog_show) = buffer_read_byte();
		if (global::load_format >= e_project_FORMAT_100_DEBUG)
			sVar(background_fog_sky) = buffer_read_byte();
		sVar(background_fog_color_custom) = buffer_read_byte();
		sVar(background_fog_color) = buffer_read_int();
		sVar(background_fog_distance) = buffer_read_int();
		sVar(background_fog_size) = buffer_read_int();
		if (global::load_format >= e_project_FORMAT_100_DEBUG)
			sVar(background_fog_height) = buffer_read_int();
		sVar(background_wind) = buffer_read_byte();
		sVar(background_wind_speed) = buffer_read_double();
		sVar(background_wind_strength) = buffer_read_double();
		buffer_read_byte();
		sVar(background_texture_animation_speed) = buffer_read_double();
		buffer_read_int();
		if (global::load_format >= e_project_FORMAT_105)
			buffer_read_byte();
		if (global::load_format >= e_project_FORMAT_100_DEMO_4)
		{
			idInt(sVar(background_sky_sun_tex), count)--;
			sVar(background_sky_sun_tex) = project_load_legacy_save_id();
			idInt(sVar(background_sky_moon_tex), count)--;
			sVar(background_sky_moon_tex) = project_load_legacy_save_id();
			sVar(background_sky_moon_phase) = buffer_read_int();
			sVar(background_sky_rotation) = buffer_read_double();
			idInt(sVar(background_sky_clouds_tex), count)--;
			sVar(background_sky_clouds_tex) = project_load_legacy_save_id();
			sVar(background_sky_clouds_height) = buffer_read_double();
			sVar(background_sky_clouds_size) = buffer_read_double();
			sVar(background_sky_clouds_thickness) = buffer_read_double();
			if (global::_app->background_sky_clouds_tex == /*"default"*/ STR(102))
				global::_app->background_sky_clouds_size *= 8.0;
		}
		if (global::load_format >= e_project_FORMAT_CB_100)
		{
			IntType custombiome;
			custombiome = buffer_read_byte();
			if (custombiome > 0)
				sVar(background_biome) = ObjType(obj_biome, DsList(global::biome_list).Value(IntType(0)))->name;
			sVar(background_foliage_color) = buffer_read_int();
			sVar(background_grass_color) = sVar(background_foliage_color);
		}
	}
	
	void project_load_legacy_beta(ScopeAny self, BoolType loadbackground)
	{
		IntType load = (new obj_data)->id;
		withOne (obj_data, load, self->id)
		{
			self->lib_amount = buffer_read_short();
			for (IntType a = IntType(0); a < self->lib_amount; a++)
			{
				self->lib_type[a] = buffer_read_string_int();
				self->lib_name[a] = buffer_read_string_int();
				self->lib_char_skin[a] = buffer_read_short() - IntType(1);
				IntType modelid = buffer_read_byte();
				self->lib_char_model_legacy_name[a] = project_load_legacy_model_name(modelid);
				if (is_string(self->lib_char_model_legacy_name.Value(a)))
				{
					VarType modelmap = DsMap(global::legacy_model_name_map).Value(self->lib_char_model_legacy_name.Value(a));
					if (!is_undefined(modelmap))
					{
						self->lib_char_model_name[a] = DsMap(modelmap).Value(/*"name"*/ STR(820));
						if (!is_undefined(DsMap(modelmap).Value(/*"state"*/ STR(1027))))
							self->lib_char_model_state[a] = string_get_state_vars(DsMap(modelmap).Value(/*"state"*/ STR(1027)));
						else
							self->lib_char_model_state[a] = ArrType();
						
					}
					else
					{
						self->lib_char_model_name[a] = /*""*/ STR(0);
						self->lib_char_model_state[a] = ArrType();
						log({ /*"Could not convert model name"*/ STR(2226), self->lib_char_model_legacy_name.Value(a) });
					}
					
				}
				else
					log({ /*"Could not convert model ID"*/ STR(2227), modelid });
				
				self->lib_item_type[a] = IntType(0);
				self->lib_item_bounce[a] = true;
				self->lib_item_face[a] = true;
				switch ((IntType)buffer_read_byte())
				{
					case IntType(1):
					{
						self->lib_item_bounce[a] = true;
						self->lib_item_type[a] = true;
						break;
					}
					case IntType(2):
					{
						self->lib_item_bounce[a] = false;
						self->lib_item_face[a] = true;
						break;
					}
					case IntType(3):
					{
						self->lib_item_bounce[a] = true;
						self->lib_item_face[a] = false;
						break;
					}
					case IntType(4):
					{
						self->lib_item_bounce[a] = false;
						self->lib_item_face[a] = false;
						break;
					}
				}
				
				if (self->lib_item_type.Value(a))
				{
					self->lib_item_bounce[a] = IntType(0);
					self->lib_item_face[a] = IntType(0);
				}
				self->lib_item_tex[a] = buffer_read_short() - IntType(1);
				self->lib_item_x[a] = buffer_read_short();
				self->lib_item_y[a] = buffer_read_short();
				self->lib_block_id[a] = buffer_read_short();
				self->lib_block_data[a] = buffer_read_byte();
				self->lib_block_tex[a] = buffer_read_short() - IntType(1);
				self->lib_scenery_source[a] = filename_name(buffer_read_string_int());
				self->lib_scenery_tex[a] = buffer_read_short() - IntType(1);
				for (IntType b = IntType(0); b < IntType(3); b++)
				{
					self->lib_rotx[a][b] = buffer_read_double();
					self->lib_roty[a][b] = buffer_read_double();
					self->lib_rotz[a][b] = buffer_read_double();
				}
				self->lib_rotpoint[a] = point3D(IntType(0), IntType(0), IntType(0));
			}
			self->tl_amount = buffer_read_short();
			for (IntType a = IntType(0); a < self->tl_amount; a++)
			{
				self->tl_type[a] = buffer_read_string_int();
				self->tl_lib[a] = buffer_read_short();
				self->tl_visible[a] = buffer_read_byte();
				self->tl_show[a] = buffer_read_byte();
				self->tl_lock[a] = buffer_read_byte();
				self->tl_lock_parent[a] = buffer_read_short();
				self->tl_lock_part[a] = buffer_read_byte();
				if (global::load_format > e_project_FORMAT_05)
					self->tl_lock_part_bend[a] = buffer_read_byte();
				else
					self->tl_lock_part_bend[a] = false;
				
				self->tl_color[a] = buffer_read_int();
				self->tl_parts[a] = IntType(1);
				if (self->tl_type.Value(a) == /*"char"*/ STR(547) || self->tl_type.Value(a) == /*"spblock"*/ STR(548))
				{
					VarType modelname = self->lib_char_model_name.Value(self->tl_lib.Value(a));
					if (modelname == /*"spider"*/ STR(2228) || modelname == /*"cave_spider"*/ STR(2229))
						self->tl_parts[a] = IntType(7);
					else
						if (modelname == /*"ghast"*/ STR(2230))
							self->tl_parts[a] = IntType(8);
						else
							if (modelname == /*"squid"*/ STR(2231))
								self->tl_parts[a] = IntType(6);
							else
								if (modelname == /*"wither"*/ STR(2232))
									self->tl_parts[a] = IntType(6);
								else
								{
									VarType modelpartlist = DsMap(global::legacy_model_part_map).Value(modelname);
									if (!is_undefined(modelpartlist))
										self->tl_parts[a] = ds_list_size((IntType)(modelpartlist)) + IntType(1);
									else
										log({ /*"Could get number of parts for "*/ STR(2233), self->lib_char_model_legacy_name.Value(self->tl_lib.Value(a)) });
									
								}
							
						
					
					
				}
				if (global::load_format == e_project_FORMAT_05)
				{
					self->tl_values[a] = (IntType)(buffer_read_byte() / self->tl_parts.Value(a));
					self->tl_acts[a] = (IntType)(buffer_read_byte() / self->tl_parts.Value(a));
				}
				else
				{
					self->tl_values[a] = IntType(13);
					self->tl_acts[a] = IntType(6);
				}
				
				self->tl_keyframes[a] = buffer_read_short();
				for (IntType b = IntType(0); b < self->tl_keyframes.Value(a); b++)
				{
					withOne (obj_data, (new obj_data)->id, self->id)
					{
						self->pos = buffer_read_int();
						for (IntType c = IntType(0); c < ObjType(obj_data, load)->tl_values.Value(a) * ObjType(obj_data, load)->tl_parts.Value(a); c++)
							self->value[c] = buffer_read_double();
						for (IntType c = IntType(0); c < ObjType(obj_data, load)->tl_acts.Value(a) * ObjType(obj_data, load)->tl_parts.Value(a); c++)
							buffer_read_byte();
						for (IntType c = IntType(0); c < IntType(3); c++)
							self->set[c] = buffer_read_byte();
						ObjType(obj_data, load)->tl_keyframe[a][b] = self->id;
					}
					
				}
				self->tl_tl[a] = null_;
			}
			self->skin_amount = buffer_read_short() - IntType(1);
			for (IntType a = IntType(0); a < self->skin_amount; a++)
				self->skin_name[a] = filename_name(buffer_read_string_int());
			self->item_amount = buffer_read_short() - IntType(1);
			for (IntType a = IntType(0); a < self->item_amount; a++)
				self->item_name[a] = filename_name(buffer_read_string_int());
			self->ter_amount = buffer_read_short() - IntType(1);
			for (IntType a = IntType(0); a < self->ter_amount; a++)
				self->ter_name[a] = filename_name(buffer_read_string_int());
			self->bg_select = buffer_read_short() - IntType(1);
			self->bg_amount = buffer_read_short() - IntType(1);
			for (IntType a = IntType(0); a < self->bg_amount; a++)
				self->bg_name[a] = filename_name(buffer_read_string_int());
			global::debug_indent--;
			self->bg_show = buffer_read_byte();
			self->bg_stretch = buffer_read_byte();
			self->bg_box = buffer_read_byte();
			self->bg_ground_show = buffer_read_byte();
			self->bg_ground_tex = buffer_read_short() - IntType(1);
			self->bg_ground_x = buffer_read_short();
			self->bg_ground_y = buffer_read_short();
			self->sky_color = buffer_read_int();
			self->sky_time = buffer_read_double();
			self->sky_light = buffer_read_byte();
			self->lights_enable = buffer_read_byte();
			self->lights_amount = buffer_read_short();
			for (IntType a = IntType(0); a < self->lights_amount; a++)
			{
				self->light_x[a] = buffer_read_int();
				self->light_y[a] = buffer_read_int();
				self->light_z[a] = buffer_read_short();
				self->light_r[a] = buffer_read_short();
				self->light_c[a] = buffer_read_int();
			}
			self->camfrom.Real(X_) = buffer_read_double();
			self->camfrom.Real(Y_) = buffer_read_double();
			self->camfrom.Real(Z_) = buffer_read_double();
			self->camto.Real(X_) = buffer_read_double();
			self->camto.Real(Y_) = buffer_read_double();
			self->camto.Real(Z_) = buffer_read_double();
			self->camanglexy = buffer_read_double();
			self->camanglez = buffer_read_double();
			self->camzoom = buffer_read_double();
			self->tempo = buffer_read_byte();
			self->loop = buffer_read_byte();
			self->timelinepos = buffer_read_int();
			self->timelinescrollh = buffer_read_int();
			self->timelinezoom = buffer_read_byte();
		}
		
		IntType loadid = IntType(0);
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->skin_amount; a++)
		{
			withOne (obj_resource, (new obj_resource)->id, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->type = e_res_type_SKIN;
				self->filename = ObjType(obj_data, load)->skin_name.Value(a);
				self->player_skin = false;
				for (IntType b = IntType(0); b < ObjType(obj_data, load)->lib_amount; b++)
				{
					if (ObjType(obj_data, load)->lib_char_skin.Value(b) == a)
					{
						self->player_skin = true;
						break;
					}
				}
				ObjType(obj_data, load)->skin_res[a] = self->id;
				sortlist_add(global::_app->res_list, self->id);
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->item_amount; a++)
		{
			withOne (obj_resource, (new obj_resource)->id, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->type = e_res_type_ITEM_SHEET;
				self->filename = ObjType(obj_data, load)->item_name.Value(a);
				self->item_sheet_size = vec2(IntType(16), IntType(16));
				ObjType(obj_data, load)->item_res[a] = self->id;
				sortlist_add(global::_app->res_list, self->id);
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->ter_amount; a++)
		{
			withOne (obj_resource, (new obj_resource)->id, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->type = e_res_type_LEGACY_BLOCK_SHEET;
				self->filename = ObjType(obj_data, load)->ter_name.Value(a);
				ObjType(obj_data, load)->ter_res[a] = self->id;
				sortlist_add(global::_app->res_list, self->id);
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->bg_amount; a++)
		{
			withOne (obj_resource, (new obj_resource)->id, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->type = e_res_type_TEXTURE;
				self->filename = ObjType(obj_data, load)->bg_name.Value(a);
				ObjType(obj_data, load)->bg_res[a] = self->id;
				sortlist_add(global::_app->res_list, self->id);
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->lib_amount; a++)
		{
			if (ObjType(obj_data, load)->lib_type.Value(a) == /*"light"*/ STR(643))
				continue;
			withOne (obj_template, (new obj_template)->id, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->type = ds_list_find_index(global::temp_type_name_list, ObjType(obj_data, load)->lib_type.Value(a));
				self->name = ObjType(obj_data, load)->lib_name.Value(a);
				switch ((IntType)self->type)
				{
					case e_temp_type_CHARACTER:
					case e_temp_type_SPECIAL_BLOCK:
					{
						self->model_name = ObjType(obj_data, load)->lib_char_model_name.Value(a);
						self->model_state = array_copy_1d(ObjType(obj_data, load)->lib_char_model_state.Value(a));
						temp_update_model(ScopeAny(self));
						if (ObjType(obj_data, load)->lib_char_skin.Value(a) > -IntType(1))
							self->model_tex = ObjType(obj_resource, ObjType(obj_data, load)->skin_res.Value(ObjType(obj_data, load)->lib_char_skin.Value(a)))->load_id;
						else
							self->model_tex = save_id_get(global::mc_res);
						
						break;
					}
					
					case e_temp_type_ITEM:
					{
						self->item_3d = ObjType(obj_data, load)->lib_item_type.Value(a);
						self->item_face_camera = ObjType(obj_data, load)->lib_item_face.Value(a);
						self->item_bounce = ObjType(obj_data, load)->lib_item_bounce.Value(a);
						self->item_slot = ObjType(obj_data, load)->lib_item_y.Value(a) * IntType(16) + ObjType(obj_data, load)->lib_item_x.Value(a);
						if (ObjType(obj_data, load)->lib_item_tex.Value(a) > -IntType(1))
							self->item_tex = ObjType(obj_resource, ObjType(obj_data, load)->item_res.Value(ObjType(obj_data, load)->lib_item_tex.Value(a)))->load_id;
						else
							self->item_tex = save_id_get(global::mc_res);
						
						ObjType(obj_data, load)->lib_rotpoint[a] = point3D(ObjType(obj_data, load)->lib_rotx[a][IntType(0)], ObjType(obj_data, load)->lib_roty[a][IntType(0)], ObjType(obj_data, load)->lib_rotz[a][IntType(0)]);
						break;
					}
					
					case e_temp_type_BLOCK:
					{
						IntType bid = ObjType(obj_data, load)->lib_block_id.Value(a);
						IntType bdata = ObjType(obj_data, load)->lib_block_data.Value(a);
						if (global::legacy_block_set.Value(bid))
						{
							VarType block = global::legacy_block_obj[bid][bdata];
							if (block != null_)
							{
								self->block_name = ObjType(obj_block, block)->name;
								self->block_state = block_get_state_id_state_vars(block, global::legacy_block_state_id[bid][bdata]);
							}
						}
						if (ObjType(obj_data, load)->lib_block_tex.Value(a) > -IntType(1))
							self->block_tex = ObjType(obj_resource, ObjType(obj_data, load)->ter_res.Value(ObjType(obj_data, load)->lib_block_tex.Value(a)))->load_id;
						else
							self->block_tex = save_id_get(global::mc_res);
						
						ObjType(obj_data, load)->lib_rotpoint[a] = point3D(ObjType(obj_data, load)->lib_rotx[a][IntType(1)], ObjType(obj_data, load)->lib_roty[a][IntType(1)], ObjType(obj_data, load)->lib_rotz[a][IntType(1)]);
						break;
					}
					
					case e_temp_type_SCENERY:
					{
						if (ObjType(obj_data, load)->lib_scenery_source.Value(a) != /*""*/ STR(0))
						{
							withOne (obj_resource, (new obj_resource)->id, self->id)
							{
								self->loaded = true;
								self->load_id = loadid++;
								DsMap(global::save_id_map)[self->load_id] = self->load_id;
								self->type = e_res_type_SCENERY;
								self->filename = filename_name(ObjType(obj_data, load)->lib_scenery_source.Value(a));
								self->scenery_tl_add = false;
								ObjType(obj_template, self.otherId)->scenery = self->load_id;
								sortlist_add(global::_app->res_list, self->id);
							}
							
						}
						if (ObjType(obj_data, load)->lib_scenery_tex.Value(a) > -IntType(1))
							self->block_tex = ObjType(obj_resource, ObjType(obj_data, load)->ter_res.Value(ObjType(obj_data, load)->lib_scenery_tex.Value(a)))->load_id;
						else
							self->block_tex = save_id_get(global::mc_res);
						
						ObjType(obj_data, load)->lib_rotpoint[a] = point3D(ObjType(obj_data, load)->lib_rotx[a][IntType(2)], ObjType(obj_data, load)->lib_roty[a][IntType(2)], ObjType(obj_data, load)->lib_rotz[a][IntType(2)]);
						break;
					}
					
				}
				
				ObjType(obj_data, load)->lib_temp[a] = self->id;
				sortlist_add(global::_app->lib_list, self->id);
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->tl_amount; a++)
		{
			IntType tl, lib;
			VarType modelpartlist;
			if (a == IntType(0))
			{
				if (ObjType(obj_data, load)->tl_keyframes.Value(a) == IntType(0))
					continue;
				tl = (new obj_timeline)->id;
				ObjType(obj_timeline, tl)->type = e_tl_type_CAMERA;
			}
			else
				if (ObjType(obj_data, load)->tl_type.Value(a) == /*"light"*/ STR(643))
				{
					tl = (new obj_timeline)->id;
					ObjType(obj_timeline, tl)->type = e_tl_type_POINT_LIGHT;
				}
				else
				{
					tl = (new obj_timeline)->id;
					lib = ObjType(obj_data, load)->tl_lib.Value(a);
					ObjType(obj_timeline, tl)->temp = ObjType(obj_data, load)->lib_temp.Value(lib);
					ObjType(obj_timeline, tl)->type = ds_list_find_index(global::tl_type_name_list, ObjType(obj_data, load)->tl_type.Value(a));
				}
			
			
			withOne (obj_timeline, tl, self->id)
			{
				self->loaded = true;
				self->load_id = loadid++;
				DsMap(global::save_id_map)[self->load_id] = self->load_id;
				self->hide = !ObjType(obj_data, load)->tl_visible.Value(a);
				self->color = ObjType(obj_data, load)->tl_color.Value(a);
				self->inherit_visibility = false;
				self->inherit_rot_point = false;
				self->parent = /*"root"*/ STR(2225);
				self->parent_tree_index = null_;
				if (self->type == e_tl_type_CHARACTER || self->type == e_tl_type_SPECIAL_BLOCK)
				{
					self->part_list = ds_list_create();
					if (idVar(self->temp, model_file) != null_)
						for (IntType p = IntType(0); p < ds_list_size(idInt(idVar(self->temp, model_file), file_part_list)); p++)
							if (ds_list_find_index(idInt(self->temp, model_hide_list), ObjType(obj_model_part, DsList(idInt(idVar(self->temp, model_file), file_part_list)).Value(p))->name) == -IntType(1))
								ds_list_add({ self->part_list, tl_new_part(self, DsList(idInt(idVar(self->temp, model_file), file_part_list)).Value(p)) });
					ds_list_clear(self->tree_list);
				}
				else
					if (self->type == e_tl_type_ITEM || self->type == e_tl_type_BLOCK || self->type == e_tl_type_SCENERY)
					{
						self->rot_point_custom = true;
						self->rot_point = point3D_copy(ObjType(obj_data, load)->lib_rotpoint.Value(lib));
					}
				
				for (IntType b = IntType(0); b < ObjType(obj_data, load)->tl_parts.Value(a); b++)
				{
					VarType tl = self->id;
					if (b > IntType(0))
					{
						VarType modelpartlist = DsMap(global::legacy_model_part_map).Value(idVar(self->temp, model_name));
						if (ds_list_valid(modelpartlist) && b - IntType(1) < ds_list_size((IntType)(modelpartlist)))
							tl = tl_part_find(ScopeAny(self), DsList(modelpartlist).Value(b - IntType(1)));
						if (tl == null_)
							tl = self->id;
					}
					for (IntType c = IntType(0); c < ObjType(obj_data, load)->tl_keyframes.Value(a); c++)
					{
						IntType readkf = ObjType(obj_data, load)->tl_keyframe[a][c];
						withOne (obj_keyframe, (new obj_keyframe)->id, self->id)
						{
							self->loaded = true;
							self->position = ObjType(obj_data, readkf)->pos;
							self->timeline = tl;
							self->selected = false;
							self->sound_play_index = null_;
							for (IntType v = IntType(0); v < e_value_amount; v++)
								self->value[v] = global::_app->value_default.Value(v);
							for (IntType v = IntType(0); v < ObjType(obj_data, load)->tl_values.Value(a); v++)
							{
								IntType vid = project_load_legacy_beta_value_id(idVar(tl, type), v);
								if (vid > -IntType(1))
									self->value[vid] = project_load_legacy_beta_value(vid, ObjType(obj_data, readkf)->value.Value(b * ObjType(obj_data, load)->tl_values.Value(a) + v));
							}
							self->value[e_value_TRANSITION] = project_load_legacy_beta_value(e_value_TRANSITION, ObjType(obj_data, readkf)->set.Value(IntType(0)));
							if (ObjType(obj_timeline, self.otherId)->type == e_tl_type_CAMERA)
							{
								self->value[e_value_CAM_ROTATE] = true;
								self->value[e_value_ROT_X] = self->value.Value(e_value_CAM_ROTATE_ANGLE_Z);
								self->value[e_value_ROT_Z] = self->value.Value(e_value_CAM_ROTATE_ANGLE_XY);
							}
							else
								self->value[e_value_VISIBLE] = ObjType(obj_data, readkf)->set.Value(IntType(1));
							
							ds_list_add({ idInt(tl, keyframe_list), self->id });
						}
						
					}
				}
				for (IntType c = IntType(0); c < ObjType(obj_data, load)->tl_keyframes.Value(a); c++)
					withOne (obj_data, ObjType(obj_data, load)->tl_keyframe[a][c], self->id)
						instance_destroy(ScopeAny(self));
				
				if (self->part_list != null_)
				{
					for (IntType p = IntType(0); p < ds_list_size(self->part_list); p++)
					{
						withOne (Object, DsList(self->part_list).Value(p), self->id)
						{
							sBool(loaded) = true;
							sVar(load_id) = loadid++;
							DsMap(global::save_id_map)[sVar(load_id)] = sVar(load_id);
							sVar(part_of) = idVar(sVar(part_of), load_id);
							sVar(parent) = idVar(sVar(parent), load_id);
							sVar(parent_tree_index) = null_;
						}
						
					}
				}
				ObjType(obj_data, load)->tl_tl[a] = self->id;
			}
			
		}
		for (IntType a = IntType(0); a < ObjType(obj_data, load)->tl_amount; a++)
		{
			if (ObjType(obj_data, load)->tl_lock_parent.Value(a) < IntType(0) || !ObjType(obj_data, load)->tl_lock.Value(a))
				continue;
			VarType par = ObjType(obj_data, load)->tl_tl.Value(ObjType(obj_data, load)->tl_lock_parent.Value(a));
			RealType partid = ObjType(obj_data, load)->tl_lock_part.Value(a) - IntType(1);
			if (idInt(par, part_list) != null_ && partid > -IntType(1))
			{
				VarType modelpartlist, newpar;
				modelpartlist = DsMap(global::legacy_model_part_map).Value(idVar(idVar(par, temp), model_name));
				if (ds_list_valid(modelpartlist) && partid < ds_list_size((IntType)(modelpartlist)))
					withOne (Object, par, self->id)
						newpar = tl_part_find(self, DsList(modelpartlist).Value(partid));
				
				if (newpar != null_)
					par = newpar;
			}
			withOne (obj_timeline, ObjType(obj_data, load)->tl_tl.Value(a), self->id)
			{
				self->lock_bend = ObjType(obj_data, load)->tl_lock_part_bend.Value(a);
				self->parent = idVar(par, load_id);
				self->parent_tree_index = null_;
			}
			
		}
		withAll (obj_timeline, self->id)
			if (self->loaded && self->temp != null_)
				self->temp = idVar(self->temp, load_id);
		
		if (loadbackground)
		{
			if (ObjType(obj_data, load)->bg_select > -IntType(1))
				sVar(background_image) = ObjType(obj_resource, ObjType(obj_data, load)->bg_res.Value(ObjType(obj_data, load)->bg_select))->load_id;
			sVar(background_image_show) = ObjType(obj_data, load)->bg_show;
			sVar(background_image_stretch) = ObjType(obj_data, load)->bg_stretch;
			sInt(background_image_box) = ObjType(obj_data, load)->bg_box;
			sVar(background_ground_show) = ObjType(obj_data, load)->bg_ground_show;
			if (ObjType(obj_data, load)->bg_ground_tex > -IntType(1))
			{
				idInt(sVar(background_ground_tex), count)--;
				sVar(background_ground_tex) = ObjType(obj_resource, ObjType(obj_data, load)->ter_res.Value(ObjType(obj_data, load)->bg_ground_tex))->load_id;
			}
			else
				sVar(background_ground_tex) = /*"default"*/ STR(102);
			
			sVar(background_ground_tex_material) = /*"default"*/ STR(102);
			sVar(background_ground_tex_normal) = /*"default"*/ STR(102);
			RealType oldslot;
			VarType legacyname;
			IntType newslot;
			oldslot = ObjType(obj_data, load)->bg_ground_y * IntType(16) + ObjType(obj_data, load)->bg_ground_x;
			if (global::load_format == e_project_FORMAT_07_DEMO)
				legacyname = DsList(global::legacy_block_07_demo_texture_list).Value(oldslot);
			else
				legacyname = DsList(global::legacy_block_05_texture_list).Value(oldslot);
			
			newslot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list), legacyname);
			if (newslot >= IntType(0))
				sVar(background_ground_slot) = newslot;
			else
			{
				newslot = ds_list_find_index((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list), legacyname);
				if (newslot >= IntType(0))
					sVar(background_ground_slot) = ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)) + newslot;
			}
			
			sVar(background_sky_color) = ObjType(obj_data, load)->sky_color;
			sVar(background_sky_time) = ObjType(obj_data, load)->sky_time;
			ObjType(obj_view, sInt(view_main))->lights = ObjType(obj_data, load)->sky_light;
			sVar(cam_work_focus)[X_] = ObjType(obj_data, load)->camto.Real(X_);
			sVar(cam_work_focus)[Y_] = ObjType(obj_data, load)->camto.Real(Y_);
			sVar(cam_work_focus)[Z_] = ObjType(obj_data, load)->camto.Real(Z_);
			sVar(cam_work_angle_xy) = ObjType(obj_data, load)->camanglexy;
			sVar(cam_work_angle_z) = ObjType(obj_data, load)->camanglez;
			sVar(cam_work_zoom) = ObjType(obj_data, load)->camzoom;
			sVar(cam_work_zoom_goal) = sVar(cam_work_zoom);
			sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
			sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
			camera_work_set_from(self);
			sVar(project_tempo) = ObjType(obj_data, load)->tempo;
			sVar(timeline_repeat) = ObjType(obj_data, load)->loop;
			sBool(background_loaded) = true;
		}
		withOne (obj_data, load, self->id)
			instance_destroy(ScopeAny(self));
		
	}
	
}
