/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.05.16 16:36:27 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType tab_template_editor_particles_framebox(ScopeAny self)
	{
		RealType size, xx, yy, swid, scale;
		VarType res;
		IntType tex;
		RealType fwid, fhei, framesx, mouseframe;
		size = IntType(256);
		tab_control(self, size + IntType(40));
		xx = floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - size / 2.0);
		yy = floor(sVar(dy) + 20.0);
		if (xx + size < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + size < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			tab_next(self);
			return IntType(0);
		}
		res = idVar(global::ptype_edit, sprite_tex);
		if (!res_is_ready(res))
			res = global::mc_res;
		tex = idArr(res, particles_texture).Value(idVar(global::ptype_edit, sprite_tex_image));
		swid = texture_width(tex);
		scale = min({ size / swid, size / texture_height(tex) });
		fwid = min({ size, idVar(global::ptype_edit, sprite_frame_width) * scale });
		fhei = min({ size, idVar(global::ptype_edit, sprite_frame_height) * scale });
		framesx = max({ IntType(1), floor(swid / idVar(global::ptype_edit, sprite_frame_width)) });
		mouseframe = floor((clamp(gmlGlobal::mouse_x - xx, IntType(0), size - IntType(1))) / fwid) + floor((clamp(gmlGlobal::mouse_y - yy, IntType(0), size - IntType(1))) / fhei) * framesx;
		draw_box(xx, yy, size, size, false, global::c_level_bottom, IntType(1));
		draw_texture({ tex, xx, yy, scale, scale });
		if (app_mouse_box(self, xx, yy, size, size) && sBool(content_mouseon))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed))
			{
				sVar(window_busy) = /*"particleeditortypeanimationstartend"*/ STR(3616);
				action_lib_pc_type_sprite_frame_start(self, mouseframe, false);
				action_lib_pc_type_sprite_frame_end(self, mouseframe, false);
			}
		}
		if (sVar(window_busy) == /*"particleeditortypeanimationstartend"*/ STR(3616))
		{
			sInt(mouse_cursor) = cr_handpoint;
			action_lib_pc_type_sprite_frame_end(self, mouseframe, false);
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		for (VarType f = min({ idVar(global::ptype_edit, sprite_frame_start), idVar(global::ptype_edit, sprite_frame_end) }); f <= max({ idVar(global::ptype_edit, sprite_frame_start), idVar(global::ptype_edit, sprite_frame_end) }); f++)
		{
			RealType bx, by, bh, alpha;
			VarType col;
			bx = xx + (mod(f, framesx)) * fwid;
			by = yy + ((IntType)(f / framesx)) * fhei;
			if (by >= yy + size)
				break;
			col = global::c_border;
			alpha = global::a_border;
			RealType reverse = (idVar(global::ptype_edit, sprite_frame_start) < idVar(global::ptype_edit, sprite_frame_end));
			if (f == idVar(global::ptype_edit, sprite_frame_start))
			{
				col = global::c_accent;
				alpha = IntType(1);
				draw_label(self, { text_get({ /*"particleeditortypespriteframeboxstart"*/ STR(3617) }), bx + floor(fwid / 2.0), min({ by + ((reverse > 0) ? 0.0 : fhei), yy + size }), fa_center, (reverse > 0) ? fa_bottom : fa_top, col, IntType(1), sInt(font_label) });
			}
			else
				if (f == idVar(global::ptype_edit, sprite_frame_end))
				{
					col = global::c_error;
					alpha = IntType(1);
					draw_label(self, { text_get({ /*"particleeditortypespriteframeboxend"*/ STR(3618) }), bx + floor(fwid / 2.0), min({ by + (!(reverse > 0) ? 0.0 : fhei), yy + size }), fa_center, !(reverse > 0) ? fa_bottom : fa_top, col, IntType(1), sInt(font_label) });
				}
			
			if (by + fhei > yy + size)
				bh = yy + size - by;
			else
				bh = fhei;
			
			draw_outline(bx, by, fwid, bh, IntType(1), col, alpha, true);
		}
		tab_next(self);
		return 0.0;
	}
	
	RealType tab_template_editor_particles_preview(ScopeAny self)
	{
		RealType size, xx, yy;
		size = IntType(128);
		tab_control(self, size);
		xx = floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - size / 2.0);
		yy = floor(sVar(dy));
		if (xx + size < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + size < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			tab_next(self);
			return IntType(0);
		}
		draw_box(xx, yy, size, size, false, global::c_level_bottom, IntType(1));
		VarType res, fwid, fhei, ani;
		IntType tex;
		RealType swid, frame, framesx, scale;
		ArrType uvs;
		if (idVar(global::ptype_edit, temp) == particle_sheet)
		{
			res = idVar(global::ptype_edit, sprite_tex);
			if (!res_is_ready(res))
				res = global::mc_res;
			tex = idArr(res, particles_texture).Value(idVar(global::ptype_edit, sprite_tex_image));
			swid = texture_width(tex);
			fwid = min({ swid, idVar(global::ptype_edit, sprite_frame_width) });
			fhei = idVar(global::ptype_edit, sprite_frame_height);
			ani = particle_get_animation_percent(global::current_step, sVar(particle_editor_preview_start), idVar(global::ptype_edit, sprite_frame_start), idVar(global::ptype_edit, sprite_frame_end), sVar(particle_editor_preview_speed), idVar(global::ptype_edit, sprite_animation_onend));
			frame = round(idVar(global::ptype_edit, sprite_frame_start) + (idVar(global::ptype_edit, sprite_frame_end) - idVar(global::ptype_edit, sprite_frame_start)) * ani);
			framesx = (IntType)(swid / fwid);
			scale = min({ size / fwid, size / fhei });
			draw_texture_start();
			draw_texture_part({ tex, xx, yy, (mod(frame, framesx)) * fwid, ((IntType)(frame / framesx)) * fhei, fwid, fhei, scale, scale });
			draw_texture_done();
		}
		else
		{
			IntType template_ = DsMap(global::particle_template_map).Value(idVar(global::ptype_edit, sprite_template));
			RealType startf, endf;
			startf = ((idVar(global::ptype_edit, sprite_template_reverse) > 0) ? (ObjType(obj_particle_template, template_)->frames - IntType(1)) : VarType(0.0));
			endf = ((idVar(global::ptype_edit, sprite_template_reverse) > 0) ? VarType(0.0) : (ObjType(obj_particle_template, template_)->frames - IntType(1)));
			ani = particle_get_animation_percent(global::current_step, sVar(particle_editor_preview_start), startf, endf, sVar(particle_editor_preview_speed), idVar(global::ptype_edit, sprite_animation_onend));
			ani *= !(idVar(global::ptype_edit, sprite_template_still_frame) > 0);
			frame = round(startf + (endf - startf) * ani);
			VarType res = idVar(global::ptype_edit, sprite_template_tex);
			if (!res_is_ready(res))
				res = global::mc_res;
			tex = DsMap(idInt(res, particle_texture_atlas_map)).Value(ObjType(obj_particle_template, template_)->name);
			uvs = DsMap(idInt(res, particle_texture_pixeluvs_map)).Value(DsList(ObjType(obj_particle_template, template_)->texture_list).Value(frame));
			scale = min({ size / uvs.Value(IntType(2)), size / uvs.Value(IntType(3)) });
			draw_texture_start();
			draw_texture_part({ tex, xx, yy, uvs.Value(IntType(0)), IntType(0), uvs.Value(IntType(2)), uvs.Value(IntType(3)), scale, scale });
			draw_texture_done();
		}
		
		draw_box(xx, yy + size - IntType(4), size * ani, IntType(4), false, global::c_accent, IntType(1));
		if (idVar(global::ptype_edit, temp) == particle_sheet || (idVar(global::ptype_edit, temp) == particle_template && !(idVar(global::ptype_edit, sprite_template_still_frame) > 0)))
		{
			if (draw_button_icon(self, { /*"particlesresetpreview"*/ STR(3619), xx + size + IntType(4), yy + size - IntType(24), IntType(24), IntType(24), false, icons_RESET, null_, false, /*"tooltipparticlesresetpreview"*/ STR(3620) }))
				tab_template_editor_particles_preview_restart(self);
		}
		tab_next(self);
		return 0.0;
	}
	
	void tab_template_editor_particles_preview_restart(ScopeAny self)
	{
		if (global::ptype_edit > 0)
		{
			sVar(particle_editor_preview_start) = global::current_step;
			sVar(particle_editor_preview_speed) = value_random(idVar(global::ptype_edit, sprite_animation_speed), idVar(global::ptype_edit, sprite_animation_speed_israndom), idVar(global::ptype_edit, sprite_animation_speed_random_min), idVar(global::ptype_edit, sprite_animation_speed_random_max));
		}
	}
	
	void tab_template_editor_particles_value(ScopeAny self, StringType name, VarType val, VarType israndom, VarType randommin, VarType randommax, RealType mul, RealType minval, RealType maxval, ArrType def, RealType snapval, ArrType tbx, ArrType scripts, VarType capwid, BoolType showcaption, VarType suffix)
	{
		RealType wid;
		VarType caption;
		draw_set_font(sInt(font_label));
		caption = text_get({ name });
		wid = IntType(64);
		if (capwid == null_)
			capwid = (caption != /*""*/ STR(0) ? string_width(caption) + IntType(8) : IntType(0)) * (IntType)showcaption;
		tab_control_dragger(self);
		draw_button_icon(self, { /*"particleeditorrandom"*/ STR(3621) + name, sVar(dx) + sVar(dw) - sReal(ui_small_height), sVar(dy), sReal(ui_small_height), sReal(ui_small_height), israndom, icons_RANDOMIZE, scripts.Value(IntType(1)), false, /*"tooltipparticlesrandom"*/ STR(3592) });
		VarType suf1, suf2;
		suf1 = ObjType(obj_textbox, tbx.Value(IntType(0)))->suffix;
		suf2 = ObjType(obj_textbox, tbx.Value(IntType(1)))->suffix;
		ObjType(obj_textbox, tbx[IntType(0)])->suffix += suffix;
		ObjType(obj_textbox, tbx[IntType(1)])->suffix += suffix;
		if (israndom > 0)
		{
			if (showcaption)
			{
				draw_label(self, { caption, sVar(dx), sVar(dy) + (sReal(ui_small_height) / 2.0), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
				tab_next(self, false);
				sVar(dy) += IntType(2);
				capwid = IntType(0);
			}
			textfield_group_add(self, { name + /*"min"*/ STR(1083), randommin, def.Value(IntType(1)), scripts.Value(IntType(2)), global::axis_edit, tbx.Value(IntType(0)), null_, mul, minval, randommax, /*"particleeditormin"*/ STR(3622) });
			textfield_group_add(self, { name + /*"max"*/ STR(1084), randommax, def.Value(IntType(2)), scripts.Value(IntType(3)), global::axis_edit, tbx.Value(IntType(1)), null_, mul, randommin, maxval, /*"particleeditormax"*/ STR(3623) });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, name, sVar(dx), sVar(dy), sVar(dw) - (IntType(32) * (IntType)!showcaption), null_, null_, null_, snapval, false);
		}
		else
		{
			draw_dragger(self, name, sVar(dx), sVar(dy), dragger_width, val, mul, minval, maxval, def.Value(IntType(0)), snapval, tbx.Value(IntType(1)), scripts.Value(IntType(0)), (sVar(dw) - (dragger_width + IntType(24) + IntType(8))), showcaption);
			capwid += wid + IntType(8);
		}
		
		ObjType(obj_textbox, tbx[IntType(0)])->suffix = suf1;
		ObjType(obj_textbox, tbx[IntType(1)])->suffix = suf2;
		tab_next(self);
	}
	
	RealType tab_template_editor_update_ptype_list(ScopeAny self)
	{
		if (global::temp_edit == null_ || idVar(global::temp_edit, type) != e_temp_type_PARTICLE_SPAWNER)
			return IntType(0);
		sortlist_clear(sInt(ptype_list));
		for (IntType t = IntType(0); t < ds_list_size(idInt(global::temp_edit, pc_type_list)); t++)
			sortlist_add(sInt(ptype_list), DsList(idInt(global::temp_edit, pc_type_list)).Value(t));
		sortlist_update(self, sInt(ptype_list));
		global::ptype_edit = null_;
		return 0.0;
	}
	
	void tab_timeline(ScopeAny self)
	{
		RealType itemh, itemhalf, indent;
		VarType tlx, tly;
		RealType tlw, tlh, tlmaxw, tlstartpos;
		BoolType tlhierarchy;
		VarType listx, listy, listw;
		RealType listh;
		BoolType mouseinmarkers, mouseintl, mouseinnames, mouseinbar;
		VarType mousetl, mousetlname;
		IntType mousekf, mousekfstart, mousekfend;
		VarType mousemovetl, movehltl, movehlpos;
		IntType mousemoveindex;
		VarType headerx, headery, headerw;
		RealType headerh;
		BoolType markerbarshow;
		VarType markerbarx;
		RealType markerbary, markerbarw, markerbarh, markerh;
		VarType barx, bary;
		RealType barw, barh;
		RealType framestep, framehighlight, f;
		RealType markerx, markery;
		RealType regionx1, regionx2;
		BoolType show_hor_scroll;
		markerbarshow = (ds_list_size(sInt(timeline_marker_list)) > IntType(0)) && sBool(setting_timeline_show_markers);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_middle, IntType(1));
		draw_divide(sVar(content_x), sVar(content_y) + IntType(1), sVar(content_width));
		itemh = (sReal(setting_timeline_compact) > 0) ? IntType(20) : IntType(24);
		itemhalf = itemh / 2.0;
		indent = IntType(20);
		tlhierarchy = (sStr(timeline_search) == /*""*/ STR(0));
		headerw = sVar(content_width);
		headerh = IntType(32);
		headerx = sVar(content_x);
		headery = sVar(content_y);
		barw = sVar(content_width) - idVar(sVar(tab), list_width);
		barh = IntType(32);
		barx = sVar(content_x) + min({ idVar(sVar(timeline), list_width), sVar(content_width) });
		bary = sVar(content_y) + headerh;
		listx = sVar(content_x);
		listy = sVar(content_y) + (headerh + barh);
		listw = min({ idVar(sVar(timeline), list_width), sVar(content_width) });
		listh = (sVar(content_height) - (headerh + barh) - ((IntType(12) * (IntType)ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll_tl))->needed)));
		show_hor_scroll = (ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->needed && !(sReal(timeline_playing) > 0 && sVar(setting_timeline_autoscroll) > 0));
		tlx = sVar(content_x) + listw;
		tly = sVar(content_y) + (headerh + barh);
		tlw = sVar(content_width) - (IntType(12) * (IntType)ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->needed) - listw;
		tlh = (sVar(content_height) - (headerh + barh) - ((IntType(12) * (IntType)show_hor_scroll)));
		markerbarx = tlx;
		markerbary = (sVar(content_y) + sVar(content_height)) - ((IntType(12) * (IntType)show_hor_scroll) + IntType(24));
		markerbarw = tlw;
		markerbarh = IntType(24);
		if (markerbary <= tly || !markerbarshow)
		{
			markerbary += markerbarh;
			markerbarh = IntType(0);
		}
		markerh = max({ IntType(0), markerbary - tly });
		if (idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"left"*/ STR(191)) || idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(187)))
			tlw -= 5.0;
		else
			if (idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"right"*/ STR(192)) || idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(188)))
			{
				listx += IntType(5);
				listw -= 5.0;
			}
		
		tlstartpos = (RealType)ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value / sVar(timeline_zoom);
		sReal(timeline_list_first) = round((RealType)ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value / itemh);
		sReal(timeline_list_visible) = floor(tlh / itemh);
		if (sVar(timeline_marker) < tlstartpos || sVar(timeline_marker) > tlstartpos + tlw / sVar(timeline_zoom))
			sVar(timeline_insert_pos) = tlstartpos;
		else
			sVar(timeline_insert_pos) = sVar(timeline_marker);
		
		mouseinmarkers = (app_mouse_box(self, markerbarx, markerbary, markerbarw, markerbarh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		mouseintl = (app_mouse_box(self, tlx, tly, tlw, tlh) && !mouseinmarkers && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		mouseinnames = (app_mouse_box(self, listx, listy, listw - IntType(5), listh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		mouseinbar = (app_mouse_box(self, barx, bary, barw, barh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		mousetl = floor((gmlGlobal::mouse_y - tly + (round((RealType)ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value / itemh) * itemh)) / itemh);
		mousetlname = null_;
		mousekf = null_;
		mousekfstart = null_;
		mousekfend = null_;
		if (mousetl >= IntType(0) && mousetl < ds_list_size(sInt(tree_visible_list)))
			mousetl = DsList(sInt(tree_visible_list)).Value(mousetl);
		else
			mousetl = null_;
		
		mousemovetl = null_;
		mousemoveindex = null_;
		movehltl = null_;
		movehlpos = null_;
		sVar(timeline_mouse_pos) = max({ IntType(0), round((gmlGlobal::mouse_x - tlx + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) / sVar(timeline_zoom)) });
		VarType timex, timelabel;
		timex = headerx + IntType(8);
		sBool(content_mouseon) = app_mouse_box(self, headerx, headery, headerw, headerh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
		draw_set_font(sInt(font_heading));
		timelabel = (sReal(timeline_show_frames) > 0) ? text_get({ /*"timelineframe"*/ STR(3624), floor(sVar(timeline_marker)) }) : string_time_seconds((RealType)sVar(timeline_marker) / sVar(project_tempo));
		draw_label(self, { timelabel, timex, headery + headerh - IntType(6), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
		timex += string_width(timelabel);
		draw_set_font(sInt(font_subheading));
		timelabel = (sReal(timeline_show_frames) > 0) ? /*" / "*/ STR(3625) + string(sVar(timeline_length)) : /*" / "*/ STR(3625) + string_time_seconds((RealType)sVar(timeline_length) / sVar(project_tempo));
		draw_label(self, { timelabel, timex, headery + headerh - IntType(7), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
		timex += string_width(timelabel);
		if (sVar(timeline_region_start) != null_ && (sVar(timeline_region_start) != sVar(timeline_region_end)))
		{
			timelabel = /*" ("*/ STR(1123) + ((sReal(timeline_show_frames) > 0) ? VarType(string(sVar(timeline_region_end) - sVar(timeline_region_start))) : string_time_seconds((sVar(timeline_region_end) - sVar(timeline_region_start)) / sVar(project_tempo))) + /*")"*/ STR(1099);
			draw_label(self, { timelabel, timex, headery + headerh - IntType(7), fa_left, fa_bottom, global::c_accent, global::a_accent });
			timex += string_width(timelabel);
		}
		timex += IntType(8);
		VarType buttonsxstart, buttonsx, buttonsy;
		buttonsxstart = (sReal(timeline_settings_w) == null_ ? 0.0 : floor((headerx + (RealType)headerw / 2.0) - sReal(timeline_settings_w) / 2.0));
		buttonsx = max({ timex, buttonsxstart });
		buttonsy = headery + IntType(4);
		draw_button_icon(self, { /*"timelinepreviouskeyframe"*/ STR(3626), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_KEYFRAME_PREVIOUS, ID_action_tl_keyframe_previous, sReal(timeline_playing), /*"tooltiptlpreviouskeyframe"*/ STR(3627) });
		buttonsx += IntType(24) + IntType(6);
		if (draw_button_icon(self, { /*"timelinepreviousframe"*/ STR(3628), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_FRAME_PREVIOUS, null_, sReal(timeline_playing), /*"tooltiptlpreviousframe"*/ STR(3629) }))
			sVar(timeline_marker) = max({ ((floor(sVar(timeline_marker)) != sVar(timeline_marker)) ? VarType(floor(sVar(timeline_marker))) : sVar(timeline_marker) - IntType(1)), IntType(0) });
		buttonsx += IntType(24) + IntType(6);
		draw_divide_vertical(buttonsx, buttonsy + IntType(2), IntType(20));
		buttonsx += IntType(6);
		draw_button_icon(self, { /*"timelinestop"*/ STR(3630), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_STOP, ID_action_tl_play_stop, false, /*"tooltiptlstop"*/ STR(3631) });
		buttonsx += IntType(24) + IntType(6);
		tip_set_keybind(self, e_keybind_PLAY);
		draw_button_icon(self, { /*"timelineplay"*/ STR(3632), buttonsx, buttonsy, IntType(24), IntType(24), false, (sReal(timeline_playing) > 0) ? icons_PAUSE : icons_PLAY, ID_action_tl_play, false, (sReal(timeline_playing) > 0) ? /*"tooltiptlpause"*/ STR(3633) : /*"tooltiptlplay"*/ STR(3634) });
		buttonsx += IntType(24) + IntType(6);
		if (draw_button_icon(self, { /*"timelineplayregion"*/ STR(3635), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_PLAY_REGION, null_, sVar(timeline_region_start) == null_, /*"tooltiptlplayregion"*/ STR(3636) }))
		{
			sVar(timeline_marker) = sVar(timeline_region_start);
			if (sReal(timeline_playing) > 0)
				action_tl_play(self);
			action_tl_play(self);
		}
		buttonsx += IntType(24) + IntType(6);
		draw_divide_vertical(buttonsx, buttonsy + IntType(2), IntType(20));
		buttonsx += IntType(6);
		if (draw_button_icon(self, { /*"timelinenextframe"*/ STR(3637), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_FRAME_NEXT, null_, sReal(timeline_playing), /*"tooltiptlnextframe"*/ STR(3638) }))
			sVar(timeline_marker) = ((ceil(sVar(timeline_marker)) != sVar(timeline_marker)) ? VarType(ceil(sVar(timeline_marker))) : sVar(timeline_marker) + 1.0);
		buttonsx += IntType(24) + IntType(6);
		draw_button_icon(self, { /*"timelinenextkeyframe"*/ STR(3639), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_KEYFRAME_NEXT, ID_action_tl_keyframe_next, sReal(timeline_playing), /*"tooltiptlnextkeyframe"*/ STR(3640) });
		buttonsx += IntType(16) + IntType(6);
		sReal(timeline_settings_w) = (buttonsx - buttonsxstart);
		buttonsxstart = (sReal(timeline_settings_right_w) == null_ ? IntType(0) : real(headerx + headerw - sReal(timeline_settings_right_w) - IntType(8)));
		buttonsx = max({ buttonsx, buttonsxstart });
		buttonsxstart = buttonsx;
		if (!(sReal(setting_advanced_mode) > 0))
		{
			if (draw_button_icon(self, { /*"timelinewalkcycle"*/ STR(3641), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_WALK_CYCLE, null_, !file_exists_lib(sStr(timeline_settings_walk_fn)), /*"tooltiptlwalk"*/ STR(3642) }))
				action_tl_load_loop(self, sStr(timeline_settings_walk_fn));
			buttonsx += IntType(24) + IntType(6);
			if (draw_button_icon(self, { /*"timelineruncycle"*/ STR(3643), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_RUN_CYCLE, null_, !file_exists_lib(sStr(timeline_settings_run_fn)), /*"tooltiptlrun"*/ STR(3644) }))
				action_tl_load_loop(self, sStr(timeline_settings_run_fn));
			buttonsx += IntType(24) + IntType(4);
			draw_divide_vertical(buttonsx, buttonsy, IntType(24));
			buttonsx += IntType(4);
		}
		draw_button_icon(self, { /*"timelineintervals"*/ STR(3645), buttonsx, buttonsy, IntType(24), IntType(24), sVar(timeline_intervals_show), icons_STOPWATCH, ID_action_tl_intervals_show, false, (sVar(timeline_intervals_show) > 0) ? /*"timelineintervalshide"*/ STR(3646) : /*"timelineintervalsshow"*/ STR(3647) });
		buttonsx += IntType(24);
		if (draw_button_icon(self, { /*"timelineintervalsettings"*/ STR(3648), buttonsx, buttonsy, IntType(16), IntType(24), sStr(settings_menu_name) == /*"timelineintervalsettings"*/ STR(3648), icons_CHEVRON_DOWN_TINY, null_, false }))
		{
			menu_settings_set(self, buttonsx, buttonsy, /*"timelineintervalsettings"*/ STR(3648), IntType(24));
			sInt(settings_menu_script) = ID_tl_interval_settings_draw;
		}
		if (sStr(settings_menu_name) == /*"timelineintervalsettings"*/ STR(3648) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(740))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		buttonsx += IntType(16) + IntType(6);
		StringType tooltip;
		if (!(sVar(timeline_repeat) > 0) && !(sVar(timeline_seamless_repeat) > 0))
			tooltip = /*"tooltiptlenableloop"*/ STR(3649);
		else
			if (sVar(timeline_repeat) > 0 && !(sVar(timeline_seamless_repeat) > 0))
				tooltip = /*"tooltiptlenableseamlessloop"*/ STR(3650);
			else
				tooltip = /*"tooltiptldisableloop"*/ STR(3651);
		
		
		draw_button_icon(self, { /*"timelineloop"*/ STR(3652), buttonsx, buttonsy, IntType(24), IntType(24), sVar(timeline_repeat) > 0 || sVar(timeline_seamless_repeat) > 0, (sVar(timeline_seamless_repeat) > 0) ? icons_REPEAT_SEAMLESS : icons_REPEAT, ID_action_tl_play_repeat, false, tooltip });
		buttonsx += IntType(24) + IntType(4);
		draw_divide_vertical(buttonsx, buttonsy, IntType(24));
		buttonsx += IntType(4);
		if (window_get_current() == e_window_MAIN)
		{
			if (draw_button_icon(self, { /*"tabpopout"*/ STR(3653), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_EXTERNAL, null_, false, /*"tooltiptlpopout"*/ STR(3654) }))
			{
				panel_tab_list_remove(idInt(sVar(tab), panel), sVar(tab));
				window_create(idInt(sVar(tab), window), sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
			}
		}
		else
		{
			if (draw_button_icon(self, { /*"tabpopback"*/ STR(3655), buttonsx, buttonsy, IntType(24), IntType(24), false, icons_INTERNAL, null_, false, /*"tooltiptlpopin"*/ STR(3656) }))
				window_close(idInt(sVar(tab), window));
		}
		
		buttonsx += IntType(24);
		sReal(timeline_settings_right_w) = (buttonsx - buttonsxstart);
		sBool(content_mouseon) = app_mouse_box(self, barx, bary, barw, barh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
		if (sVar(project_file) != /*""*/ STR(0) && !instance_exists(ID_obj_timeline) && sVar(content_height) > IntType(100) && (ds_list_size(sInt(timeline_marker_list)) == IntType(0)))
		{
			RealType textwid;
			draw_set_font(sVar(font_body_big));
			textwid = string_width(text_get({ /*"timelineempty"*/ STR(3657) }));
			if (tlw > (textwid + IntType(32)))
				draw_label(self, { text_get({ /*"timelineempty"*/ STR(3657) }), floor(tlx + tlw / 2.0 - textwid / 2.0), floor(tly + tlh / 2.0), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		}
		sVar(dy) = tly;
		for (RealType t = sReal(timeline_list_first); t < ds_list_size(sInt(tree_visible_list)); t++)
		{
			if (sVar(dy) > tly + tlh)
				break;
			sVar(dx) = tlx;
			VarType tl = DsList(sInt(tree_visible_list)).Value(t);
			draw_divide(sVar(dx), sVar(dy) + itemh, tlw);
			if (idReal(tl, selected) > 0 || idBool(tl, list_mouseon))
				draw_box(sVar(dx), sVar(dy), tlw, itemh, false, global::c_accent_overlay, global::a_accent_overlay);
			if (idVar(tl, hide) > 0)
				draw_box(sVar(dx), sVar(dy), tlw, itemh, false, global::c_level_bottom, .5);
			sVar(dy) += itemh;
		}
		draw_box(barx, bary, barw, barh, false, global::c_level_bottom, IntType(1));
		if (sVar(timeline_region_start) != null_)
		{
			regionx1 = floor(sVar(timeline_region_start) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
			regionx2 = floor(sVar(timeline_region_end) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
			RealType x1, x2;
			x1 = clamp(regionx1, IntType(0), barw);
			x2 = clamp(regionx2, IntType(0), barw);
			draw_box(barx + x1, bary, x2 - x1, barh, false, global::c_accent_overlay, global::a_accent_overlay);
			draw_box(barx, bary, x1, markerh + barh, false, c_black, global::a_dark_overlay);
			draw_box(barx + x2, bary, (barx + barw) - (barx + x2), markerh + barh, false, c_black, global::a_dark_overlay);
			x1 = regionx1;
			x2 = regionx2;
			if (x1 >= -IntType(32) && x1 <= (barw + IntType(32)))
			{
				draw_image({ ID_spr_marker_region, IntType(0), barx + x1, bary, IntType(1), IntType(1), global::c_accent, IntType(1) });
				draw_box(barx + x1, bary, IntType(1), markerh + barh, false, global::c_accent, IntType(1));
			}
			if (x2 >= -IntType(32) && x2 <= (barw + IntType(32)))
			{
				draw_image({ ID_spr_marker_region, IntType(1), barx + x2 + IntType(10), bary, IntType(1), IntType(1), global::c_accent, IntType(1) });
				draw_box(barx + x2, bary, IntType(1), markerh + barh, false, global::c_accent, IntType(1));
			}
		}
		framestep = IntType(1);
		framehighlight = IntType(5);
		if (sVar(timeline_zoom) < IntType(5))
		{
			framestep = IntType(5);
			framehighlight = IntType(10);
		}
		if (sVar(timeline_zoom) < IntType(3))
		{
			framestep = IntType(10);
			framehighlight = IntType(50);
		}
		if (sVar(timeline_zoom) < IntType(1))
		{
			framestep = IntType(20);
			framehighlight = IntType(100);
		}
		if (sVar(timeline_zoom) < 0.5)
		{
			framestep = IntType(50);
			framehighlight = IntType(200);
		}
		f = floor((RealType)ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value / (sVar(timeline_zoom) * framestep)) * framestep;
		draw_set_valign(fa_bottom);
		draw_set_font(sInt(font_subheading));
		for (sVar(dx) = IntType(1) - (mod(ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value, (sVar(timeline_zoom) * framestep))); sVar(dx) < barw; sVar(dx) += sVar(timeline_zoom) * framestep)
		{
			RealType highlight, linex, linealpha, alpha;
			VarType color, linecolor;
			BoolType fullsec, halfsec, inregion;
			highlight = ((mod(f, framehighlight)) == IntType(0));
			linex = floor(barx + sVar(dx));
			alpha = IntType(1);
			fullsec = false;
			halfsec = false;
			inregion = false;
			color = global::c_text_secondary;
			alpha = global::a_text_secondary;
			linecolor = global::c_text_main;
			linealpha = global::a_text_main;
			if (sVar(project_file) != /*""*/ STR(0) && instance_exists(ID_obj_timeline) && sVar(timeline_intervals_show) > 0)
			{
				if ((mod((sVar(timeline_interval_offset) - f), sVar(timeline_interval_size))) == IntType(0) && f > IntType(0))
				{
					color = global::c_accent;
					alpha = IntType(1);
					linecolor = global::c_accent;
					linealpha = .5;
					draw_line_ext(linex, tly, linex, tly + (ds_list_size(sInt(tree_visible_list)) * itemh), linecolor, linealpha);
				}
			}
			draw_line_ext(linex, (bary + barh - ((highlight > 0) ? IntType(6) : IntType(3))), linex, bary + barh, linecolor, linealpha);
			if (highlight > 0)
			{
				IntType oldcol = draw_get_color();
				RealType oldalpha = draw_get_alpha();
				draw_set_color((IntType)(color));
				draw_set_alpha(alpha * oldalpha);
				draw_set_halign((f == IntType(0)) ? fa_left : fa_center);
				draw_text((IntType)(linex), (IntType)(bary + barh - IntType(8)), string(f));
				draw_set_halign(fa_left);
				draw_set_color(oldcol);
				draw_set_alpha(oldalpha);
			}
			f += framestep;
		}
		sBool(content_mouseon) = true;
		sVar(dy) = tly;
		for (RealType t = sReal(timeline_list_first); t < ds_list_size(sInt(tree_visible_list)); t++)
		{
			if (sVar(dy) > tly + tlh)
				break;
			sVar(dx) = tlx;
			VarType tl = DsList(sInt(tree_visible_list)).Value(t);
			if (sVar(window_busy) == /*"timelinemovekeyframes"*/ STR(45))
			{
				for (IntType k = IntType(0); k < ds_list_size(idInt(tl, keyframe_list)); k++)
				{
					IntType kf;
					VarType sound;
					kf = DsList(idInt(tl, keyframe_list)).Value(k);
					if (!(ObjType(obj_keyframe, kf)->selected > 0))
						continue;
					sound = ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_OBJ);
					sVar(dx) = tlx + floor(ObjType(obj_keyframe, kf)->move_pos * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
					if (sVar(dx) > tlx + (tlw + IntType(32)))
						break;
					if (idVar(tl, type) == e_tl_type_AUDIO && sound > 0 && idBool(sound, ready))
					{
						RealType boxw = tl_keyframe_length(kf) * sVar(timeline_zoom);
						if (sVar(dx) + boxw < tlx)
							continue;
						draw_box(sVar(dx), sVar(dy), boxw, itemh, false, global::c_border, global::a_border);
					}
					else
					{
						if (sVar(dx) < (tlx - IntType(32)))
							continue;
						draw_image({ ID_spr_icons, icons_KEYFRAME_FILLED_SMALL, sVar(dx) + IntType(1), sVar(dy) + itemhalf, IntType(1), IntType(1), global::c_level_top, IntType(1) });
						draw_image({ ID_spr_icons, icons_KEYFRAME_FILLED_SMALL, sVar(dx) + IntType(1), sVar(dy) + itemhalf, IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
					}
					
				}
			}
			VarType framecolor;
			RealType framealpha;
			framecolor = global::c_text_secondary;
			framealpha = global::a_text_secondary;
			if (idVar(tl, color_tag) != null_)
			{
				framecolor = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(tl, color_tag));
				framealpha = .75;
			}
			for (IntType k = IntType(0); k < ds_list_size(idInt(tl, keyframe_list)); k++)
			{
				IntType kf;
				BoolType mouse;
				VarType sound, pitch;
				kf = DsList(idInt(tl, keyframe_list)).Value(k);
				sVar(dx) = tlx + floor(ObjType(obj_keyframe, kf)->position * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
				sound = ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_OBJ);
				pitch = ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_PITCH);
				if (idVar(tl, type) == e_tl_type_AUDIO && sound > 0 && idBool(sound, ready))
				{
					RealType soundlen, boxw, startsample, samplesshow, prec, wavehei, alpha;
					VarType boxx;
					if (sVar(dx) > tlx + tlw)
						break;
					soundlen = max({ IntType(0), pitch == IntType(0) ? VarType(0.0) : ((idReal(sound, sound_samples) / sample_rate_ / pitch) - ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_START) + ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_END)) });
					boxx = max({ tlx, sVar(dx) });
					boxw = min({ tlw, soundlen * sVar(project_tempo) * sVar(timeline_zoom) - max({ IntType(0), tlx - sVar(dx) }) });
					if (boxw <= IntType(0))
						continue;
					startsample = floor((max({ IntType(0), tlstartpos - ObjType(obj_keyframe, kf)->position }) / sVar(project_tempo) + ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_START)) * sample_rate_);
					samplesshow = ((boxw / sVar(timeline_zoom)) / sVar(project_tempo)) * sample_rate_;
					prec = sample_rate_ / sample_avg_per_sec;
					wavehei = itemhalf * ObjType(obj_keyframe, kf)->value.Value(e_value_SOUND_VOLUME);
					alpha = draw_get_alpha();
					if (ObjType(obj_keyframe, kf)->selected > 0)
					{
						draw_box(boxx, sVar(dy), boxw, itemh, false, global::c_level_middle, IntType(1));
						draw_box(boxx, sVar(dy), boxw, itemh, false, global::c_accent_overlay, global::a_accent_overlay);
					}
					draw_primitive_begin(pr_linelist);
					for (RealType xx = IntType(0); xx < boxw; xx++)
					{
						RealType ind, maxv, minv;
						IntType miny, maxy;
						ind = (IntType)((mod(((startsample * pitch) + floor((xx / boxw) * samplesshow) * pitch), idReal(sound, sound_samples))) / prec);
						maxv = idArr(sound, sound_max_sample).Value(ind);
						minv = idArr(sound, sound_min_sample).Value(ind);
						if (xx > IntType(0) && mod(xx, IntType(500)) == IntType(0))
						{
							draw_primitive_end();
							draw_primitive_begin(pr_linelist);
						}
						miny = clamp(sVar(dy) + itemhalf - minv * wavehei, sVar(dy), sVar(dy) + itemh) + IntType(1);
						maxy = clamp(sVar(dy) + itemhalf - maxv * wavehei, sVar(dy), sVar(dy) + itemh);
						draw_vertex_color((IntType)(boxx + xx + IntType(1)), maxy, (IntType)((ObjType(obj_keyframe, kf)->selected > 0) ? global::c_accent : framecolor), (ObjType(obj_keyframe, kf)->selected > 0) ? 1.0 : framealpha);
						draw_vertex_color((IntType)(boxx + xx + IntType(1)), miny, (IntType)((ObjType(obj_keyframe, kf)->selected > 0) ? global::c_accent : framecolor), (ObjType(obj_keyframe, kf)->selected > 0) ? 1.0 : framealpha);
					}
					draw_primitive_end();
					mouse = app_mouse_box(self, boxx - (RealType)sVar(timeline_zoom) / 2.0, sVar(dy), boxw + sVar(timeline_zoom) * IntType(2), itemh);
					if (ObjType(obj_keyframe, kf)->selected > 0 && boxw > IntType(20))
					{
						if (app_mouse_box(self, boxx, sVar(dy), IntType(5), itemh) && mouseintl && !(idVar(tl, lock) > 0))
							mousekfstart = kf;
						else
							if (app_mouse_box(self, boxx + boxw - IntType(5), sVar(dy), IntType(5), itemh) && mouseintl && !(idVar(tl, lock) > 0))
								mousekfend = kf;
						
					}
				}
				else
				{
					if ((!(ObjType(obj_keyframe, kf)->value.Value(e_value_VISIBLE) > 0) || !(ObjType(obj_keyframe, kf)->value.Value(e_value_SPAWN) > 0)) && !(idVar(tl, hide) > 0) && idVar(tl, type) != e_tl_type_AUDIO)
					{
						VarType curdx, nextdx;
						curdx = ((k == IntType(0)) ? tlx : VarType(max({ tlx, sVar(dx) })));
						nextdx = tlx + tlw;
						if (k < ds_list_size(idInt(tl, keyframe_list)) - IntType(1))
							nextdx = min({ nextdx, tlx + floor(ObjType(obj_keyframe, DsList(idInt(tl, keyframe_list)).Value(k + IntType(1)))->position * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) });
						if (curdx < nextdx && nextdx >= IntType(0))
							draw_box(curdx, sVar(dy), nextdx - curdx, itemh - IntType(1), false, c_black, .25);
					}
					if (sVar(dx) > (tlx + tlw + IntType(32)))
						break;
					if (sVar(dx) < (tlx - IntType(32)))
						continue;
					mouse = (((gmlGlobal::mouse_x >= sVar(dx) - IntType(8) && gmlGlobal::mouse_x < sVar(dx) + IntType(8)) || sVar(timeline_mouse_pos) == ObjType(obj_keyframe, kf)->position) && tl == mousetl);
					RealType image = ((round(sVar(timeline_marker)) == ObjType(obj_keyframe, kf)->position && idReal(tl, selected) > 0) || ObjType(obj_keyframe, kf)->selected > 0);
					draw_image({ ID_spr_icons, (image > 0) ? icons_KEYFRAME : icons_KEYFRAME_FILLED, sVar(dx) + IntType(1), sVar(dy) + itemhalf, IntType(1), IntType(1), global::c_level_top, IntType(1) });
					draw_image({ ID_spr_icons, (image > 0) ? icons_KEYFRAME : icons_KEYFRAME_FILLED, sVar(dx) + IntType(1), sVar(dy) + itemhalf, IntType(1), IntType(1), (ObjType(obj_keyframe, kf)->selected > 0) ? global::c_accent : framecolor, (ObjType(obj_keyframe, kf)->selected > 0) ? 1.0 : framealpha });
				}
				
				if (mouse && mouseintl && !(idVar(tl, lock) > 0))
					mousekf = kf;
			}
			sVar(dy) += itemh;
		}
		if (sVar(window_busy) == /*"timelineselectkeyframes"*/ STR(3658))
		{
			sInt(mouse_cursor) = cr_handpoint;
			RealType x1, y1, x2, y2;
			x1 = clamp(sInt(mouse_click_x) + (sVar(timeline_select_starth) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value), tlx, tlx + tlw);
			y1 = clamp(sInt(mouse_click_y) + (sVar(timeline_select_startv) - ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value), tly, tly + tlh);
			x2 = clamp(gmlGlobal::mouse_x, tlx, tlx + tlw);
			y2 = clamp(gmlGlobal::mouse_y, tly, tly + tlh);
			if (x2 < x1)
			{
				RealType swap = x1;
				x1 = x2;
				x2 = swap;
			}
			x2 -= x1;
			if (y2 < y1)
			{
				RealType swap = y1;
				y1 = y2;
				y2 = swap;
			}
			y2 -= y1;
			draw_box_selection(x1, y1, x2, y2);
			if (!sBool(mouse_left))
			{
				if (ds_list_size(sInt(tree_visible_list)) > IntType(0))
				{
					RealType stl, etl, spos, epos, tmp;
					stl = (sInt(mouse_click_y) - tly + sVar(timeline_select_startv)) / itemh;
					etl = (gmlGlobal::mouse_y - tly + ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value) / itemh;
					spos = (sInt(mouse_click_x) - tlx + sVar(timeline_select_starth)) / sVar(timeline_zoom);
					epos = (gmlGlobal::mouse_x - tlx + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) / sVar(timeline_zoom);
					if (stl > etl)
					{
						tmp = stl;
						stl = etl;
						etl = tmp;
					}
					if (spos > epos)
					{
						tmp = spos;
						spos = epos;
						epos = tmp;
					}
					if (stl < ds_list_size(sInt(tree_visible_list)))
					{
						stl = clamp(floor(stl), IntType(0), ds_list_size(sInt(tree_visible_list)) - IntType(1));
						etl = clamp(floor(etl), IntType(0), ds_list_size(sInt(tree_visible_list)) - IntType(1));
						spos = max({ IntType(0), round(spos) });
						epos = max({ IntType(0), round(epos) });
						action_tl_keyframes_select_area(self, stl, etl, spos, epos);
					}
				}
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		markerx = floor(sVar(timeline_marker) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
		markery = IntType(0);
		if (sReal(timeline_playing) > 0 && sVar(setting_timeline_autoscroll) > 0 && sVar(window_busy) == /*""*/ STR(0))
		{
			while (markerx < IntType(0))
			{
				ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value -= barw;
				markerx = floor(sVar(timeline_marker) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
			}
			
			while (markerx > barw && barw > IntType(0))
			{
				ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value += barw;
				markerx = floor(sVar(timeline_marker) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
			}
			
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value });
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
		}
		if (markerx >= -IntType(32) && markerx < (tlw + IntType(32)))
		{
			draw_image({ ID_spr_marker_playback, IntType(0), tlx + IntType(1) + markerx, bary + barh, IntType(1), IntType(1), global::c_accent, IntType(1) });
			draw_box(tlx + markerx, bary + barh, IntType(2), markerh, false, global::c_accent, IntType(1));
		}
		if (markerbarh != IntType(0))
		{
			BoolType barmouseon;
			VarType markx, markeditx, marker, color, name, markermouseon, markermouseonx;
			RealType marky, markh;
			IntType markw;
			barmouseon = app_mouse_box(self, markerbarx, markerbary, markerbarw, markerbarh);
			markermouseon = null_;
			sBool(content_mouseon) = app_mouse_box(self, markerbarx, markerbary, markerbarw, markerbarh) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
			draw_set_font(sInt(font_label));
			draw_set_halign(fa_left);
			draw_set_valign(fa_bottom);
			draw_set_color(global::c_level_middle);
			draw_box(markerbarx, markerbary, markerbarw, markerbarh, false, global::c_level_bottom, IntType(1));
			clip_begin(tlx, bary, tlw, ((markerbary + markerbarh) - bary) - IntType(4));
			for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
			{
				marker = DsList(sInt(timeline_marker_list)).Value(i);
				color = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(marker, color));
				name = idVar(marker, name) + (dev_mode_debug_names ? /*" ["*/ STR(1784) + idVar(marker, save_id) + /*"]"*/ STR(1224) : /*""*/ STR(0));
				markx = tlx + floor(idVar(marker, pos) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
				markeditx = tlx + floor(idVar(marker, edit_pos) * sVar(timeline_zoom) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value);
				marky = markerbary + IntType(4);
				markw = max({ IntType(32), string_width(name) + IntType(8) });
				markh = IntType(16);
				if ((markx > tlx + tlw) || (markx + markw < tlx))
					continue;
				if (idVar(marker, edit_pos) != null_)
					draw_image({ ID_spr_marker, IntType(0), markeditx, tly, IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
				draw_image({ ID_spr_marker, IntType(0), markx, tly, IntType(1), IntType(1), color, IntType(1) });
				for (RealType j = IntType(0); j < ceil((markerbary - tly) / 32.0) + IntType(1); j += IntType(1))
				{
					if (idVar(marker, edit_pos) != null_)
						draw_image({ ID_spr_marker_stripe, IntType(0), markeditx, tly + (j * IntType(32)), IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
					draw_image({ ID_spr_marker_stripe, IntType(0), markx, tly + (j * IntType(32)), IntType(1), IntType(1), color, global::a_text_tertiary });
				}
				draw_box(markx, marky, markw, markh, false, color, IntType(1));
				draw_text((IntType)(markx + IntType(4)), (IntType)(marky + IntType(16)), name);
				if (barmouseon && app_mouse_box(self, markx, marky, markw, markh))
				{
					sInt(mouse_cursor) = cr_size_we;
					markermouseon = marker;
					markermouseonx = markx;
				}
			}
			clip_end();
			if (markermouseon != null_)
			{
				context_menu_area(self, { markerbarx, markerbary, markerbarw, markerbarh, /*"timelinemarker"*/ STR(1545), markermouseon, null_, null_, null_ });
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"timelinemovemarker"*/ STR(3659);
					idVar(markermouseon, edit_pos) = idVar(markermouseon, pos);
					sVar(timeline_marker_edit) = markermouseon;
					sReal(timeline_marker_edit_offset) = gmlGlobal::mouse_x - markermouseonx;
				}
			}
			if (sVar(window_busy) == /*"timelinemovemarker"*/ STR(3659))
			{
				BoolType fail;
				RealType mousepos;
				fail = false;
				mousepos = max({ IntType(0), round(((gmlGlobal::mouse_x - sReal(timeline_marker_edit_offset)) - tlx + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) / sVar(timeline_zoom)) });
				if (round(mousepos) != idVar(sVar(timeline_marker_edit), pos))
				{
					idVar(sVar(timeline_marker_edit), pos) = round(mousepos);
					marker_list_sort(self);
				}
				sInt(mouse_cursor) = cr_size_we;
				if (sBool(mouse_left_released))
				{
					for (IntType j = IntType(0); j < ds_list_size(sInt(timeline_marker_list)); j++)
					{
						if (sVar(timeline_marker_edit) == DsList(sInt(timeline_marker_list)).Value(j))
							continue;
						if (idVar(sVar(timeline_marker_edit), pos) == idVar(DsList(sInt(timeline_marker_list)).Value(j), pos))
						{
							fail = true;
							break;
						}
					}
					if (fail)
						idVar(sVar(timeline_marker_edit), pos) = idVar(sVar(timeline_marker_edit), edit_pos);
					else
						action_tl_marker_pos(self);
					
					sVar(window_busy) = /*""*/ STR(0);
					idVar(sVar(timeline_marker_edit), edit_pos) = null_;
					sVar(timeline_marker_edit) = null_;
					sReal(timeline_marker_edit_offset) = IntType(0);
					marker_list_sort(self);
				}
			}
		}
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
		VarType tl;
		RealType buttonsize, buttonpad;
		RealType itemx, itemw, minw, xx, xright;
		VarType itemy;
		BoolType itemhover, buttonhover;
		buttonsize = IntType(16);
		buttonpad = (itemh - buttonsize) / 2.0;
		draw_box(sVar(content_x), bary, listw, sVar(content_height) - headerh, false, global::c_level_middle, IntType(1));
		draw_divide_vertical(sVar(content_x) + listw, tly - barh, sVar(content_height) - headerh);
		draw_divide(sVar(content_x), bary, listw);
		if (sReal(setting_advanced_mode) > 0)
		{
			if (draw_button_icon(self, { /*"timelinefilter"*/ STR(3660), listx + IntType(8), bary + IntType(4), IntType(24), IntType(24), sVar(setting_timeline_hide_ghosts) > 0 || !array_equals(VarType::CreateRef(sVar(timeline_hide_color_tag)), VarType::CreateRef(array_create({ array_length(VarType::CreateRef(sVar(timeline_hide_color_tag))), false }))), icons_FILTER, null_, false, /*"tooltiptlfilter"*/ STR(3661) }))
			{
				menu_settings_set(self, listx + IntType(8), bary + IntType(4), /*"timelinefilter"*/ STR(3660), IntType(24));
				sInt(settings_menu_script) = ID_tl_filter_draw;
				sBool(settings_menu_above) = true;
			}
			if (sStr(settings_menu_name) == /*"timelinefilter"*/ STR(3660) && sStr(settings_menu_ani_type) != /*"hide"*/ STR(740))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		}
		VarType searchx;
		RealType searchwid;
		searchx = ((sReal(setting_advanced_mode) > 0) ? listx + (24.0 + 16.0) : listx + 8.0);
		searchwid = ((sReal(setting_advanced_mode) > 0) ? listw - (IntType(24) + IntType(24)) : listw - IntType(16));
		ObjType(obj_textbox, idInt(sVar(timeline), tbx_search))->text = sStr(timeline_search);
		draw_textfield(self, /*"timelinesearch"*/ STR(3662), searchx, bary + IntType(4), searchwid, IntType(24), idInt(sVar(timeline), tbx_search), ID_action_tl_search, text_get({ /*"listsearch"*/ STR(2919) }), /*"none"*/ STR(897));
		if (mouseinnames)
			context_menu_area(self, { listx, listy, listw, listh, /*"timelinelist"*/ STR(1516), mousetl, null_, null_, null_ });
		sVar(dy) = listy;
		RealType itemmaxw;
		tlmaxw = IntType(0);
		for (RealType t = sReal(timeline_list_first); t < ds_list_size(sInt(tree_visible_list)); t++)
		{
			if (sVar(dy) > listy + listh)
				break;
			tl = DsList(sInt(tree_visible_list)).Value(t);
			itemx = (sVar(content_x) + (indent * idReal(tl, indent_level))) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll_tl))->value;
			itemy = sVar(dy);
			itemw = listw - IntType(8) - (indent * idReal(tl, indent_level)) + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll_tl))->value;
			itemhover = (tl == mousetl) && mouseinnames;
			buttonhover = false;
			itemmaxw = (indent * idReal(tl, indent_level)) + IntType(32);
			if (itemhover)
				sInt(mouse_cursor) = cr_handpoint;
			if ((itemhover && sBool(mouse_left)) || idReal(tl, selected) > 0)
				draw_box(sVar(content_x), itemy, listw, itemh, false, global::c_accent_overlay, global::a_accent_overlay);
			else
				if (idReal(tl, selected) > 0 || itemhover || tl == sVar(context_menu_value) || (sVar(window_busy) == /*"timelineclick"*/ STR(3663) && sVar(timeline_select) == tl))
					draw_box(sVar(content_x), itemy, listw, itemh, false, global::c_overlay, global::a_overlay);
			
			xx = itemx + itemw - ((buttonsize + IntType(4)) * (IntType)(itemhover || idVar(tl, hide) > 0 || idVar(tl, lock) > 0 || (!(sVar(setting_timeline_hide_ghosts) > 0) && idVar(tl, ghost) > 0)));
			if (itemhover || idVar(tl, hide) > 0)
			{
				if (idVar(tl, type) != e_tl_type_AUDIO)
				{
					if (draw_button_icon(self, { /*"timelinehide"*/ STR(259) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, idVar(tl, hide), (idVar(tl, hide) > 0) ? icons_HIDDEN_SMALL : icons_VISIBLE_SMALL, null_, false, (idVar(tl, hide) > 0) ? /*"tooltiptlshow"*/ STR(3664) : /*"tooltiptlhide"*/ STR(3665) }))
						action_tl_hide(self, tl);
				}
				else
				{
					if (draw_button_icon(self, { /*"timelinehide"*/ STR(259) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, idVar(tl, hide), (idVar(tl, hide) > 0) ? icons_MUTE_SMALL : icons_VOLUME_SMALL, null_, false, (idVar(tl, hide) > 0) ? /*"tooltiptlunmute"*/ STR(3666) : /*"tooltiptlmute"*/ STR(3667) }))
						action_tl_hide(self, tl);
				}
				
				buttonhover = buttonhover || app_mouse_box(self, xx, itemy + buttonpad, buttonsize, buttonsize);
			}
			xx -= (buttonsize + IntType(4)) * (IntType)(itemhover || idVar(tl, lock) > 0 || (!(sVar(setting_timeline_hide_ghosts) > 0) && idVar(tl, ghost) > 0));
			itemmaxw += buttonsize + buttonpad;
			if (itemhover || idVar(tl, lock) > 0)
			{
				if (draw_button_icon(self, { /*"timelinelock"*/ STR(3668) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, idVar(tl, lock), (idVar(tl, lock) > 0) ? icons_LOCK_SMALL : icons_UNLOCK_SMALL, null_, false, ((idVar(tl, lock) > 0) ? /*"tooltiptlunlock"*/ STR(3669) : /*"tooltiptllock"*/ STR(3670)) }))
					action_tl_lock(self, tl);
				buttonhover = buttonhover || app_mouse_box(self, xx, itemy + buttonpad, buttonsize, buttonsize);
			}
			itemmaxw += buttonsize + buttonpad;
			if (!(sVar(setting_timeline_hide_ghosts) > 0) && sReal(setting_advanced_mode) > 0)
			{
				xx -= (buttonsize + IntType(4)) * (IntType)(itemhover || idVar(tl, ghost) > 0);
				if (itemhover || idVar(tl, ghost) > 0)
				{
					if (draw_button_icon(self, { /*"timelineghosttl"*/ STR(3671) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, idVar(tl, ghost), icons_GHOST_SMALL, null_, false, ((idVar(tl, ghost) > 0) ? /*"tooltiptlunghost"*/ STR(3672) : /*"tooltiptlghost"*/ STR(3673)) }))
						action_tl_ghost(self, tl);
					buttonhover = buttonhover || app_mouse_box(self, xx, itemy + buttonpad, buttonsize, buttonsize);
				}
			}
			itemmaxw += buttonsize + buttonpad;
			xx -= (buttonsize + IntType(4)) * (IntType)itemhover;
			if (itemhover)
			{
				if (draw_button_icon(self, { /*"timelineselectkeyframes"*/ STR(3658) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, false, icons_KEYFRAME_SMALL, null_, false, /*"contextmenutlselectkeyframes"*/ STR(1518) }))
					action_tl_select_keyframes(self, tl);
				buttonhover = buttonhover || app_mouse_box(self, xx, itemy + buttonpad, buttonsize, buttonsize);
			}
			itemmaxw += buttonsize + buttonpad;
			minw = xx - itemx;
			xright = xx;
			xx = itemx + IntType(4);
			minw -= 4.0;
			if (tlhierarchy)
			{
				VarType connectx = sVar(content_x) + IntType(4) - ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll_tl))->value;
				VarType index = null_;
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(idArr(tl, level_display))); i++)
				{
					if (idArr(tl, level_display).Value(i) && (((connectx + IntType(24)) - xright) < max({ IntType(0), minw })))
					{
						if (i == (idReal(tl, indent_level) - IntType(1)))
						{
							if (idVar(tl, parent) != global::_app->id && DsList(idInt(idInt(tl, parent_filter), tree_list_filter)).Value(ds_list_size(idInt(idInt(tl, parent_filter), tree_list_filter)) - IntType(1)) == tl)
								index = IntType(2);
							else
								index = IntType(1);
							
						}
						else
							index = IntType(0);
						
						draw_image({ !(sReal(setting_timeline_compact) > 0) ? ID_spr_connect : ID_spr_connect_compact, index, connectx, itemy, IntType(1), IntType(1), global::c_border, global::a_border });
					}
					connectx += indent;
				}
				if (idInt(tl, parent_filter) != global::_app->id && !(sReal(setting_timeline_compact) > 0) && ds_list_size(idInt(tl, tree_list_filter)) == IntType(0) && (((connectx + IntType(24) + IntType(8)) - xright) < minw))
					draw_image({ ID_spr_connect, IntType(3), connectx - IntType(2), itemy, IntType(1), IntType(1), global::c_border, global::a_border });
			}
			if (tlhierarchy)
			{
				if (ds_list_size(idInt(tl, tree_list_filter)) > IntType(0) && (((xx + buttonsize + IntType(8)) - xright) < minw))
				{
					if (draw_button_icon(self, { /*"timelineexpand"*/ STR(3674) + string(tl), xx, itemy + buttonpad, buttonsize, buttonsize, idVar(tl, tree_extend), null_, null_, false, ((idVar(tl, tree_extend) > 0) ? /*"tooltiptlcollapse"*/ STR(1681) : /*"tooltiptlexpand"*/ STR(1682)), ID_spr_chevron_ani }))
						action_tl_extend(self, tl);
					buttonhover = buttonhover || app_mouse_box(self, xx, itemy + buttonpad, buttonsize, buttonsize);
					if (sReal(setting_timeline_compact) > 0)
					{
						xx += (buttonsize + IntType(4));
						minw -= (buttonsize + 4.0);
					}
				}
				else
					if (sReal(setting_timeline_compact) > 0)
					{
						xx += IntType(5);
						minw -= 5.0;
					}
				
				if (!(sReal(setting_timeline_compact) > 0))
				{
					xx += (buttonsize + IntType(4));
					minw -= (buttonsize + 4.0);
				}
			}
			if (!(sReal(setting_timeline_compact) > 0))
			{
				VarType iconcolor;
				RealType iconalpha;
				if (idReal(tl, selected) > 0 || (sVar(window_busy) == /*"timelineclick"*/ STR(3663) && sVar(timeline_select) == tl) || ((itemhover && !buttonhover) && (sBool(mouse_left) || sBool(mouse_left_released))))
				{
					if (idVar(tl, color_tag) == null_)
						iconcolor = global::c_accent;
					else
						iconcolor = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(tl, color_tag));
					
					iconalpha = IntType(1);
				}
				else
				{
					if (idVar(tl, color_tag) == null_)
					{
						iconcolor = global::c_text_tertiary;
						iconalpha = global::a_text_tertiary;
					}
					else
					{
						iconcolor = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(tl, color_tag));
						iconalpha = .75;
					}
					
				}
				
				IntType list = ObjType(obj_theme, sInt(setting_theme))->dark ? global::timeline_icon_list_dark : global::timeline_icon_list;
				if (idVar(tl, type) != null_ && (((xx + IntType(24)) - xright) < minw))
					draw_image({ ID_spr_icons, DsList(list).Value(idVar(tl, type)), xx + (buttonsize / 2.0), itemy + (itemh / 2.0), IntType(1), IntType(1), iconcolor, iconalpha });
				xx += IntType(24);
				minw -= 24.0;
				itemmaxw += IntType(24);
			}
			xx += IntType(1);
			idBool(tl, list_mouseon) = itemhover && !buttonhover;
			VarType namecolor, name;
			RealType namealpha;
			draw_set_font(sInt(font_value));
			name = string_limit(idVar(tl, display_name), minw);
			if (sVar(timeline_rename) > 0 && tl == sVar(timeline_rename))
			{
				if (idVar(tl, name) == /*""*/ STR(0))
					draw_label(self, { idVar(tl, display_name), xx, itemy + (itemh / 2.0), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_value) });
				if (textbox_draw(self, idInt(sVar(timeline), tbx_rename), xx, itemy + (itemh / 2.0) - IntType(8), minw, IntType(20), true))
					action_tl_name_single(self, ObjType(obj_textbox, idInt(sVar(timeline), tbx_rename))->text);
				if (sVar(window_focus) != string(idInt(sVar(timeline), tbx_rename)))
				{
					sVar(window_busy) = /*""*/ STR(0);
					sVar(timeline_rename) = null_;
					if (sStr(timeline_search) != /*""*/ STR(0))
						tl_update_list(self);
				}
			}
			else
			{
				RealType backalpha;
				if (idReal(tl, selected) > 0 || (sVar(window_busy) == /*"timelineclick"*/ STR(3663) && sVar(timeline_select) == tl) || ((itemhover && !buttonhover) && (sBool(mouse_left) || sBool(mouse_left_released))))
				{
					if (idVar(tl, color_tag) == null_)
						namecolor = global::c_accent;
					else
						namecolor = global::c_level_middle;
					
					namealpha = IntType(1);
					backalpha = IntType(1);
				}
				else
				{
					namecolor = global::c_text_main;
					namealpha = global::a_text_main;
					backalpha = .25;
				}
				
				if (dev_mode_debug_saveid)
					name += /*" ["*/ STR(1784) + string(idVar(tl, save_id)) + /*"]"*/ STR(1224);
				if (name != /*""*/ STR(0))
				{
					if (idVar(tl, color_tag) != null_)
						draw_box_rounded(xx - IntType(4), itemy + itemh / 2.0 - IntType(8), string_width(name) + IntType(8), IntType(16), ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(idVar(tl, color_tag)), backalpha);
					draw_label(self, { name, xx, itemy + (itemh / 2.0), fa_left, fa_middle, namecolor, namealpha, sInt(font_value) });
				}
				itemmaxw += string_width(idVar(tl, display_name)) + IntType(8);
			}
			
			if (sVar(window_busy) == /*"timelineclick"*/ STR(3663))
			{
				sVar(window_busy) = /*""*/ STR(0);
				if (app_mouse_box(self, xx - IntType(28), itemy, string_width(name) + IntType(28), itemh))
					mousetlname = tl;
				sVar(window_busy) = /*"timelineclick"*/ STR(3663);
			}
			if (sBool(mouse_left_double_pressed) && app_mouse_box(self, xx, itemy, string_width(name), itemh))
			{
				sVar(window_busy) = string(idInt(sVar(timeline), tbx_rename));
				sVar(window_focus) = sVar(window_busy);
				ObjType(obj_textbox, idInt(sVar(timeline), tbx_rename))->text = idVar(tl, name);
				sVar(timeline_rename) = tl;
			}
			if (!(sReal(setting_timeline_compact) > 0) && !(idVar(tl, tree_extend) > 0) && ds_list_size(idInt(tl, tree_list_filter)) > IntType(0))
			{
				xx += string_width(name) + IntType(16);
				minw -= string_width(name) + 16.0;
				draw_set_font(sInt(font_caption));
				for (IntType i = IntType(0); i < e_tl_type_amount - IntType(1); i++)
				{
					if (idArr(tl, tree_contents).Value(i) == IntType(0))
						continue;
					RealType iconwid = IntType(24) + ((string_width(string(idArr(tl, tree_contents).Value(i))) + IntType(4)) * (idArr(tl, tree_contents).Value(i) > IntType(1)));
					if ((xx + (iconwid + IntType(16)) - xright) > minw)
						break;
					draw_image({ ID_spr_icons, DsList(global::timeline_icon_list).Value(i), xx + IntType(12), itemy + (itemh / 2.0), IntType(1), IntType(1), global::c_border, global::a_border });
					if (idArr(tl, tree_contents).Value(i) > IntType(1))
						draw_label(self, { string(idArr(tl, tree_contents).Value(i)), xx + IntType(23), itemy + (itemh / 2.0) + IntType(10), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary });
					xx += iconwid;
					minw -= iconwid;
				}
			}
			if (sVar(window_busy) == /*"timelinemove"*/ STR(48))
			{
				if (sVar(timeline_move_highlight_tl) == tl)
				{
					draw_box(sVar(content_x), sVar(dy), listw, itemh, false, global::c_hover, global::a_hover);
				}
				else
					if (sVar(timeline_move_highlight_tl) == null_)
					{
						if (sVar(timeline_move_highlight_pos) == t)
							draw_box(sVar(content_x), max({ tly, sVar(dy) - IntType(2) }), listw, IntType(4), false, global::c_hover, global::a_hover);
						else
							if (sVar(timeline_move_highlight_pos) == t + IntType(1))
								draw_box(sVar(content_x), sVar(dy) + itemh - IntType(2), listw, IntType(4), false, global::c_hover, global::a_hover);
						
					}
				
				IntType index = ds_list_find_index(idInt(idInt(tl, parent_filter), tree_list_filter), tl);
				if ((gmlGlobal::mouse_y >= sVar(dy) || t == sReal(timeline_list_first)) && gmlGlobal::mouse_y < sVar(dy) + IntType(8))
				{
					mousemovetl = idInt(tl, parent_filter);
					mousemoveindex = index;
					movehlpos = t;
				}
				else
					if (gmlGlobal::mouse_y > sVar(dy) + itemh - IntType(8))
					{
						if (idVar(tl, tree_extend) > 0 && ds_list_size(idInt(tl, tree_list_filter)) > IntType(0))
						{
							mousemovetl = tl;
							mousemoveindex = IntType(0);
						}
						else
							if (idInt(tl, parent_filter) != global::_app->id && index == ds_list_size(idInt(idInt(tl, parent_filter), tree_list_filter)) - IntType(1))
							{
								mousemovetl = idInt(idInt(tl, parent_filter), parent_filter);
								mousemoveindex = ds_list_find_index(idInt(idInt(idInt(tl, parent_filter), parent_filter), tree_list_filter), idInt(tl, parent_filter)) + IntType(1);
							}
							else
							{
								mousemovetl = idInt(tl, parent_filter);
								mousemoveindex = index + IntType(1);
							}
						
						
						movehlpos = t + IntType(1);
					}
					else
						if (tl == mousetl)
						{
							mousemovetl = tl;
							mousemoveindex = null_;
							movehltl = tl;
						}
				
				
			}
			sVar(dy) += itemh;
			tlmaxw = max({ itemmaxw, tlmaxw });
		}
		if (ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll_tl))->needed)
			draw_box(listx, listy + listh, listw, IntType(12), false, global::c_level_middle, IntType(1));
		scrollbar_draw(self, idInt(sVar(timeline), hor_scroll_tl), e_scroll_HORIZONTAL, listx, listy + listh, listw, tlmaxw);
		if (app_mouse_box(self, tlx - IntType(5), tly - barh, IntType(5), sVar(content_height) - headerh))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (sBool(mouse_left_pressed))
			{
				sVar(window_busy) = /*"timelinelistresize"*/ STR(3675);
				sVar(timeline_list_resize_start) = listw;
			}
		}
		if (sVar(window_busy) == /*"timelinelistresize"*/ STR(3675))
		{
			sInt(mouse_cursor) = cr_size_we;
			idVar(sVar(tab), list_width) = clamp(sVar(timeline_list_resize_start) + (gmlGlobal::mouse_x - sInt(mouse_click_x)), IntType(128), sVar(content_width));
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*""*/ STR(0) && mouseinnames)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed) && (mousetl == null_ || idBool(mousetl, list_mouseon)))
			{
				sVar(window_busy) = /*"timelineclick"*/ STR(3663);
				sVar(timeline_select) = mousetl;
				sVar(timeline_select_startv) = ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value;
			}
		}
		if (sVar(window_busy) == /*""*/ STR(0) && mouseintl)
			context_menu_area(self, { sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), /*"timeline"*/ STR(119), null_, null_, null_, null_ });
		if (mousekfstart > 0)
		{
			sInt(mouse_cursor) = cr_size_we;
			if (sBool(mouse_left_pressed))
				action_tl_keyframes_sound_resize_start(self);
		}
		if (mousekfend > 0)
		{
			sInt(mouse_cursor) = cr_size_we;
			if (sBool(mouse_left_pressed))
			{
				sInt(timeline_sound_end_mousex) = gmlGlobal::mouse_x + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
				sVar(timeline_sound_end_value) = ObjType(obj_keyframe, mousekfend)->value.Value(e_value_SOUND_END);
				sVar(window_focus) = /*"timeline"*/ STR(119);
				sVar(window_busy) = /*"timelinesetsoundend"*/ STR(3676);
			}
		}
		if (sVar(window_busy) == /*""*/ STR(0) && mouseintl && !(mousekfstart > 0) && !(mousekfend > 0))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed))
			{
				sVar(window_focus) = /*"timeline"*/ STR(119);
				action_tl_play_break(self);
				if (mousekf > 0)
				{
					if (ObjType(obj_keyframe, mousekf)->selected > 0)
					{
						if (keyboard_check(vk_shift))
						{
							action_tl_keyframe_deselect(self, ObjType(obj_keyframe, mousekf)->timeline, mousekf);
							app_mouse_clear(self);
						}
						else
							action_tl_keyframes_move_start(self, mousekf);
						
					}
					else
						if ((tl_keyframe_length(mousekf) != IntType(0) && (sVar(timeline_marker) >= ObjType(obj_keyframe, mousekf)->position) && (sVar(timeline_marker) <= ObjType(obj_keyframe, mousekf)->position + tl_keyframe_length(mousekf))) || (tl_keyframe_length(mousekf) == IntType(0)))
						{
							if (keyboard_check(vk_shift))
								action_tl_keyframe_select(self, ObjType(obj_keyframe, mousekf)->timeline, mousekf);
							else
								action_tl_keyframe_select_single(self, ObjType(obj_keyframe, mousekf)->timeline, mousekf);
							
							action_tl_keyframes_move_start(self, mousekf);
						}
						else
							action_tl_select(self, ObjType(obj_keyframe, mousekf)->timeline);
					
					
					if (idVar(ObjType(obj_keyframe, mousekf)->timeline, type) == e_tl_type_AUDIO && ObjType(obj_keyframe, mousekf)->value.Value(e_value_SOUND_OBJ) > 0)
						sVar(timeline_marker) = sVar(timeline_mouse_pos);
					else
						sVar(timeline_marker) = ObjType(obj_keyframe, mousekf)->position;
					
				}
				else
				{
					sVar(window_busy) = /*"timelineclickkeyframes"*/ STR(3677);
					if (mousetl > 0 && idVar(mousetl, lock) > 0)
						sVar(timeline_select) = null_;
					else
						sVar(timeline_select) = mousetl;
					
					sVar(timeline_select_starth) = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
					sVar(timeline_select_startv) = ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value;
				}
				
			}
			if (sBool(mouse_middle_pressed))
			{
				sVar(window_focus) = /*"timeline"*/ STR(119);
				sVar(window_busy) = /*"timelinedrag"*/ STR(3678);
			}
		}
		if (sVar(window_busy) == /*"timelineresizesounds"*/ STR(46))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
				action_tl_keyframes_sound_resize_done(self);
			else
				action_tl_keyframes_sound_resize(self);
			
		}
		if (sVar(window_busy) == /*"timelinesetsoundend"*/ STR(3676))
		{
			VarType newval = sVar(timeline_sound_end_value) + ((gmlGlobal::mouse_x + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) - sInt(timeline_sound_end_mousex)) / (sVar(timeline_zoom) * sVar(project_tempo));
			action_tl_frame_sound_end(self, newval, false);
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"timelinemovekeyframes"*/ STR(45))
		{
			sInt(mouse_cursor) = cr_size_all;
			if (!sBool(mouse_left))
				action_tl_keyframes_move_done(self);
			else
				action_tl_keyframes_move(self);
			
		}
		if (sVar(window_busy) == /*"timelinemove"*/ STR(48))
		{
			sInt(mouse_cursor) = cr_size_all;
			sVar(timeline_move_highlight_tl) = movehltl;
			sVar(timeline_move_highlight_pos) = movehlpos;
			if (!sBool(mouse_left))
				action_tl_move_done(self, mousemovetl, mousemoveindex);
		}
		if (sVar(window_busy) == /*"timelineselect"*/ STR(257))
		{
			RealType x1, y1, x2, y2;
			sInt(mouse_cursor) = cr_handpoint;
			x1 = clamp(sInt(mouse_click_x), sVar(content_x), tlx);
			y1 = clamp(sInt(mouse_click_y) + (sVar(timeline_select_startv) - ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value), listy, listy + tlh);
			x2 = clamp(gmlGlobal::mouse_x, sVar(content_x), tlx);
			y2 = clamp(gmlGlobal::mouse_y, listy, listy + tlh);
			if (x2 < x1)
			{
				RealType swap = x1;
				x1 = x2;
				x2 = swap;
			}
			x2 -= x1;
			if (y2 < y1)
			{
				RealType swap = y1;
				y1 = y2;
				y2 = swap;
			}
			y2 -= y1;
			draw_box_selection(x1, y1, x2, y2);
			if (!sBool(mouse_left))
			{
				if (ds_list_size(sInt(tree_visible_list)) > IntType(0))
				{
					RealType stl, etl, tmp;
					stl = (sInt(mouse_click_y) - listy + sVar(timeline_select_startv)) / itemh;
					etl = (gmlGlobal::mouse_y - listy + ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value) / itemh;
					if (stl > etl)
					{
						tmp = stl;
						stl = etl;
						etl = tmp;
					}
					if (stl < ds_list_size(sInt(tree_visible_list)))
					{
						stl = clamp(floor(stl), IntType(0), ds_list_size(sInt(tree_visible_list)) - IntType(1));
						etl = clamp(floor(etl), IntType(0), ds_list_size(sInt(tree_visible_list)) - IntType(1));
						action_tl_select_area(self, stl, etl);
					}
				}
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (sVar(window_busy) == /*"timelineclick"*/ STR(3663))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sReal(mouse_move) > IntType(5))
			{
				if (mousetlname > 0 && idReal(mousetlname, selected) > 0 && idVar(mousetlname, part_of) == null_ && !keyboard_check(vk_shift) && !keyboard_check(vk_control) && tlhierarchy)
					action_tl_move_start(self);
				else
				{
					if (!keyboard_check(vk_shift) && !keyboard_check(vk_control))
						action_tl_deselect_all(self);
					sVar(window_busy) = /*"timelineselect"*/ STR(257);
				}
				
			}
			if (!sBool(mouse_left))
			{
				if (sVar(timeline_select) > 0)
				{
					if (idReal(sVar(timeline_select), selected) > 0)
					{
						if (keyboard_check(vk_control))
							action_tl_deselect(self, sVar(timeline_select));
						else
							app_update_tl_edit(self);
						
					}
					else
						action_tl_select(self, sVar(timeline_select));
					
				}
				else
					action_tl_deselect_all(self);
				
				sVar(window_busy) = /*""*/ STR(0);
			}
		}
		if (sVar(window_busy) == /*"timelineclickkeyframes"*/ STR(3677))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sReal(mouse_move) > IntType(5))
			{
				if (!keyboard_check(vk_shift) && !keyboard_check(vk_control))
					action_tl_deselect_all(self);
				sVar(window_busy) = /*"timelineselectkeyframes"*/ STR(3658);
			}
			if (!sBool(mouse_left))
			{
				if (sVar(timeline_select) > 0)
				{
					if (idReal(sVar(timeline_select), selected) > 0 && sVar(timeline_marker) == sVar(timeline_mouse_pos))
						action_tl_keyframe_create(self, sVar(timeline_select), sVar(timeline_mouse_pos));
					else
						action_tl_select(self, sVar(timeline_select));
					
				}
				else
					action_tl_deselect_all(self);
				
				sVar(timeline_marker) = sVar(timeline_mouse_pos);
				action_tl_play_jump(self);
				sVar(window_busy) = /*""*/ STR(0);
			}
		}
		if (app_mouse_box(self, barx, bary + IntType(5) * (IntType)(idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(189))), barw, barh - IntType(5) * (IntType)(idInt(sVar(tab), panel) == DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(189)))) && !sBool(popup_mouseon) && !sBool(context_menu_mouseon) && !sBool(toast_mouseon))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sVar(timeline_region_start) != null_)
			{
				if (app_mouse_box(self, barx + regionx1 - IntType(8), bary, IntType(8), barh))
				{
					sInt(mouse_cursor) = cr_size_we;
					if (sBool(mouse_left_pressed))
					{
						sVar(window_focus) = /*"timeline"*/ STR(119);
						sVar(window_busy) = /*"timelinesetregionstart"*/ STR(3679);
						sVar(timeline_region_pos) = sVar(timeline_region_end);
					}
				}
				else
					if (app_mouse_box(self, barx + regionx2, bary, IntType(8), barh))
					{
						sInt(mouse_cursor) = cr_size_we;
						if (sBool(mouse_left_pressed))
						{
							sVar(window_focus) = /*"timeline"*/ STR(119);
							sVar(window_busy) = /*"timelinesetregionend"*/ STR(3680);
							sVar(timeline_region_pos) = sVar(timeline_region_start);
						}
					}
				
			}
			if (sBool(mouse_left_pressed) && sVar(window_busy) == /*""*/ STR(0))
			{
				sVar(window_focus) = /*"timeline"*/ STR(119);
				sVar(window_busy) = /*"timelinemarker"*/ STR(1545);
			}
			if (sBool(mouse_right_pressed))
			{
				sVar(window_focus) = /*"timeline"*/ STR(119);
				sVar(window_busy) = /*"timelinecreateregion"*/ STR(3681);
				sVar(timeline_region_pos) = sVar(timeline_mouse_pos);
				action_tl_play_break(self);
			}
		}
		if (sVar(window_busy) == /*"timelinecreateregion"*/ STR(3681) || sVar(window_busy) == /*"timelinesetregionstart"*/ STR(3679) || sVar(window_busy) == /*"timelinesetregionend"*/ STR(3680))
		{
			BoolType release;
			if (sVar(window_busy) == /*"timelinecreateregion"*/ STR(3681))
			{
				sInt(mouse_cursor) = cr_handpoint;
				release = !sBool(mouse_right);
			}
			else
			{
				sInt(mouse_cursor) = cr_size_we;
				release = !sBool(mouse_left);
			}
			
			sInt(project_changed) = true;
			if (sVar(window_busy) == /*"timelinesetregionend"*/ STR(3680))
			{
				if (sVar(timeline_mouse_pos) >= sVar(timeline_region_pos))
				{
					sVar(timeline_region_start) = sVar(timeline_region_pos);
					sVar(timeline_region_end) = sVar(timeline_mouse_pos);
				}
				else
				{
					sVar(timeline_region_end) = sVar(timeline_region_pos);
					sVar(timeline_region_start) = sVar(timeline_mouse_pos);
				}
				
			}
			else
			{
				if (sVar(timeline_mouse_pos) >= sVar(timeline_region_pos))
				{
					sVar(timeline_region_start) = sVar(timeline_region_pos);
					sVar(timeline_region_end) = sVar(timeline_mouse_pos);
				}
				else
				{
					sVar(timeline_region_end) = sVar(timeline_region_pos);
					sVar(timeline_region_start) = sVar(timeline_mouse_pos);
				}
				
			}
			
			if (release)
			{
				if (sVar(timeline_region_start) == sVar(timeline_region_end))
				{
					sVar(timeline_region_start) = null_;
					sVar(timeline_region_end) = null_;
				}
				sVar(window_busy) = /*""*/ STR(0);
			}
		}
		if (sVar(window_busy) == /*"timelinemarker"*/ STR(1545))
		{
			sInt(mouse_cursor) = cr_handpoint;
			sVar(timeline_marker) = max({ (RealType)(ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value + gmlGlobal::mouse_x - barx) / sVar(timeline_zoom), IntType(0) });
			if (sVar(setting_timeline_frame_snap) > 0 || keyboard_check(vk_control))
				sVar(timeline_marker) = round(sVar(timeline_marker));
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sVar(timeline_marker) = round(sVar(timeline_marker));
				action_tl_play_jump(self);
				app_mouse_clear(self);
			}
		}
		if (sStr(window_scroll_focus_prev) == /*"timelinezoom"*/ STR(3682) && sVar(window_busy) == /*""*/ STR(0) && sReal(mouse_wheel) != IntType(0))
		{
			RealType m = (sReal(mouse_wheel) == IntType(1) ? .5 : 2.0);
			sVar(timeline_zoom_goal) = clamp(sVar(timeline_zoom_goal) * m, 0.25, IntType(32));
			if (sVar(timeline_zoom_goal) > IntType(1))
				sVar(timeline_zoom_goal) = round(sVar(timeline_zoom_goal));
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value_goal = round(ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value + ((gmlGlobal::mouse_x - barx + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) / sVar(timeline_zoom) - (gmlGlobal::mouse_x - barx + ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value) / sVar(timeline_zoom_goal)) * sVar(timeline_zoom_goal));
		}
		if (sVar(window_busy) == /*"timelinedrag"*/ STR(3678))
		{
			sInt(mouse_cursor) = cr_size_all;
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value - sReal(mouse_dx) });
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value - sReal(mouse_dy) });
			if (!sBool(mouse_middle))
			{
				ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = snap(ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value, ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->snap_value);
				ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value = snap(ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value, ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->snap_value);
				sVar(window_busy) = /*""*/ STR(0);
			}
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value;
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
		}
		if (sVar(window_busy) == /*"timelinemove"*/ STR(48) || sVar(window_busy) == /*"timelineselect"*/ STR(257))
		{
			if (gmlGlobal::mouse_y < tly)
				ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value -= 8.0;
			if (gmlGlobal::mouse_y > tly + tlh)
				ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value += IntType(8);
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value });
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value;
		}
		if (sVar(window_busy) == /*"timelineselectkeyframes"*/ STR(3658) || sVar(window_busy) == /*"timelinemovekeyframes"*/ STR(45) || sVar(window_busy) == /*"timelinecreateregion"*/ STR(3681) || sVar(window_busy) == /*"timelinesetregionstart"*/ STR(3679) || sVar(window_busy) == /*"timelinesetregionend"*/ STR(3680) || sVar(window_busy) == /*"timelineresizesounds"*/ STR(46) || sVar(window_busy) == /*"timelinesetsoundend"*/ STR(3676) || sVar(window_busy) == /*"timelinemovemarker"*/ STR(3659))
		{
			if (gmlGlobal::mouse_x < tlx)
				ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value -= 15.0;
			if (gmlGlobal::mouse_x > tlx + tlw)
				ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value += IntType(15);
			if (sVar(window_busy) != /*"timelinemovemarker"*/ STR(3659))
			{
				if (gmlGlobal::mouse_y < tly)
					ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value -= 8.0;
				if (gmlGlobal::mouse_y > tly + tlh)
					ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value += IntType(8);
			}
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value });
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value });
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->value;
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value_goal = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
		}
		sBool(content_mouseon) = app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
		if (tlw > IntType(16))
		{
			if (ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->needed)
				draw_box(sVar(content_x) + sVar(content_width) - IntType(12), tly, IntType(12), tlh, false, global::c_level_middle, IntType(1));
			ObjType(obj_scrollbar, idInt(sVar(timeline), ver_scroll))->snap_value = itemh;
			scrollbar_draw(self, idInt(sVar(timeline), ver_scroll), e_scroll_VERTICAL, sVar(content_x) + sVar(content_width) - IntType(12), tly, tlh, (ds_list_size(sInt(tree_visible_list)) + IntType(1)) * itemh);
		}
		if (sVar(content_height) > (barh + headerh + IntType(12)) && (!(sReal(timeline_playing) > 0) || !(sVar(setting_timeline_autoscroll) > 0)))
		{
			if (ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->needed)
				draw_box(tlx, sVar(content_y) + sVar(content_height) - IntType(12), sVar(content_width) - listw, IntType(12), false, global::c_level_middle, IntType(1));
			scrollbar_draw(self, idInt(sVar(timeline), hor_scroll), e_scroll_HORIZONTAL, tlx, sVar(content_y) + sVar(content_height) - IntType(12), tlw, floor(max({ sVar(timeline_length), sVar(timeline_marker), sVar(timeline_marker_length) }) * sVar(timeline_zoom) + tlw));
		}
		if (sBool(content_mouseon))
		{
			sStr(shortcut_bar_state) = /*"timeline"*/ STR(119);
			if (mouseintl)
				sStr(shortcut_bar_state) = /*"timelinekeyframes"*/ STR(2889);
			if (mouseinnames)
				sStr(shortcut_bar_state) = /*"timelinenames"*/ STR(2895);
			if (mouseinbar)
				sStr(shortcut_bar_state) = /*"timelinebar"*/ STR(2901);
			sStr(window_scroll_focus) = string(idInt(sVar(timeline), ver_scroll));
			if (keyboard_check(vk_shift))
			{
				if (mouseinnames)
					sStr(window_scroll_focus) = string(idInt(sVar(timeline), hor_scroll_tl));
				else
					sStr(window_scroll_focus) = string(idInt(sVar(timeline), hor_scroll));
				
			}
			if (keyboard_check(vk_control))
				sStr(window_scroll_focus) = /*"timelinezoom"*/ STR(3682);
		}
	}
	
}
