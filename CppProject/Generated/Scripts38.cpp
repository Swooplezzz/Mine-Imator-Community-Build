/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.07.28 11:53:44 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	IntType nbt_read_tag_list(IntType listtype, RealType listlen)
	{
		IntType list = ds_list_create();
		for (IntType _it = 0, _it_max = listlen; _it < _it_max; _it++)
		{
			switch ((IntType)listtype)
			{
				case e_nbt_TAG_BYTE:
				{
					ds_list_add({ list, buffer_read_byte() });
					break;
				}
				case e_nbt_TAG_SHORT:
				{
					ds_list_add({ list, buffer_read_short_be() });
					break;
				}
				case e_nbt_TAG_INT:
				{
					ds_list_add({ list, buffer_read_int_be() });
					break;
				}
				case e_nbt_TAG_LONG:
				{
					ds_list_add({ list, buffer_read_long_be() });
					break;
				}
				case e_nbt_TAG_FLOAT:
				{
					ds_list_add({ list, buffer_read_float_be() });
					break;
				}
				case e_nbt_TAG_DOUBLE:
				{
					ds_list_add({ list, buffer_read_double_be() });
					break;
				}
				case e_nbt_TAG_BYTE_ARRAY:
				{
					RealType len = buffer_read_int_be();
					buffer_skip(len);
					break;
				}
				case e_nbt_TAG_STRING:
				{
					ds_list_add({ list, buffer_read_string_short_be() });
					break;
				}
				case e_nbt_TAG_LIST:
				{
					IntType nlisttype, nlist;
					RealType nlistlen;
					nlisttype = buffer_read_byte();
					if (nlisttype >= e_nbt_amount)
					{
						log({ /*"TAG_List error"*/ STR(1900), /*"Invalid tag"*/ STR(1899) });
						ds_list_destroy(list);
						return null_;
					}
					nlistlen = buffer_read_int_be();
					nlist = nbt_read_tag_list(nlisttype, nlistlen);
					if (nlist == null_)
					{
						ds_list_destroy(list);
						return null_;
					}
					ds_list_add({ list, nlist });
					ds_list_mark_as_list(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
				
				case e_nbt_TAG_COMPOUND:
				{
					IntType nmap = nbt_read_tag_compound();
					if (nmap == null_)
					{
						ds_list_destroy(list);
						return null_;
					}
					ds_list_add({ list, nmap });
					ds_list_mark_as_map(list, (IntType)(ds_list_size(list) - IntType(1)));
					break;
				}
				
				case e_nbt_TAG_INT_ARRAY:
				{
					RealType len = buffer_read_int_be();
					buffer_skip(len * IntType(4));
					break;
				}
				case e_nbt_TAG_LONG_ARRAY:
				{
					RealType len = buffer_read_int_be();
					buffer_skip(len * IntType(8));
					break;
				}
			}
			
		}
		return list;
	}
	
	RealType negate(VarType val)
	{
		if (val > 0)
			return -IntType(1);
		else
			return IntType(1);
		
		return 0.0;
	}
	
	IntType new_biome(StringType name, RealType tx, RealType ty, BoolType hardcoded, IntType grass, IntType foliage, IntType water, IntType base)
	{
		withOne (obj_biome, (new obj_biome)->id, noone)
		{
			ObjType(obj_biome, self->id)->name = name;
			self->group = false;
			self->display_name = minecraft_asset_get_name(/*"biome"*/ STR(1690), name);
			self->txy[IntType(0)] = tx;
			self->txy[IntType(1)] = ty;
			ObjType(obj_biome, self->id)->hardcoded = hardcoded;
			self->color_grass = grass;
			self->color_foliage = foliage;
			self->color_water = water;
			self->biome_base = base;
			self->biome_variants = null_;
			self->selected_variant = IntType(0);
			if (self->biome_base != null_)
			{
				if (self->biome_variants != null_)
				{
					ds_list_add({ ObjType(obj_biome, self->biome_base)->biome_variants, self->id });
				}
				else
				{
					ObjType(obj_biome, self->biome_base)->biome_variants = ds_list_create();
					ds_list_add({ ObjType(obj_biome, self->biome_base)->biome_variants, self->id });
				}
				
			}
			return self->id;
		}
		
		return IntType(0);
	}
	
	IntType new_history(IntType script)
	{
		global::render_samples = -IntType(1);
		withOne (obj_history, (new obj_history)->id, noone)
		{
			ObjType(obj_history, self->id)->script = script;
			self->par_script = null_;
			self->save_temp_edit = save_id_get(global::temp_edit);
			self->save_ptype_edit = save_id_get(global::ptype_edit);
			self->save_tl_edit = save_id_get(global::tl_edit);
			self->save_res_edit = save_id_get(global::res_edit);
			self->save_axis_edit = global::axis_edit;
			self->save_save_id_seed = global::save_id_seed;
			self->scale_link_drag = false;
			self->scale_link_drag_val = IntType(0);
			self->save_set_var = false;
			return self->id;
		}
		
		return IntType(0);
	}
	
	IntType new_minecraft_font(Scope<obj_resource> self)
	{
		StringType charlist = (/*" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~£ƒªº¬«»±÷°ⁿ²"*/ STR(1901) + /*"¡‰­·₴≠¿×ØÞһðøþΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωЂЅІЈЉЊЋАБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзиклмнопрстуфхцчшщъыьэюяєѕіјљњ–—‘’“”„…⁊ƏəɛɪҮүӨөʻˌ;ĸẞß₽€ѢѣѴѵӀѲѳ⁰¹³⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁱ™ʔʕҚқҒғҰұӘәҖҗҢңҺ¢¤¥©®µ¶¼½¾·‐‚†‡•‱′″‴‵‶‷‹›※‼‽⁂⁈⁉⁋⁎⁏⁑⁒⁗℗Єʬ⸘⸮⸵⸸⹁ƐϛⱯƆƎℲ⅁ꞰꞀԀꝹᴚɅ⅄ɐɔǝɟᵷɥᴉɾʞꞁɯɹʇʌʍʎ¯ſƷʒǷƿȜȝȤȥ˙Ꝛꝛ‑⅋ĲĳǉꜨꜩꜹꜻﬀﬁﬂﬃﬅ�¦´¨ᴀʙᴄᴅᴇꜰɢʜᴊᴋʟᴍɴᴏᴘꞯʀꜱᴛᴜᴠᴡʏᴢ§ɱɳɲʈɖɡʡɕʑɸʝʢɻʁɦʋɰɬɮʘǀǃǂǁɓɗᶑʄɠʛɧɫɨʉʊɘɵɤɜɞɑɒɚɝƁƉƑƩƲꜧꜦɺⱱʠʗʖɭɷɿʅʆʓʚ₪₾⅛⅜⅝⅞⅓⅔₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎ɼƄƅẟȽƚƛȠƞƟƧƨƪƸƹƻƼƽƾȡȴȵȶȺⱥȻȼɆɇȾⱦɁɂɃɄɈɉɊɋɌɍɎɏẜẝỼỽỾỿꞨꞩ⅐⅑⅕⅖⅗⅙⅚⅟↉Ɑ₠₡₢₣₤₥₦₩₫₭₮₰₱₲₳₵₶₷₸₹₺₻₼₿"*/ STR(1902) + /*"ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖÙÚÛÜÝàáâãäåæçìíîïñòóôõöùúûüýÿĀāĂăĄąĆćĈĉĊċČčĎďĐđĒēĔĕĖėĘęĚěĜĝḠḡĞğĠġĢģĤĥĦħĨĩĪīĬĭĮįİıĴĵĶķĹĺĻļĽľĿŀŁłŃńŅņŇňŊŋŌōŎŏŐőŒœŔŕŖŗŘřŚśŜŝŞşŠšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžǼǽǾǿȘșȚțΆΈΉΊΌΎΏΐΪΫάέήίΰϊϋόύώЀЁЃЇЌЍЎЙйѐёђѓїћќѝўџҐґḂḃḊḋḞḟḢḣḰḱṀṁṖṗṠṡṪṫẀẁẂẃẄẅỲỳèéêëŉǧǫЏḍḥṛṭẒỊịỌọỤụ№ȇƔɣʃ⁇ǱǲǳǄǅǆǇǈǊǋǌℹᵫꜲꜳꜴꜵꜶꜷꜸꜺꜼꜽꝎꝏꝠꝡﬄﬆƠơƯưẮắẤấẾếốỚớỨứẰằẦầỀềồỜờỪừẢảẲẳẨẩẺẻổỞỂểỈỉỎỏỔởỦủỬửỶỷẠạẶặẬậẸẹỆệỘộỢợỰựỴỵỐƕẪẫỖỗữẴẵẼẽỄễỒỠỡỮỸỹҘҙҠҡҪҫǶ̧ʂʐɶǍǎǞǟǺǻȂȃȦȧǠǡḀḁȀȁḆḇḄḅᵬḈḉḐḑḒḓḎḏḌᵭḔḕḖḗḘḙḜḝȨȩḚḛȄȅȆᵮǴǵǦḦḧḨḩḪḫȞȟḤẖḮḯȊȋǏǐȈȉḬḭǰȷǨǩḲḳḴḵḺḻḼḽḶḷḸḹⱢḾḿṂṃᵯṄṅṆṇṊṋǸǹṈṉᵰǬǭȬȭṌṍṎṏṐṑṒṓȎȏȪȫǑǒȮȯȰȱȌȍǪṔṕᵱȒȓṘṙṜṝṞṟȐȑṚᵳᵲṤṥṦṧṢṣṨṩᵴṰṱṮṯṬẗᵵṲṳṶṷṸṹṺṻǓǔǕǖǗǘǙǚǛǜṴṵȔȕȖṾṿṼṽẆẇẈẉẘẌẍẊẋȲȳẎẏẙẔẕẐẑẓᵶǮǯẛꜾꜿǢǣᵺỻᴂᴔꭣȸʣʥʤʩʪʫȹʨʦʧꭐꭑ₧ỺƀƂƃƇƈƊƋƌƓǤǥƗƖɩƘƙƝƤƥɽƦƬƭƫƮȗƱƜƳƴƵƶƢƣȢȣʭʮʯӐӑӒӓӶӷҔҕӖӗҼҽҾҿӚӛӜӝӁӂӞӟӢӣӤӥӦӧӪӫӰӱӮӯӲӳӴӵӸӹӬӭѶѷӔӺԂꚂꚀꚈԪԬꚄԄԐӠԆҊӃҞҜԞԚӅԮԒԠԈԔӍӉԨӇҤԢԊҨԤҦҎԖԌꚐҬꚊꚌԎҲӼӾԦꚔҴꚎҶӋҸꚒꚖꚆҌԘԜӕӻԃꚃꚁꚉԫԭꚅԅԑӡԇҋӄҟҝԟԛӆԯԓԡԉԕӎӊԩӈҥԣԋҩԥҧҏԗԍꚑҭꚋꚍԏҳӽӿԧꚕҵꚏҷӌҹꚓꚗꚇҍԙԝἈἀἉἁἊἂἋἃἌἄἍἅἎἆἏἇᾺὰᾸᾰᾹᾱΆάᾈᾀᾉᾁᾊᾂᾋᾃᾌᾄᾍᾅᾎᾆᾏᾇᾼᾴᾶᾷᾲᾳἘἐἙἑἚἒἛἓἜἔἝἕῈΈὲέἨἠῊὴἩἡἪἢἫἣἬἤἭἥἮἦἯἧᾘᾐᾙᾑᾚᾒᾛᾓᾜᾔᾝᾕᾞᾖᾟᾗΉήῌῃῂῄῆῇῚὶΊίἸἰἹἱἺἲἻἳἼἴἽἵἾἶἿἷῘῐῙῑῒΐῖῗῸὸΌόὈὀὉὁὊὂὋὃὌὄὍὅῬῤῥῪὺΎύὙὑὛὓὝὕὟὗῨῠῩῡϓϔῢΰῧὐὒὔῦὖῺὼΏώὨὠὩὡὪὢὫὣὬὤὭὥὮὦὯὧᾨᾠᾩᾡᾪᾢᾫᾣᾬᾤᾭᾥᾮᾦᾯᾧῼῳῲῴῶῷƍƺⱾȿⱿɀᶀꞔᶁᶂᶃꞕᶄᶅᶆᶇᶈᶉᶊᶋᶌᶍᶎᶏᶐᶒᶓᶔᶕᶖᶗᶘᶙᶚẚ⅒⅘₨₯"*/ STR(1903));
		return font_add_sprite_ext(ID_spr_font, charlist, true, IntType(1));
	}
	
	VarType new_obj(IntType obj)
	{
		return instance_create_depth(IntType(0), IntType(0), IntType(0), obj);
	}
	
	IntType new_popup(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		IntType popup = (new obj_popup)->id;
		ObjType(obj_popup, popup)->name = argument[IntType(0)];
		ObjType(obj_popup, popup)->script = argument[IntType(1)];
		ObjType(obj_popup, popup)->width = argument[IntType(2)];
		ObjType(obj_popup, popup)->height = argument[IntType(3)];
		ObjType(obj_popup, popup)->block = argument[IntType(4)];
		ObjType(obj_popup, popup)->caption = text_get({ ObjType(obj_popup, popup)->name + /*"caption"*/ STR(26) });
		ObjType(obj_popup, popup)->offset_x = IntType(0);
		ObjType(obj_popup, popup)->offset_y = IntType(0);
		if (argument_count > IntType(5))
			ObjType(obj_popup, popup)->custom = argument[IntType(5)];
		else
			ObjType(obj_popup, popup)->custom = false;
		
		if (argument_count > IntType(6))
			ObjType(obj_popup, popup)->revert = argument[IntType(6)];
		else
			ObjType(obj_popup, popup)->revert = false;
		
		if (argument_count > IntType(7))
			ObjType(obj_popup, popup)->close_button = argument[IntType(7)];
		else
			ObjType(obj_popup, popup)->close_button = !(ObjType(obj_popup, popup)->custom > 0);
		
		if (argument_count > IntType(8))
			ObjType(obj_popup, popup)->closescript = argument[IntType(8)];
		else
			ObjType(obj_popup, popup)->closescript = null_;
		
		ObjType(obj_popup, popup)->custom_height = -IntType(4);
		ObjType(obj_popup, popup)->custom_height_goal = IntType(0);
		return popup;
	}
	
	IntType new_res(ScopeAny self, VarType fn, VarType type)
	{
		IntType res;
		StringType newfn;
		BoolType replaced;
		if (filename_ext(fn) == /*".zip"*/ STR(5) && type != e_res_type_PACK_UNZIPPED)
			type = e_res_type_PACK;
		res = null_;
		replaced = false;
		newfn = sStr(project_folder) + /*"/"*/ STR(16) + filename_name(fn);
		withAll (obj_resource, self->id)
		{
			if (ObjType(obj_resource, self->id)->type == type && self->filename == filename_name(fn))
			{
				res = self->id;
				break;
			}
		}
		
		BoolType copied = false;
		if (res != null_)
		{
			if (question(text_get({ /*"questionreplace"*/ STR(1904) })))
				replaced = true;
			else
			{
				res = null_;
				newfn = filename_get_unique(newfn);
				copied = true;
				file_copy_lib(fn, newfn);
			}
			
		}
		if (res == null_)
		{
			res = (new obj_resource)->id;
			ObjType(obj_resource, res)->type = type;
			ObjType(obj_resource, res)->copied = copied;
			sortlist_add(sInt(res_list), res);
		}
		ObjType(obj_resource, res)->filename = filename_name(newfn);
		ObjType(obj_resource, res)->replaced = replaced;
		if (copied)
			global::load_folder = sStr(project_folder);
		else
			global::load_folder = filename_dir(fn);
		
		global::save_folder = sStr(project_folder);
		log({ /*"Add resource"*/ STR(1905), DsList(global::res_type_name_list).Value(type) });
		log({ /*"filename"*/ STR(1251), ObjType(obj_resource, res)->filename });
		return res;
	}
	
	IntType new_shader(StringType name)
	{
		withOne (obj_shader, (new obj_shader)->id, noone)
		{
			ObjType(obj_shader, self->id)->name = name;
			self->shader = asset_get_index(name);
			self->script = asset_get_index(name + /*"_set"*/ STR(1906));
			self->uniform_map = ds_string_map_create();
			self->sampler_map = ds_string_map_create();
			new_shader_sampler(self, /*"uTexture"*/ STR(1907));
			new_shader_uniform(self, /*"uBlendColor"*/ STR(1908));
			new_shader_uniform(self, /*"uTime"*/ STR(1909));
			new_shader_uniform(self, /*"uWindEnable"*/ STR(1910));
			new_shader_uniform(self, /*"uWindTerrain"*/ STR(1911));
			new_shader_uniform(self, /*"uWindSpeed"*/ STR(1912));
			new_shader_uniform(self, /*"uWindStrength"*/ STR(1913));
			new_shader_uniform(self, /*"uWindDirection"*/ STR(1914));
			new_shader_uniform(self, /*"uWindDirectionalSpeed"*/ STR(1915));
			new_shader_uniform(self, /*"uWindDirectionalStrength"*/ STR(1916));
			new_shader_uniform(self, /*"uFogShow"*/ STR(1917));
			new_shader_uniform(self, /*"uFogColor"*/ STR(1918));
			new_shader_uniform(self, /*"uFogDistance"*/ STR(1919));
			new_shader_uniform(self, /*"uFogSize"*/ STR(1920));
			new_shader_uniform(self, /*"uFogHeight"*/ STR(1921));
			new_shader_uniform(self, /*"uCameraPosition"*/ STR(1922));
			new_shader_uniform(self, /*"uTAAMatrix"*/ STR(1923));
			new_shader_uniform(self, /*"uSampleIndex"*/ STR(1924));
			new_shader_uniform(self, /*"uAlphaHash"*/ STR(1925));
			DsMap(global::shader_map)[self->shader] = self->id;
			return self->id;
		}
		
		return IntType(0);
	}
	
	void new_shader_sampler(Scope<obj_shader> self, StringType name)
	{
		IntType sampler = shader_get_sampler_index(self->shader, name);
		if (sampler > -IntType(1))
			DsMap(self->sampler_map)[name] = sampler;
		gpu_set_tex_mip_filter_ext(sampler, tf_linear);
	}
	
	void new_shader_uniform(Scope<obj_shader> self, StringType name)
	{
		IntType uniform = shader_get_uniform(self->shader, name);
		if (uniform > -IntType(1))
			DsMap(self->uniform_map)[name] = uniform;
	}
	
	IntType new_tab(StringType location, BoolType show, IntType header, IntType window)
	{
		IntType tab = (new obj_tab)->id;
		location = string_replace(location, /*"_top"*/ STR(1926), /*""*/ STR(0));
		location = string_replace(location, /*"_bottom"*/ STR(1927), /*"_secondary"*/ STR(1928));
		if (!ds_map_exists(global::_app->panel_map, location))
			location = /*"right"*/ STR(193);
		ObjType(obj_tab, tab)->panel = DsMap(global::_app->panel_map).Value(location);
		ObjType(obj_tab, tab)->panel_last = ObjType(obj_tab, tab)->panel;
		ObjType(obj_tab, tab)->show = show;
		ObjType(obj_tab, tab)->closeable = !(ObjType(obj_tab, tab)->show > 0);
		ObjType(obj_tab, tab)->scroll = (new obj_scrollbar)->id;
		ObjType(obj_tab, tab)->movable = true;
		ObjType(obj_tab, tab)->header_script = header;
		ObjType(obj_tab, tab)->window = window;
		if (ObjType(obj_tab, tab)->show > 0 && !window_exists(window))
			panel_tab_list_add(ObjType(obj_tab, tab)->panel, ObjType(obj_panel, ObjType(obj_tab, tab)->panel)->tab_list_amount, tab);
		return tab;
	}
	
	IntType new_textbox(RealType singleline, RealType maxchars, StringType filterchars)
	{
		IntType tbx = (new obj_textbox)->id;
		ObjType(obj_textbox, tbx)->text = /*""*/ STR(0);
		ObjType(obj_textbox, tbx)->single_line = singleline;
		ObjType(obj_textbox, tbx)->read_only = IntType(0);
		ObjType(obj_textbox, tbx)->max_chars = maxchars;
		ObjType(obj_textbox, tbx)->filter_chars = filterchars;
		ObjType(obj_textbox, tbx)->replace_char = /*""*/ STR(0);
		ObjType(obj_textbox, tbx)->select_on_focus = IntType(1);
		ObjType(obj_textbox, tbx)->color_selected = -IntType(1);
		ObjType(obj_textbox, tbx)->color_selection = -IntType(1);
		ObjType(obj_textbox, tbx)->suffix = /*""*/ STR(0);
		ObjType(obj_textbox, tbx)->start = IntType(0);
		ObjType(obj_textbox, tbx)->lines = IntType(1);
		ObjType(obj_textbox, tbx)->line[IntType(0)] = /*""*/ STR(0);
		ObjType(obj_textbox, tbx)->line_wrap[IntType(0)] = IntType(0);
		ObjType(obj_textbox, tbx)->line_single[IntType(0)] = IntType(0);
		ObjType(obj_textbox, tbx)->chars = IntType(0);
		ObjType(obj_textbox, tbx)->last_text = /*""*/ STR(0);
		ObjType(obj_textbox, tbx)->last_width = IntType(0);
		ObjType(obj_textbox, tbx)->jumpto = false;
		return tbx;
	}
	
	IntType new_textbox_decimals()
	{
		return new_textbox(true, IntType(64), /*".0123456789"*/ STR(1929) + /*"+-/*^()"*/ STR(1930));
	}
	
	IntType new_textbox_hex()
	{
		return new_textbox(true, IntType(6), /*"0123456789ABCDEFabcdef"*/ STR(1931));
	}
	
	IntType new_textbox_integer()
	{
		return new_textbox(true, IntType(64), /*"0123456789"*/ STR(1037) + /*"+-/*^()"*/ STR(1930));
	}
	
	IntType new_textbox_ndecimals()
	{
		return new_textbox(true, IntType(64), /*"-.0123456789"*/ STR(1932) + /*"+-/*^()"*/ STR(1930));
	}
	
	IntType new_textbox_ninteger()
	{
		return new_textbox(true, IntType(64), /*" - 0123456789"*/ STR(1933) + /*"+-/*^()"*/ STR(1930));
	}
	
	IntType new_tl(VarType tlype)
	{
		withOne (obj_timeline, (new obj_timeline)->id, noone)
		{
			self->type = tlype;
			tl_update(ScopeAny(self));
			tl_set_parent_root(ScopeAny(self));
			tl_value_spawn(ScopeAny(self));
			return self->id;
		}
		
		return IntType(0);
	}
	
	IntType new_transition_texture_map(RealType w, RealType h, RealType padding, BoolType center)
	{
		RealType wp, hp, quality, aa;
		IntType surf, surfaa, map;
		VarType prevp, p;
		map = ds_string_map_create();
		aa = IntType(4);
		quality = w * aa;
		surf = surface_create((IntType)(w * aa), (IntType)(h * aa));
		surfaa = surface_create((IntType)(w), (IntType)(h));
		wp = (w * aa) - (padding * IntType(2) * aa);
		hp = (h * aa) - (padding * IntType(2) * aa);
		draw_set_color(c_white);
		for (IntType t = IntType(0); t < ds_list_size(global::transition_list); t++)
		{
			surface_set_target(surf);
		{
			draw_clear_alpha(c_black, 0.0);
			for (RealType d = IntType(0); d <= quality; d++)
			{
				RealType xx = d / quality;
				if (DsList(global::transition_list).Value(t) == /*"bezier"*/ STR(564))
				{
					prevp = ease_bezier_curve(ArrType::From({ IntType(0), IntType(0) }), ArrType::From({ IntType(1), IntType(0) }), ArrType::From({ IntType(0), IntType(1) }), ArrType::From({ IntType(1), IntType(1) }), xx - 1.0 / wp);
					p = ease_bezier_curve(ArrType::From({ IntType(0), IntType(0) }), ArrType::From({ IntType(1), IntType(0) }), ArrType::From({ IntType(0), IntType(1) }), ArrType::From({ IntType(1), IntType(1) }), xx);
				}
				else
				{
					prevp = ease(DsList(global::transition_list).Value(t), xx - 1.0 / wp);
					p = ease(DsList(global::transition_list).Value(t), xx);
				}
				
				draw_line_width((IntType)((padding * aa) + floor((xx - 1.0 / wp) * wp)), (IntType)((padding * aa) + floor((IntType(1) - prevp) * hp)), (IntType)((padding * aa) + floor(xx * wp)), (IntType)((padding * aa) + floor((IntType(1) - p) * hp)), (IntType)((IntType(2) * aa) + IntType(1)));
			}
		}
			surface_reset_target();
			gpu_set_tex_filter(true);
			surface_set_target(surfaa);
		{
			draw_clear_alpha(c_black, 0.0);
			draw_surface_ext(surf, IntType(0), IntType(0), 1.0 / aa, 1.0 / aa, 0.0, c_white, 1.0);
		}
			surface_reset_target();
			gpu_set_tex_filter(false);
			DsMap(map)[DsList(global::transition_list).Value(t)] = texture_surface(surfaa);
			if (center)
				sprite_set_offset(DsMap(map).Value(DsList(global::transition_list).Value(t)), (IntType)(w / 2.0), (IntType)(h / 2.0));
		}
		surface_free(surf);
		surface_free(surfaa);
		return map;
	}
	
	IntType new_videoquality(StringType name, RealType bitrate)
	{
		withOne (obj_videoquality, (new obj_videoquality)->id, noone)
		{
			ObjType(obj_videoquality, self->id)->name = name;
			ObjType(obj_videoquality, self->id)->bit_rate = bitrate;
			return self->id;
		}
		
		return IntType(0);
	}
	
	IntType new_videotemplate(StringType name, RealType w, RealType h)
	{
		withOne (obj_videotemplate, (new obj_videotemplate)->id, noone)
		{
			ObjType(obj_videotemplate, self->id)->name = name;
			ObjType(obj_videotemplate, self->id)->width = w;
			ObjType(obj_videotemplate, self->id)->height = h;
			return self->id;
		}
		
		return IntType(0);
	}
	
	RealType object_save(ScopeAny self)
	{
		VarType fn = file_dialog_save_object(filename_get_valid(global::list_item_value != null_ ? idVar(global::list_item_value, display_name) : idVar(global::tl_edit, display_name)));
		if (fn == /*""*/ STR(0))
			return IntType(0);
		fn = filename_new_ext(fn, /*".miobject"*/ STR(711));
		log({ /*"Saving object"*/ STR(1934), fn });
		global::save_folder = filename_dir(fn);
		global::load_folder = sStr(project_folder);
		log({ /*"save_folder"*/ STR(740), global::save_folder });
		log({ /*"load_folder"*/ STR(741), global::load_folder });
		project_save_start(fn, false);
		if (global::list_item_value != null_ && !(idReal(global::list_item_value, selected) > 0))
		{
			withOne (Object, global::list_item_value, self->id)
				tl_save(self);
			
		}
		else
		{
			withAll (obj_timeline, self->id)
				if (self->selected > 0)
					tl_save(ScopeAny(self));
			
		}
		
		project_save_objects(self);
		project_save_done();
		log({ /*"Object saved"*/ STR(1935) });
		return 0.0;
	}
	
	void open_url(StringType url)
	{
		log({ /*"Open URL"*/ STR(1936), url });
		lib_open_url(url);
	}
	
	void popup_open_url(ScopeAny self, VarType url)
	{
		open_url(url);
	}
	
	void panel_area_draw(ScopeAny self)
	{
		sReal(panel_area_x) = IntType(0);
		sReal(panel_area_y) = sReal(toolbar_size);
		sReal(panel_area_width) = sReal(window_width);
		sReal(panel_area_height) = sReal(window_height) - sReal(toolbar_size);
		sInt(tab_move_mouseon_panel) = null_;
		sInt(tab_move_mouseon_position) = IntType(0);
		sReal(panel_area_height) -= (IntType(28) * (IntType)sBool(setting_show_shortcuts_bar));
		withAll (obj_panel, global::_app->id)
		{
			self->size_ani += test_reduced_motion(IntType(1), 0.035 * global::delta);
			self->size_ani = clamp(self->size_ani, IntType(0), IntType(1));
			self->size_real_ani = ceil((self->size_real - IntType(16)) + (IntType(16) * ease(/*"easeoutcirc"*/ STR(584), self->size_ani)));
			self->glow_ani += test_reduced_motion(IntType(1), 0.035 * global::delta);
			self->glow_ani = clamp(self->glow_ani, IntType(0), IntType(1));
			self->size_glow = (self->size - IntType(16)) + (IntType(16) * ease(/*"easeoutcirc"*/ STR(584), self->glow_ani));
			self->size_real = self->size * (self->tab_list_amount > IntType(0));
		}
		
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"left_secondary"*/ STR(188)])->size_real -= max({ IntType(0), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real - sReal(panel_area_width) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"left"*/ STR(192)])->size_real -= max({ IntType(0), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real - sReal(panel_area_width) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"bottom"*/ STR(190)])->size_real -= max({ IntType(0), ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real - sReal(panel_area_height) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"left"*/ STR(192)])->size_real = min({ ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real, sReal(panel_area_width) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"right"*/ STR(193)])->size_real = min({ ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real, sReal(panel_area_width) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"top"*/ STR(191)])->size_real = min({ ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real, sReal(panel_area_height) });
		ObjType(obj_panel, DsMap(sInt(panel_map))[/*"bottom"*/ STR(190)])->size_real = min({ ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real, sReal(panel_area_height) });
		view_area_draw(self);
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)));
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)));
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)));
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)));
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)));
		panel_draw(self, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)));
		if (sVar(window_busy) == /*"panelresize"*/ STR(1937))
		{
			if (sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)) || sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))
			{
				sInt(mouse_cursor) = cr_size_we;
				idVar(sInt(panel_resize), size) = max({ IntType(200), sReal(panel_resize_size) + (gmlGlobal::mouse_x - sInt(mouse_click_x)) });
			}
			else
				if (sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)) || sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))
				{
					sInt(mouse_cursor) = cr_size_we;
					idVar(sInt(panel_resize), size) = max({ IntType(200), sReal(panel_resize_size) - (gmlGlobal::mouse_x - sInt(mouse_click_x)) });
				}
				else
					if (sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))
					{
						sInt(mouse_cursor) = cr_size_ns;
						idVar(sInt(panel_resize), size) = max({ IntType(32), sReal(panel_resize_size) - (gmlGlobal::mouse_y - sInt(mouse_click_y)) });
					}
					else
						if (sInt(panel_resize) == DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))
						{
							sInt(mouse_cursor) = cr_size_ns;
							idVar(sInt(panel_resize), size) = max({ IntType(50), sReal(panel_resize_size) + (gmlGlobal::mouse_y - sInt(mouse_click_y)) });
						}
				
			
			
			if (!sBool(mouse_left))
			{
				sInt(panel_resize) = null_;
				sVar(window_busy) = /*""*/ STR(0);
			}
		}
		if (sVar(window_busy) == /*"tabmove"*/ STR(1938))
		{
			panel_move_draw(self);
			if (sInt(tab_move_mouseon_panel) == null_)
			{
				RealType toph, bottomh, lefttopw, leftbottomw, righttopw;
				toph = sReal(view_area_height);
				bottomh = sReal(view_area_height);
				lefttopw = sReal(view_area_width);
				leftbottomw = sReal(view_area_width);
				righttopw = sReal(view_area_width);
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real > 0))
					toph *= 0.33;
				else
					if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real > 0))
						toph *= 0.5;
				
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real > 0))
					bottomh *= 0.33;
				else
					if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real > 0))
						bottomh *= 0.5;
				
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real > 0))
					lefttopw *= 0.5;
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real > 0))
					lefttopw *= 0.5;
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real > 0))
					leftbottomw *= 0.5;
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real > 0) || !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real > 0))
					righttopw *= 0.5;
				if (!(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))->size_real > 0))
					righttopw *= 0.5;
				if (gmlGlobal::mouse_y >= sReal(view_area_y) + sReal(view_area_height) - bottomh && !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real > 0))
					sInt(tab_move_mouseon_panel) = DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190));
				else
					if (gmlGlobal::mouse_x <= sReal(view_area_x) + lefttopw && !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real > 0))
						sInt(tab_move_mouseon_panel) = DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192));
					else
						if (gmlGlobal::mouse_x <= sReal(view_area_x) + leftbottomw && !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))->size_real > 0))
							sInt(tab_move_mouseon_panel) = DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188));
						else
							if (gmlGlobal::mouse_x >= sReal(view_area_x) + sReal(view_area_width) - righttopw && !(ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real > 0))
								sInt(tab_move_mouseon_panel) = DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193));
							else
								sInt(tab_move_mouseon_panel) = DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189));
						
					
				
				
				if (sInt(tab_move_mouseon_panel_prev) != sInt(tab_move_mouseon_panel))
				{
					if (sInt(tab_move_mouseon_panel_prev) != null_)
					{
						idVar(sInt(tab_move_mouseon_panel_prev), glow) = false;
						idVar(sInt(tab_move_mouseon_panel_prev), glow_ani) = IntType(0);
					}
					if (sInt(tab_move_mouseon_panel) != null_)
					{
						idVar(sInt(tab_move_mouseon_panel), glow_ani) = IntType(0);
						idVar(sInt(tab_move_mouseon_panel), glow) = true;
					}
				}
				sInt(tab_move_mouseon_panel_prev) = sInt(tab_move_mouseon_panel);
			}
			if (!sBool(mouse_left))
			{
				if (sInt(tab_move_mouseon_panel) == null_)
				{
					if (idInt(sVar(tab_move), window) != e_window_MAIN)
						window_create(idInt(sVar(tab_move), window), gmlGlobal::mouse_x + sReal(tab_move_box_x), gmlGlobal::mouse_y + sReal(tab_move_box_y), sReal(tab_move_box_width), sReal(tab_move_box_height));
					else
						sInt(tab_move_mouseon_panel) = idInt(sVar(tab_move), panel_last);
					
				}
				panel_tab_list_add(sInt(tab_move_mouseon_panel), sInt(tab_move_mouseon_position), sVar(tab_move));
				sVar(window_busy) = /*""*/ STR(0);
				sInt(tab_move_mouseon_panel_prev) = null_;
				if (idInt(sInt(tab_move_mouseon_panel), tab_list_amount) == IntType(1))
					idVar(sInt(tab_move_mouseon_panel), size_ani) = IntType(0);
				withAll (obj_tab, global::_app->id)
					self->glow = IntType(0);
				
				withAll (obj_panel, global::_app->id)
				{
					self->list_glow = IntType(0);
					self->glow = false;
				}
				
			}
		}
		sReal(panel_compact) = false;
	}
	
	VarType test_reduced_motion(VarType a, VarType b)
	{
		if (global::_app->setting_reduced_motion > 0)
			return a;
		return b;
	}
	
	RealType panel_draw(ScopeAny self, IntType panel)
	{
		RealType boxx, boxy, boxw, boxh, padding;
		BoolType resizemouseon;
		ArrType tabtitle, tabx, tabw;
		RealType tabmaxw, tabsw, tabswprev, tabsh;
		IntType tablistmouseon;
		BoolType tabmouseon;
		RealType dx, dy;
		if (ObjType(obj_panel, panel)->size_real < IntType(1) && !(ObjType(obj_panel, panel)->glow > 0) && panel != sInt(panel_window_obj))
			return IntType(0);
		if (panel == DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))
		{
			boxx = sReal(panel_area_x) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real_ani;
			boxy = sReal(panel_area_y) + sReal(panel_area_height) - ObjType(obj_panel, panel)->size_real_ani;
			boxw = sReal(panel_area_width) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real_ani;
			boxh = ObjType(obj_panel, panel)->size_real_ani;
			sInt(content_direction) = e_scroll_HORIZONTAL;
			if (ObjType(obj_panel, panel)->glow > 0)
				draw_box(boxx, boxy + boxh - ObjType(obj_panel, panel)->size, boxw, ObjType(obj_panel, panel)->size_glow, false, global::c_accent, glow_alpha);
		}
		else
			if (panel == DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))
			{
				boxx = sReal(panel_area_x) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real_ani;
				boxy = sReal(panel_area_y);
				boxw = sReal(panel_area_width) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real_ani;
				boxh = ObjType(obj_panel, panel)->size_real_ani;
				sInt(content_direction) = e_scroll_HORIZONTAL;
				if (ObjType(obj_panel, panel)->glow > 0)
					draw_box(boxx, boxy, boxw, ObjType(obj_panel, panel)->size_glow, false, global::c_accent, glow_alpha);
			}
			else
				if (panel == DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))
				{
					boxx = sReal(panel_area_x);
					boxy = sReal(panel_area_y) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
					boxw = ObjType(obj_panel, panel)->size_real_ani;
					boxh = sReal(panel_area_height) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
					sInt(content_direction) = e_scroll_VERTICAL;
					if (ObjType(obj_panel, panel)->glow > 0)
						draw_box(boxx, boxy, ObjType(obj_panel, panel)->size_glow, boxh, false, global::c_accent, glow_alpha);
				}
				else
					if (panel == DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))
					{
						boxx = sReal(panel_area_x) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)))->size_real_ani;
						boxy = sReal(panel_area_y) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
						boxw = ObjType(obj_panel, panel)->size_real_ani;
						boxh = sReal(panel_area_height) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real_ani;
						sInt(content_direction) = e_scroll_VERTICAL;
						if (ObjType(obj_panel, panel)->glow > 0)
							draw_box(boxx, boxy, ObjType(obj_panel, panel)->size_glow, boxh, false, global::c_accent, glow_alpha);
					}
					else
						if (panel == DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))
						{
							boxx = sReal(panel_area_x) + sReal(panel_area_width) - ObjType(obj_panel, panel)->size_real_ani;
							boxy = sReal(panel_area_y) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
							boxw = ObjType(obj_panel, panel)->size_real_ani;
							boxh = sReal(panel_area_height) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
							sInt(content_direction) = e_scroll_VERTICAL;
							if (ObjType(obj_panel, panel)->glow > 0)
								draw_box(boxx + boxw - ObjType(obj_panel, panel)->size_glow, boxy, ObjType(obj_panel, panel)->size_glow, boxh, false, global::c_accent, glow_alpha);
						}
						else
							if (panel == DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))
							{
								boxx = sReal(panel_area_x) + sReal(panel_area_width) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)))->size_real_ani - ObjType(obj_panel, panel)->size_real_ani;
								boxy = sReal(panel_area_y) + ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani;
								boxw = ObjType(obj_panel, panel)->size_real_ani;
								boxh = sReal(panel_area_height) - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"top"*/ STR(191)))->size_real_ani - ObjType(obj_panel, DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))->size_real_ani;
								sInt(content_direction) = e_scroll_VERTICAL;
								if (ObjType(obj_panel, panel)->glow > 0)
									draw_box(boxx + boxw - ObjType(obj_panel, panel)->size_glow, boxy, ObjType(obj_panel, panel)->size_glow, boxh, false, global::c_accent, glow_alpha);
							}
							else
								if (panel == sInt(panel_window_obj))
								{
									boxx = IntType(0);
									boxy = IntType(0);
									boxw = sReal(window_width);
									boxh = sReal(window_height);
								}
						
					
				
			
		
		
		if (boxw < IntType(1) || boxh < IntType(1))
			return IntType(0);
		if (ObjType(obj_panel, panel)->tab_list_amount == IntType(0))
			return IntType(0);
		boxx = floor(boxx);
		boxy = floor(boxy);
		boxw = ceil(boxw);
		boxh = ceil(boxh);
		draw_box(boxx, boxy, boxw, boxh, false, global::c_level_middle, IntType(1));
		tabsh = min({ boxh, IntType(24) });
		sVar(content_tab) = ObjType(obj_panel, panel)->tab_list.Value(ObjType(obj_panel, panel)->tab_selected);
		sVar(content_x) = boxx;
		sVar(content_y) = boxy + (tabsh * (IntType)idBool(sVar(content_tab), movable));
		sVar(content_width) = boxw;
		sVar(content_height) = boxh - (tabsh * (IntType)idBool(sVar(content_tab), movable));
		sBool(content_mouseon) = (app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon));
		sReal(panel_compact) = (ObjType(obj_panel, panel)->size_real <= IntType(225));
		panel_draw_content(self);
		sVar(content_y) = boxy;
		tabsw = IntType(0);
		tabswprev = IntType(0);
		tabmaxw = boxw;
		padding = IntType(10);
		tablistmouseon = null_;
		tabmouseon = false;
		if (idBool(sVar(content_tab), movable))
		{
			if (ObjType(obj_panel, panel)->tab_list_amount > IntType(0))
			{
				for (IntType t = IntType(0); t < ObjType(obj_panel, panel)->tab_list_amount; t++)
				{
					VarType tab;
					RealType sel;
					tab = ObjType(obj_panel, panel)->tab_list.Value(t);
					sel = (ObjType(obj_panel, panel)->tab_selected == t);
					tabtitle[t] = tab_get_title(tab);
					draw_set_font((sel > 0) ? sInt(font_label) : sInt(font_value));
					tabw[t] = string_width(tabtitle.Value(t)) + IntType(8);
					if (idBool(tab, closeable))
						tabw[t] += IntType(36);
					else
						tabw[t] += IntType(16);
					
					tabswprev += tabw.Value(t);
				}
				RealType selnamew, unselnamew;
				selnamew = tabw.Value(ObjType(obj_panel, panel)->tab_selected);
				unselnamew = max({ IntType(28), (boxw - selnamew) / (ObjType(obj_panel, panel)->tab_list_amount - IntType(1)) });
				selnamew = min({ selnamew, IntType(144), boxw - (unselnamew * (ObjType(obj_panel, panel)->tab_list_amount - IntType(1))) });
				unselnamew = max({ IntType(28), (boxw - selnamew) / (ObjType(obj_panel, panel)->tab_list_amount - IntType(1)) });
				unselnamew = min({ unselnamew, IntType(144) });
				for (IntType t = IntType(0); t < ObjType(obj_panel, panel)->tab_list_amount; t++)
				{
					VarType tab;
					BoolType sel;
					tab = ObjType(obj_panel, panel)->tab_list.Value(t);
					sel = (ObjType(obj_panel, panel)->tab_selected == t);
					if (sel)
					{
						tabw[t] = min({ IntType(144), tabw.Value(t), selnamew });
						tabsw += tabw.Value(t);
					}
					else
					{
						tabw[t] = min({ IntType(144), tabw.Value(t), unselnamew });
						tabsw += tabw.Value(t);
					}
					
				}
			}
			dx = boxx;
			dy = boxy;
			sBool(content_mouseon) = !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
			draw_box(dx, dy, tabmaxw, tabsh, false, global::c_level_bottom, IntType(1));
			draw_box(dx, dy + tabsh, tabmaxw, IntType(1), false, global::c_border, global::a_border);
			for (IntType t = IntType(0); t < ObjType(obj_panel, panel)->tab_list_amount; t++)
			{
				VarType tab;
				RealType sel, dw, dh, hover;
				tab = ObjType(obj_panel, panel)->tab_list.Value(t);
				sel = (ObjType(obj_panel, panel)->tab_selected == t);
				tabx[t] = dx;
				dw = tabw.Value(t);
				dh = tabsh;
				hover = false;
				if (app_mouse_box(self, dx, dy, dw, dh))
				{
					hover = true;
					if (!app_mouse_box(self, dx + dw - (IntType(20) * (IntType)idBool(tab, closeable)), dy + IntType(4), IntType(16) * (IntType)idBool(tab, closeable), IntType(16)))
					{
						if (!(sel > 0))
						{
							tablistmouseon = t;
							sInt(mouse_cursor) = cr_handpoint;
						}
						else
							tabmouseon = true;
						
					}
				}
				if (sel > 0)
					draw_box(dx, dy, dw, dh + IntType(1), false, global::c_level_middle, IntType(1));
				RealType limit = dw - IntType(16);
				if ((hover > 0 || sel > 0) && idBool(tab, closeable))
					limit -= 20.0;
				draw_set_font((sel > 0) ? sInt(font_label) : sInt(font_value));
				if (string_width(tabtitle.Value(t)) > limit)
					tip_set(self, tabtitle.Value(t), dx, dy, dw, dh);
				tabtitle[t] = string_limit(tabtitle.Value(t), limit);
				if (idBool(tab, closeable) && (hover > 0 || sel > 0))
				{
					if (hover > 0 && sBool(mouse_middle_pressed))
					{
						tab_close(self, tab);
						return IntType(0);
					}
					if (draw_button_icon(self, { /*"tabclose"*/ STR(1939) + string(tab), floor(dx + dw - IntType(20)), dy + IntType(4), IntType(16), IntType(16), false, icons_CLOSE_SMALL }))
					{
						tab_close(self, tab);
						return IntType(0);
					}
				}
				draw_label(self, { tabtitle.Value(t), floor(dx + 8.0), round(dy + (dh / 2.0)), fa_left, fa_center, ((sel > 0) ? global::c_accent : ((hover > 0) ? global::c_text_main : global::c_text_secondary)), ((sel > 0) ? 1.0 : ((hover > 0) ? global::a_text_main : global::a_text_secondary)), (sel > 0) ? sInt(font_label) : sInt(font_value) });
				if (sel > 0)
				{
					if (t != IntType(0))
						draw_box(dx - IntType(1), dy, IntType(1), dh, false, global::c_border, global::a_border);
					draw_box(dx + dw - IntType(1), dy, IntType(1), dh + IntType(1), false, global::c_border, global::a_border);
				}
				else
				{
					if (t < ObjType(obj_panel, panel)->tab_list_amount)
					{
						if (ObjType(obj_panel, panel)->tab_selected != t + IntType(1))
							draw_box(dx + dw, dy, IntType(1), dh, false, global::c_border, global::a_border);
					}
				}
				
				idVar(tab, glow) = max({ IntType(0), idVar(tab, glow) - 0.05 });
				if (sVar(window_busy) == /*"tabmove"*/ STR(1938))
				{
					sVar(window_busy) = /*""*/ STR(0);
					if (app_mouse_box(self, dx, dy, dw, dh))
					{
						idVar(tab, glow) = test_reduced_motion(IntType(1), min({ IntType(1), idVar(tab, glow) + 0.1 * global::delta }));
						idInt(tab, panel_last) = panel;
						sInt(tab_move_mouseon_panel) = panel;
						sInt(tab_move_mouseon_position) = t;
					}
					sVar(window_busy) = /*"tabmove"*/ STR(1938);
				}
				if (idVar(tab, glow) > IntType(0))
					draw_box(dx, dy, dw, dh, false, global::c_accent, idVar(tab, glow) * glow_alpha);
				dx += tabw.Value(t);
			}
			if (panel == DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)) || panel == DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))
				draw_box(boxx, boxy, IntType(1), boxh, false, global::c_border, global::a_border);
			else
				draw_box(boxx + boxw - IntType(1), boxy, IntType(1), boxh, false, global::c_border, global::a_border);
			
			ObjType(obj_panel, panel)->list_glow = test_reduced_motion(IntType(0), max({ IntType(0), ObjType(obj_panel, panel)->list_glow - 0.05 * global::delta }));
			if (tabmaxw > tabsw)
			{
				if (sVar(window_busy) == /*"tabmove"*/ STR(1938))
				{
					sVar(window_busy) = /*""*/ STR(0);
					if (app_mouse_box(self, boxx + tabsw, boxy, tabmaxw - tabsw, tabsh))
					{
						ObjType(obj_panel, panel)->list_glow = test_reduced_motion(IntType(1), min({ IntType(1), ObjType(obj_panel, panel)->list_glow + 0.1 * global::delta }));
						sInt(tab_move_mouseon_panel) = panel;
						sInt(tab_move_mouseon_position) = ObjType(obj_panel, panel)->tab_list_amount;
					}
					sVar(window_busy) = /*"tabmove"*/ STR(1938);
				}
				if (ObjType(obj_panel, panel)->list_glow > IntType(0))
					draw_box(boxx + tabsw, boxy, min({ sReal(tab_move_width), tabmaxw - tabsw }), tabsh, false, global::c_accent, ObjType(obj_panel, panel)->list_glow * glow_alpha);
			}
			if (idVar(sVar(content_tab), glow) > IntType(0))
				draw_box(boxx, boxy + tabsh, boxw, boxh - tabsh, false, global::c_accent, idVar(sVar(content_tab), glow) * glow_alpha);
		}
		resizemouseon = false;
		if (panel == DsMap(sInt(panel_map)).Value(/*"left"*/ STR(192)) || panel == DsMap(sInt(panel_map)).Value(/*"left_secondary"*/ STR(188)))
		{
			draw_gradient(boxx + boxw, boxy, shadow_size, boxh, c_black, shadow_alpha, IntType(0), IntType(0), shadow_alpha);
			if (app_mouse_box(self, boxx + boxw - IntType(8), boxy, IntType(8), boxh) && tablistmouseon == null_ && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon))
			{
				sInt(mouse_cursor) = cr_size_we;
				resizemouseon = true;
			}
			if (resizemouseon || panel == sInt(panel_resize))
				draw_box(boxx + boxw - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover);
		}
		else
			if (panel == DsMap(sInt(panel_map)).Value(/*"right"*/ STR(193)) || panel == DsMap(sInt(panel_map)).Value(/*"right_secondary"*/ STR(189)))
			{
				draw_gradient(boxx - shadow_size, boxy, shadow_size, boxh, c_black, IntType(0), shadow_alpha, shadow_alpha, IntType(0));
				if (app_mouse_box(self, boxx, boxy, IntType(8), boxh) && tablistmouseon == null_ && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon))
				{
					sInt(mouse_cursor) = cr_size_we;
					resizemouseon = true;
				}
				if (resizemouseon || panel == sInt(panel_resize))
					draw_box(boxx - IntType(2), boxy, IntType(4), boxh, false, global::c_hover, global::a_hover);
			}
			else
				if (panel == DsMap(sInt(panel_map)).Value(/*"bottom"*/ STR(190)))
				{
					draw_gradient(boxx, boxy - shadow_size, boxw, shadow_size, c_black, IntType(0), IntType(0), shadow_alpha, shadow_alpha);
					if (app_mouse_box(self, boxx, boxy, boxw, IntType(8)) && tablistmouseon == null_ && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon))
					{
						sInt(mouse_cursor) = cr_size_ns;
						resizemouseon = true;
					}
					if (resizemouseon || panel == sInt(panel_resize))
						draw_box(boxx, boxy - IntType(2), boxw, IntType(4), false, global::c_hover, global::a_hover);
				}
		
		
		if (resizemouseon && sBool(mouse_left_pressed))
		{
			sVar(window_busy) = /*"panelresize"*/ STR(1937);
			sInt(panel_resize) = panel;
			sReal(panel_resize_size) = ObjType(obj_panel, panel)->size_real;
		}
		if (tabmouseon && sInt(mouse_cursor) == cr_default && sBool(mouse_left_pressed))
		{
			sVar(window_busy) = /*"tabclick"*/ STR(1940);
			sVar(tab_move) = sVar(content_tab);
		}
		if (sVar(window_busy) == /*"tabclick"*/ STR(1940))
		{
			if (sVar(tab_move) == null_)
				sVar(window_busy) = /*""*/ STR(0);
			else
				if (sVar(tab_move) == sVar(content_tab))
				{
					if (sReal(mouse_move) > IntType(10))
					{
						sVar(window_busy) = /*"tabmove"*/ STR(1938);
						sVar(tab_move_name) = tabtitle.Value(ObjType(obj_panel, panel)->tab_selected);
						sReal(tab_move_x) = min({ boxw - tabw.Value(ObjType(obj_panel, panel)->tab_selected), tabx.Value(ObjType(obj_panel, panel)->tab_selected) - boxx });
						sReal(tab_move_width) = tabw.Value(ObjType(obj_panel, panel)->tab_selected);
						sInt(tab_move_direction) = sInt(content_direction);
						sReal(tab_move_box_x) = boxx - gmlGlobal::mouse_x;
						sReal(tab_move_box_y) = boxy - gmlGlobal::mouse_y;
						sReal(tab_move_box_width) = boxw;
						sReal(tab_move_box_height) = boxh;
						panel_tab_list_remove(panel, ObjType(obj_panel, panel)->tab_list.Value(ObjType(obj_panel, panel)->tab_selected));
					}
					else
						if (!sBool(mouse_left))
							sVar(window_busy) = /*""*/ STR(0);
					
				}
			
		}
		if (tablistmouseon != null_ && sBool(mouse_left_pressed))
		{
			ObjType(obj_panel, panel)->tab_selected = tablistmouseon;
			sVar(window_busy) = /*"tabclick"*/ STR(1940);
			sVar(tab_move) = ObjType(obj_panel, panel)->tab_list.Value(tablistmouseon);
		}
		return 0.0;
	}
	
}
