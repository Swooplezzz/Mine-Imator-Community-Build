/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.11.15 18:00:31 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void action_tl_path_closed_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, path_closed), nval);
		
		idVar(tl, path_closed) = nval;
		withOne (Object, tl, noone)
			sBool(path_update) = true;
		
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_path_closed_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_path_detail(ScopeAny self, VarType value, VarType add)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_detail) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_detail) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_detail, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_detail, ObjType(obj_timeline, self.otherId)->path_detail * add + value);
					
					ObjType(obj_timeline, self->id)->path_detail = ObjType(obj_timeline, self->id)->path_detail * add + value;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_point_add(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				withOne (Object, save_id_find(self->spawn_save_id), self->id)
				{
					if (self->subAssetId == ID_obj_timeline)
						tl_remove_clean(self);
					instance_destroy(self);
				}
				
				history_restore_tl_select(self);
			}
			
		}
		else
		{
			IntType hobj;
			VarType tl;
			hobj = null_;
			if (!(sReal(history_redo) > 0))
				hobj = history_set(self, ID_action_tl_path_point_add);
		}
		
		if (!(sReal(history_undo) > 0))
		{
			if (!(sReal(history_redo) > 0))
				withOne (Object, sVar(hobj), self->id)
					history_save_tl_select(self);
			
			sVar(tl) = new_tl(e_tl_type_PATH_POINT);
			if (global::tl_edit != null_)
			{
				withOne (Object, sVar(tl), self->id)
					tl_set_parent(self, { global::tl_edit });
				
			}
			tl_deselect_all();
			withOne (Object, sVar(tl), self->id)
				tl_select(self);
			
			if (!(sReal(history_redo) > 0))
			{
				withOne (Object, sVar(hobj), self->id)
				{
					history_save_tl_select_new(self);
					sVar(spawn_save_id) = idVar(sVar(tl), save_id);
				}
				
			}
		}
		app_update_tl_edit(self);
		tl_update_list(self);
		tl_update_matrix(self);
	}
	
	void action_tl_path_shape_detail(ScopeAny self, VarType value, VarType add)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_detail) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_detail) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_detail, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_detail, ObjType(obj_timeline, self.otherId)->path_shape_detail * add + value);
					
					ObjType(obj_timeline, self->id)->path_shape_detail = ObjType(obj_timeline, self->id)->path_shape_detail * add + value;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_generate(ScopeAny self, VarType generate)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_generate) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_generate) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_generate, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_generate, generate);
					
					ObjType(obj_timeline, self->id)->path_shape_generate = generate;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_invert(ScopeAny self, VarType invert)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_invert) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_invert) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_invert, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_invert, invert);
					
					ObjType(obj_timeline, self->id)->path_shape_invert = invert;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_radius(ScopeAny self, VarType value, VarType add)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_radius) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_radius) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_radius, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_radius, ObjType(obj_timeline, self.otherId)->path_shape_radius * add + value);
					
					ObjType(obj_timeline, self->id)->path_shape_radius = ObjType(obj_timeline, self->id)->path_shape_radius * add + value;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_smooth_ring(ScopeAny self, VarType smooth_ring)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_smooth_ring) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_smooth_ring) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_smooth_ring, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_smooth_ring, smooth_ring);
					
					ObjType(obj_timeline, self->id)->path_shape_smooth_ring = smooth_ring;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_smooth_segments(ScopeAny self, VarType smooth_segments)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_smooth_segments) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_smooth_segments) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_smooth_segments, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_smooth_segments, smooth_segments);
					
					ObjType(obj_timeline, self->id)->path_shape_smooth_segments = smooth_segments;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_tex_length(ScopeAny self, VarType value, VarType add)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_tex_length) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_tex_length) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_tex_length, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_tex_length, ObjType(obj_timeline, self.otherId)->path_shape_tex_length * add + value);
					
					ObjType(obj_timeline, self->id)->path_shape_tex_length = ObjType(obj_timeline, self->id)->path_shape_tex_length * add + value;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_shape_tube(ScopeAny self, VarType tube)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						idVar(self->id, path_shape_tube) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							idVar(self->id, path_shape_tube) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_shape_tube, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->path_shape_tube, tube);
					
					ObjType(obj_timeline, self->id)->path_shape_tube = tube;
					self->path_update = true;
				}
				
			}
		
		
	}
	
	void action_tl_path_smooth(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						sVar(path_smooth) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						sBool(path_update) = true;
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							sVar(path_smooth) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							sBool(path_update) = true;
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_path_smooth, false);
				withAll (obj_timeline, self->id)
					if (self->selected > 0)
						action_tl_path_smooth_tree(self->id, enable, hobj);
				
			}
		
		
	}
	
	void action_tl_path_smooth_tree(VarType tl, VarType nval, VarType hobj)
	{
		withOne (obj_history, hobj, noone)
			history_save_var(self, tl, idVar(tl, path_smooth), nval);
		
		idVar(tl, path_smooth) = nval;
		withOne (Object, tl, noone)
			sBool(path_update) = true;
		
		for (IntType i = IntType(0); i < ds_list_size(idInt(tl, tree_list)); i++)
			if (!(idReal(DsList(idInt(tl, tree_list)).Value(i), selected) > 0))
				action_tl_path_smooth_tree(DsList(idInt(tl, tree_list)).Value(i), nval, hobj);
	}
	
	void action_tl_play(ScopeAny self)
	{
		if (!(sReal(timeline_playing) > 0))
		{
			sReal(timeline_playing) = true;
			sInt(timeline_playing_start_time) = current_time();
			sVar(timeline_playing_start_marker) = sVar(timeline_marker);
			sVar(timeline_playing_last_marker) = sVar(timeline_marker);
			sVar(timeline_playing_start_hor_scroll) = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
			action_tl_play_start();
		}
		else
		{
			sVar(timeline_marker) = round(sVar(timeline_marker));
			action_tl_play_break(self);
		}
		
	}
	
	void action_tl_play_beginning()
	{
		global::_app->timeline_playing = true;
		global::_app->timeline_playing_start_time = current_time();
		if (global::_app->timeline_region_start != null_)
		{
			global::_app->timeline_playing_start_marker = global::_app->timeline_region_start;
			global::_app->timeline_marker = global::_app->timeline_region_start;
		}
		else
		{
			global::_app->timeline_playing_start_marker = IntType(0);
			global::_app->timeline_marker = IntType(0);
		}
		
		global::_app->timeline_marker_previous = global::_app->timeline_marker + IntType(1);
		action_tl_play_start();
	}
	
	void action_tl_play_break(ScopeAny self)
	{
		sReal(timeline_playing) = false;
		audio_stop_all();
		withAll (obj_keyframe, self->id)
			self->sound_play_index = null_;
		
	}
	
	void action_tl_play_jump(ScopeAny self)
	{
		if (sReal(timeline_playing) > 0)
		{
			sInt(timeline_playing_start_time) = current_time();
			sVar(timeline_playing_start_marker) = sVar(timeline_marker);
			sVar(timeline_playing_start_hor_scroll) = ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value;
			action_tl_play_start();
		}
	}
	
	void action_tl_play_repeat(ScopeAny self)
	{
		sInt(project_changed) = true;
		if (!(sVar(timeline_repeat) > 0) && !(sVar(timeline_seamless_repeat) > 0))
		{
			sVar(timeline_repeat) = true;
		}
		else
			if (sVar(timeline_repeat) > 0)
			{
				sVar(timeline_seamless_repeat) = true;
				sVar(timeline_repeat) = false;
			}
			else
			{
				sVar(timeline_seamless_repeat) = false;
				sVar(timeline_repeat) = false;
			}
		
		
		if (sReal(timeline_playing) > 0 && sVar(timeline_length) > IntType(0))
		{
			sInt(timeline_playing_start_time) = current_time();
			if (sVar(timeline_marker) > sVar(timeline_length))
				sVar(timeline_playing_start_marker) = IntType(0);
			else
				sVar(timeline_playing_start_marker) = sVar(timeline_marker);
			
		}
	}
	
	void action_tl_play_start()
	{
		audio_stop_all();
		withAll (obj_timeline, noone)
		{
			if (self->type == e_tl_type_AUDIO && !(self->hide > 0) && global::_app->window_state != /*"export_movie"*/ STR(53))
			{
				for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
				{
					withOne (obj_keyframe, DsList(self->keyframe_list).Value(k), self->id)
					{
						self->sound_play_index = null_;
						if (self->value.Value(e_value_SOUND_OBJ) == null_ || !idBool(self->value.Value(e_value_SOUND_OBJ), ready))
							continue;
						if (self->position + tl_keyframe_length(self->id) < global::_app->timeline_marker)
							continue;
						if (self->position > global::_app->timeline_marker)
							break;
						self->sound_play_index = audio_play_sound(idInt(self->value.Value(e_value_SOUND_OBJ), sound_index), IntType(0), (self->value.Value(e_value_SOUND_END) > IntType(0) ? true : false));
						audio_sound_pitch(self->sound_play_index, self->value.Value(e_value_SOUND_PITCH));
						audio_sound_set_track_position(self->sound_play_index, (mod((self->value.Value(e_value_SOUND_START) + (global::_app->timeline_marker - self->position) / global::_app->project_tempo), ((idReal(self->value.Value(e_value_SOUND_OBJ), sound_samples) / self->value.Value(e_value_SOUND_PITCH)) / sample_rate_)) * self->value.Value(e_value_SOUND_PITCH)));
						audio_sound_gain(self->sound_play_index, self->value.Value(e_value_SOUND_VOLUME), 0.0);
					}
					
				}
			}
			else
				if (self->type == e_temp_type_PARTICLE_SPAWNER)
				{
					for (IntType k = IntType(0); k < ds_list_size(self->keyframe_list); k++)
					{
						if (ObjType(obj_keyframe, DsList(self->keyframe_list).Value(k))->value.Value(e_value_SPAWN) > 0 && ObjType(obj_keyframe, DsList(self->keyframe_list).Value(k))->position == global::_app->timeline_marker)
						{
							self->fire = true;
							break;
						}
					}
				}
			
		}
		
	}
	
	void action_tl_play_stop(ScopeAny self)
	{
		if (sReal(timeline_playing) > 0)
		{
			sVar(timeline_marker) = sVar(timeline_playing_last_marker);
			ObjType(obj_scrollbar, idInt(sVar(timeline), hor_scroll))->value_goal = sVar(timeline_playing_start_hor_scroll);
			action_tl_play_break(self);
		}
		else
			sVar(timeline_marker) = IntType(0);
		
	}
	
	void action_tl_remove(ScopeAny self)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->tl_save_amount; t++)
					history_restore_tl(self->tl_save_obj.Value(t));
				history_restore_tl_select(self);
			}
			
		}
		else
		{
			IntType contexttl = null_;
			if (!(sReal(history_redo) > 0))
			{
				withOne (obj_history, history_set(self, ID_action_tl_remove), self->id)
				{
					self->tl_save_amount = IntType(0);
					history_save_tl_select(ScopeAny(self));
					self->tl_context_save_id = (global::list_item_value == null_ ? VarType(null_) : idVar(global::list_item_value, save_id));
					if (global::list_item_value != null_ && !(idReal(global::list_item_value, selected) > 0))
					{
						withOne (Object, global::list_item_value, self->id)
							tl_select_single(self);
						
					}
					history_save_tl_tree(ScopeAny(self), global::_app->id);
					history_restore_tl_select(self);
				}
				
				contexttl = save_id_find(ObjType(obj_history, sArr(history).Value(IntType(0)))->tl_context_save_id);
			}
			else
				contexttl = save_id_find(ObjType(obj_history, global::history_data)->tl_context_save_id);
			
			if (contexttl == null_ || idReal(contexttl, selected) > 0)
			{
				withAll (obj_timeline, self->id)
					if (self->selected > 0 && self->part_of == null_ && !self->delete_ready)
						tl_remove_clean(ScopeAny(self));
				
				tl_deselect_all();
			}
			else
			{
				withOne (Object, contexttl, self->id)
					if (sVar(part_of) == null_ && !sBool(delete_ready))
						tl_remove_clean(self);
				
			}
			
			withAll (obj_timeline, self->id)
				if (self->delete_ready)
					instance_destroy(ScopeAny(self));
			
		}
		
		sVar(project_ik_part_array) = null_;
		tl_update_list(self);
		tl_update_length();
		tl_update_matrix(self);
		app_update_tl_edit(self);
	}
	
	void action_tl_right()
	{
		global::_app->timeline_marker_move += (RealType)global::_app->project_tempo / gmlGlobal::room_speed;
		if (global::_app->setting_timeline_frame_snap > 0 || keyboard_check(vk_control))
			global::_app->timeline_marker = round(global::_app->timeline_marker_move);
		else
			global::_app->timeline_marker = global::_app->timeline_marker_move;
		
		if (global::_app->timeline_repeat > 0 || global::_app->timeline_seamless_repeat > 0)
		{
			if (global::_app->timeline_region_end != null_)
			{
				if (global::_app->timeline_marker >= global::_app->timeline_region_end)
					global::_app->timeline_marker = global::_app->timeline_region_start;
			}
			else
				if (global::_app->timeline_marker >= global::_app->timeline_length && global::_app->timeline_length > IntType(0))
					global::_app->timeline_marker = IntType(0);
			
		}
	}
	
	void action_tl_rotpoint(ScopeAny self, VarType val, VarType add)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						sVar(rot_point)[global::axis_edit] = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						tl_update_rot_point(self);
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							sVar(rot_point)[global::axis_edit] = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							tl_update_rot_point(self);
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_rotpoint, true);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->rot_point.Value(global::axis_edit), ObjType(obj_timeline, self.otherId)->rot_point.Value(global::axis_edit) * add + val);
					
					self->rot_point[global::axis_edit] = self->rot_point.Value(global::axis_edit) * add + val;
					tl_update_rot_point(ScopeAny(self));
				}
				
			}
		
		
		tl_update_matrix(self);
	}
	
	void action_tl_rotpoint_all(ScopeAny self, VarType point)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						sVar(rot_point) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						tl_update_rot_point(self);
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							sVar(rot_point) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							tl_update_rot_point(self);
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_rotpoint_all, false);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->rot_point, point);
					
					self->rot_point = point;
					tl_update_rot_point(ScopeAny(self));
				}
				
			}
		
		
		tl_update_matrix(self);
	}
	
	void action_tl_rotpoint_custom(ScopeAny self, VarType enable)
	{
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
			{
				for (IntType t = IntType(0); t < self->save_var_amount; t++)
				{
					withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
					{
						sVar(rot_point_custom) = ObjType(obj_history, self.otherId)->save_var_old_value.Value(t);
						tl_update_rot_point(self);
					}
					
				}
			}
			
		}
		else
			if (sReal(history_redo) > 0)
			{
				withOne (obj_history, global::history_data, self->id)
				{
					for (IntType t = IntType(0); t < self->save_var_amount; t++)
					{
						withOne (Object, save_id_find(self->save_var_save_id.Value(t)), self->id)
						{
							sVar(rot_point_custom) = ObjType(obj_history, self.otherId)->save_var_new_value.Value(t);
							tl_update_rot_point(self);
						}
						
					}
				}
				
			}
			else
			{
				VarType hobj = history_save_var_start(self, ID_action_tl_rotpoint_custom, false);
				withAll (obj_timeline, self->id)
				{
					if (!(self->selected > 0))
						continue;
					withOne (obj_history, hobj, self->id)
						history_save_var(self, self.otherId, ObjType(obj_timeline, self.otherId)->rot_point_custom, enable);
					
					self->rot_point_custom = enable;
					tl_update_rot_point(ScopeAny(self));
				}
				
			}
		
		
		tl_update_matrix(self);
	}
	
}
