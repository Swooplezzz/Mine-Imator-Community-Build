/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.11.15 18:00:32 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void view_control_camera(ScopeAny self, IntType view)
	{
		RealType len;
		MatrixType xyang, zang;
		len = point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos_rotate)) * view_3d_control_size * 0.7;
		withOne (Object, global::tl_edit, global::_app->id)
		{
			xyang = array_copy_1d(sMat(matrix_parent));
			xyang.Real(MAT_X) = sVar(world_pos_rotate).Value(X_);
			xyang.Real(MAT_Y) = sVar(world_pos_rotate).Value(Y_);
			xyang.Real(MAT_Z) = sVar(world_pos_rotate).Value(Z_);
			matrix_remove_scale(VarType::CreateRef(xyang));
		}
		
		zang = matrix_multiply(matrix_build(0.0, 0.0, 0.0, 90.0, 0.0, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY) + 90.0, 1.0, 1.0, 1.0), xyang);
		view_control_rotate_axis(self, view, e_view_control_ROT_ANGLE_XY, e_value_CAM_ROTATE_ANGLE_XY, global::c_control_yellow, xyang, len);
		view_control_rotate_axis(self, view, e_view_control_ROT_ANGLE_Z, e_value_CAM_ROTATE_ANGLE_Z, global::c_control_cyan, zang, len);
		view_control_move_axis(self, view, e_view_control_ROT_DISTANCE, e_value_CAM_ROTATE_DISTANCE, global::c_control_magenta, idVar(global::tl_edit, world_pos), idVar(global::tl_edit, world_pos_rotate), false);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && (sInt(view_control_edit) == e_view_control_ROT_ANGLE_XY || sInt(view_control_edit) == e_view_control_ROT_ANGLE_Z))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				RealType ang, prevang, rot, snapval;
				VarType axesang, newval;
				ang = point_direction(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), sVec(view_control_pos).Real(X_), sVec(view_control_pos).Real(Y_));
				prevang = point_direction(sVar(mouse_previous_x) - sVar(content_x), sVar(mouse_previous_y) - sVar(content_y), sVec(view_control_pos).Real(X_), sVec(view_control_pos).Real(Y_));
				rot = angle_difference_fix(ang, prevang) * negate(sReal(view_control_flip));
				sReal(view_control_move_distance) += rot * sReal(dragger_multiplier);
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : snap_min);
				axesang = sReal(view_control_move_distance);
				if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
					axesang = snap(axesang, snapval);
				newval = sVar(view_control_value) + axesang;
				if (sInt(view_control_edit) == e_view_control_ROT_ANGLE_XY)
					newval = tl_value_clamp(e_value_CAM_ROTATE_ANGLE_XY, newval);
				else
					newval = tl_value_clamp(e_value_CAM_ROTATE_ANGLE_Z, newval);
				
				if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
					newval = snap(newval, snapval);
				if (sInt(view_control_edit) == e_view_control_ROT_ANGLE_XY)
					newval -= idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY);
				else
					newval -= idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z);
				
				if (sInt(view_control_edit) == e_view_control_ROT_ANGLE_XY)
				{
					tl_value_set_start(self, ID_action_tl_frame_cam_rotate_angle_xy, true);
					tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_XY, newval, true });
				}
				else
				{
					tl_value_set_start(self, ID_action_tl_frame_cam_rotate_angle_z, true);
					tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_Z, newval, true });
				}
				
				if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
				{
					if (sInt(view_control_edit) == e_view_control_ROT_ANGLE_XY)
						tl_value_set(self, { e_value_ROT_Z, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
					else
						tl_value_set(self, { e_value_ROT_X, idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
					
				}
				tl_value_set_done();
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sVar(view_control_matrix) = null_;
				sVar(view_control_length) = null_;
				sReal(view_control_move_distance) = IntType(0);
				sVar(view_control_value) = IntType(0);
			}
		}
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == e_view_control_ROT_DISTANCE)
		{
			sInt(mouse_cursor) = cr_handpoint;
			RealType veclen = vec2_length(sVec(view_control_vec));
			if (veclen > IntType(0) && !(sInt(mouse_still) > 0))
			{
				VecType vecmouse;
				RealType vecdot, snapval, dis;
				VarType move, newval;
				move = IntType(0);
				vecmouse = vec2(sReal(mouse_dx), sReal(mouse_dy));
				vecdot = vec2_dot(vec2_normalize(sVec(view_control_vec)), vec2_normalize(vecmouse));
				dis = point3D_distance(idVar(global::tl_edit, world_pos), idVar(global::tl_edit, world_pos_rotate));
				sReal(view_control_move_distance) -= vec2_length(vecmouse) * (dis / veclen) * vecdot * sReal(dragger_multiplier);
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_position) : snap_min);
				if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
					move = snap(sReal(view_control_move_distance), snapval);
				else
					move = sReal(view_control_move_distance);
				
				newval = sVar(view_control_value) + move;
				newval = tl_value_clamp(e_value_CAM_ROTATE_DISTANCE, newval);
				if ((sVar(setting_snap_absolute) > 0 && move != IntType(0)) || !(sReal(dragger_snap) > 0))
					newval = snap(newval, snapval);
				newval -= idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_DISTANCE);
				tl_value_set_start(self, ID_action_tl_frame_cam_rotate_distance, true);
				tl_value_set(self, { e_value_CAM_ROTATE_DISTANCE, newval, true });
				tl_value_set_done();
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sVar(view_control_matrix) = null_;
				sVar(view_control_length) = null_;
				sReal(view_control_move_distance) = IntType(0);
				sVar(view_control_value) = IntType(0);
			}
		}
	}
	
	void view_control_move(ScopeAny self, IntType view)
	{
		RealType len, arrowstart, arrowend;
		MatrixType mat;
		len = point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size * sReal(view_control_ratio);
		arrowstart = ((sBool(setting_tool_scale) || sBool(setting_tool_transform)) ? len - len / 4.0 : len / 7.0);
		arrowend = len;
		withOne (Object, global::tl_edit, global::_app->id)
		{
			mat = array_copy_1d(sMat(matrix_parent));
			mat.Real(MAT_X) = sVar(matrix).Value(MAT_X);
			mat.Real(MAT_Y) = sVar(matrix).Value(MAT_Y);
			mat.Real(MAT_Z) = sVar(matrix).Value(MAT_Z);
			matrix_remove_scale(VarType::CreateRef(mat));
		}
		
		view_control_move_axis(self, view, e_view_control_POS_X, e_value_POS_X, global::c_control_red, control_pos(arrowstart, arrowend, X_, mat, true), control_pos(arrowstart, arrowend, X_, mat, false));
		view_control_move_axis(self, view, e_view_control_POS_Y, e_value_POS_Y, ((sReal(setting_z_is_up) > 0) ? global::c_control_green : global::c_control_blue), control_pos(arrowstart, arrowend, Y_, mat, true), control_pos(arrowstart, arrowend, Y_, mat, false));
		view_control_move_axis(self, view, e_view_control_POS_Z, e_value_POS_Z, ((sReal(setting_z_is_up) > 0) ? global::c_control_blue : global::c_control_green), control_pos(arrowstart, arrowend, Z_, mat, true), control_pos(arrowstart, arrowend, Z_, mat, false));
		RealType ps, pe;
		ps = (len / 7.0);
		pe = ps + (len / 7.5);
		view_control_move_pan(self, view, len / 10.0);
		view_control_move_plane(self, view, e_view_control_POS_XY, point3D(IntType(1), IntType(1), IntType(0)), ((sReal(setting_z_is_up) > 0) ? global::c_control_blue : global::c_control_green), mat, vec3(IntType(0), IntType(0), IntType(1)), point3D(ps, ps, IntType(0)), point3D(pe, ps, IntType(0)), point3D(pe, pe, IntType(0)), point3D(ps, pe, IntType(0)));
		view_control_move_plane(self, view, e_view_control_POS_XZ, point3D(IntType(1), IntType(0), IntType(1)), ((sReal(setting_z_is_up) > 0) ? global::c_control_green : global::c_control_blue), mat, vec3(IntType(0), IntType(1), IntType(0)), point3D(ps, IntType(0), ps), point3D(pe, IntType(0), ps), point3D(pe, IntType(0), pe), point3D(ps, IntType(0), pe));
		view_control_move_plane(self, view, e_view_control_POS_YZ, point3D(IntType(0), IntType(1), IntType(1)), global::c_control_red, mat, vec3(IntType(1), IntType(0), IntType(0)), point3D(IntType(0), ps, ps), point3D(IntType(0), pe, ps), point3D(IntType(0), pe, pe), point3D(IntType(0), ps, pe));
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && sInt(view_control_edit) >= e_view_control_POS_XY && sInt(view_control_edit) <= e_view_control_POS_PAN)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				VecType move, pos;
				RealType snapval;
				move = point3D_plane_intersect(sVar(view_control_plane_origin), sVec(view_control_plane_normal), global::cam_from, sVec(view_control_ray_dir));
				move = point3D_sub(move, sVar(view_control_plane_origin));
				move = vec3_mul_matrix(move, matrix_inverse(mat));
				pos = point3D(IntType(0), IntType(0), IntType(0));
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_position) : snap_min);
				for (IntType i = X_; i <= Z_; i++)
				{
					if (i == Z_ && sInt(view_control_edit) == e_view_control_POS_XY)
						continue;
					else
						if (i == Y_ && sInt(view_control_edit) == e_view_control_POS_XZ)
							continue;
						else
							if (i == X_ && sInt(view_control_edit) == e_view_control_POS_YZ)
								continue;
					
					
					if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
						move.Real(i) = snap(move.Real(i), snapval);
					move.Real(i) /= idArr(global::tl_edit, value_inherit).Value(e_value_SCA_X + global::axis_edit);
					pos.Real(i) = sVar(view_control_value).Value(i) + move.Real(i);
					pos.Real(i) = tl_value_clamp(e_value_POS_X + i, pos.Real(i));
					if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
						pos.Real(i) = snap(pos.Real(i), snapval);
					pos.Real(i) -= idVar(global::tl_edit, value).Value(e_value_POS_X + i);
				}
				tl_value_set_start(self, ID_action_tl_frame_pos_xyz, true);
				tl_value_set(self, { e_value_POS_X, pos.Real(X_), true });
				tl_value_set(self, { e_value_POS_Y, pos.Real(Y_), true });
				tl_value_set(self, { e_value_POS_Z, pos.Real(Z_), true });
				tl_value_set_done();
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sBool(view_control_plane) = false;
			}
		}
		else
			if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && sInt(view_control_edit) >= e_view_control_POS_X && sInt(view_control_edit) <= e_view_control_POS_Z)
			{
				sInt(mouse_cursor) = cr_handpoint;
				RealType veclen = vec2_length(sVec(view_control_vec));
				if (veclen > IntType(0) && !(sInt(mouse_still) > 0))
				{
					VecType vecmouse, move, newval;
					RealType vecdot, snapval;
					move = vec3(IntType(0));
					global::axis_edit = sInt(view_control_edit) - e_view_control_POS_X;
					vecmouse = vec2(sReal(mouse_dx), sReal(mouse_dy));
					vecdot = vec2_dot(vec2_normalize(sVec(view_control_vec)), vec2_normalize(vecmouse));
					sReal(view_control_move_distance) += (vec2_length(vecmouse) / veclen) * len * vecdot * sReal(dragger_multiplier) * negate(sReal(view_control_flip));
					snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_position) : snap_min);
					if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
						move.Real(global::axis_edit) = snap(sReal(view_control_move_distance), snapval);
					else
						move.Real(global::axis_edit) = sReal(view_control_move_distance);
					
					for (IntType i = X_; i <= Z_; i++)
					{
						move.Real(i) /= idArr(global::tl_edit, value_inherit).Value(e_value_SCA_X + global::axis_edit);
						newval.Real(i) = sVar(view_control_value).Value(i) + move.Real(i);
						newval.Real(i) = tl_value_clamp(e_value_POS_X + i, newval.Real(i));
						if ((sVar(setting_snap_absolute) > 0 && move.Real(i) != IntType(0)) || !(sReal(dragger_snap) > 0))
							newval.Real(i) = snap(newval.Real(i), snapval);
						newval.Real(i) -= idVar(global::tl_edit, value).Value(e_value_POS_X + i);
					}
					tl_value_set_start(self, ID_action_tl_frame_pos_xyz, true);
					tl_value_set(self, { e_value_POS_X, newval.Real(X_), true });
					tl_value_set(self, { e_value_POS_Y, newval.Real(Y_), true });
					tl_value_set(self, { e_value_POS_Z, newval.Real(Z_), true });
					tl_value_set_done();
				}
				if (!sBool(mouse_left))
				{
					sVar(window_busy) = /*""*/ STR(0);
					sInt(view_control_edit) = null_;
					sVar(view_control_value) = IntType(0);
					sReal(view_control_flip) = false;
					sReal(view_control_move_distance) = IntType(0);
				}
			}
		
	}
	
	RealType control_test_point(VecType pos, VarType tlpos, RealType bias)
	{
		VecType camdir = point3D_add(global::cam_from, vec3_mul(vec3_normalize(point3D_sub(global::cam_from, tlpos)), global::_app->project_render_distance));
		RealType worlddis = clamp(vec3_dot(vec3_sub(tlpos, global::cam_from), vec3_sub(camdir, global::cam_from)) / vec3_length(vec3_sub(camdir, global::cam_from)), -no_limit, no_limit);
		RealType pointdis = clamp(vec3_dot(vec3_sub(pos, global::cam_from), vec3_sub(camdir, global::cam_from)) / vec3_length(vec3_sub(camdir, global::cam_from)), -no_limit, no_limit);
		return (pointdis + bias < worlddis);
	}
	
	VecType control_pos(RealType s, RealType e, IntType axis, VarType mat, BoolType retstart)
	{
		VecType startpos = vec3(IntType(0));
		startpos.Real(axis) = s;
		VecType endpos = vec3(IntType(0));
		endpos.Real(axis) = e;
		if (global::_app->view_control_edit == null_)
		{
			VecType endpos3d = vec3(IntType(0));
			endpos3d.Real(axis) = point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size * global::_app->view_control_ratio;
			endpos3d = point3D_mul_matrix(endpos3d, mat);
			if (control_test_point(endpos3d, idVar(global::tl_edit, world_pos), IntType(0)) && global::_app->setting_gizmos_face_camera > 0)
			{
				startpos = vec3_mul(startpos, -IntType(1));
				endpos = vec3_mul(endpos, -IntType(1));
				global::_app->view_control_move_flip_axis[axis] = true;
			}
			else
				global::_app->view_control_move_flip_axis[axis] = false;
			
		}
		else
		{
			if (global::_app->view_control_move_flip_axis.Value(axis))
			{
				startpos = vec3_mul(startpos, -IntType(1));
				endpos = vec3_mul(endpos, -IntType(1));
			}
		}
		
		if (retstart)
			return point3D_mul_matrix(startpos, mat);
		else
			return point3D_mul_matrix(endpos, mat);
		
		return VecType();
	}
	
	RealType view_control_move_axis(ScopeAny self, IntType view, IntType control, IntType vid, IntType color, VarType start3D, VarType end3D, RealType fade)
	{
		VarType center3D;
		ArrType center2D;
		center3D = idVar(global::tl_edit, world_pos);
		center2D = view_shape_project(center3D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType start2D;
		start2D = view_shape_project(start3D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType end2D;
		end2D = view_shape_project(end3D);
		if (global::point3D_project_error)
			return IntType(0);
		RealType alpha = (fade > 0) ? percent(abs(vec3_dot(vec3_normalize(vec3_sub(end3D, center3D)), vec3_normalize(vec3_sub(global::cam_from, center3D)))), .975, .95) : 1.0;
		if ((sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == control) || ObjType(obj_view, view)->control_mouseon_last == control || !(sVar(setting_fade_gizmos) > 0))
			alpha = IntType(1);
		if (alpha == IntType(0))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != control || sInt(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			sVec(view_control_vec) = point2D_sub(end2D, center2D);
			draw_set_color(c_white);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = control;
					sInt(view_control_edit_view) = view;
					if (vid <= Z_)
						sReal(view_control_flip) = sArr(view_control_move_flip_axis).Value(vid);
					if (control == e_view_control_ROT_DISTANCE)
						sVar(view_control_value) = idVar(global::tl_edit, value).Value(e_value_CAM_ROTATE_DISTANCE);
					else
						sVar(view_control_value) = point3D(idVar(global::tl_edit, value).Value(e_value_POS_X), idVar(global::tl_edit, value).Value(e_value_POS_Y), idVar(global::tl_edit, value).Value(e_value_POS_Z));
					
					sVec(view_control_vec) = point2D_sub(end2D, center2D);
					sReal(view_control_move_distance) = IntType(0);
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					if (control == e_view_control_ROT_DISTANCE)
					{
						action_tl_frame_cam_rotate_distance(self, idArr(global::tl_edit, value_default).Value(vid), false);
					}
					else
					{
						global::axis_edit = vid;
						action_tl_frame_pos(self, idArr(global::tl_edit, value_default).Value(vid), false);
					}
					
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(start2D, end2D);
		ArrType rotation;
		rotation = point3D_angle(start3D, end3D);
		RealType size = (point3D_distance(global::cam_from, control == e_view_control_ROT_DISTANCE ? idVar(global::tl_edit, world_pos_rotate) : center3D) * view_3d_control_size) * .05 * sReal(view_control_ratio);
		view_shape_cone_draw(MAT_IDENTITY, end3D, rotation, size);
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && point_line_distance(start2D.Real(X_), start2D.Real(Y_), end2D.Real(X_), end2D.Real(Y_), gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y)) < view_3d_control_width / 2.0)
			ObjType(obj_view, view)->control_mouseon = control;
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	RealType view_control_move_pan(ScopeAny self, IntType view, RealType radius)
	{
		VecType pos2D, normal;
		ArrType end2D;
		RealType radius2D;
		pos2D = view_shape_project(idVar(global::tl_edit, world_pos));
		end2D = view_shape_project(point3D_add(idVar(global::tl_edit, world_pos), point3D(IntType(0), IntType(0), radius)));
		radius2D = ((radius / point3D_distance(idVar(global::tl_edit, world_pos), global::cam_from)) * sVar(content_height)) / ((RealType)global::cam_fov / 60.0);
		if (global::point3D_project_error)
			return IntType(0);
		normal = vec3_normalize(point3D_sub(global::cam_from, idVar(global::tl_edit, world_pos)));
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != e_view_control_POS_PAN || sInt(view_control_edit_view) != view)
				return IntType(0);
			view_control_plane_update();
			if (sBool(mouse_left_released))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
			}
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == e_view_control_POS_PAN)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = e_view_control_POS_PAN;
					sInt(view_control_edit_view) = view;
					view_control_plane_start(idVar(global::tl_edit, world_pos), normal);
					sVar(view_control_value) = point3D(idVar(global::tl_edit, value).Value(e_value_POS_X), idVar(global::tl_edit, value).Value(e_value_POS_Y), idVar(global::tl_edit, value).Value(e_value_POS_Z));
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					tl_value_set_start(self, ID_action_tl_frame_pos_xyz, true);
					for (IntType i = X_; i <= Z_; i++)
						tl_value_set(self, { e_value_POS_X + i, tl_value_default(e_value_POS_X + i), false });
					tl_value_set_done();
					app_mouse_clear(self);
				}
			}
			else
				draw_set_alpha(.6);
		
		
		view_shape_circle({ idVar(global::tl_edit, world_pos), radius });
		draw_set_alpha(1.0);
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && (point_distance(pos2D.Real(X_), pos2D.Real(Y_), gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y)) < radius2D))
			ObjType(obj_view, view)->control_mouseon = e_view_control_POS_PAN;
		return 0.0;
	}
	
	RealType view_control_move_plane(ScopeAny self, IntType view, IntType control, VecType axes, IntType color, MatrixType mat, VecType normal, VecType corner1, VecType corner2, VecType corner3, VecType corner4)
	{
		normal = vec3_mul_matrix(normal, mat);
		for (IntType i = X_; i <= Z_; i++)
		{
			if (sArr(view_control_move_flip_axis).Value(i))
			{
				corner1.Real(i) *= -1.0;
				corner2.Real(i) *= -1.0;
				corner3.Real(i) *= -1.0;
				corner4.Real(i) *= -1.0;
			}
		}
		VecType corner13D, corner12D;
		corner13D = point3D_mul_matrix(corner1, mat);
		corner12D = view_shape_project(corner13D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner23D, corner22D;
		corner23D = point3D_mul_matrix(corner2, mat);
		corner22D = view_shape_project(corner23D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner33D, corner32D;
		corner33D = point3D_mul_matrix(corner3, mat);
		corner32D = view_shape_project(corner33D);
		if (global::point3D_project_error)
			return IntType(0);
		VecType corner43D, corner42D;
		corner43D = point3D_mul_matrix(corner4, mat);
		corner42D = view_shape_project(corner43D);
		if (global::point3D_project_error)
			return IntType(0);
		if (vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat)))) < IntType(0))
			normal = vec3_mul(normal, -IntType(1));
		RealType alpha = percent(abs(vec3_dot(normal, vec3_normalize(point3D_sub(global::cam_from, matrix_position(mat))))), .1, .2);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == control || !(sVar(setting_fade_gizmos) > 0))
			alpha = IntType(1);
		if (alpha == IntType(0) || (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) != control))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != control || sInt(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			view_control_plane_update();
			draw_set_color(c_white);
			if (sBool(mouse_left_released))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
			}
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = control;
					sInt(view_control_edit_view) = view;
					view_control_plane_start(idVar(global::tl_edit, world_pos), normal);
					sVar(view_control_value) = point3D(idVar(global::tl_edit, value).Value(e_value_POS_X), idVar(global::tl_edit, value).Value(e_value_POS_Y), idVar(global::tl_edit, value).Value(e_value_POS_Z));
					sBool(view_control_plane) = true;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					tl_value_set_start(self, ID_action_tl_frame_pos_xyz, true);
					for (IntType i = X_; i <= Z_; i++)
					{
						if (axes.Real(i))
							tl_value_set(self, { e_value_POS_X + i, tl_value_default(e_value_POS_X + i), false });
					}
					tl_value_set_done();
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(corner12D, corner22D);
		view_shape_line_draw(corner22D, corner32D);
		view_shape_line_draw(corner32D, corner42D);
		view_shape_line_draw(corner42D, corner12D);
		draw_set_alpha(.35);
		render_set_culling(false);
		draw_primitive_begin(pr_trianglelist);
		view_shape_triangle_draw(corner12D, corner22D, corner32D);
		view_shape_triangle_draw(corner32D, corner42D, corner12D);
		draw_primitive_end();
		render_set_culling(true);
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		if ((point_in_triangle(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), corner12D.Real(X_), corner12D.Real(Y_), corner22D.Real(X_), corner22D.Real(Y_), corner32D.Real(X_), corner32D.Real(Y_)) || point_in_triangle(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), corner12D.Real(X_), corner12D.Real(Y_), corner42D.Real(X_), corner42D.Real(Y_), corner32D.Real(X_), corner32D.Real(Y_))) && sInt(place_tl) == null_ && sBool(content_mouseon))
			ObjType(obj_view, view)->control_mouseon = control;
		return 0.0;
	}
	
	void view_control_plane_start(VarType pos, VecType normal)
	{
		global::_app->view_control_plane_normal = vec3_normalize(normal);
		global::_app->view_control_plane_origin = pos;
		global::_app->view_control_plane_offset = point2D_sub(view_shape_project(pos), point2D(gmlGlobal::mouse_x - global::_app->content_x, gmlGlobal::mouse_y - global::_app->content_y));
		global::_app->view_control_plane_mouse = point2D(gmlGlobal::mouse_x, gmlGlobal::mouse_y);
		RealType px, py;
		VecType rayclip, rayeye, raywor;
		px = -(((gmlGlobal::mouse_x - global::_app->content_x + global::_app->view_control_plane_offset.Real(X_)) / global::_app->content_width) * IntType(2) - IntType(1));
		py = ((gmlGlobal::mouse_y - global::_app->content_y + global::_app->view_control_plane_offset.Real(Y_)) / global::_app->content_height) * IntType(2) - IntType(1);
		rayclip = point4D(px, py, -IntType(1), IntType(1));
		rayeye = point4D_mul_matrix(rayclip, matrix_inverse(global::proj_matrix));
		rayeye = point4D(rayeye.Real(X_), rayeye.Real(Y_), -IntType(1), IntType(0));
		raywor = point4D_mul_matrix(rayeye, matrix_inverse(global::view_matrix));
		global::_app->view_control_ray_dir = vec3_normalize(vec3(raywor.Real(X_), raywor.Real(Y_), raywor.Real(Z_)));
	}
	
	void view_control_plane_update()
	{
		RealType mousex, mousey;
		mousex = ((global::_app->view_control_plane_mouse.Real(X_) - global::_app->content_x + global::_app->view_control_plane_offset.Real(X_)) / global::_app->content_width);
		mousey = ((global::_app->view_control_plane_mouse.Real(Y_) - global::_app->content_y + global::_app->view_control_plane_offset.Real(Y_)) / global::_app->content_height);
		global::_app->view_control_ray_dir = vec3_project_ray(ArrType::From({ mousex, mousey }));
		global::_app->view_control_plane_mouse.Real(X_) += global::_app->mouse_dx * global::_app->dragger_multiplier;
		global::_app->view_control_plane_mouse.Real(Y_) += global::_app->mouse_dy * global::_app->dragger_multiplier;
	}
	
	void view_control_rotate(ScopeAny self, IntType view)
	{
		RealType len;
		MatrixType xrot, yrot, zrot;
		len = point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size * 0.6;
		withOne (Object, global::tl_edit, global::_app->id)
		{
			zrot = array_copy_1d(sMat(matrix_parent));
			zrot.Real(MAT_X) = sVar(matrix).Value(MAT_X);
			zrot.Real(MAT_Y) = sVar(matrix).Value(MAT_Y);
			zrot.Real(MAT_Z) = sVar(matrix).Value(MAT_Z);
			matrix_remove_scale(VarType::CreateRef(zrot));
		}
		
		xrot = matrix_multiply(matrix_build(0.0, 0.0, 0.0, 0.0, -90.0, idVar(global::tl_edit, value).Value(e_value_ROT_Z), 1.0, 1.0, 1.0), zrot);
		yrot = matrix_multiply(matrix_build(0.0, 0.0, 0.0, idVar(global::tl_edit, value).Value(e_value_ROT_X) + 90.0, 0.0, idVar(global::tl_edit, value).Value(e_value_ROT_Z), 1.0, 1.0, 1.0), zrot);
		view_control_rotate_axis(self, view, e_view_control_ROT_X, e_value_ROT_X, global::c_control_red, xrot, len);
		view_control_rotate_axis(self, view, e_view_control_ROT_Y, e_value_ROT_Y, ((sReal(setting_z_is_up) > 0) ? global::c_control_green : global::c_control_blue), yrot, len);
		view_control_rotate_axis(self, view, e_view_control_ROT_Z, e_value_ROT_Z, ((sReal(setting_z_is_up) > 0) ? global::c_control_blue : global::c_control_green), zrot, len);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && sInt(view_control_edit) >= e_view_control_ROT_X && sInt(view_control_edit) <= e_view_control_ROT_Z)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				RealType ang, prevang, rot, snapval;
				VarType axesang, newval;
				global::axis_edit = sInt(view_control_edit) - e_view_control_ROT_X;
				ang = point_direction(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), sVec(view_control_pos).Real(X_), sVec(view_control_pos).Real(Y_));
				prevang = point_direction(sVar(mouse_previous_x) - sVar(content_x), sVar(mouse_previous_y) - sVar(content_y), sVec(view_control_pos).Real(X_), sVec(view_control_pos).Real(Y_));
				rot = angle_difference_fix(ang, prevang) * negate(sReal(view_control_flip));
				sReal(view_control_move_distance) += rot * sReal(dragger_multiplier);
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_rotation) : snap_min);
				axesang = sReal(view_control_move_distance);
				if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
					axesang = snap(axesang, snapval);
				newval = sVar(view_control_value) + axesang;
				newval = tl_value_clamp(e_value_ROT_X + global::axis_edit, newval);
				if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
					newval = snap(newval, snapval);
				newval -= idVar(global::tl_edit, value).Value(e_value_ROT_X + global::axis_edit);
				tl_value_set_start(self, ID_action_tl_frame_rot, true);
				tl_value_set(self, { e_value_ROT_X + global::axis_edit, newval, true });
				tl_value_set_done();
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sVar(view_control_matrix) = null_;
				sVar(view_control_length) = null_;
				sReal(view_control_move_distance) = IntType(0);
				sVar(view_control_value) = IntType(0);
			}
		}
	}
	
	RealType view_control_rotate_axis(ScopeAny self, IntType view, IntType control, IntType vid, IntType color, MatrixType mat, VarType len)
	{
		RealType detail, anglevis;
		VecType pos3D, facevec, camvec;
		ArrType pos2D;
		detail = IntType(64);
		if (sVar(view_control_length) != null_)
			len = sVar(view_control_length);
		pos3D = point3D_mul_matrix(point3D(IntType(0), IntType(0), IntType(0)), mat);
		pos2D = view_shape_project(pos3D);
		if (global::point3D_project_error)
			return IntType(0);
		facevec = vec3_normalize(vec3_mul_matrix(vec3(IntType(0), IntType(0), IntType(1)), mat));
		camvec = vec3_normalize(point3D_sub(global::cam_from, pos3D));
		anglevis = abs(vec3_dot(facevec, camvec));
		RealType alpha = percent(anglevis, .05, .1);
		if ((sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == control) || ObjType(obj_view, view)->control_mouseon_last == control || !(sVar(setting_fade_gizmos) > 0))
			alpha = IntType(1);
		if (alpha == IntType(0))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != control || sInt(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			sReal(view_control_flip) = (vec3_dot(facevec, camvec) < IntType(0));
			sVec(view_control_pos) = pos2D;
			draw_set_color(c_white);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = control;
					sInt(view_control_edit_view) = view;
					sVar(view_control_value) = idVar(global::tl_edit, value).Value(vid);
					sVec(view_control_pos) = pos2D;
					sVar(view_control_matrix) = mat;
					sVar(view_control_length) = len;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					if (control == e_view_control_ROT_X || control == e_view_control_ROT_Y || control == e_view_control_ROT_Z)
					{
						global::axis_edit = vid - e_value_ROT_X;
						action_tl_frame_rot(self, IntType(0), false);
					}
					else
						if (control == e_view_control_BEND_X || control == e_view_control_BEND_Y || control == e_view_control_BEND_Z)
						{
							global::axis_edit = vid - e_value_BEND_ANGLE_X;
							action_tl_frame_bend_angle(self, IntType(0), false);
						}
						else
							if (control == e_view_control_ROT_ANGLE_XY)
								action_tl_frame_cam_rotate_angle_xy(self, IntType(0), false);
							else
								if (control == e_view_control_ROT_ANGLE_Z)
									action_tl_frame_cam_rotate_angle_z(self, IntType(0), false);
						
					
					
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		VecType start3D, start2D, end3D, end2D, v;
		RealType vdot;
		v = point3D_sub(pos3D, global::cam_from);
		vdot = vec3_dot(v, v);
		start3D = point3D_mul_matrix(point3D(cos(0.0) * len, sin(0.0) * len, IntType(0)), mat);
		start2D = view_shape_project(start3D);
		if (global::point3D_project_error)
		{
			draw_set_color(c_white);
			draw_set_alpha(1.0);
			return IntType(0);
		}
		IntType j = IntType(0);
		for (RealType i = IntType(0); i <= IntType(1); i += 1.0 / detail)
		{
			j++;
			end3D = point3D_mul_matrix(point3D(cos(pi_ * IntType(2) * i) * len, sin(pi_ * IntType(2) * i) * len, IntType(0)), mat);
			end2D = view_shape_project(end3D);
			if (global::point3D_project_error)
			{
				start3D = end3D;
				start2D = end2D;
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			if (sInt(view_control_edit) != control)
			{
				RealType dis = lerp(0.001, .75, percent(point3D_distance(pos3D, global::cam_from), IntType(0), IntType(100)));
				if (control_test_point(start3D, (vid - e_value_BEND_ANGLE_X) > Z_ ? idVar(global::tl_edit, world_pos_rotate) : idVar(global::tl_edit, world_pos), dis * anglevis))
				{
					start3D = end3D;
					start2D = end2D;
					continue;
				}
			}
			if (i > IntType(0))
				view_shape_line_draw(start2D, end2D);
			if (sInt(place_tl) == null_ && sBool(content_mouseon) && point_line_distance(start2D.Real(X_), start2D.Real(Y_), end2D.Real(X_), end2D.Real(Y_), gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y)) < view_3d_control_width / 2.0)
				ObjType(obj_view, view)->control_mouseon = control;
			start3D = end3D;
			start2D = end2D;
		}
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	void view_control_scale(ScopeAny self, IntType view)
	{
		RealType len, arrowstart, arrowend;
		VarType mat;
		len = point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size * sReal(view_control_ratio);
		arrowstart = ((sVar(setting_tool_move) > 0 || sBool(setting_tool_rotate) || sBool(setting_tool_transform)) ? len / 4.0 : 0.0);
		arrowend = len * .45;
		withOne (Object, global::tl_edit, global::_app->id)
		{
			if (sVar(scale_resize) > 0)
				mat = array_copy_1d(sVar(matrix));
			else
			{
				mat = array_copy_1d(sMat(matrix_parent));
				mat = matrix_multiply(matrix_create(point3D(idVar(global::tl_edit, value).Value(e_value_POS_X), idVar(global::tl_edit, value).Value(e_value_POS_Y), idVar(global::tl_edit, value).Value(e_value_POS_Z)), vec3(IntType(0)), vec3(IntType(1))), mat);
			}
			
			matrix_remove_scale(VarType::CreateRef(mat));
		}
		
		if (sVar(view_control_matrix) != null_ && sInt(view_control_edit) != null_)
			mat = sVar(view_control_matrix);
		view_control_scale_all(self, view, mat, len * .65);
		if (!(ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0))
		{
			view_control_scale_axis(self, view, e_view_control_SCA_X, e_value_SCA_X, global::c_control_red, arrowstart, arrowend, mat, X_, vec3(IntType(0), -IntType(90), IntType(0)));
			view_control_scale_axis(self, view, e_view_control_SCA_Y, e_value_SCA_Y, ((sReal(setting_z_is_up) > 0) ? global::c_control_green : global::c_control_blue), arrowstart, arrowend, mat, Y_, vec3(IntType(90), IntType(0), IntType(0)));
			view_control_scale_axis(self, view, e_view_control_SCA_Z, e_value_SCA_Z, ((sReal(setting_z_is_up) > 0) ? global::c_control_blue : global::c_control_green), arrowstart, arrowend, mat, Z_, vec3(IntType(0)));
			if (!(sVar(setting_tool_move) > 0) && !sBool(setting_tool_transform))
			{
				RealType ps, pe;
				ps = (len / 7.0);
				pe = ps + (len / 7.5);
				view_control_scale_plane(self, view, e_view_control_SCA_XY, point3D(IntType(1), IntType(1), IntType(0)), ((sReal(setting_z_is_up) > 0) ? global::c_control_blue : global::c_control_green), mat, vec3(IntType(0), IntType(0), IntType(1)), point3D(ps, ps, IntType(0)), point3D(pe, ps, IntType(0)), point3D(pe, pe, IntType(0)), point3D(ps, pe, IntType(0)));
				view_control_scale_plane(self, view, e_view_control_SCA_XZ, point3D(IntType(1), IntType(0), IntType(1)), ((sReal(setting_z_is_up) > 0) ? global::c_control_green : global::c_control_blue), mat, vec3(IntType(0), IntType(1), IntType(0)), point3D(ps, IntType(0), ps), point3D(pe, IntType(0), ps), point3D(pe, IntType(0), pe), point3D(ps, IntType(0), pe));
				view_control_scale_plane(self, view, e_view_control_SCA_YZ, point3D(IntType(0), IntType(1), IntType(1)), global::c_control_red, mat, vec3(IntType(1), IntType(0), IntType(0)), point3D(IntType(0), ps, ps), point3D(IntType(0), pe, ps), point3D(IntType(0), pe, pe), point3D(IntType(0), ps, pe));
			}
		}
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && sInt(view_control_edit) >= e_view_control_SCA_XY && sInt(view_control_edit) <= e_view_control_SCA_YZ)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				VecType move, scale;
				RealType snapval;
				move = point3D_plane_intersect(sVar(view_control_plane_origin), sVec(view_control_plane_normal), global::cam_from, sVec(view_control_ray_dir));
				move = point3D_mul(point3D_sub(move, sVar(view_control_plane_origin)), .125);
				move = vec3_mul_matrix(move, matrix_inverse(mat));
				for (IntType i = IntType(0); i <= Z_; i++)
					move.Real(i) *= (!sArr(view_control_move_flip_axis).Value(i) ? 1.0 : -1.0);
				scale = point3D(IntType(0), IntType(0), IntType(0));
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
				for (IntType i = X_; i <= Z_; i++)
				{
					if (i == Z_ && sInt(view_control_edit) == e_view_control_SCA_XY)
						continue;
					else
						if (i == Y_ && sInt(view_control_edit) == e_view_control_SCA_XZ)
							continue;
						else
							if (i == X_ && sInt(view_control_edit) == e_view_control_SCA_YZ)
								continue;
					
					
					if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
						move.Real(i) = snap(move.Real(i), snapval);
					scale.Real(i) = sVar(view_control_value).Value(i) + move.Real(i);
					scale.Real(i) = tl_value_clamp(e_value_SCA_X + i, scale.Real(i));
					if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
						scale.Real(i) = snap(scale.Real(i), snapval);
					scale.Real(i) -= idVar(global::tl_edit, value).Value(e_value_SCA_X + i);
				}
				tl_value_set_start(self, ID_action_tl_frame_scale_xyz, true);
				tl_value_set(self, { e_value_SCA_X, scale.Real(X_), true });
				tl_value_set(self, { e_value_SCA_Y, scale.Real(Y_), true });
				tl_value_set(self, { e_value_SCA_Z, scale.Real(Z_), true });
				tl_value_set_done();
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sBool(view_control_plane) = false;
			}
		}
		else
			if (sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit_view) == view && sInt(view_control_edit) >= e_view_control_SCA_X && sInt(view_control_edit) <= e_view_control_SCA_Z)
			{
				sInt(mouse_cursor) = cr_handpoint;
				RealType veclen = vec2_length(sVec(view_control_vec));
				if (veclen > IntType(0) && !(sInt(mouse_still) > 0))
				{
					VecType vecmouse;
					RealType vecdot, snapval;
					VarType move, newval;
					global::axis_edit = sInt(view_control_edit) - e_view_control_SCA_X;
					vecmouse = vec2(sReal(mouse_dx), sReal(mouse_dy));
					vecdot = vec2_dot(vec2_normalize(sVec(view_control_vec)), vec2_normalize(vecmouse));
					sReal(view_control_move_distance) += ((vec2_length(vecmouse) / veclen) * len * vecdot) * .05 * sReal(dragger_multiplier);
					snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
					move = sReal(view_control_move_distance);
					if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
						move = snap(move, snapval);
					newval = sVar(view_control_value) + move;
					newval = tl_value_clamp(e_value_SCA_X + global::axis_edit, newval);
					if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
						newval = snap(newval, snapval);
					newval -= idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit);
					tl_value_set_start(self, ID_action_tl_frame_scale, true);
					tl_value_set(self, { e_value_SCA_X + global::axis_edit, newval, true });
					tl_value_set_done();
				}
				if (!sBool(mouse_left))
				{
					sVar(window_busy) = /*""*/ STR(0);
					sInt(view_control_edit) = null_;
					sVar(view_control_matrix) = null_;
					sVar(view_control_length) = null_;
					sReal(view_control_move_distance) = IntType(0);
				}
			}
		
		if (sInt(view_control_edit_view) == view && sInt(view_control_edit) == e_view_control_SCA_XYZ)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				RealType snapval;
				VarType scaleval;
				snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
				scaleval = sReal(view_control_scale_amount);
				if (!(sVar(setting_snap_absolute) > 0) && sReal(dragger_snap) > 0)
					scaleval = snap(scaleval, snapval);
				scaleval = sVec(view_control_value_scale).Real(X_) * scaleval;
				scaleval = tl_value_clamp(e_value_SCA_X, scaleval);
				if (sVar(setting_snap_absolute) > 0 || !(sReal(dragger_snap) > 0))
					scaleval = snap(scaleval, snapval);
				scaleval -= idVar(global::tl_edit, value).Value(e_value_SCA_X);
				global::axis_edit = X_;
				action_tl_frame_scale_all_axis(self, scaleval, true);
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sInt(view_control_edit) = null_;
				sReal(view_control_scale_amount) = IntType(1);
				sVar(view_control_matrix) = null_;
				sVar(view_control_length) = null_;
				sVar(view_control_value) = IntType(0);
				global::axis_edit = X_;
				action_tl_frame_scale_all_axis(self, IntType(0), false);
			}
		}
	}
	
	RealType view_control_scale_all(ScopeAny self, IntType view, VarType mat, RealType radius)
	{
		VecType coord;
		RealType radius2D, alpha;
		radius2D = ((radius / point3D_distance(idVar(global::tl_edit, world_pos), global::cam_from)) * sVar(content_height)) / ((RealType)global::cam_fov / 60.0);
		coord = point3D_project(matrix_position(mat), global::view_proj_matrix, sVar(content_width), sVar(content_height));
		if (global::point3D_project_error)
			return IntType(0);
		coord.Real(X_) = round(coord.Real(X_));
		coord.Real(Y_) = round(coord.Real(Y_));
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != e_view_control_SCA_XYZ || sInt(view_control_edit_view) != view)
				return IntType(0);
			coord = sVec(view_control_scale_coords);
			sReal(view_control_scale_amount) = point_distance((sInt(mouse_wrap_x) * sVar(content_width)) + gmlGlobal::mouse_x - sVar(content_x), (sInt(mouse_wrap_y) * sVar(content_height)) + gmlGlobal::mouse_y - sVar(content_y), sVec(view_control_scale_coords).Real(X_), sVec(view_control_scale_coords).Real(Y_)) / sReal(view_control_scale_start);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == e_view_control_SCA_XYZ)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sVec(view_control_value_scale).Real(X_) = idVar(global::tl_edit, value).Value(e_value_SCA_X);
					sVec(view_control_value_scale).Real(Y_) = idVar(global::tl_edit, value).Value(e_value_SCA_Y);
					sVec(view_control_value_scale).Real(Z_) = idVar(global::tl_edit, value).Value(e_value_SCA_Z);
					sInt(view_control_edit) = e_view_control_SCA_XYZ;
					sInt(view_control_edit_view) = view;
					sReal(view_control_scale_start) = point_distance(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), coord.Real(X_), coord.Real(Y_));
					sReal(view_control_scale_amount) = IntType(1);
					sVec(view_control_scale_coords).Real(X_) = coord.Real(X_);
					sVec(view_control_scale_coords).Real(Y_) = coord.Real(Y_);
					sVar(view_control_matrix) = mat;
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					global::axis_edit = X_;
					tl_value_set_start(self, ID_action_tl_frame_scale, true);
					for (IntType i = X_; i <= Z_; i++)
						tl_value_set(self, { e_value_SCA_X + i, tl_value_default(e_value_SCA_X + i), false });
					tl_value_set_done();
					app_mouse_clear(self);
				}
			}
		
		draw_set_color(global::c_control_white);
		if (ObjType(obj_view, view)->control_mouseon_last == e_view_control_SCA_XYZ)
			alpha = IntType(1);
		else
			alpha = 0.6;
		
		VecType drawcoord, mousecoord;
		drawcoord = coord;
		mousecoord = point2D((sInt(mouse_wrap_x) * sVar(content_width)) + gmlGlobal::mouse_x - sVar(content_x), (sInt(mouse_wrap_y) * sVar(content_height)) + gmlGlobal::mouse_y - sVar(content_y));
		if (sInt(view_control_edit) != e_view_control_SCA_XYZ)
		{
			draw_set_alpha(alpha);
			view_shape_circle({ idVar(global::tl_edit, world_pos), radius });
		}
		else
		{
			draw_circle_ext(mousecoord.Real(X_), mousecoord.Real(Y_), IntType(4), false, IntType(16), c_black, IntType(1));
			for (RealType i = IntType(1); i < ceil(sReal(view_control_scale_amount) * IntType(8)); i++)
			{
				RealType nx, ny, angle;
				nx = lerp(mousecoord.Real(X_), drawcoord.Real(X_), i / (sReal(view_control_scale_amount) * IntType(8)));
				ny = lerp(mousecoord.Real(Y_), drawcoord.Real(Y_), i / (sReal(view_control_scale_amount) * IntType(8)));
				if (nx > sVar(content_width) || ny > sVar(content_height) || nx < IntType(0) || ny < IntType(0))
					continue;
				angle = -radtodeg(arctan2(mousecoord.Real(Y_) - drawcoord.Real(Y_), mousecoord.Real(X_) - drawcoord.Real(X_)));
				draw_line_ext(nx, ny, nx + lengthdir_x(5.0, angle), ny + lengthdir_y(5.0, angle), c_black, IntType(1));
			}
		}
		
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && (abs(point_distance(gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y), coord.Real(X_), coord.Real(Y_)) - radius2D) < view_3d_control_width / 2.0))
			ObjType(obj_view, view)->control_mouseon = e_view_control_SCA_XYZ;
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	RealType view_control_scale_axis(ScopeAny self, IntType view, IntType control, IntType vid, IntType color, RealType start, RealType length, VarType mat, IntType axis, VecType rotation)
	{
		VecType s, e, center3D, start3D, end3D, start2D, end2D;
		ArrType axisarr, center2D;
		axisarr = ArrType::From({ axis == X_, axis == Y_, axis == Z_ });
		s = control_pos(start, length, axis, mat, true);
		e = control_pos(start, length, axis, mat, false);
		if (sArr(view_control_move_flip_axis).Value(axis))
			length *= -1.0;
		center3D = point3D_mul_matrix(vec3(IntType(0)), mat);
		start3D = s;
		end3D = e;
		center2D = view_shape_project(center3D);
		if (global::point3D_project_error)
			return IntType(0);
		start2D = view_shape_project(start3D);
		if (global::point3D_project_error)
			return IntType(0);
		end2D = view_shape_project(end3D);
		if (global::point3D_project_error)
			return IntType(0);
		RealType alpha = percent(abs(vec3_dot(vec3_normalize(vec3_sub(end3D, center3D)), vec3_normalize(vec3_sub(global::cam_from, center3D)))), .975, .95);
		if ((sVar(window_busy) == /*"rendercontrol"*/ STR(35) && sInt(view_control_edit) == control) || ObjType(obj_view, view)->control_mouseon_last == control || !(sVar(setting_fade_gizmos) > 0))
			alpha = IntType(1);
		if (alpha == IntType(0))
			return IntType(0);
		draw_set_alpha(alpha);
		if (sVar(window_busy) == /*"rendercontrol"*/ STR(35))
		{
			if (sInt(view_control_edit) != control || sInt(view_control_edit_view) != view)
			{
				draw_set_color(c_white);
				draw_set_alpha(1.0);
				return IntType(0);
			}
			sVec(view_control_vec) = point2D_sub(end2D, center2D);
			draw_set_color(c_white);
		}
		else
			if (ObjType(obj_view, view)->control_mouseon_last == control)
			{
				if (sBool(mouse_left_pressed))
				{
					sVar(window_busy) = /*"rendercontrol"*/ STR(35);
					sInt(view_control_edit) = control;
					sInt(view_control_edit_view) = view;
					sVar(view_control_value) = idVar(global::tl_edit, value).Value(vid);
					sVec(view_control_vec) = point2D_sub(end2D, center2D);
					sVar(view_control_matrix) = mat;
					sVar(view_control_length) = length;
					sReal(view_control_move_distance) = IntType(0);
				}
				if (sBool(mouse_right_pressed) && keyboard_check(vk_shift))
				{
					global::axis_edit = vid - e_value_SCA_X;
					action_tl_frame_scale(self, tl_value_default(vid), false);
					app_mouse_clear(self);
				}
				draw_set_color(c_white);
			}
			else
				draw_set_color(color);
		
		
		view_shape_line_draw(start2D, end2D);
		RealType size = (point3D_distance(global::cam_from, idVar(global::tl_edit, world_pos)) * view_3d_control_size) * .035 * sReal(view_control_ratio);
		view_shape_cube_draw(mat, vec3_mul(axisarr, length), size);
		if (sInt(place_tl) == null_ && sBool(content_mouseon) && (point_line_distance(start2D.Real(X_), start2D.Real(Y_), end2D.Real(X_), end2D.Real(Y_), gmlGlobal::mouse_x - sVar(content_x), gmlGlobal::mouse_y - sVar(content_y)) < view_3d_control_width))
			ObjType(obj_view, view)->control_mouseon = control;
		draw_set_color(c_white);
		draw_set_alpha(1.0);
		return 0.0;
	}
	
}
