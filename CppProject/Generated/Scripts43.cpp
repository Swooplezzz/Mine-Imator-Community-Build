/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2024.01.11 15:16:30 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType popup_pattern_editor_draw_layer(ScopeAny self, VarType xx, VarType yy, RealType width, RealType height, VarType index, RealType base)
	{
		StringType editname;
		BoolType mouseon, dragging;
		VarType actionx, layercolor;
		IntType layerpattern;
		if (ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_edit_preview == null_)
			return IntType(0);
		editname = /*"patterneditoreditlayer"*/ STR(2108) + string(index);
		mouseon = (app_mouse_box(self, xx, yy, width, height) || (ObjType(obj_popup, sInt(popup_pattern_editor))->layer_edit == index && sStr(settings_menu_name) == editname));
		dragging = (ObjType(obj_popup, sInt(popup_pattern_editor))->layer_move == index);
		layerpattern = ((base > 0) ? IntType(1) : ds_list_find_index(global::minecraft_pattern_list, DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_list_edit).Value(index)));
		layercolor = ((base > 0) ? minecraft_get_color(/*"dye:black"*/ STR(2109)) : DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_color_list_edit).Value(index));
		if (ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_edit_preview != null_)
			draw_box(xx + IntType(4), yy + IntType(4), IntType(20), IntType(40), false, ObjType(obj_template, ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_edit_preview)->pattern_base_color, IntType(1));
		if (!(base > 0))
			draw_sprite_ext(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_sprites.Value(layerpattern), IntType(0), (IntType)(xx + IntType(4)), (IntType)(yy + IntType(4)), 1.0 / ObjType(obj_popup, sInt(popup_pattern_editor))->res_ratio, 1.0 / ObjType(obj_popup, sInt(popup_pattern_editor))->res_ratio, 0.0, (IntType)(layercolor), 1.0);
		gpu_set_blendmode_ext(bm_zero, bm_src_color);
		draw_sprite_ext(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_sprites.Value(array_length(VarType::CreateRef(idArr(sInt(popup_pattern_editor), pattern_sprites))) - IntType(1)), IntType(0), (IntType)(xx + IntType(4)), (IntType)(yy + IntType(4)), (1.0 / ObjType(obj_popup, sInt(popup_pattern_editor))->res_ratio), (1.0 / ObjType(obj_popup, sInt(popup_pattern_editor))->res_ratio), 0.0, c_white, 1.0);
		gpu_set_blendmode(bm_normal);
		VarType colorname, name;
		if (base > 0)
		{
			colorname = ds_map_find_key(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map, ObjType(obj_template, ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_edit_preview)->pattern_base_color);
			name = text_get({ /*"patterneditorbase"*/ STR(2110), text_get({ /*"swatchdye"*/ STR(2111) + colorname }) });
		}
		else
		{
			colorname = ds_map_find_key(ObjType(obj_swatch, global::minecraft_swatch_dyes)->map, DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_color_list_edit).Value(index));
			name = text_get({ /*"patterneditorlayer"*/ STR(2112), text_get({ /*"swatchdye"*/ STR(2111) + colorname }), text_get({ /*"patterneditorpatterns"*/ STR(2113) + DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_list_edit).Value(index) }) });
		}
		
		draw_label(self, { name, xx + IntType(32), yy + height / 2.0, fa_left, fa_middle, global::c_text_main, global::a_text_main, sInt(font_value) });
		actionx = xx + width - IntType(4);
		if (!(base > 0))
		{
			BoolType draghover = app_mouse_box(self, actionx - IntType(20), yy + height / 2.0 - IntType(14), IntType(20), IntType(28));
			if (draghover)
			{
				sInt(mouse_cursor) = cr_size_all;
				if (sReal(mouse_move) > IntType(0) && !dragging)
				{
					ObjType(obj_popup, sInt(popup_pattern_editor))->layer_move = index;
					ObjType(obj_popup, sInt(popup_pattern_editor))->layer_move_x = xx - gmlGlobal::mouse_x;
					ObjType(obj_popup, sInt(popup_pattern_editor))->layer_move_y = yy - gmlGlobal::mouse_y;
					sVar(window_busy) = /*"patterneditordraglayer"*/ STR(2114);
				}
			}
			draw_image({ ID_spr_icons, icons_DRAGGER, actionx - IntType(10), yy + height / 2.0, IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
			actionx -= 24.0;
			if (mouseon && !dragging)
			{
				if (draw_button_icon(self, { /*"patterneditorremovelayer"*/ STR(2115) + string(index), actionx - IntType(24), yy + height / 2.0 - IntType(14), IntType(24), IntType(24), false, icons_DELETE }))
					ObjType(obj_popup, sInt(popup_pattern_editor))->layer_remove = index;
				actionx -= 28.0;
			}
		}
		if (mouseon && !dragging)
		{
			if (draw_button_icon(self, { editname, actionx - IntType(24), yy + height / 2.0 - IntType(14), IntType(24), IntType(24), sStr(settings_menu_name) == editname, icons_PENCIL }))
			{
				menu_settings_set(self, actionx - IntType(24), yy + height / 2.0 - IntType(14), editname, IntType(24));
				sInt(settings_menu_script) = ID_popup_pattern_editor_edit_layer;
				sVar(settings_menu_busy_prev) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
				ObjType(obj_popup, sInt(popup_pattern_editor))->layer_edit = index;
			}
			if (sStr(settings_menu_name) == editname && sStr(settings_menu_ani_type) != /*"hide"*/ STR(751))
				ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		}
		return 0.0;
	}
	
	void popup_pattern_editor_edit_layer(ScopeAny self)
	{
		draw_label(self, { text_get({ /*"patterneditorcolors"*/ STR(2116) }), sVar(dx), sVar(dy) + IntType(4), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
		sVar(dy) += IntType(18);
		VarType colorsx;
		RealType size;
		colorsx = sVar(dx);
		size = ((ObjType(obj_popup, sInt(popup_pattern_editor))->layer_edit != -IntType(1)) ? IntType(16) : IntType(8));
		for (IntType c = IntType(0); c < array_length(VarType::CreateRef(ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors)); c++)
		{
			if (draw_button_swatch(self, colorsx, sVar(dy), IntType(20), IntType(20), /*"swatch"*/ STR(1727) + ObjType(obj_swatch, global::minecraft_swatch_dyes)->name + ObjType(obj_swatch, global::minecraft_swatch_dyes)->color_names.Value(c), ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(c)))
			{
				if (ObjType(obj_popup, sInt(popup_pattern_editor))->layer_edit == -IntType(1))
					ObjType(obj_template, ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_edit_preview)->pattern_base_color = ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(c);
				else
					DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_color_list_edit)[idVar(sInt(popup_pattern_editor), layer_edit)] = ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors.Value(c);
				
				ObjType(obj_popup, sInt(popup_pattern_editor))->update = true;
			}
			colorsx += IntType(24);
			if (((mod(c, size)) == (size - IntType(1))) && (c != array_length(VarType::CreateRef(ObjType(obj_swatch, global::minecraft_swatch_dyes)->colors)) - IntType(1)))
			{
				sVar(dy) += IntType(24);
				colorsx = sVar(dx);
			}
		}
		sVar(dy) += IntType(20) + IntType(8);
		if (ObjType(obj_popup, sInt(popup_pattern_editor))->layer_edit != -IntType(1))
		{
			sVar(dy) += IntType(8);
			draw_label(self, { text_get({ /*"patterneditorpatterns"*/ STR(2113) }), sVar(dx), sVar(dy) + IntType(4), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_subheading) });
			sVar(dy) += IntType(18);
			VarType patternsx, patternsy;
			patternsx = sVar(dx);
			patternsy = sVar(dy);
			IntType p = IntType(1);
			for (; p < ds_list_size(global::minecraft_pattern_list); p++)
			{
				BoolType active = (DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_list_edit).Value(idVar(sInt(popup_pattern_editor), layer_edit)) == DsList(global::minecraft_pattern_list).Value(p));
				if (draw_button_icon(self, { /*"patterneditorpatterns"*/ STR(2113) + string(p), patternsx, sVar(dy), IntType(20), IntType(40), active, null_, null_, false, /*"patterneditorpatterns"*/ STR(2113) + DsList(global::minecraft_pattern_list).Value(p), ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_sprites.Value(p) }))
				{
					DsList(ObjType(obj_popup, sInt(popup_pattern_editor))->pattern_list_edit)[idVar(sInt(popup_pattern_editor), layer_edit)] = DsList(global::minecraft_pattern_list).Value(p);
					ObjType(obj_popup, sInt(popup_pattern_editor))->update = true;
				}
				patternsx += IntType(24);
				if ((mod(p, IntType(16))) == IntType(0))
				{
					patternsx = sVar(dx);
					sVar(dy) += IntType(44);
				}
			}
			if ((mod(p, IntType(16))) != IntType(0))
				sVar(dy) += IntType(44);
			sVar(dy) += IntType(4);
		}
		sVar(settings_menu_w) = IntType(24) + ((IntType(24) * size) - IntType(4));
	}
	
	void popup_pattern_editor_show(ScopeAny self, VarType obj)
	{
		withOne (obj_popup, sInt(popup_pattern_editor), self->id)
		{
			ObjType(obj_preview, self->preview)->zoom = .6;
			ObjType(obj_preview, self->preview)->goalzoom = .6;
			ObjType(obj_preview, self->preview)->xyangle = IntType(235);
			ObjType(obj_preview, self->preview)->zangle = IntType(0);
			self->pattern_edit = obj;
			withOne (Object, self->pattern_edit, self->id)
			{
				if (instance_exists(idInt(self.otherId, pattern_edit_preview)) || idInt(self.otherId, pattern_edit_preview) != null_)
				{
					withOne (obj_template, idInt(self.otherId, pattern_edit_preview), self->id)
						temp_event_destroy(ScopeAny(self));
					
				}
				else
				{
					idInt(self.otherId, pattern_edit_preview) = (new obj_template)->id;
					withOne (obj_template, idInt(self.otherId, pattern_edit_preview), self->id)
						temp_event_create(ScopeAny(self));
					
				}
				
				temp_copy(self, idInt(self.otherId, pattern_edit_preview));
				withOne (obj_template, idInt(self.otherId, pattern_edit_preview), self->id)
				{
					temp_update_model(ScopeAny(self));
					temp_update_model_shape(ScopeAny(self));
				}
				
			}
			
			ObjType(obj_preview, self->preview)->select = self->pattern_edit_preview;
			ObjType(obj_preview, self->preview)->last_select = self->pattern_edit_preview;
			ds_list_clear(self->pattern_list_edit);
			ds_list_clear(self->pattern_color_list_edit);
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(idVar(obj, pattern_pattern_list))); i++)
				ds_list_add({ self->pattern_list_edit, idVar(obj, pattern_pattern_list).Value(i) });
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(idVar(obj, pattern_color_list))); i++)
				ds_list_add({ self->pattern_color_list_edit, idVar(obj, pattern_color_list).Value(i) });
			VarType res;
			if (idVar(idVar(self->pattern_edit, model_tex), type) == e_res_type_SKIN)
				res = global::mc_res;
			else
				res = idVar(self->pattern_edit, model_tex);
			
			ObjType(obj_template, self->pattern_edit_preview)->model_tex = res;
			if (self->pattern_resource != res || array_length(VarType::CreateRef(self->pattern_sprites)) == IntType(0))
			{
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(self->pattern_sprites)); i++)
					sprite_delete(self->pattern_sprites.Value(i));
				self->pattern_sprites = ArrType();
				self->res_ratio = ceil((RealType)sprite_get_width((IntType)(DsMap(idInt(res, model_texture_map)).Value(/*"entity/banner_base"*/ STR(1841)))) / sprite_get_width((IntType)(DsMap(ObjType(obj_resource, global::mc_res)->model_texture_map).Value(/*"entity/banner_base"*/ STR(1841)))));
				global::shader_mask = (idVar(res, pack_format) < e_minecraft_pack_FORMAT_115);
				for (IntType i = IntType(0); i < ds_list_size(global::minecraft_pattern_list); i++)
				{
					VarType bannername = DsList(global::minecraft_pattern_list).Value(i);
					array_add(VarType::CreateRef(self->pattern_sprites), texture_create_crop(DsMap(idInt(res, model_texture_map)).Value(/*"entity/banner/"*/ STR(1843) + bannername), self->res_ratio, self->res_ratio, IntType(20) * self->res_ratio, IntType(40) * self->res_ratio));
				}
				global::shader_mask = false;
				array_add(VarType::CreateRef(self->pattern_sprites), texture_create_crop(DsMap(idInt(res, model_texture_map)).Value(/*"entity/banner_base"*/ STR(1841)), self->res_ratio, self->res_ratio, IntType(20) * self->res_ratio, IntType(40) * self->res_ratio));
				self->pattern_resource = res;
			}
			self->update = true;
		}
		
		popup_show(self, sInt(popup_pattern_editor));
	}
	
	void popup_saveas_clear(ScopeAny self)
	{
		ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_saveas))->tbx_name)->text = text_get({ /*"saveascopy"*/ STR(2117), sVar(project_name) });
		ObjType(obj_popup, sInt(popup_saveas))->folder = text_get({ /*"saveascopy"*/ STR(2117), filename_name(sStr(project_folder)) });
		ObjType(obj_popup, sInt(popup_saveas))->description = /*""*/ STR(0);
	}
	
	void popup_saveas_draw(ScopeAny self)
	{
		BoolType issue = false;
		if (idVar(sInt(popup), folder) == /*""*/ STR(0) || directory_exists_lib(sStr(setting_project_folder) + idVar(sInt(popup), folder)))
			issue = true;
		tab_control_textfield(self, true);
		if (draw_textfield(self, /*"newprojectname"*/ STR(2097), sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sInt(popup), tbx_name), null_, text_get({ /*"saveascopy"*/ STR(2117), sVar(project_name) }), /*"top"*/ STR(202)) || issue)
		{
			idVar(sInt(popup), folder) = filename_get_valid(ObjType(obj_textbox, idInt(sInt(popup), tbx_name))->text);
			if (idVar(sInt(popup), folder) == /*""*/ STR(0))
				idVar(sInt(popup), folder) = text_get({ /*"saveascopy"*/ STR(2117), sVar(project_name) });
			idVar(sInt(popup), folder) = filename_name(filename_get_unique(sStr(setting_project_folder) + idVar(sInt(popup), folder)));
		}
		tab_next(self);
		tab_control_textfield(self, true);
		if (draw_textfield(self, /*"newprojectauthor"*/ STR(2098), sVar(dx), sVar(dy), sVar(dw), IntType(24), idInt(sInt(popup), tbx_author), null_, /*""*/ STR(0), /*"top"*/ STR(202)))
		{
			idVar(sInt(popup), author) = ObjType(obj_textbox, idInt(sInt(popup), tbx_author))->text;
		}
		tab_next(self);
		tab_control_textfield(self, true, IntType(76));
		if (draw_textfield(self, /*"newprojectdescription"*/ STR(2099), sVar(dx), sVar(dy), sVar(dw), IntType(76), idInt(sInt(popup), tbx_description), null_, /*""*/ STR(0), /*"top"*/ STR(202)))
		{
			idVar(sInt(popup), description) = ObjType(obj_textbox, idInt(sInt(popup), tbx_description))->text;
		}
		tab_next(self);
		StringType directory = /*"../"*/ STR(2100) + directory_name(sStr(setting_project_folder)) + string_remove_newline(idVar(sInt(popup), folder));
		tab_control(self, IntType(40));
		draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(28), IntType(40), text_get({ /*"newprojectlocation"*/ STR(2101) }), directory, true);
		if (draw_button_icon(self, { /*"newprojectchangefolder"*/ STR(2102), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_FOLDER_EDIT, null_, null_, /*"tooltipchangefolder"*/ STR(2103) }))
		{
			StringType fn = file_dialog_save_project(self, idVar(sInt(popup), folder));
			if (fn != /*""*/ STR(0))
			{
				idVar(sInt(popup), folder) = filename_name(fn);
				action_setting_project_folder(self, filename_path(fn));
			}
		}
		tab_next(self);
		tab_control_button_label(self);
		if (draw_button_label(self, /*"saveassave"*/ STR(2118), sVar(dx) + sVar(dw), sVar(dy), null_, null_, e_button_PRIMARY, null_, e_anchor_RIGHT))
			project_save_as(self);
		tab_next(self);
	}
	
	void popup_show(ScopeAny self, IntType argument0)
	{
		if (!(sInt(popup) > 0))
		{
			sVar(popup_ani) = IntType(0);
			sStr(popup_ani_type) = /*"show"*/ STR(752);
		}
		sInt(popup) = argument0;
		log({ /*"Show popup"*/ STR(2119), idVar(sInt(popup), name) });
		if (idVar(sInt(popup), block) > 0)
			sVar(window_busy) = /*"popup"*/ STR(1636) + idVar(sInt(popup), name);
		action_tl_play_break(self);
		context_menu_close(self);
	}
	
	RealType popup_switch(ScopeAny self, IntType argument0)
	{
		if (sInt(popup) == null_)
		{
			popup_show(self, argument0);
			return IntType(0);
		}
		sInt(popup_switch_to) = argument0;
		sInt(popup_switch_from) = sInt(popup);
		sVar(window_busy) = /*"popup"*/ STR(1636) + idVar(sInt(popup_switch_to), name);
		sStr(popup_ani_type) = /*"hide"*/ STR(751);
		return 0.0;
	}
	
	void popup_upgrade_draw(ScopeAny self)
	{
		RealType pageoff;
		VarType pagealpha = IntType(0);
		pagealpha = ease(/*"easeoutcirc"*/ STR(598), idReal(sInt(popup), page_ani));
		pageoff = pagealpha * IntType(16);
		idReal(sInt(popup), page_ani) += 0.05 * global::delta;
		idReal(sInt(popup), page_ani) = clamp(idReal(sInt(popup), page_ani), IntType(0), IntType(1));
		if (idStr(sInt(popup), page_ani_type) == /*"left"*/ STR(203))
			pageoff -= 16.0;
		else
			pageoff = IntType(16) - pageoff;
		
		draw_dropshadow(self, floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - ((RealType)sprite_get_width(ID_spr_upgrade_img) / 2.0)) + pageoff, sVar(dy), sprite_get_width(ID_spr_upgrade_img), sprite_get_height(ID_spr_upgrade_img), c_black, IntType(1));
		draw_sprite_ext(ID_spr_upgrade_img, (IntType)(idReal(sInt(popup), page)), (IntType)(floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - ((RealType)sprite_get_width(ID_spr_upgrade_img) / 2.0)) + pageoff), (IntType)(sVar(dy)), 1.0, 1.0, 0.0, c_white, pagealpha * draw_get_alpha());
		sVar(dy) += sprite_get_height(ID_spr_upgrade_img);
		if (draw_button_icon(self, { /*"upgradeleft"*/ STR(2120), sVar(content_x) + IntType(12), sVar(dy) - (RealType)sprite_get_height(ID_spr_upgrade_img) / 2.0 - IntType(16), IntType(20), IntType(32), false, icons_CHEVRON_LEFT }))
		{
			idReal(sInt(popup), page) = mod_fix((idReal(sInt(popup), page) - IntType(1)), IntType(3));
			idReal(sInt(popup), page_ani) = IntType(0);
			idStr(sInt(popup), page_ani_type) = /*"left"*/ STR(203);
		}
		if (draw_button_icon(self, { /*"upgraderight"*/ STR(2121), sVar(content_x) + sVar(content_width) - (IntType(12) + IntType(20)), sVar(dy) - (RealType)sprite_get_height(ID_spr_upgrade_img) / 2.0 - IntType(16), IntType(20), IntType(32), false, icons_CHEVRON_RIGHT }))
		{
			idReal(sInt(popup), page) = mod_fix((idReal(sInt(popup), page) + IntType(1)), IntType(3));
			idReal(sInt(popup), page_ani) = IntType(0);
			idStr(sInt(popup), page_ani_type) = /*"right"*/ STR(204);
		}
		sVar(dy) += IntType(14);
		draw_set_font(sInt(font_caption));
		StringType text = string_limit_ext(text_get({ /*"upgradepage"*/ STR(2122) + string(idReal(sInt(popup), page)) }), (sVar(dw) - IntType(40)) + IntType(8), no_limit);
		draw_label(self, { text, floor(sVar(dx) + (RealType)sVar(dw) / 2.0) + pageoff, sVar(dy), fa_middle, fa_top, global::c_text_secondary, global::a_text_secondary * pagealpha, sInt(font_caption) });
		sVar(dy) += string_height(text) + IntType(24);
		draw_set_font(sInt(font_value));
		text = string_limit_ext(text_get({ /*"upgradeinfo"*/ STR(2123) }), (sVar(dw) - IntType(40)) + IntType(8), no_limit);
		draw_label(self, { text, floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy), fa_middle, fa_top, global::c_text_main, global::a_text_main, sInt(font_value) });
		sVar(dy) += string_height(text) + IntType(30);
		draw_set_font(sInt(font_label));
		draw_button_text(self, { link_upgrade, floor(sVar(dx) + (RealType)sVar(dw) / 2.0 - (RealType)string_width(link_upgrade) / 2.0), sVar(dy), ID_popup_open_url, link_upgrade, link_upgrade, sInt(font_label) });
		sVar(dy) += IntType(18);
		RealType wid = IntType(196);
		tab_control(self, IntType(48));
		draw_inputbox(self, { /*"upgrade"*/ STR(111), sVar(dx) + (RealType)sVar(dw) / 2.0 - wid / 2.0, sVar(dy), wid, IntType(48), /*"XXXXXXXX"*/ STR(2124), ObjType(obj_popup, sInt(popup_upgrade))->tbx_key, null_, false, false, sVar(font_upgrade), e_inputbox_BIG });
		draw_box_hover({ sVar(dx) + (RealType)sVar(dw) / 2.0 - wid / 2.0, sVar(dy), wid, IntType(48), global::microani_arr.Value(e_microani_PRESS) });
		if (draw_button_icon(self, { /*"upgradekeypaste"*/ STR(2125), sVar(dx) + (RealType)sVar(dw) / 2.0 + wid / 2.0 + IntType(8), sVar(dy) + IntType(10), IntType(24), IntType(24), false, icons_PASTE, null_, false, /*"tooltippastekey"*/ STR(2126) }))
			ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_upgrade))->tbx_key)->text = string(clipboard_get_text());
		tab_next(self);
		sVar(dy) += IntType(10);
		if (ObjType(obj_popup, sInt(popup_upgrade))->warntext != /*""*/ STR(0))
		{
			tab_control(self, IntType(8));
			draw_label(self, { text_get({ ObjType(obj_popup, sInt(popup_upgrade))->warntext }), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy) + IntType(8), fa_center, fa_bottom, global::c_error, IntType(1), sInt(font_caption) });
			tab_next(self);
		}
		tab_control_button_label(self);
		if (draw_button_label(self, /*"upgradecontinue"*/ STR(2127), sVar(dx) + sVar(dw), sVar(dy), null_, icons_KEY, e_button_PRIMARY, null_, e_anchor_RIGHT))
		{
			BoolType upgrade = trial_upgrade(self, ObjType(obj_textbox, ObjType(obj_popup, sInt(popup_upgrade))->tbx_key)->text);
			if (upgrade)
			{
				if (sInt(popup_switch_from) > 0)
					popup_switch(self, sInt(popup_switch_from));
				else
				{
					if (idVar(sInt(popup), custom_rendering) != /*"default"*/ STR(102))
						action_project_render_settings(self, idVar(sInt(popup), custom_rendering));
					if (idBool(sInt(popup), open_advanced))
					{
						popup_switch(self, sInt(popup_advanced));
						ObjType(obj_popup, sInt(popup_upgrade))->open_advanced = false;
					}
					else
						popup_close(self);
					
				}
				
			}
			else
				ObjType(obj_popup, sInt(popup_upgrade))->warntext = /*"errorupgrade"*/ STR(2128);
			
		}
		tab_next(self);
	}
	
	void popup_welcome_draw(ScopeAny self)
	{
		draw_set_font(sInt(font_value));
		StringType text = string_limit_ext(text_get({ /*"welcomedescription"*/ STR(2129) }), (sVar(dw) - IntType(40)) + IntType(8), no_limit);
		draw_label(self, { text, floor(sVar(dx) + (RealType)sVar(dw) / 2.0), sVar(dy), fa_middle, fa_top, global::c_text_main, global::a_text_main, sInt(font_value) });
		sVar(dy) += string_height(text) + IntType(19);
		tab_control_button_label(self);
		if (draw_button_label(self, /*"welcomecontinue"*/ STR(2130), sVar(content_x) + sVar(content_width) - IntType(12), sVar(dy), null_, null_, e_button_PRIMARY, null_, fa_right))
		{
			settings_save(self);
			popup_close(self);
		}
		tab_next(self);
	}
	
	RealType preview_draw(ScopeAny self, IntType preview, VarType xx, VarType yy, VarType width, RealType height)
	{
		RealType is3d, isplaying;
		BoolType mouseon, playbutton;
		VarType setplaytime;
		if (xx + width < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + height < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		mouseon = app_mouse_box(self, xx, yy, width, height);
		setplaytime = null_;
		draw_box(xx, yy, width, height, false, global::c_level_bottom, IntType(1));
		if (!instance_exists(idVar(preview, select)))
		{
			idVar(preview, texture) = null_;
			return IntType(0);
		}
		if (Obj(idVar(preview, select))->subAssetId == ID_obj_resource)
		{
			playbutton = (idVar(idVar(preview, select), type) == e_res_type_SOUND);
			isplaying = (audio_is_playing(idInt(preview, sound_play_index)) || audio_is_paused(idInt(preview, sound_play_index)));
			is3d = (idVar(idVar(preview, select), type) == e_res_type_SCENERY || idVar(idVar(preview, select), type) == e_res_type_FROM_WORLD || idVar(idVar(preview, select), type) == e_res_type_MODEL);
		}
		else
		{
			playbutton = false;
			isplaying = false;
			is3d = true;
		}
		
		if ((idVar(idVar(preview, select), type) == e_temp_type_PARTICLE_SPAWNER && app_mouse_box(self, xx + width - IntType(44), yy + height - IntType(44), IntType(36), IntType(36))) || (playbutton && app_mouse_box(self, xx + width - IntType(44), yy + height - IntType(44), IntType(36), IntType(36))))
			mouseon = false;
		if (playbutton && mouseon != idBool(preview, mouseon_prev))
			idBool(preview, update) = true;
		if (mouseon && sBool(content_mouseon) && !playbutton)
		{
			sInt(mouse_cursor) = (!(is3d > 0) ? cr_size_all : (!idBool(preview, xy_lock) ? cr_size_all : cr_size_we));
			if (sBool(mouse_left_pressed))
			{
				sVar(window_busy) = ((is3d > 0) ? /*"previewrotate"*/ STR(2131) : /*"previewmove"*/ STR(2132));
				sVar(window_focus) = string(preview);
				idReal(preview, clickxyangle) = idReal(preview, xyangle);
				idReal(preview, clickzangle) = idReal(preview, zangle);
				idReal(preview, clickxoff) = idReal(preview, xoff);
				idReal(preview, clickyoff) = idReal(preview, yoff);
			}
		}
		if (!mouseon && sBool(content_mouseon) && sBool(mouse_left_pressed) && sVar(window_focus) == string(preview))
			sVar(window_focus) = /*""*/ STR(0);
		if (sVar(window_focus) == string(preview))
		{
			RealType zd, m;
			if (sVar(window_busy) == /*"previewrotate"*/ STR(2131))
			{
				sInt(mouse_cursor) = !idBool(preview, xy_lock) ? cr_size_all : cr_size_we;
				idReal(preview, xyangle) = idReal(preview, clickxyangle) + (sInt(mouse_click_x) - gmlGlobal::mouse_x) * 0.75;
				if (!idBool(preview, xy_lock))
				{
					idReal(preview, zangle) = idReal(preview, clickzangle) - (sInt(mouse_click_y) - gmlGlobal::mouse_y);
					idReal(preview, zangle) = clamp(idReal(preview, zangle), -89.9, 89.9);
				}
				idBool(preview, update) = true;
				if (!sBool(mouse_left))
				{
					sVar(window_busy) = /*""*/ STR(0);
					app_mouse_clear(self);
				}
			}
			if (sVar(window_busy) == /*"previewmove"*/ STR(2132))
			{
				sInt(mouse_cursor) = cr_size_all;
				idReal(preview, xoff) = idReal(preview, clickxoff) + (sInt(mouse_click_x) - gmlGlobal::mouse_x) / idReal(preview, zoom);
				idReal(preview, yoff) = idReal(preview, clickyoff) + (sInt(mouse_click_y) - gmlGlobal::mouse_y) / idReal(preview, zoom);
				idReal(preview, goalxoff) = idReal(preview, xoff);
				idReal(preview, goalyoff) = idReal(preview, yoff);
				idBool(preview, update) = true;
				if (!sBool(mouse_left))
				{
					sVar(window_busy) = /*""*/ STR(0);
					app_mouse_clear(self);
				}
			}
			m = (IntType(1) - 0.25 * sReal(mouse_wheel) * (IntType)!idBool(preview, xy_lock));
			if (m != IntType(1))
			{
				idReal(preview, goalzoom) = clamp(idReal(preview, goalzoom) * m, 0.1, IntType(100));
				idReal(preview, goalxoff) = idReal(preview, xoff) + (gmlGlobal::mouse_x - (xx + (RealType)width / 2.0)) / idReal(preview, zoom) - (gmlGlobal::mouse_x - (xx + (RealType)width / 2.0)) / idReal(preview, goalzoom);
				idReal(preview, goalyoff) = idReal(preview, yoff) + (gmlGlobal::mouse_y - (yy + height / 2.0)) / idReal(preview, zoom) - (gmlGlobal::mouse_y - (yy + height / 2.0)) / idReal(preview, goalzoom);
			}
			zd = (idReal(preview, goalzoom) - idReal(preview, zoom)) / max({ IntType(1), 5.0 / global::delta });
			if (zd != IntType(0))
			{
				idBool(preview, update) = true;
				idReal(preview, zoom) += zd;
				idReal(preview, xoff) += (idReal(preview, goalxoff) - idReal(preview, xoff)) / max({ IntType(1), 5.0 / global::delta });
				idReal(preview, yoff) += (idReal(preview, goalyoff) - idReal(preview, yoff)) / max({ IntType(1), 5.0 / global::delta });
			}
			sStr(window_scroll_focus) = string(preview);
			sStr(window_scroll_focus_prev) = string(preview);
		}
		withOne (Object, preview, self->id)
		{
			if (!surface_exists((IntType)(sVar(surface))) || surface_get_width((IntType)(sVar(surface))) < IntType(0) || surface_get_width((IntType)(sVar(surface))) != width || surface_get_height((IntType)(sVar(surface))) != height)
				sBool(update) = true;
			if (idVar(sVar(select), type) == e_temp_type_PARTICLE_SPAWNER)
				sBool(update) = true;
			if (Obj(sVar(select))->subAssetId == ID_obj_template && idVar(sVar(select), type) == e_temp_type_ITEM && (idVar(sVar(select), item_bounce) > 0 || idVar(sVar(select), item_spin) > 0))
				sBool(update) = true;
			if (isplaying > 0)
				sBool(update) = true;
			if (idVar(sVar(select), type) == e_res_type_PACK && sStr(pack_image) == /*"blocksheet"*/ STR(570) && sReal(pack_block_sheet_ani) > 0)
				sBool(update) = true;
			sVar(surface) = surface_require(sVar(surface), width, height);
			if (sBool(update))
			{
				if (is3d > 0)
					render_update_text();
				sBool(update) = false;
				surface_set_target((IntType)(sVar(surface)));
			{
				draw_clear_alpha(c_black, 0.0);
				gpu_set_blendmode_ext(bm_one, bm_inv_src_alpha);
				if (is3d > 0)
				{
					RealType prevcam_zoom;
					VarType rep;
					VecType off;
					prevcam_zoom = IntType(32);
					off = point3D(IntType(0), IntType(0), IntType(0));
					if (Obj(sVar(select))->subAssetId == ID_obj_template && idVar(sVar(select), block_repeat_enable) > 0)
						rep = idVar(sVar(select), block_repeat);
					else
						rep = vec3(IntType(1));
					
					if (Obj(sVar(select))->subAssetId == ID_obj_resource)
					{
						switch ((IntType)idVar(sVar(select), type))
						{
							case e_res_type_MODEL:
							{
								if (idInt(sVar(select), model_format) == e_model_format_BLOCK)
								{
									VecType displaysize = vec3(block_size_);
									prevcam_zoom = IntType(32);
									off = vec3_mul(displaysize, vec3(-0.5));
								}
								else
									if (idVar(sVar(select), model_file) != null_)
									{
										VecType displaysize = point3D_sub(idVec(idVar(sVar(select), model_file), bounds_parts_end), idVec(idVar(sVar(select), model_file), bounds_parts_start));
										prevcam_zoom = max({ displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) + IntType(16);
										off = point3D_mul(point3D_add(idVec(idVar(sVar(select), model_file), bounds_parts_start), vec3_mul(displaysize, 0.5)), -IntType(1));
									}
								
								break;
							}
							
							case e_res_type_SCENERY:
							case e_res_type_FROM_WORLD:
							{
								VecType displaysize = vec3_mul(vec3_mul(idVec(sVar(select), scenery_size), rep), vec3(block_size_));
								prevcam_zoom = max({ IntType(32), displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) * 1.5;
								off = vec3_mul(displaysize, vec3(-0.5));
								break;
							}
							
						}
						
					}
					else
					{
						switch ((IntType)idVar(sVar(select), type))
						{
							case e_temp_type_MODEL:
							{
								if (idVar(sVar(select), model) == null_)
									break;
								if (idInt(idVar(sVar(select), model), model_format) == e_model_format_BLOCK)
								{
									VecType displaysize = vec3(block_size_);
									prevcam_zoom = IntType(32);
									off = vec3_mul(displaysize, vec3(-0.5));
									break;
								}
							}
							
							case e_temp_type_CHARACTER:
							case e_temp_type_SPECIAL_BLOCK:
							{
								if (idVar(sVar(select), model_file) == null_)
									break;
								VecType displaysize = point3D_sub(idVec(idVar(sVar(select), model_file), bounds_parts_end), idVec(idVar(sVar(select), model_file), bounds_parts_start));
								prevcam_zoom = max({ displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) + IntType(16);
								off = point3D_mul(point3D_add(idVec(idVar(sVar(select), model_file), bounds_parts_start), vec3_mul(displaysize, 0.5)), -IntType(1));
								break;
							}
							
							case e_temp_type_ITEM:
							{
								off = point3D(-IntType(8), -0.5 * bool_to_float(idVar(sVar(select), item_3d)), -IntType(8));
								break;
							}
							case e_temp_type_BLOCK:
							{
								VecType displaysize = vec3_mul(rep, vec3(block_size_));
								prevcam_zoom = max({ IntType(32), displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) * 1.5;
								off = vec3_mul(displaysize, vec3(-0.5));
								break;
							}
							
							case e_temp_type_SCENERY:
							{
								if (idVar(sVar(select), scenery) == null_ || !idBool(idVar(sVar(select), scenery), ready))
									break;
								VecType displaysize = vec3_mul(vec3_mul(idVec(idVar(sVar(select), scenery), scenery_size), rep), vec3(block_size_));
								prevcam_zoom = max({ IntType(32), displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) * 1.5;
								off = vec3_mul(displaysize, vec3(-0.5));
								break;
							}
							
							case e_temp_type_BODYPART:
							{
								if (idVar(sVar(select), model_part) == null_)
									break;
								VecType displaysize = point3D_sub(idVec(idVar(sVar(select), model_part), bounds_end), idVec(idVar(sVar(select), model_part), bounds_start));
								prevcam_zoom = max({ displaysize.Real(X_), displaysize.Real(Y_), displaysize.Real(Z_) }) + IntType(16);
								off = point3D_mul(point3D_add(idVec(idVar(sVar(select), model_part), bounds_start), vec3_mul(displaysize, 0.5)), -IntType(1));
								break;
							}
							
							case e_temp_type_PARTICLE_SPAWNER:
							{
								prevcam_zoom = IntType(80);
								break;
							}
							case e_temp_type_TEXT:
							{
								prevcam_zoom = IntType(60);
								break;
							}
						}
						
					}
					
					prevcam_zoom /= sReal(zoom);
					VecType projfromprev = global::proj_from;
					global::proj_from = point3D(lengthdir_x(prevcam_zoom, sReal(xyangle)) * lengthdir_x(1.0, sReal(zangle)), lengthdir_y(prevcam_zoom, sReal(xyangle)) * lengthdir_x(1.0, sReal(zangle)), lengthdir_z(prevcam_zoom, sReal(zangle)));
					global::render_ratio = ((RealType)width / height) * global::cam_aspect;
					gpu_set_ztestenable(true);
					camera_apply(global::cam_render);
					render_set_projection(global::proj_from, vec3(IntType(0), IntType(0), IntType(0)), vec3(IntType(0), IntType(0), IntType(1)), idReal(preview, fov), global::render_ratio, IntType(1), IntType(32000));
					global::render_mode = e_render_mode_PREVIEW;
					global::render_shader_obj = DsMap(global::shader_map).Value(DsMap(global::render_mode_shader_map).Value(global::render_mode));
					withOne (Object, global::render_shader_obj, self->id)
						shader_use(self);
					
					render_set_uniform_int(/*"uFogShow"*/ STR(1970), IntType(0));
					render_set_uniform_int(/*"uColorsExt"*/ STR(2133), IntType(1));
					render_set_uniform_color(/*"uRGBAdd"*/ STR(2134), tl_value_default(e_value_RGB_ADD), IntType(1));
					render_set_uniform_color(/*"uRGBSub"*/ STR(2135), tl_value_default(e_value_RGB_SUB), IntType(1));
					render_set_uniform_color(/*"uHSBAdd"*/ STR(2136), tl_value_default(e_value_HSB_ADD), IntType(1));
					render_set_uniform_color(/*"uHSBSub"*/ STR(2137), tl_value_default(e_value_HSB_SUB), IntType(1));
					render_set_uniform_color(/*"uHSBMul"*/ STR(2138), tl_value_default(e_value_HSB_MUL), IntType(1));
					render_set_uniform_color(/*"uMixColor"*/ STR(2139), tl_value_default(e_value_MIX_COLOR), tl_value_default(e_value_MIX_PERCENT));
					matrix_set(matrix_world, matrix_create(off, vec3(IntType(0)), vec3(IntType(1))));
					if (Obj(sVar(select))->subAssetId == ID_obj_resource)
					{
						switch ((IntType)idVar(sVar(select), type))
						{
							case e_res_type_SCENERY:
							case e_res_type_FROM_WORLD:
							{
								if (idBool(sVar(select), ready))
									render_world_block(idVar(sVar(select), block_vbuffer), global::mc_res, true, idVec(sVar(select), scenery_size));
								break;
							}
							case e_res_type_MODEL:
							{
								if (idInt(sVar(select), model_format) == e_model_format_BLOCK)
								{
									render_world_block(idVar(sVar(select), block_vbuffer), global::mc_res);
									render_world_block_map(idInt(sVar(select), model_block_map), sVar(select));
								}
								else
									if (idVar(sVar(select), model_file) != null_)
									{
										VarType res = sVar(select);
										if (idInt(sVar(select), model_texture_map) == null_)
											res = global::mc_res;
										IntType matmap = model_file_matrix_map_create(idVar(sVar(select), model_file), matrix_get(matrix_world), null_);
										render_world_model_file_parts(self, idVar(sVar(select), model_file), res, idInt(sVar(select), model_texture_name_map), null_, idInt(sVar(select), model_shape_vbuffer_map), idInt(sVar(select), model_color_map), idInt(sVar(select), model_shape_hide_list), idInt(sVar(select), model_shape_texture_name_map), matmap);
										ds_map_destroy(matmap);
									}
								
								break;
							}
							
						}
						
					}
					else
					{
						switch ((IntType)idVar(sVar(select), type))
						{
							case e_temp_type_MODEL:
							{
								if (idVar(sVar(select), model) == null_)
									break;
								if (idInt(idVar(sVar(select), model), model_format) == e_model_format_BLOCK)
								{
									VarType res;
									if (idVar(sVar(select), model_tex) != null_ && idInt(idVar(sVar(select), model_tex), block_sheet_texture) != null_)
										res = idVar(sVar(select), model_tex);
									else
										res = global::mc_res;
									
									render_world_block(idVar(idVar(sVar(select), model), block_vbuffer), res);
									withOne (Object, sVar(select), self->id)
										res = temp_get_model_texobj(self, null_);
									
									render_world_block_map(idInt(idVar(sVar(select), model), model_block_map), res);
									break;
								}
							}
							
							case e_temp_type_CHARACTER:
							case e_temp_type_SPECIAL_BLOCK:
							{
								if (idVar(sVar(select), model_file) == null_)
									break;
								VarType res;
								withOne (Object, sVar(select), self->id)
									res = temp_get_model_texobj(self, null_);
								
								IntType matmap = model_file_matrix_map_create(idVar(sVar(select), model_file), matrix_get(matrix_world), idInt(sVar(select), model_hide_list));
								render_world_model_file_parts(self, idVar(sVar(select), model_file), res, idInt(sVar(select), model_texture_name_map), idInt(sVar(select), model_hide_list), idInt(sVar(select), model_shape_vbuffer_map), idInt(sVar(select), model_color_map), idInt(sVar(select), model_shape_hide_list), idInt(sVar(select), model_shape_texture_name_map), matmap);
								ds_map_destroy(matmap);
								break;
							}
							
							case e_temp_type_SCENERY:
							{
								if (idVar(sVar(select), scenery) != null_)
									render_world_scenery(self, idVar(sVar(select), scenery), idVar(sVar(select), block_tex), idVar(sVar(select), block_repeat_enable), idVar(sVar(select), block_repeat));
								break;
							}
							case e_temp_type_ITEM:
							{
								render_world_item(idVar(sVar(select), item_vbuffer), idVar(sVar(select), item_3d), idVar(sVar(select), item_face_camera), idVar(sVar(select), item_bounce), idVar(sVar(select), item_spin), ArrType::From({ idVar(sVar(select), item_tex), null_, null_ }));
								break;
							}
							case e_temp_type_BLOCK:
							{
								render_world_block(idVar(sVar(select), block_vbuffer), idVar(sVar(select), block_tex), true, rep);
								break;
							}
							case e_temp_type_BODYPART:
							{
								if (idVar(sVar(select), model_part) == null_)
									break;
								VarType res = idVar(sVar(select), model_tex);
								if (!res_is_ready(res))
									res = global::mc_res;
								matrix_set(matrix_world, matrix_multiply(matrix_get(matrix_world), idVar(idVar(sVar(select), model_part), matrix)));
								render_world_model_part(self, idVar(sVar(select), model_part), res, idInt(sVar(select), model_texture_name_map), idInt(sVar(select), model_shape_vbuffer_map), idInt(sVar(select), model_color_map), idInt(sVar(select), model_shape_hide_list), idInt(sVar(select), model_shape_texture_name_map), null_);
								break;
							}
							
							case e_temp_type_TEXT:
							{
								render_world_text(sVar(text_vbuffer), sVar(text_texture), idVar(sVar(select), text_face_camera), idVar(sVar(select), text_font), null_);
								break;
							}
							case e_temp_type_PARTICLE_SPAWNER:
							{
								for (IntType p = IntType(0); p < ds_list_size(sInt(particle_list)); p++)
									withOne (obj_particle, DsList(sInt(particle_list)).Value(p), self->id)
										render_world_particle(ScopeAny(self));
								
								break;
							}
							
							case e_tl_type_SHAPE:
							case e_temp_type_CUBE:
							case e_temp_type_CONE:
							case e_temp_type_CYLINDER:
							case e_temp_type_SPHERE:
							case e_temp_type_SURFACE:
							{
								VarType tex;
								withOne (Object, sVar(select), self->id)
									tex = temp_get_shape_tex(temp_get_shape_texobj(self, null_));
								
								render_world_shape(idVar(sVar(select), type), idVar(sVar(select), shape_vbuffer), idVar(sVar(select), shape_face_camera), ArrType::From({ tex, ID_spr_default_material, ID_spr_default_normal }));
								break;
							}
							
						}
						
					}
					
					withOne (Object, global::render_shader_obj, self->id)
						shader_clear();
					
					matrix_world_reset();
					gpu_set_ztestenable(false);
					camera_apply(global::cam_window);
					global::proj_from = projfromprev;
				}
				else
				{
					VarType tex = null_;
					switch ((IntType)idVar(sVar(select), type))
					{
						case e_res_type_FONT:
						{
							if (idVar(sVar(select), type) == e_temp_type_TEXT)
								draw_set_font(idInt(idVar(sVar(select), text_font), font_preview));
							else
								draw_set_font(idInt(sVar(select), font_preview));
							
							RealType dx, dy, alpha;
							IntType color;
							dx = (RealType)width / 2.0 - sReal(xoff) * sReal(zoom);
							dy = height / 2.0 - sReal(yoff) * sReal(zoom);
							color = draw_get_color();
							alpha = draw_get_alpha();
							draw_set_color((IntType)(global::c_text_main));
							draw_set_alpha(alpha * global::a_text_main);
							draw_set_halign(fa_center);
							draw_set_valign(fa_middle);
							draw_text_transformed((IntType)(dx), (IntType)(dy), /*"AaBbCc"*/ STR(2140), sReal(zoom), sReal(zoom), 0.0);
							draw_set_valign(fa_top);
							draw_set_halign(fa_left);
							draw_set_color(color);
							draw_set_alpha(alpha);
							draw_set_font(global::_app->font_label);
							break;
						}
						
						case e_res_type_SOUND:
						{
							if (!idBool(sVar(select), ready))
								break;
							RealType wid, wavehei, prec, alpha, mouseperc;
							wid = width - IntType(32);
							wavehei = IntType(32);
							prec = sample_rate_ / sample_avg_per_sec;
							alpha = draw_get_alpha();
							mouseperc = percent((gmlGlobal::mouse_x - xx), IntType(16), IntType(16) + wid);
							if (mouseon)
							{
								global::_app->mouse_cursor = cr_handpoint;
								sBool(update) = true;
							}
							draw_primitive_begin(pr_linelist);
							for (RealType dx = IntType(0); dx < wid; dx++)
							{
								RealType ind, maxv, minv, length, wavealpha;
								VarType wavecolor;
								ind = (IntType)(floor((dx / wid) * idReal(sVar(select), sound_samples)) / prec);
								maxv = idArr(sVar(select), sound_max_sample).Value(ind);
								minv = idArr(sVar(select), sound_min_sample).Value(ind);
								length = idReal(sVar(select), sound_samples) / sample_rate_;
								wavecolor = global::c_text_secondary;
								wavealpha = alpha * global::a_text_secondary;
								if (isplaying > 0)
								{
									if ((dx / wid) < (audio_sound_get_track_position(sInt(sound_play_index)) / length))
									{
										wavecolor = global::c_accent;
										wavealpha = alpha;
									}
								}
								if (mouseon && setplaytime == null_)
								{
									if ((dx / wid) < mouseperc)
										wavecolor = merge_color((IntType)(wavecolor), global::c_level_middle, .25);
								}
								if (dx > IntType(0) && mod(dx, IntType(500)) == IntType(0))
								{
									draw_primitive_end();
									draw_primitive_begin(pr_linelist);
								}
								if (mouseon && global::_app->mouse_left)
									setplaytime = (mouseperc * length);
								draw_vertex_color(IntType(16) + dx, (IntType)(height / 2.0 - maxv * wavehei), (IntType)(wavecolor), wavealpha);
								draw_vertex_color(IntType(16) + dx, (IntType)(height / 2.0 - minv * wavehei + IntType(1)), (IntType)(wavecolor), wavealpha);
							}
							draw_primitive_end();
							break;
						}
						
						case e_res_type_PACK:
						{
							if (!idBool(sVar(select), ready))
								break;
							switch (StringType(sStr(pack_image)).id)
							{
								case 1399: // preview
								{
									tex = idInt(sVar(select), block_preview_texture);
									break;
								}
								case 1401: // modeltextures
								{
									if (sStr(pack_image_material) == /*"diffuse"*/ STR(636))
										tex = DsMap(idInt(sVar(select), model_texture_map)).Value(sStr(pack_model_texture));
									else
										if (sStr(pack_image_material) == /*"material"*/ STR(641))
											tex = DsMap(idInt(sVar(select), model_texture_material_map)).Value(sStr(pack_model_texture));
										else
											if (sStr(pack_image_material) == /*"normal"*/ STR(630))
												tex = DsMap(idInt(sVar(select), model_tex_normal_map)).Value(sStr(pack_model_texture));
									
									
									break;
								}
								
								case 570: // blocksheet
								{
									if (sStr(pack_image_material) == /*"diffuse"*/ STR(636))
										tex = ((sReal(pack_block_sheet_ani) > 0) ? idVar(sVar(select), block_sheet_ani_texture).Value(block_texture_get_frame(true)) : VarType(idInt(sVar(select), block_sheet_texture)));
									else
										if (sStr(pack_image_material) == /*"material"*/ STR(641))
											tex = ((sReal(pack_block_sheet_ani) > 0) ? idVar(sVar(select), block_sheet_ani_texture_material).Value(block_texture_get_frame(true)) : VarType(idInt(sVar(select), block_sheet_texture_material)));
										else
											if (sStr(pack_image_material) == /*"normal"*/ STR(630))
												tex = ((sReal(pack_block_sheet_ani) > 0) ? idVar(sVar(select), block_sheet_ani_tex_normal).Value(block_texture_get_frame(true)) : VarType(idInt(sVar(select), block_sheet_tex_normal)));
									
									
									break;
								}
								
								case 1404: // colormap
								{
									tex = ((sReal(pack_colormap) > 0) ? idInt(sVar(select), colormap_foliage_texture) : idInt(sVar(select), colormap_grass_texture));
									break;
								}
								case 568: // itemsheet
								{
									if (sStr(pack_image_material) == /*"diffuse"*/ STR(636))
										tex = idInt(sVar(select), item_sheet_texture);
									else
										if (sStr(pack_image_material) == /*"material"*/ STR(641))
											tex = idInt(sVar(select), item_sheet_texture_material);
										else
											if (sStr(pack_image_material) == /*"normal"*/ STR(630))
												tex = idInt(sVar(select), item_sheet_tex_normal);
									
									
									break;
								}
								
								case 572: // particlesheet
								{
									tex = idArr(sVar(select), particles_texture).Value(sInt(pack_particles));
									break;
								}
								case 1408: // suntexture
								{
									tex = idVar(sVar(select), sun_texture);
									break;
								}
								case 1410: // moontexture
								{
									tex = idInt(sVar(select), moonphases_texture);
									break;
								}
								case 1412: // cloudtexture
								{
									tex = idVar(sVar(select), clouds_texture);
									break;
								}
							}
							
							break;
						}
						
						case e_res_type_SKIN:
						case e_res_type_DOWNLOADED_SKIN:
						{
							tex = idInt(sVar(select), model_texture);
							break;
						}
						case e_res_type_ITEM_SHEET:
						{
							tex = idInt(sVar(select), item_sheet_texture);
							break;
						}
						case e_res_type_BLOCK_SHEET:
						{
							tex = idInt(sVar(select), block_sheet_texture);
							break;
						}
						case e_res_type_TEXTURE:
						{
							tex = idVar(sVar(select), texture);
							break;
						}
						case e_res_type_PARTICLE_SHEET:
						{
							tex = idArr(sVar(select), particles_texture).Value(IntType(0));
							break;
						}
					}
					
					if (tex != null_)
					{
						RealType padding, tw, th, dx, dy;
						padding = IntType(16);
						tw = texture_width(tex);
						th = texture_height(tex);
						if (sBool(reset_view))
						{
							preview_reset_view(self);
							sReal(zoom) = (min({ width, height }) - padding * IntType(2)) / min({ tw, th });
							sReal(goalzoom) = sReal(zoom);
							sBool(reset_view) = false;
						}
						dx = (RealType)width / 2.0 - (tw / 2.0 + sReal(xoff)) * sReal(zoom);
						dy = height / 2.0 - (th / 2.0 + sReal(yoff)) * sReal(zoom);
						draw_texture({ tex, dx, dy, sReal(zoom), sReal(zoom) });
					}
					sVar(texture) = tex;
				}
				
				gpu_set_blendmode(bm_normal);
			}
				surface_reset_target();
			}
			draw_surface_exists(sVar(surface), xx, yy);
		}
		
		if ((Obj(idVar(preview, select))->subAssetId != ID_obj_resource && idVar(idVar(preview, select), type) == e_temp_type_PARTICLE_SPAWNER) || playbutton)
		{
			draw_box(xx + width - IntType(40), yy + height - IntType(40), IntType(32), IntType(32), false, global::c_level_middle, IntType(1));
			draw_outline(xx + width - IntType(40), yy + height - IntType(40), IntType(32), IntType(32), IntType(1), global::c_border, global::a_border, true);
		}
		if (Obj(idVar(preview, select))->subAssetId != ID_obj_resource && idVar(idVar(preview, select), type) == e_temp_type_PARTICLE_SPAWNER)
		{
			if (idVar(idVar(preview, select), pc_spawn_constant) > 0)
			{
				if (draw_button_icon(self, { /*"previewspawn"*/ STR(2141), xx + width - IntType(36), yy + height - IntType(36), IntType(24), IntType(24), idBool(preview, spawn_active), icons_PARTICLES, null_, false, /*"tooltipparticlesspawn"*/ STR(2142) }))
					idBool(preview, spawn_active) = !idBool(preview, spawn_active);
			}
			else
			{
				if (draw_button_icon(self, { /*"previewspawn"*/ STR(2141), xx + width - IntType(36), yy + height - IntType(36), IntType(24), IntType(24), false, icons_PARTICLES, null_, false, /*"tooltipparticlesspawn"*/ STR(2142) }))
					idBool(preview, fire) = true;
			}
			
		}
		if (playbutton)
		{
			if (draw_button_icon(self, { /*"previewplay"*/ STR(2143), xx + width - IntType(36), yy + height - IntType(36), IntType(24), IntType(24), false, (isplaying > 0) ? icons_STOP : icons_PLAY, null_, false, (isplaying > 0) ? /*"tooltipstop"*/ STR(2144) : /*"tooltipplay"*/ STR(2145) }))
			{
				if (isplaying > 0)
				{
					audio_stop_sound(idInt(preview, sound_play_index));
					idBool(preview, update) = true;
				}
				else
					idInt(preview, sound_play_index) = audio_play_sound(idInt(global::res_edit, sound_index), IntType(0), false);
				
			}
		}
		if (setplaytime != null_ && sBool(mouse_left_pressed))
		{
			if (!(isplaying > 0))
				idInt(preview, sound_play_index) = audio_play_sound(idInt(global::res_edit, sound_index), IntType(0), false);
			audio_sound_set_track_position(idInt(preview, sound_play_index), setplaytime);
		}
		if (idReal(preview, sound_playing) != isplaying)
			idBool(preview, update) = true;
		idReal(preview, sound_playing) = isplaying;
		idBool(preview, mouseon_prev) = mouseon;
		microani_set(string(preview), /*""*/ STR(0), mouseon, mouseon && sBool(mouse_left), (sVar(window_focus) == string(preview)) || (mouseon && sBool(mouse_left)));
		draw_outline(xx, yy, width, height, IntType(1), global::c_accent, global::microani_arr.Value(e_microani_ACTIVE), true);
		draw_box_hover({ xx, yy, width, height, global::microani_arr.Value(e_microani_HOVER) });
		microani_update({ mouseon, mouseon && sBool(mouse_left), (sVar(window_focus) == string(preview)) || (mouseon && sBool(mouse_left)) });
		return 0.0;
	}
	
}
