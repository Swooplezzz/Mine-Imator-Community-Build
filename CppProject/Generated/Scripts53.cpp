/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.12.26 22:36:38 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType render_world_tl(ScopeAny self)
	{
		if (sVar(type) == e_tl_type_CHARACTER || sVar(type) == e_tl_type_SPECIAL_BLOCK || sVar(type) == e_tl_type_FOLDER || sVar(type) == e_tl_type_BACKGROUND || sVar(type) == e_tl_type_AUDIO || sVar(type) == e_tl_type_PATH_POINT)
			return IntType(0);
		if (sVar(type) == e_tl_type_MODEL && (idVar(sVar(temp), model) == null_ || idInt(idVar(sVar(temp), model), model_format) == e_model_format_MIMODEL))
			return IntType(0);
		if (!global::_app->place_tl_render && (sBool(placed) || sBool(parent_is_placed)))
			return IntType(0);
		if (!sBool(render_visible))
			return IntType(0);
		if ((sVar(glow) > 0 && sVar(only_render_glow) > 0) && global::render_mode != e_render_mode_COLOR_GLOW)
			return IntType(0);
		if (!(sVar(shadows) > 0) && (global::render_mode == e_render_mode_HIGH_LIGHT_SUN_DEPTH || global::render_mode == e_render_mode_HIGH_LIGHT_SPOT_DEPTH || global::render_mode == e_render_mode_HIGH_LIGHT_POINT_DEPTH))
			return IntType(0);
		if (global::render_mode == e_render_mode_CLICK)
		{
			if (sReal(selected) > 0 || sVar(lock) > 0 || !tl_update_list_filter(self->id))
				return IntType(0);
			render_set_uniform_color(/*"uReplaceColor"*/ STR(2588), self->id, IntType(1));
		}
		if (global::render_mode == e_render_mode_SCENE_TEST)
			render_set_uniform_color(/*"uReplaceColor"*/ STR(2588), c_white, IntType(1));
		else
			if (global::render_mode == e_render_mode_SELECT && !sBool(parent_is_selected) && !(sReal(selected) > 0))
				return IntType(0);
			else
				if (global::render_mode == e_render_mode_PLACE && !sBool(parent_is_placed) && !sBool(placed))
					return IntType(0);
		
		
		if (sVar(type) == e_tl_type_PARTICLE_SPAWNER || sVar(type) == e_tl_type_SPOT_LIGHT || sVar(type) == e_tl_type_POINT_LIGHT || sVar(type) == e_tl_type_CAMERA)
		{
			if (global::render_mode == e_render_mode_CLICK)
			{
				render_set_texture(global::shape_texture);
				vbuffer_render({ global::render_click_box, sVar(world_pos) });
			}
			if (sVar(type) != e_tl_type_PARTICLE_SPAWNER)
				return IntType(0);
		}
		if ((sArr(value_inherit).Value(e_value_ALPHA) * IntType(1000)) == IntType(0))
			return IntType(0);
		render_set_culling(!(sVar(backfaces) > 0));
		global::shader_texture_filter_linear = sVar(texture_blur);
		global::shader_texture_filter_mipmap = (global::_app->project_render_texture_filtering > 0 && sVar(texture_filtering) > 0);
		global::shader_blend_color = sArr(value_inherit).Value(e_value_RGB_MUL);
		global::shader_blend_alpha = sArr(value_inherit).Value(e_value_ALPHA);
		render_set_uniform_color(/*"uBlendColor"*/ STR(1959), global::shader_blend_color, global::shader_blend_alpha);
		if (global::render_mode == e_render_mode_AO_MASK)
			render_set_uniform_color(/*"uReplaceColor"*/ STR(2588), (sVar(ssao) > 0) ? merge_color(c_black, c_white, global::shader_blend_alpha) : c_black, IntType(1));
		if (sBool(colors_ext) != global::shader_uniform_color_ext || sArr(value_inherit).Value(e_value_RGB_ADD) != global::shader_uniform_rgb_add || sArr(value_inherit).Value(e_value_HSB_ADD) != global::shader_uniform_hsb_add || sArr(value_inherit).Value(e_value_RGB_SUB) != global::shader_uniform_rgb_sub || sArr(value_inherit).Value(e_value_HSB_SUB) != global::shader_uniform_hsb_sub || sArr(value_inherit).Value(e_value_HSB_MUL) != global::shader_uniform_hsb_mul || sArr(value_inherit).Value(e_value_MIX_COLOR) != global::shader_uniform_mix_color || sArr(value_inherit).Value(e_value_MIX_PERCENT) != global::shader_uniform_mix_percent)
		{
			global::shader_uniform_color_ext = sBool(colors_ext);
			global::shader_uniform_rgb_add = sArr(value_inherit).Value(e_value_RGB_ADD);
			global::shader_uniform_hsb_add = sArr(value_inherit).Value(e_value_HSB_ADD);
			global::shader_uniform_rgb_sub = sArr(value_inherit).Value(e_value_RGB_SUB);
			global::shader_uniform_hsb_sub = sArr(value_inherit).Value(e_value_HSB_SUB);
			global::shader_uniform_hsb_mul = sArr(value_inherit).Value(e_value_HSB_MUL);
			global::shader_uniform_mix_color = sArr(value_inherit).Value(e_value_MIX_COLOR);
			global::shader_uniform_mix_percent = sArr(value_inherit).Value(e_value_MIX_PERCENT);
			render_set_uniform_int(/*"uColorsExt"*/ STR(2130), global::shader_uniform_color_ext);
			render_set_uniform_color(/*"uRGBAdd"*/ STR(2131), global::shader_uniform_rgb_add, IntType(1));
			render_set_uniform_color(/*"uHSBAdd"*/ STR(2133), global::shader_uniform_hsb_add, IntType(1));
			render_set_uniform_color(/*"uRGBSub"*/ STR(2132), global::shader_uniform_rgb_sub, IntType(1));
			render_set_uniform_color(/*"uHSBSub"*/ STR(2134), global::shader_uniform_hsb_sub, IntType(1));
			render_set_uniform_color(/*"uHSBMul"*/ STR(2135), global::shader_uniform_hsb_mul, IntType(1));
			render_set_uniform_color(/*"uMixColor"*/ STR(2136), global::shader_uniform_mix_color, global::shader_uniform_mix_percent);
		}
		if (!global::render_alpha_hash_force)
		{
			global::render_alpha_hash = (sVar(alpha_mode) == e_alpha_mode_DEFAULT ? global::_app->project_render_alpha_mode : sVar(alpha_mode));
			render_set_uniform_int(/*"uAlphaHash"*/ STR(1976), global::render_alpha_hash);
		}
		if (sArr(value_inherit).Value(e_value_EMISSIVE) != global::shader_uniform_emissive)
		{
			global::shader_uniform_emissive = sArr(value_inherit).Value(e_value_EMISSIVE);
			render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
		}
		if (sArr(value_inherit).Value(e_value_METALLIC) != global::shader_uniform_metallic)
		{
			global::shader_uniform_metallic = sArr(value_inherit).Value(e_value_METALLIC);
			render_set_uniform(/*"uMetallic"*/ STR(2584), global::shader_uniform_metallic);
		}
		if (sArr(value_inherit).Value(e_value_ROUGHNESS) != global::shader_uniform_roughness)
		{
			global::shader_uniform_roughness = sArr(value_inherit).Value(e_value_ROUGHNESS);
			render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
		}
		if (sVar(wind) != global::shader_uniform_wind)
		{
			global::shader_uniform_wind = sVar(wind);
			render_set_uniform(/*"uWindEnable"*/ STR(1961), global::shader_uniform_wind);
		}
		if (sVar(wind_terrain) != global::shader_uniform_wind_terrain)
		{
			global::shader_uniform_wind_terrain = sVar(wind_terrain);
			render_set_uniform(/*"uWindTerrain"*/ STR(1962), global::shader_uniform_wind_terrain);
		}
		if ((global::_app->background_fog_show > 0 && sVar(fog) > 0) != global::shader_uniform_fog)
		{
			global::shader_uniform_fog = (global::_app->background_fog_show > 0 && sVar(fog) > 0);
			render_set_uniform_int(/*"uFogShow"*/ STR(1968), global::shader_uniform_fog);
		}
		if (sArr(value_inherit).Value(e_value_SUBSURFACE) != global::shader_uniform_sss || sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_RED) != global::shader_uniform_sss_red || sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_GREEN) != global::shader_uniform_sss_green || sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_BLUE) != global::shader_uniform_sss_blue || sArr(value_inherit).Value(e_value_SUBSURFACE_COLOR) != global::shader_uniform_sss_color)
		{
			global::shader_uniform_sss = sArr(value_inherit).Value(e_value_SUBSURFACE);
			global::shader_uniform_sss_red = sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_RED);
			global::shader_uniform_sss_green = sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_GREEN);
			global::shader_uniform_sss_blue = sArr(value_inherit).Value(e_value_SUBSURFACE_RADIUS_BLUE);
			global::shader_uniform_sss_color = sArr(value_inherit).Value(e_value_SUBSURFACE_COLOR);
			render_set_uniform(/*"uSSS"*/ STR(2594), global::shader_uniform_sss);
			render_set_uniform_vec3(/*"uSSSRadius"*/ STR(2595), global::shader_uniform_sss_red, global::shader_uniform_sss_green, global::shader_uniform_sss_blue);
			render_set_uniform_color(/*"uSSSColor"*/ STR(2596), global::shader_uniform_sss_color, 1.0);
		}
		if (sArr(value_inherit).Value(e_value_WIND_INFLUENCE) != global::shader_uniform_wind_strength)
		{
			global::shader_uniform_wind_strength = global::_app->background_wind_strength * (IntType)global::_app->setting_wind_enable * sArr(value_inherit).Value(e_value_WIND_INFLUENCE);
			render_set_uniform(/*"uWindStrength"*/ STR(1964), global::shader_uniform_wind_strength);
			render_set_uniform(/*"uWindDirectionalStrength"*/ STR(1967), global::shader_uniform_wind_strength * global::_app->background_wind_directional_strength);
		}
		IntType prevblend = null_;
		if (sVar(blend_mode) != /*"normal"*/ STR(629) && (global::render_mode == e_render_mode_COLOR || global::render_mode == e_render_mode_COLOR_FOG || global::render_mode == e_render_mode_COLOR_FOG_LIGHTS || global::render_mode == e_render_mode_ALPHA_FIX))
		{
			if (global::render_mode == e_render_mode_ALPHA_FIX)
				return IntType(0);
			prevblend = gpu_get_blendmode();
			VarType blend = DsMap(global::blend_mode_map).Value(sVar(blend_mode));
			if (is_array(blend))
				gpu_set_blendmode_ext(blend.Value(IntType(0)), blend.Value(IntType(1)));
			else
				gpu_set_blendmode((IntType)(blend));
			
		}
		if (sVar(glow) != global::shader_uniform_glow || sVar(glow_texture) != global::shader_uniform_glow_texture || sArr(value_inherit).Value(e_value_GLOW_COLOR) != global::shader_uniform_glow_color)
		{
			global::shader_uniform_glow = sVar(glow);
			global::shader_uniform_glow_texture = sVar(glow_texture);
			global::shader_uniform_glow_color = sArr(value_inherit).Value(e_value_GLOW_COLOR);
			if (global::shader_uniform_glow > 0)
			{
				render_set_uniform_int(/*"uGlow"*/ STR(2597), IntType(1));
				render_set_uniform_int(/*"uGlowTexture"*/ STR(2591), sVar(glow_texture));
				render_set_uniform_color(/*"uGlowColor"*/ STR(2590), global::shader_uniform_glow_color, IntType(1));
				if (sVar(only_render_glow) > 0)
				{
					prevblend = gpu_get_blendmode();
					gpu_set_blendmode(bm_add);
				}
			}
			else
			{
				render_set_uniform_int(/*"uGlow"*/ STR(2597), IntType(0));
				render_set_uniform_int(/*"uGlowTexture"*/ STR(2591), IntType(0));
				render_set_uniform_color(/*"uGlowColor"*/ STR(2590), c_black, IntType(0));
			}
			
		}
		VarType tex;
		RealType spd;
		if (idVar(sVar(glint_tex), texture) > 0)
			tex = idVar(sVar(glint_tex), texture);
		else
			tex = (sVar(glint_mode) == e_glint_ITEM ? idInt(sVar(glint_tex), glint_item_texture) : idInt(sVar(glint_tex), glint_entity_texture));
		
		if (DsMap(idInt(global::render_shader_obj, uniform_map)).Value(/*"uGlintEnabled"*/ STR(2598)) > -IntType(1))
			texture_set_stage(DsMap(idInt(global::render_shader_obj, sampler_map)).Value(/*"uGlintTexture"*/ STR(2599)), sprite_get_texture((IntType)(tex), IntType(0)));
		spd = global::_app->background_time * sVar(glint_speed) * global::_app->project_render_glint_speed;
		render_set_uniform_int(/*"uGlintEnabled"*/ STR(2598), sVar(glint_mode) == e_glint_NONE ? IntType(0) : IntType(1));
		render_set_uniform_vec2(/*"uGlintOffset"*/ STR(2600), spd * (0.000625), spd * (0.00125));
		render_set_uniform(/*"uGlintStrength"*/ STR(2601), global::_app->project_render_glint_strength * sVar(glint_strength));
		render_set_uniform_vec2(/*"uGlintSize"*/ STR(2602), sprite_get_width((IntType)(tex)) * IntType(2) * sVar(glint_scale), sprite_get_height((IntType)(tex)) * IntType(2) * sVar(glint_scale));
		if (sVar(type) != e_tl_type_PARTICLE_SPAWNER)
		{
			matrix_set(matrix_world, sMat(matrix_render));
			if (sVar(type) != e_tl_type_SCENERY && sVar(type) != e_tl_type_BLOCK)
			{
				render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
				render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
			}
			switch ((IntType)sVar(type))
			{
				case e_tl_type_BODYPART:
				{
					if (sVar(model_part) == null_ || sVar(render_res_diffuse) == null_)
						break;
					render_world_model_part(self, sVar(model_part), sVar(render_res_diffuse), idInt(sVar(temp), model_texture_name_map), sInt(model_shape_vbuffer_map), idInt(sVar(temp), model_color_map), idInt(sVar(temp), model_shape_hide_list), idInt(sVar(temp), model_shape_texture_name_map), self->id);
					break;
				}
				
				case e_tl_type_SCENERY:
				case e_tl_type_BLOCK:
				{
					if (sVar(type) == e_tl_type_BLOCK)
						render_world_block(idVar(sVar(temp), block_vbuffer), ArrType::From({ sVar(render_res_diffuse), sVar(render_res_material), sVar(render_res_normal) }), true, (idVar(sVar(temp), block_repeat_enable) > 0) ? idVar(sVar(temp), block_repeat) : VarType(vec3(IntType(1))), sVar(temp));
					else
						if (idVar(sVar(temp), scenery) > 0)
							render_world_scenery(self, idVar(sVar(temp), scenery), ArrType::From({ sVar(render_res_diffuse), sVar(render_res_material), sVar(render_res_normal) }), idVar(sVar(temp), block_repeat_enable), idVar(sVar(temp), block_repeat));
					
					break;
				}
				
				case e_tl_type_ITEM:
				{
					if (sVar(item_vbuffer) == null_)
						render_world_item(idVar(sVar(temp), item_vbuffer), idVar(sVar(temp), item_3d), idVar(sVar(temp), item_face_camera), idVar(sVar(temp), item_bounce), idVar(sVar(temp), item_spin), ArrType::From({ sVar(item_res), sVar(item_material_res), sVar(item_normal_res) }));
					else
						render_world_item(sVar(item_vbuffer), idVar(sVar(temp), item_3d), idVar(sVar(temp), item_face_camera), idVar(sVar(temp), item_bounce), idVar(sVar(temp), item_spin), ArrType::From({ sVar(item_res), sVar(item_material_res), sVar(item_normal_res) }));
					
					break;
				}
				
				case e_tl_type_TEXT:
				{
					VarType font = sVar(value).Value(e_value_TEXT_FONT);
					if (font == null_)
						font = idVar(sVar(temp), text_font);
					render_world_text(sVar(text_vbuffer), sVar(text_texture), idVar(sVar(temp), text_face_camera), sVar(text_res), (sVar(value).Value(e_value_TEXT_OUTLINE) > 0) ? sVar(value).Value(e_value_TEXT_OUTLINE_COLOR) : VarType(null_));
					break;
				}
				
				case e_tl_type_MODEL:
				{
					if (idVar(sVar(temp), model) != null_)
					{
						VarType res = sArr(value_inherit).Value(e_value_TEXTURE_OBJ);
						if (res == null_)
							res = idVar(sVar(temp), model_tex);
						if (res == null_ || idInt(res, block_sheet_texture) == null_)
							res = global::mc_res;
						render_world_block(idVar(idVar(sVar(temp), model), block_vbuffer), res);
						withOne (Object, sVar(temp), self->id)
							res = temp_get_model_texobj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_OBJ));
						
						render_world_block_map(idInt(idVar(sVar(temp), model), model_block_map), res);
					}
					break;
				}
				
				case e_tl_type_PATH:
				{
					if (sVar(path_vbuffer) != null_)
					{
						VarType tex, texmat, texnorm;
						if (sArr(value_inherit).Value(e_value_TEXTURE_OBJ) == null_)
							tex = ID_spr_shape;
						else
							tex = idVar(sArr(value_inherit).Value(e_value_TEXTURE_OBJ), texture);
						
						if (sArr(value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ) == null_)
						{
							texmat = ID_spr_default_material;
							render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
						}
						else
						{
							texmat = idVar(sArr(value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ), texture);
							render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), idVar(sArr(value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ), material_format));
						}
						
						if (sArr(value_inherit).Value(e_value_TEXTURE_NORMAL_OBJ) == null_)
							texnorm = ID_spr_default_normal;
						else
							texnorm = idVar(sArr(value_inherit).Value(e_value_TEXTURE_NORMAL_OBJ), texture);
						
						render_set_texture(tex);
						render_set_texture(texmat, /*"Material"*/ STR(2582));
						render_set_texture(texnorm, /*"Normal"*/ STR(2583));
						vbuffer_render({ sVar(path_vbuffer) });
					}
					else
						if (global::render_mode == e_render_mode_CLICK)
						{
							render_set_texture(ID_spr_shape);
							render_set_texture(ID_spr_default_material, /*"Material"*/ STR(2582));
							render_set_texture(ID_spr_default_normal, /*"Normal"*/ STR(2583));
							render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
							vbuffer_render({ sVar(path_select_vbuffer) });
						}
					
					break;
				}
				
				default:
				{
					VarType tex, matres, texmat, normtex;
					withOne (Object, sVar(temp), self->id)
					{
						tex = temp_get_shape_tex(temp_get_shape_texobj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_OBJ)));
						matres = temp_get_shape_tex_material_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_MATERIAL_OBJ));
						texmat = temp_get_shape_tex(matres, ID_spr_default_material);
						normtex = temp_get_shape_tex(temp_get_shape_tex_normal_obj(self, idArr(self.otherId, value_inherit).Value(e_value_TEXTURE_NORMAL_OBJ)), ID_spr_default_normal);
						if (matres != null_)
							render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), idVar(matres, material_format));
						else
							render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
						
					}
					
					render_world_shape(idVar(sVar(temp), type), idVar(sVar(temp), shape_vbuffer), idVar(sVar(temp), shape_face_camera), ArrType::From({ tex, texmat, normtex }));
					break;
				}
			}
			
		}
		else
			if (global::render_particles > 0)
			{
				for (IntType p = IntType(0); p < ds_list_size(sInt(particle_list)); p++)
					withOne (obj_particle, DsList(sInt(particle_list)).Value(p), self->id)
						render_world_particle(ScopeAny(self));
				
			}
		
		matrix_world_reset();
		global::shader_texture_surface = false;
		if (prevblend != null_)
			gpu_set_blendmode(prevblend);
		return 0.0;
	}
	
	void render_world_tl_reset()
	{
		matrix_world_reset();
		render_set_culling(true);
		global::shader_texture_filter_linear = false;
		global::shader_texture_filter_mipmap = false;
		global::shader_texture_width = IntType(0);
		global::shader_texture_height = IntType(0);
		global::shader_blend_color = c_white;
		global::shader_blend_alpha = IntType(1);
		render_set_uniform_color(/*"uBlendColor"*/ STR(1959), global::shader_blend_color, global::shader_blend_alpha);
		global::shader_uniform_color_ext = IntType(0);
		global::shader_uniform_rgb_add = c_black;
		global::shader_uniform_hsb_add = c_black;
		global::shader_uniform_rgb_sub = c_black;
		global::shader_uniform_hsb_sub = c_black;
		global::shader_uniform_hsb_mul = c_white;
		global::shader_uniform_mix_color = c_black;
		global::shader_uniform_mix_percent = IntType(0);
		render_set_uniform_int(/*"uColorsExt"*/ STR(2130), global::shader_uniform_color_ext);
		render_set_uniform_color(/*"uRGBAdd"*/ STR(2131), global::shader_uniform_rgb_add, IntType(1));
		render_set_uniform_color(/*"uHSBAdd"*/ STR(2133), global::shader_uniform_hsb_add, IntType(1));
		render_set_uniform_color(/*"uRGBSub"*/ STR(2132), global::shader_uniform_rgb_sub, IntType(1));
		render_set_uniform_color(/*"uHSBSub"*/ STR(2134), global::shader_uniform_hsb_sub, IntType(1));
		render_set_uniform_color(/*"uHSBMul"*/ STR(2135), global::shader_uniform_hsb_mul, IntType(1));
		render_set_uniform_color(/*"uMixColor"*/ STR(2136), global::shader_uniform_mix_color, global::shader_uniform_mix_percent);
		render_set_uniform_int(/*"uMaterialFormat"*/ STR(2581), e_material_FORMAT_NONE);
		global::shader_uniform_emissive = IntType(0);
		render_set_uniform(/*"uEmissive"*/ STR(2586), global::shader_uniform_emissive);
		global::shader_uniform_metallic = IntType(0);
		render_set_uniform(/*"uMetallic"*/ STR(2584), IntType(0));
		global::shader_uniform_roughness = IntType(0);
		render_set_uniform(/*"uRoughness"*/ STR(2585), global::shader_uniform_roughness);
		global::shader_uniform_wind = false;
		global::shader_uniform_wind_terrain = false;
		render_set_uniform(/*"uWindEnable"*/ STR(1961), global::shader_uniform_wind);
		render_set_uniform(/*"uWindTerrain"*/ STR(1962), global::shader_uniform_wind_terrain);
		global::shader_uniform_fog = true;
		render_set_uniform_int(/*"uFogShow"*/ STR(1968), global::shader_uniform_fog);
		global::shader_uniform_sss = IntType(0);
		global::shader_uniform_sss_red = IntType(1);
		global::shader_uniform_sss_green = IntType(1);
		global::shader_uniform_sss_blue = IntType(1);
		global::shader_uniform_sss_color = c_white;
		render_set_uniform(/*"uSSS"*/ STR(2594), global::shader_uniform_sss);
		render_set_uniform_vec3(/*"uSSSRadius"*/ STR(2595), global::shader_uniform_sss_red, global::shader_uniform_sss_green, global::shader_uniform_sss_blue);
		render_set_uniform_color(/*"uSSSColor"*/ STR(2596), global::shader_uniform_sss_color, 1.0);
		global::shader_uniform_wind_strength = global::_app->background_wind_strength * (IntType)global::_app->setting_wind_enable;
		global::shader_uniform_glow = false;
		global::shader_uniform_glow_texture = false;
		global::shader_uniform_glow_color = c_white;
		render_set_uniform_int(/*"uGlintEnabled"*/ STR(2598), IntType(0));
		global::render_blend_prev = null_;
		global::render_alpha_prev = null_;
	}
	
	void res_copy(ScopeAny self, IntType to)
	{
		idVar(to, type) = sVar(type);
		idVar(to, filename) = sVar(filename);
		idVar(to, display_name) = sVar(display_name);
		idVar(to, player_skin) = sVar(player_skin);
		idVar(to, item_sheet_size) = array_copy_1d(sVar(item_sheet_size));
		idVar(to, scenery_tl_add) = sVar(scenery_tl_add);
		idVar(to, scenery_download_skins) = sVar(scenery_download_skins);
		idVar(to, world_regions_dir) = sVar(world_regions_dir);
		idVar(to, world_box_start) = sVar(world_box_start);
		idVar(to, world_box_end) = sVar(world_box_end);
		idVar(to, world_filter_mode) = sVar(world_filter_mode);
		idArr(to, world_filter_array) = sArr(world_filter_array);
		idVar(to, scenery_integrity) = sVar(scenery_integrity);
		idVar(to, scenery_integrity_invert) = sVar(scenery_integrity_invert);
		idVar(to, scenery_palette) = sVar(scenery_palette);
		idVar(to, scenery_randomize) = sVar(scenery_randomize);
		idVar(to, material_format) = sVar(material_format);
	}
	
	void res_event_create(Scope<obj_resource> self)
	{
		self->save_id = /*""*/ STR(0);
		self->save_id = save_id_create();
		self->loaded = false;
		self->creator = global::res_creator;
		self->replaced = false;
		self->ready = true;
		self->type = null_;
		self->filename = /*""*/ STR(0);
		self->display_name = /*""*/ STR(0);
		self->count = IntType(0);
		self->copied = false;
		self->pattern_type = /*""*/ STR(0);
		self->model_file = null_;
		self->model_format = null_;
		self->model_texture = null_;
		self->model_texture_map = null_;
		self->model_texture_material_map = null_;
		self->model_tex_normal_map = null_;
		self->model_block_map = null_;
		self->model_texture_name_map = null_;
		self->model_texture_material_name_map = null_;
		self->model_tex_normal_name_map = null_;
		self->model_shape_texture_name_map = null_;
		self->model_shape_texture_material_name_map = null_;
		self->model_shape_tex_normal_name_map = null_;
		self->model_color_name_map = null_;
		self->model_color_map = null_;
		self->model_shape_hide_list = null_;
		self->model_shape_vbuffer_map = null_;
		self->model_shape_alpha_map = null_;
		self->player_skin = false;
		self->pack_format = e_minecraft_pack_LATEST;
		self->block_sheet_texture = null_;
		self->block_sheet_texture_material = null_;
		self->block_sheet_tex_normal = null_;
		self->block_sheet_ani_texture = null_;
		self->block_sheet_ani_texture_material = null_;
		self->block_sheet_ani_tex_normal = null_;
		self->block_sheet_depth_list = null_;
		self->block_sheet_ani_depth_list = null_;
		self->block_preview_texture = null_;
		self->colormap_grass_texture = null_;
		self->colormap_foliage_texture = null_;
		self->color_grass = null_;
		self->color_leaves_oak = null_;
		self->color_leaves_spruce = null_;
		self->color_leaves_birch = null_;
		self->color_leaves_jungle = null_;
		self->color_leaves_acacia = null_;
		self->color_leaves_dark_oak = null_;
		self->color_leaves_mangrove = null_;
		self->color_foliage = null_;
		self->color_water = null_;
		self->sun_texture = null_;
		self->moonphases_texture = null_;
		self->moon_texture[IntType(0)] = null_;
		self->clouds_texture = null_;
		self->glint_entity_texture = null_;
		self->glint_item_texture = null_;
		self->item_sheet_texture = null_;
		self->item_sheet_texture_material = null_;
		self->item_sheet_tex_normal = null_;
		self->item_sheet_size = vec2(item_sheet_width, item_sheet_height);
		self->particles_texture[IntType(0)] = null_;
		self->particles_texture[IntType(1)] = null_;
		self->particle_texture_atlas_map = null_;
		self->particle_texture_uvs_map = null_;
		self->particle_texture_pixeluvs_map = null_;
		self->block_vbuffer = null_;
		self->scenery_tl_add = null_;
		self->scenery_tl_list = null_;
		self->scenery_size = vec3(IntType(0));
		self->world_regions_dir = /*""*/ STR(0);
		self->world_box_start = null_;
		self->world_box_end = null_;
		self->world_filter_mode = IntType(0);
		self->world_filter_array = ArrType();
		self->scenery_download_skins = true;
		self->scenery_structure = false;
		self->scenery_integrity = IntType(1);
		self->scenery_integrity_invert = false;
		self->scenery_palette = IntType(0);
		self->scenery_palette_size = IntType(0);
		self->scenery_randomize = true;
		self->texture = null_;
		self->font = null_;
		self->font_preview = null_;
		self->font_no_aa = null_;
		self->font_minecraft = false;
		self->sound_buffer = null_;
		self->sound_index = null_;
		self->sound_samples = IntType(0);
		self->sound_max_sample = ArrType();
		self->sound_min_sample = ArrType();
		self->load_stage = /*""*/ STR(0);
		self->load_audio_sample = IntType(0);
		self->material_format = e_material_FORMAT_LABPBR;
	}
	
	void res_event_destroy(ScopeAny self)
	{
		if (sInt(model_texture) != null_)
			texture_free(sInt(model_texture));
		if (sInt(model_texture_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_texture_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_texture_map)).Value(key));
				key = ds_map_find_next(sInt(model_texture_map), key);
			}
			
			ds_map_destroy(sInt(model_texture_map));
		}
		if (sInt(model_texture_material_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_texture_material_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_texture_material_map)).Value(key));
				key = ds_map_find_next(sInt(model_texture_material_map), key);
			}
			
			ds_map_destroy(sInt(model_texture_material_map));
		}
		if (sInt(model_tex_normal_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_tex_normal_map));
			while (!is_undefined(key))
			{
				texture_free(DsMap(sInt(model_tex_normal_map)).Value(key));
				key = ds_map_find_next(sInt(model_tex_normal_map), key);
			}
			
			ds_map_destroy(sInt(model_tex_normal_map));
		}
		if (sInt(model_shape_vbuffer_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_shape_vbuffer_map));
			while (!is_undefined(key))
			{
				if (instance_exists(key) && idVar(key, vbuffer_default) != DsMap(sInt(model_shape_vbuffer_map)).Value(key))
					vbuffer_destroy(DsMap(sInt(model_shape_vbuffer_map)).Value(key));
				key = ds_map_find_next(sInt(model_shape_vbuffer_map), key);
			}
			
			ds_map_destroy(sInt(model_shape_vbuffer_map));
		}
		if (sInt(model_shape_alpha_map) != null_)
			ds_map_destroy(sInt(model_shape_alpha_map));
		if (sInt(block_sheet_texture) != null_)
			texture_free(sInt(block_sheet_texture));
		if (sInt(block_sheet_texture_material) != null_)
			texture_free(sInt(block_sheet_texture_material));
		if (sInt(block_sheet_tex_normal) != null_)
			texture_free(sInt(block_sheet_tex_normal));
		if (sVar(block_sheet_ani_texture) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_texture).Value(f));
		if (sVar(block_sheet_ani_texture_material) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_texture_material).Value(f));
		if (sVar(block_sheet_ani_tex_normal) != null_)
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
				texture_free(sVar(block_sheet_ani_tex_normal).Value(f));
		if (sInt(block_sheet_depth_list) != null_)
			ds_list_destroy(sInt(block_sheet_depth_list));
		if (sInt(block_sheet_ani_depth_list) != null_)
			ds_list_destroy(sInt(block_sheet_ani_depth_list));
		if (sInt(block_preview_texture) != null_)
			texture_free(sInt(block_preview_texture));
		block_vbuffer_destroy(self);
		if (sInt(item_sheet_texture) != null_)
			texture_free(sInt(item_sheet_texture));
		if (sInt(item_sheet_texture_material) != null_)
			texture_free(sInt(item_sheet_texture_material));
		if (sInt(item_sheet_tex_normal) != null_)
			texture_free(sInt(item_sheet_tex_normal));
		if (sInt(colormap_grass_texture) != null_)
			texture_free(sInt(colormap_grass_texture));
		if (sInt(colormap_foliage_texture) != null_)
			texture_free(sInt(colormap_foliage_texture));
		if (sArr(particles_texture).Value(IntType(0)) != null_)
			texture_free(sArr(particles_texture).Value(IntType(0)));
		if (sArr(particles_texture).Value(IntType(1)) != null_)
			texture_free(sArr(particles_texture).Value(IntType(1)));
		if (sVar(sun_texture) != null_)
			texture_free(sVar(sun_texture));
		if (sInt(moonphases_texture) != null_)
		{
			texture_free(sInt(moonphases_texture));
			for (IntType t = IntType(0); t < IntType(8); t++)
				texture_free(sArr(moon_texture).Value(t));
		}
		if (sVar(clouds_texture) != null_)
			texture_free(sVar(clouds_texture));
		if (sInt(glint_entity_texture) != null_)
			texture_free(sInt(glint_entity_texture));
		if (sInt(glint_item_texture) != null_)
			texture_free(sInt(glint_item_texture));
		if (sVar(texture) != null_)
			texture_free(sVar(texture));
		if (font_exists(sInt(font)))
			font_delete(sInt(font));
		if (font_exists(sInt(font_preview)))
			font_delete(sInt(font_preview));
		if (font_exists(sInt(font_no_aa)))
			font_delete(sInt(font_no_aa));
		if (sInt(sound_index) != null_)
			audio_free_buffer_sound(sInt(sound_index));
		if (sInt(sound_buffer) != null_)
			buffer_delete(sInt(sound_buffer));
		if (sInt(scenery_tl_list) != null_)
		{
			for (IntType i = IntType(0); i < ds_list_size(sInt(scenery_tl_list)); i++)
				withOne (Object, DsList(sInt(scenery_tl_list)).Value(i), self->id)
					instance_destroy(self);
			
			ds_list_destroy(sInt(scenery_tl_list));
		}
		if (sInt(model_block_map) != null_)
		{
			VarType key = ds_map_find_first(sInt(model_block_map));
			while (!is_undefined(key))
			{
				vbuffer_destroy(DsMap(sInt(model_block_map)).Value(key));
				key = ds_map_find_next(sInt(model_block_map), key);
			}
			
			ds_map_destroy(sInt(model_block_map));
		}
		withAll (obj_template, self->id)
		{
			if (self->model == self.otherId)
				self->model = null_;
			if (self->model_tex == self.otherId)
			{
				self->model_tex = global::mc_res;
				idInt(self->model_tex, count)++;
			}
			if (self->model_tex_material == self.otherId)
			{
				self->model_tex_material = global::mc_res;
				idInt(self->model_tex_material, count)++;
			}
			if (self->model_tex_normal == self.otherId)
			{
				self->model_tex_normal = global::mc_res;
				idInt(self->model_tex_normal, count)++;
			}
			if (self->item_tex == self.otherId)
			{
				self->item_tex = global::mc_res;
				idInt(self->item_tex, count)++;
				render_generate_item(ScopeAny(self));
			}
			if (self->item_tex_material == self.otherId)
			{
				self->item_tex_material = global::mc_res;
				idInt(self->item_tex_material, count)++;
			}
			if (self->item_tex_normal == self.otherId)
			{
				self->item_tex_normal = global::mc_res;
				idInt(self->item_tex_normal, count)++;
			}
			if (self->block_tex == self.otherId)
			{
				self->block_tex = global::mc_res;
				idInt(self->block_tex, count)++;
			}
			if (self->block_tex_material == self.otherId)
			{
				self->block_tex_material = global::mc_res;
				idInt(self->block_tex_material, count)++;
			}
			if (self->block_tex_normal == self.otherId)
			{
				self->block_tex_normal = global::mc_res;
				idInt(self->block_tex_normal, count)++;
			}
			if (self->scenery == self.otherId)
				self->scenery = null_;
			if (self->shape_tex == self.otherId)
				self->shape_tex = null_;
			if (self->shape_tex_material == self.otherId)
				self->shape_tex_material = null_;
			if (self->shape_tex_normal == self.otherId)
				self->shape_tex_normal = null_;
			if (self->text_font == self.otherId)
			{
				self->text_font = global::mc_res;
				idInt(self->text_font, count)++;
			}
		}
		
		withOne (obj_bench_settings, global::_app->bench_settings, self->id)
		{
			if (self->model == self.otherId)
				self->model = null_;
			if (self->model_tex == self.otherId)
				self->model_tex = global::mc_res;
			if (self->model_tex_material == self.otherId)
				self->model_tex_material = global::mc_res;
			if (self->model_tex_normal == self.otherId)
				self->model_tex_normal = global::mc_res;
			if (self->item_tex == self.otherId)
			{
				self->item_tex = global::mc_res;
				render_generate_item(ScopeAny(self));
			}
			if (self->item_tex_material == self.otherId)
			{
				self->item_tex_material = global::mc_res;
				render_generate_item(ScopeAny(self));
			}
			if (self->item_tex_normal == self.otherId)
			{
				self->item_tex_normal = global::mc_res;
				render_generate_item(ScopeAny(self));
			}
			if (self->block_tex == self.otherId)
				self->block_tex = global::mc_res;
			if (self->block_tex_material == self.otherId)
				self->block_tex_material = global::mc_res;
			if (self->block_tex_normal == self.otherId)
				self->block_tex_normal = global::mc_res;
			if (self->shape_tex == self.otherId)
				self->shape_tex = null_;
			if (self->shape_tex_material == self.otherId)
				self->shape_tex_material = null_;
			if (self->shape_tex_normal == self.otherId)
				self->shape_tex_normal = null_;
			if (self->text_font == self.otherId)
				self->text_font = global::mc_res;
			if (self->scenery == self.otherId)
				self->scenery = null_;
		}
		
		withAll (obj_particle_type, self->id)
		{
			if (self->sprite_tex == self.otherId)
			{
				self->sprite_tex = global::mc_res;
				idInt(self->sprite_tex, count)++;
			}
			if (self->sprite_template_tex == self.otherId)
			{
				self->sprite_template_tex = global::mc_res;
				idInt(self->sprite_template_tex, count)++;
			}
		}
		
		withAll (obj_keyframe, self->id)
		{
			if (self->value.Value(e_value_TEXTURE_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_OBJ] = null_;
			if (self->value.Value(e_value_TEXTURE_MATERIAL_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_MATERIAL_OBJ] = null_;
			if (self->value.Value(e_value_TEXTURE_NORMAL_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_NORMAL_OBJ] = null_;
			if (self->value.Value(e_value_SOUND_OBJ) == self.otherId)
				self->value[e_value_SOUND_OBJ] = null_;
			if (self->value.Value(e_value_TEXT_FONT) == self.otherId)
				self->value[e_value_TEXT_FONT] = null_;
		}
		
		withAll (obj_timeline, self->id)
		{
			if (self->value.Value(e_value_TEXTURE_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_OBJ] = null_;
			if (self->value.Value(e_value_TEXTURE_MATERIAL_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_MATERIAL_OBJ] = null_;
			if (self->value.Value(e_value_TEXTURE_NORMAL_OBJ) == self.otherId)
				self->value[e_value_TEXTURE_NORMAL_OBJ] = null_;
			if (self->value_inherit.Value(e_value_TEXTURE_OBJ) == self.otherId)
				self->update_matrix = true;
			if (self->value_inherit.Value(e_value_TEXTURE_MATERIAL_OBJ) == self.otherId)
				self->update_matrix = true;
			if (self->value_inherit.Value(e_value_TEXTURE_NORMAL_OBJ) == self.otherId)
				self->update_matrix = true;
			if (self->value.Value(e_value_SOUND_OBJ) == self.otherId)
				self->value[e_value_SOUND_OBJ] = null_;
			if (self->value_inherit.Value(e_value_SOUND_OBJ) == self.otherId)
				self->update_matrix = true;
			if (self->value.Value(e_value_TEXT_FONT) == self.otherId)
				self->value[e_value_TEXT_FONT] = null_;
			if (self->value_inherit.Value(e_value_TEXT_FONT) == self.otherId)
				self->update_matrix = true;
			if (self->glint_tex == self.otherId)
			{
				self->glint_tex = global::mc_res;
				idInt(self->glint_tex, count)++;
			}
		}
		
		withOne (app, global::_app->id, self->id)
		{
			if (global::_app->background_image == self.otherId)
				global::_app->background_image = null_;
			if (global::_app->background_sky_sun_tex == self.otherId)
			{
				global::_app->background_sky_sun_tex = global::mc_res;
				idInt(global::_app->background_sky_sun_tex, count)++;
			}
			if (global::_app->background_sky_moon_tex == self.otherId)
			{
				global::_app->background_sky_moon_tex = global::mc_res;
				idInt(global::_app->background_sky_moon_tex, count)++;
			}
			if (global::_app->background_sky_clouds_tex == self.otherId)
			{
				global::_app->background_sky_clouds_tex = global::mc_res;
				idInt(global::_app->background_sky_clouds_tex, count)++;
			}
			if (global::_app->background_ground_tex == self.otherId)
			{
				global::_app->background_ground_tex = global::mc_res;
				idInt(global::_app->background_ground_tex, count)++;
				background_ground_update_texture(ScopeAny(self));
			}
			if (global::_app->background_ground_tex_material == self.otherId)
			{
				global::_app->background_ground_tex_material = global::mc_res;
				idInt(global::_app->background_ground_tex_material, count)++;
				background_ground_update_texture(ScopeAny(self));
			}
			if (global::_app->background_ground_tex_normal == self.otherId)
			{
				global::_app->background_ground_tex_normal = global::mc_res;
				idInt(global::_app->background_ground_tex_normal, count)++;
				background_ground_update_texture_normal(ScopeAny(self));
			}
		}
		
		global::res_edit = sortlist_remove(global::_app->res_list, self->id);
	}
	
	VarType res_get_model_texture(ScopeAny self, VarType name)
	{
		if (!sBool(ready))
			return null_;
		if (sInt(model_texture_map) != null_)
		{
			VarType tex = ds_map_find_value(sInt(model_texture_map), name);
			return is_undefined(tex) ? VarType(null_) : tex;
		}
		else
			return sInt(model_texture);
		
		return VarType();
	}
	
	VarType res_get_model_texture_material(ScopeAny self, VarType name)
	{
		if (!sBool(ready))
			return null_;
		if (sInt(model_texture_material_map) != null_)
		{
			if (ds_map_exists(sInt(model_texture_material_map), name))
				return DsMap(sInt(model_texture_material_map)).Value(name);
			else
				return null_;
			
		}
		else
			if (sInt(model_texture) != null_)
				return sInt(model_texture);
			else
				return null_;
		
		
		return VarType();
	}
	
	VarType res_get_model_tex_normal(ScopeAny self, VarType name)
	{
		if (!sBool(ready))
			return null_;
		if (sInt(model_tex_normal_map) != null_)
		{
			if (ds_map_exists(sInt(model_tex_normal_map), name))
				return DsMap(sInt(model_tex_normal_map)).Value(name);
			else
				return null_;
			
		}
		else
			if (sInt(model_texture) != null_)
				return sInt(model_texture);
			else
				return null_;
		
		
		return VarType();
	}
	
	BoolType res_is_ready(VarType res)
	{
		if (instance_exists(res) && idBool(res, ready))
			return true;
		return false;
	}
	
	void res_load(ScopeAny self, BoolType reload)
	{
		StringType fn = global::load_folder + /*"/"*/ STR(20) + sVar(filename);
		debug({ /*"Loading "*/ STR(2603) + DsList(global::res_type_name_list).Value(sVar(type)), fn });
		switch ((IntType)sVar(type))
		{
			case e_res_type_PACK:
			case e_res_type_PACK_UNZIPPED:
			{
				sBool(ready) = false;
				withOne (app, global::_app->id, self->id)
				{
					ds_priority_add(global::load_queue, self.otherId, IntType(2));
					load_start(ScopeAny(self), self.otherId, ID_res_load_start);
				}
				
				break;
			}
			
			case e_res_type_SKIN:
			case e_res_type_DOWNLOADED_SKIN:
			{
				if (sInt(model_texture) > 0)
					texture_free(sInt(model_texture));
				if (sVar(player_skin) > 0)
					sInt(model_texture) = res_load_player_skin(fn);
				else
					sInt(model_texture) = texture_create_square(fn);
				
				break;
			}
			
			case e_res_type_ITEM_SHEET:
			{
				if (sInt(item_sheet_texture) > 0)
					texture_free(sInt(item_sheet_texture));
				sInt(item_sheet_texture) = texture_create(fn);
				break;
			}
			
			case e_res_type_LEGACY_BLOCK_SHEET:
			case e_res_type_BLOCK_SHEET:
			{
				if (sInt(block_sheet_texture) != null_)
					texture_free(sInt(block_sheet_texture));
				if (sVar(type) == e_res_type_LEGACY_BLOCK_SHEET)
				{
					sInt(block_sheet_texture) = res_load_legacy_block_sheet(fn, global::load_format);
					if (global::load_folder == global::save_folder)
						sVar(filename) = filename_new_ext(filename_name(fn), /*"_converted"*/ STR(2604) + filename_ext(fn));
					texture_export(sInt(block_sheet_texture), global::save_folder + /*"/"*/ STR(20) + sVar(filename));
					sVar(type) = e_res_type_BLOCK_SHEET;
				}
				else
					sInt(block_sheet_texture) = texture_create(fn);
				
				sInt(block_sheet_texture_material) = texture_duplicate(sInt(block_sheet_texture));
				sInt(block_sheet_tex_normal) = texture_duplicate(sInt(block_sheet_texture));
				sInt(colormap_grass_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->colormap_grass_texture);
				sInt(colormap_foliage_texture) = texture_duplicate(ObjType(obj_resource, global::mc_res)->colormap_foliage_texture);
				res_update_colors(self);
				res_update_block_preview(Scope<obj_resource>(self));
				break;
			}
			
			case e_res_type_SCENERY:
			case e_res_type_FROM_WORLD:
			{
				StringType cachefn = fn + /*".meshcache"*/ STR(2605);
				if (!reload && file_exists_lib(cachefn) && res_load_block_cache(Scope<obj_resource>(self), cachefn))
					break;
				sBool(ready) = false;
				withOne (app, global::_app->id, self->id)
				{
					ds_priority_add(global::load_queue, self.otherId, IntType(1));
					load_start(ScopeAny(self), self.otherId, ID_res_load_start);
				}
				
				break;
			}
			
			case e_res_type_PARTICLE_SHEET:
			{
				if (sArr(particles_texture).Value(IntType(0)))
					texture_free(sArr(particles_texture).Value(IntType(0)));
				if (sArr(particles_texture).Value(IntType(1)))
					texture_free(sArr(particles_texture).Value(IntType(1)));
				sArr(particles_texture)[IntType(0)] = texture_create_square(fn);
				sArr(particles_texture)[IntType(1)] = sArr(particles_texture).Value(IntType(0));
				break;
			}
			
			case e_res_type_TEXTURE:
			{
				if (sVar(texture) > 0)
					texture_free(sVar(texture));
				sVar(texture) = null_;
				if (filename_ext(fn) == /*".dat"*/ STR(714))
				{
					IntType map = new_minecraft_map(fn);
					if (!(map > 0))
					{
						error(/*"errorloadmap"*/ STR(2606));
						break;
					}
					else
						sVar(texture) = new_minecraft_map(fn);
					
				}
				else
					sVar(texture) = texture_create(fn);
				
				break;
			}
			
			case e_res_type_FONT:
			{
				if (font_exists(sInt(font)))
					font_delete(sInt(font));
				if (font_exists(sInt(font_preview)))
					font_delete(sInt(font_preview));
				if (font_exists(sInt(font_no_aa)))
					font_delete(sInt(font_no_aa));
				sInt(font) = font_add_lib(fn, IntType(48), false, false);
				sInt(font_no_aa) = font_add_lib(fn, IntType(48), false, false, false);
				sInt(font_preview) = font_add_lib(fn, IntType(12), false, false);
				if (!(sInt(font) > 0))
				{
					sInt(font) = new_minecraft_font(Scope<obj_resource>(self));
					sInt(font_preview) = new_minecraft_font(Scope<obj_resource>(self));
					sInt(font_no_aa) = new_minecraft_font(Scope<obj_resource>(self));
					sBool(font_minecraft) = true;
				}
				break;
			}
			
			case e_res_type_SOUND:
			{
				audio_stop_all();
				sBool(ready) = false;
				withOne (app, global::_app->id, self->id)
				{
					ds_priority_add(global::load_queue, self.otherId, IntType(0));
					load_start(ScopeAny(self), self.otherId, ID_res_load_start);
				}
				
				break;
			}
			
			case e_res_type_MODEL:
			{
				instance_activate_object(sVar(model_file));
				withOne (Object, sVar(model_file), self->id)
					instance_destroy(self);
				
				if (sInt(model_block_map) != null_)
				{
					VarType key = ds_map_find_first(sInt(model_block_map));
					while (!is_undefined(key))
					{
						vbuffer_destroy(DsMap(sInt(model_block_map)).Value(key));
						key = ds_map_find_next(sInt(model_block_map), key);
					}
					
					ds_map_destroy(sInt(model_block_map));
					sInt(model_block_map) = null_;
				}
				if (sInt(model_texture_map) != null_)
				{
					VarType key = ds_map_find_first(sInt(model_texture_map));
					while (!is_undefined(key))
					{
						texture_free(DsMap(sInt(model_texture_map)).Value(key));
						key = ds_map_find_next(sInt(model_texture_map), key);
					}
					
					ds_map_destroy(sInt(model_texture_map));
					sInt(model_texture_map) = null_;
				}
				if (sInt(model_texture_material_map) != null_)
				{
					VarType key = ds_map_find_first(sInt(model_texture_material_map));
					while (!is_undefined(key))
					{
						texture_free(DsMap(sInt(model_texture_material_map)).Value(key));
						key = ds_map_find_next(sInt(model_texture_material_map), key);
					}
					
					ds_map_destroy(sInt(model_texture_material_map));
					sInt(model_texture_material_map) = null_;
				}
				if (sInt(model_tex_normal_map) != null_)
				{
					VarType key = ds_map_find_first(sInt(model_tex_normal_map));
					while (!is_undefined(key))
					{
						texture_free(DsMap(sInt(model_tex_normal_map)).Value(key));
						key = ds_map_find_next(sInt(model_tex_normal_map), key);
					}
					
					ds_map_destroy(sInt(model_tex_normal_map));
					sInt(model_tex_normal_map) = null_;
				}
				if (filename_ext(fn) == /*".mimodel"*/ STR(730))
				{
					sInt(model_format) = e_model_format_MIMODEL;
					sVar(model_file) = model_file_load(fn, self->id);
					if (sVar(model_file) == null_)
						error(/*"errorloadmodel"*/ STR(2607));
					if (sInt(model_texture_name_map) != null_)
						ds_map_clear(sInt(model_texture_name_map));
					else
						sInt(model_texture_name_map) = ds_string_map_create();
					
					if (sVar(model_file) != null_)
						DsMap(sInt(model_texture_name_map))[/*""*/ STR(0)] = idVar(sVar(model_file), texture_name);
					if (sInt(model_texture_material_name_map) != null_)
						ds_map_clear(sInt(model_texture_material_name_map));
					else
						sInt(model_texture_material_name_map) = ds_string_map_create();
					
					if (sVar(model_file) != null_)
						DsMap(sInt(model_texture_material_name_map))[/*""*/ STR(0)] = idVar(sVar(model_file), texture_material_name);
					if (sInt(model_tex_normal_name_map) != null_)
						ds_map_clear(sInt(model_tex_normal_name_map));
					else
						sInt(model_tex_normal_name_map) = ds_string_map_create();
					
					if (sVar(model_file) != null_)
						DsMap(sInt(model_tex_normal_name_map))[/*""*/ STR(0)] = idVar(sVar(model_file), texture_normal_name);
					if (sInt(model_color_name_map) != null_)
						ds_map_clear(sInt(model_color_name_map));
					else
						sInt(model_color_name_map) = ds_map_create();
					
					res_update_model_shape(Scope<obj_resource>(self));
					model_shape_update_color(self);
				}
				else
				{
					sInt(model_format) = e_model_format_BLOCK;
					sVar(model_file) = null_;
					sVar(block_vbuffer) = null_;
					VarType blockmodel = block_load_model_file(fn, self->id);
					if (blockmodel == null_)
					{
						error(/*"errorloadmodel"*/ STR(2607));
						break;
					}
					sInt(model_block_map) = ds_map_create();
					IntType rendermodel = block_load_render_model(self, blockmodel, vec3(IntType(0)), false, false, IntType(0), self->id);
					block_vbuffer_start(self);
					withOne (obj_builder, global::mc_builder, self->id)
					{
						self->build_size_x = IntType(1);
						self->build_size_y = IntType(1);
						self->build_size_z = IntType(1);
						self->build_randomize = ObjType(obj_resource, self.otherId)->scenery_randomize;
						builder_start(self);
						builder_spawn_threads(self, IntType(1));
						withOne (obj_builder_thread, DsList(self->thread_list).Value(IntType(0)), self->id)
						{
							builder_thread_set_pos(self, IntType(0));
							block_render_model_generate(self, rendermodel);
						}
						
						builder_combine_threads(self);
						builder_done(self);
						self->build_randomize = false;
					}
					
					block_vbuffer_done(self);
					VarType key = ds_map_find_first(sInt(model_block_map));
					while (!is_undefined(key))
					{
						vertex_end((IntType)(DsMap(sInt(model_block_map)).Value(key)));
						DsMap(sInt(model_block_map))[key] = vbuffer_generate_tangents(DsMap(sInt(model_block_map)).Value(key));
						vertex_freeze((IntType)(DsMap(sInt(model_block_map)).Value(key)));
						key = ds_map_find_next(sInt(model_block_map), key);
					}
					
					withOne (obj_block_load_model_file, blockmodel, self->id)
						instance_destroy(ScopeAny(self));
					
				}
				
				break;
			}
			
		}
		
		if (global::load_folder != global::save_folder && sVar(type) != e_res_type_LEGACY_BLOCK_SHEET)
			res_save(self);
		res_update_display_name(Scope<obj_resource>(self));
	}
	
}
